"use strict";(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[3076],{"./libs/design-system/tree/src/lib/tree-demo/tree-demo.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>tree_demo_stories});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),providers=__webpack_require__("./libs/design-system/src/lib/providers.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var collections=__webpack_require__("./node_modules/@angular/cdk/fesm2022/collections.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_button=__webpack_require__("./node_modules/@angular/material/fesm2022/button.mjs"),icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),tree=__webpack_require__("./node_modules/@angular/material/fesm2022/tree.mjs");const ICON_SIZES={small:1.25,medium:1.5,large:1.5},FONT_SIZES={small:.75,medium:.875,large:1},NODE_HEIGHTS={small:1.5,medium:1.75,large:2};let TreeSizeDirective=class TreeSizeDirective{size=core.input.required({alias:"hraTreeSize"});iconSize=(0,core.computed)((()=>ICON_SIZES[this.size()]));fontSize=(0,core.computed)((()=>FONT_SIZES[this.size()]));nodeHeight=(0,core.computed)((()=>NODE_HEIGHTS[this.size()]));static propDecorators={size:[{type:core.Input,args:[{isSignal:!0,alias:"hraTreeSize",required:!0,transform:void 0}]}]}};TreeSizeDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[hraTreeSize]",standalone:!0,host:{"[style.--mat-tree-node-text-size.rem]":"fontSize()","[style.--mat-tree-node-min-height.rem]":"nodeHeight()","[style.--mdc-icon-button-state-layer-size.rem]":"nodeHeight()","[style.--mdc-icon-button-icon-size.rem]":"iconSize()"}})],TreeSizeDirective);const PADDING={small:32,medium:36,large:40};let TreeDemoComponent=class TreeDemoComponent{tree=(0,core.viewChild)(tree.lQ);treeData=(0,core.input)([]);size=(0,core.input)("medium");padding=(0,core.computed)((()=>PADDING[this.size()]));dataSource=new collections.hx([]);selectedNode;childrenAccessor=dataNode=>dataNode.children??[];hasChild=(_,node)=>!!node.children?.length;ngAfterViewInit(){this.dataSource=new collections.hx(this.treeData())}shouldRender(node){const parent=this.getParentNode(node);return!parent||!!this.tree()?.isExpanded(parent)&&this.shouldRender(parent)}getParentNode(node){for(const parent of this.treeData())if(parent.children?.includes(node))return parent}static propDecorators={tree:[{type:core.ViewChild,args:[tree.lQ,{isSignal:!0}]}],treeData:[{type:core.Input,args:[{isSignal:!0,alias:"treeData",required:!1,transform:void 0}]}],size:[{type:core.Input,args:[{isSignal:!0,alias:"size",required:!1,transform:void 0}]}]}};TreeDemoComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-tree-demo",template:'<mat-tree #tree [dataSource]="dataSource" [childrenAccessor]="childrenAccessor" [hraTreeSize]="size()">\n  <mat-tree-node\n    *matTreeNodeDef="let node"\n    matTreeNodePadding\n    [matTreeNodePaddingIndent]="padding()"\n    [style.display]="shouldRender(node) ? \'flex\' : \'none\'"\n    [isDisabled]="!shouldRender(node)"\n    (activation)="selectedNode = node"\n    (click)="selectedNode = node"\n  >\n    <div class="node-content leaf" [class.selected]="selectedNode === node">\n      {{ node.name }}\n    </div>\n  </mat-tree-node>\n\n  <mat-tree-node\n    *matTreeNodeDef="let node; when: hasChild"\n    matTreeNodeToggle\n    matTreeNodePadding\n    [matTreeNodePaddingIndent]="padding()"\n    [cdkTreeNodeTypeaheadLabel]="node.name"\n    [style.display]="shouldRender(node) ? \'flex\' : \'none\'"\n    [isDisabled]="!shouldRender(node)"\n    [isExpandable]="true"\n  >\n    <div class="node-content">\n      <button mat-icon-button matTreeNodeToggle disableRipple [attr.aria-label]="\'Toggle \' + node.name">\n        <mat-icon class="mat-icon-rtl-mirror">\n          {{ tree.isExpanded(node) ? \'expand_more\' : \'expand_less\' }}\n        </mat-icon>\n      </button>\n      {{ node.name }}\n    </div>\n  </mat-tree-node>\n</mat-tree>\n',imports:[tree.jH,fesm2022_button.Hl,icon.m_,TreeSizeDirective],changeDetection:core.ChangeDetectionStrategy.OnPush})],TreeDemoComponent);const tree_demo_stories={component:TreeDemoComponent,title:"Tree",parameters:{design:{type:"figma",url:"https://www.figma.com/design/BCEJn9KCIbBJ5MzqnojKQp/Design-System-Components?node-id=786-4"}},decorators:[(0,dist.applicationConfig)({providers:[(0,providers.z)()]})],args:{size:"large",treeData:[{name:"Fruit",children:[{name:"Apple"},{name:"Banana"},{name:"Fruit loops"}]},{name:"Vegetables",children:[{name:"Green",children:[{name:"Broccoli"},{name:"Brussels sprouts"}]},{name:"Orange",children:[{name:"Pumpkins"},{name:"Carrots"}]}]}]},argTypes:{size:{control:"select",options:["small","medium","large"]}}},Primary={},__namedExportsOrder=["Primary"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{}",...Primary.parameters?.docs?.source}}}}}]);