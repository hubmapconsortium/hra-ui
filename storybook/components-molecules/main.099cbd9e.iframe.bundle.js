(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[792],{"./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$",module.exports=webpackEmptyAsyncContext},"./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories":["./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts",972,92,505,106,983],"./src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts":["./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts",972,92,505,106,983],"./src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories":["./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts",499],"./src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts":["./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts",499],"./src/lib/contact-modal/contact-modal.component.stories":["./libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts",972,92,641,550,664,643],"./src/lib/contact-modal/contact-modal.component.stories.ts":["./libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts",972,92,641,550,664,643],"./src/lib/footer/footer.component.stories":["./libs/components/molecules/src/lib/footer/footer.component.stories.ts",972,92,641,161,505,241,550,502,71,327,795,940,591],"./src/lib/footer/footer.component.stories.ts":["./libs/components/molecules/src/lib/footer/footer.component.stories.ts",972,92,641,161,505,241,550,502,71,327,795,940,591],"./src/lib/fullscreen/fullscreen-container.stories":["./libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts",375],"./src/lib/fullscreen/fullscreen-container.stories.ts":["./libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts",375],"./src/lib/header/header.component.stories":["./libs/components/molecules/src/lib/header/header.component.stories.ts",972,92,641,161,71,940,39],"./src/lib/header/header.component.stories.ts":["./libs/components/molecules/src/lib/header/header.component.stories.ts",972,92,641,161,71,940,39],"./src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories":["./libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts",947],"./src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts":["./libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts",947],"./src/lib/info-modal/info-modal.component.stories":["./libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts",972,92,641,169],"./src/lib/info-modal/info-modal.component.stories.ts":["./libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts",972,92,641,169],"./src/lib/interactive-svg/interactive-svg.stories":["./libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts",972,505,241,502,477],"./src/lib/interactive-svg/interactive-svg.stories.ts":["./libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts",972,505,241,502,477],"./src/lib/landing-page-in-depth/landing-page-in-depth.component.stories":["./libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts",972,92,641,161,940,623],"./src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts":["./libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts",972,92,641,161,940,623],"./src/lib/landing-page-intro/landing-page-intro.component.stories":["./libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts",972,92,641,161,940,465],"./src/lib/landing-page-intro/landing-page-intro.component.stories.ts":["./libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts",972,92,641,161,940,465],"./src/lib/metrics/metrics.component.stories":["./libs/components/molecules/src/lib/metrics/metrics.component.stories.ts",423],"./src/lib/metrics/metrics.component.stories.ts":["./libs/components/molecules/src/lib/metrics/metrics.component.stories.ts",423],"./src/lib/screen-size-notice/screen-size-notice.component.stories":["./libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts",972,92,641,161,940,31],"./src/lib/screen-size-notice/screen-size-notice.component.stories.ts":["./libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts",972,92,641,161,940,31],"./src/lib/source-list/source-list.component.stories":["./libs/components/molecules/src/lib/source-list/source-list.component.stories.ts",972,92,641,161,505,241,550,502,71,106,481,987],"./src/lib/source-list/source-list.component.stories.ts":["./libs/components/molecules/src/lib/source-list/source-list.component.stories.ts",972,92,641,161,505,241,550,502,71,106,481,987],"./src/lib/tissue-tree-list/tissue-tree-list.component.stories":["./libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts",972,92,641,161,241,327,824,940,303],"./src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts":["./libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts",972,92,641,161,241,327,824,940,303],"./src/lib/title-card/title-card.component.stories":["./libs/components/molecules/src/lib/title-card/title-card.component.stories.ts",455],"./src/lib/title-card/title-card.component.stories.ts":["./libs/components/molecules/src/lib/title-card/title-card.component.stories.ts",455]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"./libs/components/molecules/.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{argTypesEnhancers:()=>argTypesEnhancers,decorators:()=>preview_decorators,parameters:()=>parameters});var core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),lib_esmodule=__webpack_require__("./node_modules/ng-inline-svg-2/lib_esmodule/index.js");__webpack_require__("./node_modules/zone.js/fesm2015/zone.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"ContactData","id":"interface-ContactData-a06e7b9d6090af69d4e955b4d696dcbb5c6fc10789395a14d1c43a2fe9462289f4618ee0f3d69e38da941de0f1f4b1da5652596b5f7597a9979d50a323bd4dc3","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from \'@hra-ui/components/atoms\';\\nimport { produce } from \'immer\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\\n */\\nexport interface ContactData {\\n  /**  The email address of the person submitting the form. */\\n  email: string;\\n  /** The subject line of the message being sent. */\\n  subject: string;\\n  /** The body of the message being sent. */\\n  message: string;\\n}\\n\\n/** Initial empty contact data */\\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n};\\n\\n/**\\n * Contact modal component.\\n */\\n@Component({\\n  selector: \'hra-contact-modal\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    EmailInputComponent,\\n    MarkdownModule,\\n    RequiredTextboxComponent,\\n    RequiredInputComponent,\\n  ],\\n  templateUrl: \'./contact-modal.component.html\',\\n  styleUrls: [\'./contact-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactModalComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Emits when the submit button is clicked and all the values are appropriate. */\\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\\n\\n  /** Emits when the cancel button or close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n\\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\\n  get disableSubmit(): boolean {\\n    return Object.values(this.contactData).some((value) => value === undefined);\\n  }\\n\\n  /** Asigns the undefined initially to all the input fields. */\\n  contactData = EMPTY_CONTACT_DATA;\\n\\n  /** Default email address */\\n  readonly defaultMail = \'infoccf@iu.edu\';\\n\\n  /** Updates the contact data object with a new value for a given key. */\\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\\n    this.contactData = produce(this.contactData, (draft) => {\\n      draft[key] = value;\\n    });\\n  }\\n\\n  /** It emits the updated value of contact data */\\n  submit(): void {\\n    this.submitClick.emit(this.contactData as ContactData);\\n  }\\n}\\n","properties":[{"name":"email","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>The email address of the person submitting the form.</p>\\n","line":14,"rawdescription":"\\nThe email address of the person submitting the form."},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>The body of the message being sent.</p>\\n","line":18,"rawdescription":"\\nThe body of the message being sent."},{"name":"subject","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>The subject line of the message being sent.</p>\\n","line":16,"rawdescription":"\\nThe subject line of the message being sent."}],"indexSignatures":[],"kind":171,"description":"<p>An interface representing contact data information which will be emitted if all the fields are in correct format.</p>\\n","rawdescription":"\\n\\nAn interface representing contact data information which will be emitted if all the fields are in correct format.\\n","methods":[],"extends":[]},{"name":"DataItem","id":"interface-DataItem-c9055aff91afa3006a565f77a59d0bb3d0b0ae6234158ca31fd858b678a4c8ba8e73772241ae414572f0acfba7c2c934af443f6efc50a96fe368c415b5d850a8","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>A string property that represents the label</p>\\n","line":8,"rawdescription":"\\nA string property that represents the label"},{"name":"value","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>A string property that represents the value</p>\\n","line":10,"rawdescription":"\\nA string property that represents the value"}],"indexSignatures":[],"kind":171,"description":"<p>An item which defines a string label and a string value</p>\\n","rawdescription":"\\nAn item which defines a string label and a string value","methods":[],"extends":[]},{"name":"DataNode","id":"interface-DataNode-3dcbdd59f4bd08b05fd0de0edc35c83e5b7ae42d957e9c2935086c91f5367743d6ec463b4ac1f3d8793ead2a4b1ebbc75ba1c0182f4a7fbd98d894f075fa4941","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  HostListener,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * Navigates to an illustration page\\n   */\\n  @Output() readonly navigate = new EventEmitter();\\n\\n  /**\\n   * Whether keyboard navigation is enabled\\n   */\\n  enableNav = true;\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n      this.control.expandAll();\\n    }\\n    if (\'selected\' in changes) {\\n      if (!this.selected) {\\n        this.control.expandAll();\\n      }\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      const node = this.control.dataNodes.find((n) => n.data === changes[\'selected\'].currentValue);\\n      if (!node?.expandable) {\\n        this.expandPath(path);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n\\n  /**\\n   * Keyboard navigation for tissue tree list\\n   * @param event Keyboard event\\n   */\\n  @HostListener(\'document:keydown\', [\'$event\'])\\n  onKeyDown(event: KeyboardEvent): void {\\n    if (!this.enableNav) {\\n      return;\\n    }\\n    if (this.control) {\\n      const nodes = this.control.dataNodes;\\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\\n\\n      const currentNode = nodes[selectedIndex];\\n      if (currentNode && currentNode.expandable) {\\n        const expandableNodes = nodes.filter((node) => node.expandable);\\n        const index = expandableNodes.indexOf(currentNode);\\n        if (event.key === \'ArrowLeft\') {\\n          this.control.collapse(currentNode);\\n        } else if (event.key === \'ArrowRight\') {\\n          this.control.expand(currentNode);\\n        } else if (\\n          event.key === \'ArrowDown\' &&\\n          index + 1 < expandableNodes.length &&\\n          !this.control.isExpanded(currentNode)\\n        ) {\\n          this.selectNode(expandableNodes[index + 1].data);\\n          return;\\n        } else if (event.key === \'ArrowUp\' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\\n          this.selectNode(expandableNodes[index - 1].data);\\n          return;\\n        }\\n      }\\n      if (event.key === \'ArrowDown\' && selectedIndex + 1 < nodes.length) {\\n        this.selectNode(nodes[selectedIndex + 1].data);\\n      }\\n      if (event.key === \'ArrowUp\' && selectedIndex - 1 >= 0) {\\n        this.selectNode(nodes[selectedIndex - 1].data);\\n      }\\n      if (event.key === \'Enter\' && !currentNode.expandable) {\\n        this.navigate.emit(currentNode.data);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Disable keyboard nav on click\\n   */\\n  @HostListener(\'document:click\')\\n  handlePageClick(): void {\\n    this.enableNav = false;\\n  }\\n\\n  /**\\n   * Enables keyboard nav only if the tissue tree list is clicked\\n   * @param event Click event\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  handleListClick(event: MouseEvent): void {\\n    event.stopPropagation();\\n    this.enableNav = true;\\n  }\\n}\\n","properties":[{"name":"children","deprecated":false,"deprecationMessage":"","type":"K[]","indexKey":"","optional":true,"description":"<p>Nested nodes</p>\\n","line":30,"rawdescription":"\\nNested nodes"},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Id to pass as a query parameter on navigation</p>\\n","line":26,"rawdescription":"\\nId to pass as a query parameter on navigation"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>User readable label</p>\\n","line":24,"rawdescription":"\\nUser readable label"},{"name":"link","deprecated":false,"deprecationMessage":"","type":"LinkId","indexKey":"","optional":true,"description":"<p>Link to navigate to on node click</p>\\n","line":28,"rawdescription":"\\nLink to navigate to on node click"}],"indexSignatures":[],"kind":171,"description":"<p>Base node type</p>\\n","rawdescription":"\\nBase node type","methods":[],"extends":[]},{"name":"DownloadFormat","id":"interface-DownloadFormat-d95b0b4e10a79044ac7272022bf414b0c1585cd48c477fcab5de49a7cd96b274e1606486327ba0e89f6a9c98822d75033a6c50fdcf483bdf39c2ddf11447d5a7","file":"libs/components/molecules/src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatListModule } from \'@angular/material/list\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/**\\n * Base type for different download format options.\\n */\\nexport interface DownloadFormat {\\n  /**\\n   * User readable format label\\n   */\\n  label: string;\\n}\\n\\n/**\\n * Positioning value for the download list popup\\n */\\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n];\\n\\n/**\\n * Component for footer that displays its content at the bottom of the page with different action buttons.\\n */\\n@Component({\\n  selector: \'hra-footer\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\\n  templateUrl: \'./footer.component.html\',\\n  styleUrls: [\'./footer.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\\n  /** Host binding of footer component */\\n  @HostBinding(\'class\')\\n  @Input()\\n  size: \'small\' | \'large\' = \'large\';\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Input for Illustration metadata page link in HRA Portal */\\n  @Input() illustrationMetadata = EMPTY_LINK;\\n\\n  /** Input for embed link in HRA Portal */\\n  @Input() embed = EMPTY_LINK;\\n\\n  /** Different download formats options displayed to the user */\\n  @Input() downloadFormats: T[] = [];\\n\\n  /** Input for about link */\\n  @Input() aboutLink = EMPTY_LINK;\\n\\n  /** Emits the selected download format */\\n  @Output() readonly download = new EventEmitter<T>();\\n\\n  /** Download list popup overlay positioning */\\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\\n\\n  /** Gets whether the footer required is small */\\n  get isSmall(): boolean {\\n    return this.size === \'small\';\\n  }\\n\\n  /** Whether the download list panel is open */\\n  downloadListOpen = false;\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /**\\n   * Logs event when about button clicked\\n   */\\n  aboutClicked(): void {\\n    this.ga.event(\'about_icon_click\', \'link_click\');\\n  }\\n\\n  /**\\n   * Ignore if button is clicked, otherwise close the download list panel\\n   * @param event Mouse event\\n   */\\n  handleOutsideClick(event: MouseEvent): void {\\n    const target = event.target as HTMLElement;\\n    if ([\'download\', \'download\\\\nDownload\'].includes(target.innerText)) {\\n      return;\\n    }\\n\\n    this.downloadListOpen = false;\\n  }\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>User readable format label</p>\\n","line":18,"rawdescription":"\\n\\nUser readable format label\\n"}],"indexSignatures":[],"kind":171,"description":"<p>Base type for different download format options.</p>\\n","rawdescription":"\\n\\nBase type for different download format options.\\n","methods":[],"extends":[]},{"name":"InternalNode","id":"interface-InternalNode-3dcbdd59f4bd08b05fd0de0edc35c83e5b7ae42d957e9c2935086c91f5367743d6ec463b4ac1f3d8793ead2a4b1ebbc75ba1c0182f4a7fbd98d894f075fa4941","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  HostListener,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * Navigates to an illustration page\\n   */\\n  @Output() readonly navigate = new EventEmitter();\\n\\n  /**\\n   * Whether keyboard navigation is enabled\\n   */\\n  enableNav = true;\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n      this.control.expandAll();\\n    }\\n    if (\'selected\' in changes) {\\n      if (!this.selected) {\\n        this.control.expandAll();\\n      }\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      const node = this.control.dataNodes.find((n) => n.data === changes[\'selected\'].currentValue);\\n      if (!node?.expandable) {\\n        this.expandPath(path);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n\\n  /**\\n   * Keyboard navigation for tissue tree list\\n   * @param event Keyboard event\\n   */\\n  @HostListener(\'document:keydown\', [\'$event\'])\\n  onKeyDown(event: KeyboardEvent): void {\\n    if (!this.enableNav) {\\n      return;\\n    }\\n    if (this.control) {\\n      const nodes = this.control.dataNodes;\\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\\n\\n      const currentNode = nodes[selectedIndex];\\n      if (currentNode && currentNode.expandable) {\\n        const expandableNodes = nodes.filter((node) => node.expandable);\\n        const index = expandableNodes.indexOf(currentNode);\\n        if (event.key === \'ArrowLeft\') {\\n          this.control.collapse(currentNode);\\n        } else if (event.key === \'ArrowRight\') {\\n          this.control.expand(currentNode);\\n        } else if (\\n          event.key === \'ArrowDown\' &&\\n          index + 1 < expandableNodes.length &&\\n          !this.control.isExpanded(currentNode)\\n        ) {\\n          this.selectNode(expandableNodes[index + 1].data);\\n          return;\\n        } else if (event.key === \'ArrowUp\' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\\n          this.selectNode(expandableNodes[index - 1].data);\\n          return;\\n        }\\n      }\\n      if (event.key === \'ArrowDown\' && selectedIndex + 1 < nodes.length) {\\n        this.selectNode(nodes[selectedIndex + 1].data);\\n      }\\n      if (event.key === \'ArrowUp\' && selectedIndex - 1 >= 0) {\\n        this.selectNode(nodes[selectedIndex - 1].data);\\n      }\\n      if (event.key === \'Enter\' && !currentNode.expandable) {\\n        this.navigate.emit(currentNode.data);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Disable keyboard nav on click\\n   */\\n  @HostListener(\'document:click\')\\n  handlePageClick(): void {\\n    this.enableNav = false;\\n  }\\n\\n  /**\\n   * Enables keyboard nav only if the tissue tree list is clicked\\n   * @param event Click event\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  handleListClick(event: MouseEvent): void {\\n    event.stopPropagation();\\n    this.enableNav = true;\\n  }\\n}\\n","properties":[{"name":"data","deprecated":false,"deprecationMessage":"","type":"T","indexKey":"","optional":false,"description":"<p>Associated user node data</p>\\n","line":44,"rawdescription":"\\nAssociated user node data"},{"name":"expandable","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Whether the node can be expanded to display child nodes</p>\\n","line":40,"rawdescription":"\\nWhether the node can be expanded to display child nodes"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Displayed label</p>\\n","line":38,"rawdescription":"\\nDisplayed label"},{"name":"level","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Depth of node in the tree</p>\\n","line":42,"rawdescription":"\\nDepth of node in the tree"}],"indexSignatures":[],"kind":171,"description":"<p>Internal interface for flat tissue data hierarchy</p>\\n","rawdescription":"\\n\\nInternal interface for flat tissue data hierarchy\\n","methods":[],"extends":[]},{"name":"MetricItem","id":"interface-MetricItem-d877d63626a0b1b5cd855f7aa7f9f09758ae9e6469a07ba7b48860ca5387606caa9ae0c2e9b44170d4419c78a5035af5762a8116e10efa82ee0fe3a56f5d97db","file":"libs/components/molecules/src/lib/metrics/metrics.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n  An interface representing a single metric with an icon, value and description.\\n */\\nexport interface MetricItem {\\n  /** Represents the icon associated with the metric. */\\n  icon: string;\\n  /** Describes the numberical value of the metric. */\\n  value: string;\\n  /** Describes the type of metric. */\\n  description: string;\\n}\\n/**\\n * Describes the metrics for the HuBMAP project.\\n */\\n@Component({\\n  selector: \'hra-metrics\',\\n  imports: [CommonModule],\\n  templateUrl: \'./metrics.component.html\',\\n  styleUrls: [\'./metrics.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MetricsComponent {\\n  /** Main title of metrics component. */\\n  @Input() title = \'\';\\n\\n  /** Logo of metrics component. */\\n  @Input() logo = \'\';\\n\\n  /** List of metrics that will be shown to the user. */\\n  @Input() metrics: MetricItem[] = [];\\n\\n  /** Base url */\\n  @Input() baseHref = \'\';\\n}\\n","properties":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Describes the type of metric.</p>\\n","line":13,"rawdescription":"\\nDescribes the type of metric."},{"name":"icon","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Represents the icon associated with the metric.</p>\\n","line":9,"rawdescription":"\\nRepresents the icon associated with the metric."},{"name":"value","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Describes the numberical value of the metric.</p>\\n","line":11,"rawdescription":"\\nDescribes the numberical value of the metric."}],"indexSignatures":[],"kind":171,"description":"<p>An interface representing a single metric with an icon, value and description.</p>\\n","rawdescription":"\\n\\nAn interface representing a single metric with an icon, value and description.\\n","methods":[],"extends":[]},{"name":"NodeMapEntry","id":"interface-NodeMapEntry-da5275c19f5af9ef7ba59c9787836ced9a7c6c2be9a2becafca81f532e1934801a74c2d695b5094f7a48f71b15bf21e295279452b6e8486affb89a5c2a2bf3b0","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  SimpleChanges,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { TooltipComponent } from \'@hra-ui/components/atoms\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node id in svg */\\n  id: string;\\n  /** Node group id */\\n  groupId: string;\\n  /** Ontology id of cell type */\\n  ontologyId: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.ShadowDom,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Highlighted ontology id */\\n  @Input() highlightId?: string;\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\\n\\n  /** Emits node id when clicked */\\n  @Output() readonly nodeClick = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /** Crosswalk element of svg */\\n  private crosswalkEl?: Element;\\n\\n  /** List of highlighted svg elements */\\n  private highlightedElements: Element[] = [];\\n\\n  /**\\n   * Updates the highlighting based on current highlight id\\n   * @param changes\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'highlightId\' in changes) {\\n      this.resetHighlight();\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Highlights cells that match highlightId\\n   */\\n  private setHighlight() {\\n    const { mapping, highlightId, crosswalkEl } = this;\\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\\n    if (!entry || !crosswalkEl) {\\n      return;\\n    }\\n\\n    const encodedId = this.encodeId(entry.id);\\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\\n    if (!element) {\\n      return;\\n    }\\n\\n    const gElement = element.nodeName === \'g\' ? element : (element.parentElement as Element);\\n    const id = gElement.id;\\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\\n    this.highlightedElements = Array.from(elements);\\n    elements.forEach((el) => el.classList.add(\'click-active\'));\\n  }\\n\\n  /**\\n   * Resets all highlighted elements in the svg\\n   */\\n  private resetHighlight(): void {\\n    for (const el of this.highlightedElements) {\\n      el.classList.remove(\'click-active\');\\n    }\\n    this.highlightedElements = [];\\n  }\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    this.crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\') ?? undefined;\\n    if (this.crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, this.crosswalkEl);\\n      this.attachCrosswalkHover(this.crosswalkEl);\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe((event) => this.onCrosswalkHover(event));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\\n    this.attachEvent(el, \'click\').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    if (event) {\\n      const node = this.getNode(event);\\n      if (node) {\\n        this.nodeHoverData$.next({\\n          node: node.label,\\n          origin: {\\n            x: event.clientX,\\n            y: event.clientY,\\n          },\\n        });\\n        this.nodeHover.emit(node); //emits node entry\\n      }\\n    } else {\\n      this.nodeHoverData$.next(undefined);\\n      this.nodeHover.emit();\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const cellMatch = this.mapping.find(\\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\\n      );\\n      if (cellMatch) {\\n        return cellMatch;\\n      }\\n      const groupMatch = this.mapping.find(\\n        (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\\n      );\\n      if (groupMatch) {\\n        return groupMatch;\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Turns normal string into decoded SVG id\\n   * @param id id\\n   * @returns Encoded id\\n   */\\n  private encodeId(id: string): string {\\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\\n    return id.replace(/[^a-z0-9-]/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","properties":[{"name":"groupId","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node group id</p>\\n","line":71,"rawdescription":"\\nNode group id"},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node id in svg</p>\\n","line":69,"rawdescription":"\\nNode id in svg"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node label</p>\\n","line":67,"rawdescription":"\\nNode label"},{"name":"ontologyId","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Ontology id of cell type</p>\\n","line":73,"rawdescription":"\\nOntology id of cell type"}],"indexSignatures":[],"kind":171,"description":"<p>Interface for node entries</p>\\n","rawdescription":"\\nInterface for node entries","methods":[],"extends":[]},{"name":"NodeTooltipData","id":"interface-NodeTooltipData-da5275c19f5af9ef7ba59c9787836ced9a7c6c2be9a2becafca81f532e1934801a74c2d695b5094f7a48f71b15bf21e295279452b6e8486affb89a5c2a2bf3b0","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  SimpleChanges,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { TooltipComponent } from \'@hra-ui/components/atoms\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node id in svg */\\n  id: string;\\n  /** Node group id */\\n  groupId: string;\\n  /** Ontology id of cell type */\\n  ontologyId: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.ShadowDom,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Highlighted ontology id */\\n  @Input() highlightId?: string;\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\\n\\n  /** Emits node id when clicked */\\n  @Output() readonly nodeClick = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /** Crosswalk element of svg */\\n  private crosswalkEl?: Element;\\n\\n  /** List of highlighted svg elements */\\n  private highlightedElements: Element[] = [];\\n\\n  /**\\n   * Updates the highlighting based on current highlight id\\n   * @param changes\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'highlightId\' in changes) {\\n      this.resetHighlight();\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Highlights cells that match highlightId\\n   */\\n  private setHighlight() {\\n    const { mapping, highlightId, crosswalkEl } = this;\\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\\n    if (!entry || !crosswalkEl) {\\n      return;\\n    }\\n\\n    const encodedId = this.encodeId(entry.id);\\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\\n    if (!element) {\\n      return;\\n    }\\n\\n    const gElement = element.nodeName === \'g\' ? element : (element.parentElement as Element);\\n    const id = gElement.id;\\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\\n    this.highlightedElements = Array.from(elements);\\n    elements.forEach((el) => el.classList.add(\'click-active\'));\\n  }\\n\\n  /**\\n   * Resets all highlighted elements in the svg\\n   */\\n  private resetHighlight(): void {\\n    for (const el of this.highlightedElements) {\\n      el.classList.remove(\'click-active\');\\n    }\\n    this.highlightedElements = [];\\n  }\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    this.crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\') ?? undefined;\\n    if (this.crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, this.crosswalkEl);\\n      this.attachCrosswalkHover(this.crosswalkEl);\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe((event) => this.onCrosswalkHover(event));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\\n    this.attachEvent(el, \'click\').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    if (event) {\\n      const node = this.getNode(event);\\n      if (node) {\\n        this.nodeHoverData$.next({\\n          node: node.label,\\n          origin: {\\n            x: event.clientX,\\n            y: event.clientY,\\n          },\\n        });\\n        this.nodeHover.emit(node); //emits node entry\\n      }\\n    } else {\\n      this.nodeHoverData$.next(undefined);\\n      this.nodeHover.emit();\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const cellMatch = this.mapping.find(\\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\\n      );\\n      if (cellMatch) {\\n        return cellMatch;\\n      }\\n      const groupMatch = this.mapping.find(\\n        (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\\n      );\\n      if (groupMatch) {\\n        return groupMatch;\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Turns normal string into decoded SVG id\\n   * @param id id\\n   * @returns Encoded id\\n   */\\n  private encodeId(id: string): string {\\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\\n    return id.replace(/[^a-z0-9-]/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","properties":[{"name":"node","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node name</p>\\n","line":59,"rawdescription":"\\nNode name"},{"name":"origin","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"<p>Center point of hovered node in screen coordinates</p>\\n","line":61,"rawdescription":"\\nCenter point of hovered node in screen coordinates"}],"indexSignatures":[],"kind":171,"description":"<p>Node tooltip data</p>\\n","rawdescription":"\\nNode tooltip data","methods":[],"extends":[]},{"name":"SectionItem","id":"interface-SectionItem-c9055aff91afa3006a565f77a59d0bb3d0b0ae6234158ca31fd858b678a4c8ba8e73772241ae414572f0acfba7c2c934af443f6efc50a96fe368c415b5d850a8","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","properties":[{"name":"data","deprecated":false,"deprecationMessage":"","type":"DataItem","indexKey":"","optional":false,"description":"<p>A DateItem property that represents a section and its data</p>\\n","line":18,"rawdescription":"\\nA DateItem property that represents a section and its data"},{"name":"isLastItem","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>A boolean property that represents the last item of a section</p>\\n","line":20,"rawdescription":"\\nA boolean property that represents the last item of a section"},{"name":"section","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>A number property that represents the section number</p>\\n","line":16,"rawdescription":"\\nA number property that represents the section number"}],"indexSignatures":[],"kind":171,"description":"<p>An item which represents a section with a data item and an indicator for the last item in the section</p>\\n","rawdescription":"\\nAn item which represents a section with a data item and an indicator for the last item in the section","methods":[],"extends":[]},{"name":"SourceListItem","id":"interface-SourceListItem-3f56281b3b2ba13bbb5c2b3896e7661ecb6baf009396cc0d9bf528b27260fe5ca67e778f87ea15a75a8f3780e63190d925f72bd25199f65b464b313b2da3ffa5","file":"libs/components/molecules/src/lib/source-list/source-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { SelectionModel } from \'@angular/cdk/collections\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatCheckboxModule } from \'@angular/material/checkbox\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatSort, MatSortModule } from \'@angular/material/sort\';\\nimport { MatTableDataSource, MatTableModule } from \'@angular/material/table\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { EmptyBiomarkerComponent, LabelBoxComponent } from \'@hra-ui/components/atoms\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\\nexport interface SourceListItem {\\n  /** List of authors for the source */\\n  authors: string[];\\n  /** Year dataset was released */\\n  year: number;\\n  /** Title of the dataset in the SourceList */\\n  title: string;\\n  /** DOI of dataset */\\n  doi: string;\\n  /** Label of the dataset in the SourceList */\\n  label: string;\\n  /** Link to the dataset in the SourceList */\\n  link: string;\\n}\\n\\n/** This component shows list of sources with title and links to the datasets */\\n@Component({\\n  selector: \'hra-source-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTableModule,\\n    MatIconModule,\\n    MatSortModule,\\n    LabelBoxComponent,\\n    EmptyBiomarkerComponent,\\n    MatCheckboxModule,\\n    HoverDirective,\\n  ],\\n  templateUrl: \'./source-list.component.html\',\\n  styleUrls: [\'./source-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SourceListComponent<T extends SourceListItem> implements OnChanges {\\n  /** List of sources with titles and links displayed to the user */\\n  @Input() sources: T[] = [];\\n\\n  /** Text that appears in the empty biomarker collaborate button */\\n  @Input() collaborateText = \'\';\\n\\n  /** Text that appears in the empty biomarker message */\\n  @Input() message = \'\';\\n\\n  /** Whether to show the biomarker table */\\n  showTable = true;\\n\\n  /** Current source selection */\\n  selection = new SelectionModel<T>(true, []);\\n\\n  /** Data source for table */\\n  dataSource = new MatTableDataSource<T>();\\n\\n  /** Columns to display in the sources list */\\n  displayedColumns: string[] = [\'select\', \'authors\', \'year\', \'title\', \'link\'];\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly collaborateClick = new EventEmitter<void>();\\n\\n  /** Emits when source selection changed */\\n  @Output() readonly selectionChanged = new EventEmitter<T[]>();\\n\\n  /** Sorter for sources list */\\n  @ViewChild(MatSort) set sort(sorter: MatSort) {\\n    this.dataSource.sort = sorter || null;\\n  }\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** On sources change, resets selection and selects all sources */\\n  ngOnChanges(changes: SimpleChanges) {\\n    if (\'sources\' in changes) {\\n      this.selection.clear();\\n      this.dataSource.data = this.sources;\\n      this.toggleAllRows();\\n    }\\n  }\\n\\n  /**\\n   * It changes the value of showTable to false if value it true\\n   * and vice versa\\n   */\\n  toggleTable(): void {\\n    this.showTable = !this.showTable;\\n    this.ga.event(\'source_table_toggle\', this.showTable.toString());\\n  }\\n\\n  /**\\n   * Logs source link click\\n   * @param item Source list item\\n   */\\n  sourceLinkClicked(item: SourceListItem): void {\\n    this.ga.event(\'source_link_clicked\', \'link_click\', item.link);\\n  }\\n\\n  /** Whether the number of selected elements matches the total number of rows. */\\n  isAllSelected() {\\n    const numSelected = this.selection.selected.length;\\n    const numRows = this.dataSource.data.length;\\n    return numSelected === numRows;\\n  }\\n\\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\\n  toggleAllRows() {\\n    if (this.isAllSelected()) {\\n      this.selection.clear();\\n      this.selectionChanged.emit(this.selection.selected);\\n      return;\\n    }\\n\\n    this.dataSource.data.forEach((row) => this.selection.select(row));\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n\\n  /** Toggles selection status of a row */\\n  toggleRow(row: T) {\\n    this.selection.toggle(row);\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n}\\n","properties":[{"name":"authors","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":false,"description":"<p>List of authors for the source</p>\\n","line":26,"rawdescription":"\\nList of authors for the source"},{"name":"doi","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>DOI of dataset</p>\\n","line":32,"rawdescription":"\\nDOI of dataset"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Label of the dataset in the SourceList</p>\\n","line":34,"rawdescription":"\\nLabel of the dataset in the SourceList"},{"name":"link","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Link to the dataset in the SourceList</p>\\n","line":36,"rawdescription":"\\nLink to the dataset in the SourceList"},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Title of the dataset in the SourceList</p>\\n","line":30,"rawdescription":"\\nTitle of the dataset in the SourceList"},{"name":"year","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Year dataset was released</p>\\n","line":28,"rawdescription":"\\nYear dataset was released"}],"indexSignatures":[],"kind":171,"description":"<p>SourceListItem interface contains title and link to the dataset for the SourceList</p>\\n","rawdescription":"\\nSourceListItem interface contains title and link to the dataset for the SourceList","methods":[],"extends":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"BiomarkerTableDataCardComponent","id":"component-BiomarkerTableDataCardComponent-c9055aff91afa3006a565f77a59d0bb3d0b0ae6234158ca31fd858b678a4c8ba8e73772241ae414572f0acfba7c2c934af443f6efc50a96fe368c415b5d850a8","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table-data-card","styleUrls":["./biomarker-table-data-card.component.scss"],"styles":[],"templateUrl":["./biomarker-table-data-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"data","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nNested list of DataItems for each section which is displayed to the user","description":"<p>Nested list of DataItems for each section which is displayed to the user</p>\\n","line":33,"type":"DataItem[][]","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"sectionItems","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"SectionItem[]","indexKey":"","optional":false,"description":"<p>Converted nested array of DataItem into Flat array of SectionItem</p>\\n","line":36,"rawdescription":"\\nConverted nested array of DataItem into Flat array of SectionItem"}],"methodsClass":[{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":39,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nTriggers an update on sectionItems array when data is changed","description":"<p>Triggers an update on sectionItems array when data is changed</p>\\n","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateSectionItems","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":46,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nUpdates sectionItems array when data is changed","description":"<p>Updates sectionItems array when data is changed</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatTableModule","type":"module"}],"description":"<p>This component displays a table with sections, where each section contains a list of items with a label and a value.</p>\\n","rawdescription":"\\nThis component displays a table with sections, where each section contains a list of items with a label and a value.","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n  font-family: Metropolis;\\n\\n  .mat-mdc-cell {\\n    padding: 0.25rem 0rem;\\n  }\\n\\n  .mat-mdc-row {\\n    height: fit-content;\\n  }\\n\\n  .no-border {\\n    border: none;\\n  }\\n\\n  .label {\\n    color: rgba(vars.$primary);\\n    padding-right: 3rem;\\n    font-weight: 500;\\n  }\\n\\n  .value {\\n    color: rgba(vars.$primary-400);\\n    font-weight: 400;\\n  }\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n}\\n","styleUrl":"./biomarker-table-data-card.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges"],"templateData":"<div class=\\"no-data\\" *ngIf=\\"sectionItems.length === 0\\">No data</div>\\n<table mat-table *ngIf=\\"sectionItems.length > 0\\" [dataSource]=\\"sectionItems\\">\\n  <caption class=\\"sr-only\\">\\n    Biomarker Table Data Card\\n  </caption>\\n\\n  \x3c!-- Label Column --\x3e\\n  <ng-container matColumnDef=\\"label\\">\\n    <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Label</th>\\n    <td class=\\"label\\" mat-cell *matCellDef=\\"let element\\" [class.no-border]=\\"!element.isLastItem\\">\\n      {{ element.data.label }}\\n    </td>\\n  </ng-container>\\n\\n  \x3c!-- Value Column --\x3e\\n  <ng-container matColumnDef=\\"value\\">\\n    <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Value</th>\\n    <td class=\\"value\\" mat-cell *matCellDef=\\"let element\\" [class.no-border]=\\"!element.isLastItem\\">\\n      {{ element.data.value }}\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-row *matRowDef=\\"let row; columns: [\'label\', \'value\']\\"></tr>\\n</table>\\n"},{"name":"BiomarkerTableDataIconComponent","id":"component-BiomarkerTableDataIconComponent-0225093f43fb8787523fb046a1f49b1734c4df30a8f9cfcf1c3b6e2e6b48ea54ddb78db16c2998b10381370a41c7e3b745c0ef289f07672aa75e3932caa36a87","file":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table-data-icon","styleUrls":["./biomarker-table-data-icon.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRepresents the color of the icon","description":"<p>Represents the color of the icon</p>\\n","line":16,"type":"string","decorators":[]},{"name":"size","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRepresents the size of the icon","description":"<p>Represents the size of the icon</p>\\n","line":19,"type":"number","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Describes the data icon for the table</p>\\n","rawdescription":"\\n\\nDescribes the data icon for the table\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, HostBinding, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Describes the data icon for the table\\n */\\n@Component({\\n  selector: \'hra-biomarker-table-data-icon\',\\n  imports: [CommonModule],\\n  template: \'\',\\n  styleUrls: [\'./biomarker-table-data-icon.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataIconComponent {\\n  /** Represents the color of the icon */\\n  @HostBinding(\'style.background-color\') @Input() color = \'\';\\n\\n  /** Represents the size of the icon  */\\n  @HostBinding(\'style.--radius.rem\') @Input() size = 0;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  border-radius: 50%;\\n  --radius: 0.625rem;\\n  width: var(--radius);\\n  height: var(--radius);\\n}\\n","styleUrl":"./biomarker-table-data-icon.component.scss"}],"stylesData":"","extends":[]},{"name":"ContactModalComponent","id":"component-ContactModalComponent-a06e7b9d6090af69d4e955b4d696dcbb5c6fc10789395a14d1c43a2fe9462289f4618ee0f3d69e38da941de0f1f4b1da5652596b5f7597a9979d50a323bd4dc3","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-contact-modal","styleUrls":["./contact-modal.component.scss"],"styles":[],"templateUrl":["./contact-modal.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product logo URL to displayed on the left side.","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":48,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product title to displayed on the left side.","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":51,"type":"string","decorators":[]}],"outputsClass":[{"name":"closeClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the cancel button or close icon is clicked","description":"<p>Emits when the cancel button or close icon is clicked</p>\\n","line":57,"type":"EventEmitter"},{"name":"submitClick","defaultValue":"new EventEmitter<ContactData>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the submit button is clicked and all the values are appropriate.","description":"<p>Emits when the submit button is clicked and all the values are appropriate.</p>\\n","line":54,"type":"EventEmitter"}],"propertiesClass":[{"name":"contactData","defaultValue":"EMPTY_CONTACT_DATA","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Asigns the undefined initially to all the input fields.</p>\\n","line":65,"rawdescription":"\\nAsigns the undefined initially to all the input fields."},{"name":"defaultMail","defaultValue":"\'infoccf@iu.edu\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Default email address</p>\\n","line":68,"rawdescription":"\\nDefault email address","modifierKind":[148]}],"methodsClass":[{"name":"submit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nIt emits the updated value of contact data","description":"<p>It emits the updated value of contact data</p>\\n"},{"name":"updateData","args":[{"name":"key","type":"K","deprecated":false,"deprecationMessage":""},{"name":"value","type":"ContactData","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":["K"],"line":71,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nUpdates the contact data object with a new value for a given key.","description":"<p>Updates the contact data object with a new value for a given key.</p>\\n","jsdoctags":[{"name":"key","type":"K","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"value","type":"ContactData","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"EmailInputComponent","type":"component"},{"name":"MarkdownModule","type":"module"},{"name":"RequiredTextboxComponent","type":"component"},{"name":"RequiredInputComponent","type":"component"}],"description":"<p>Contact modal component.</p>\\n","rawdescription":"\\n\\nContact modal component.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from \'@hra-ui/components/atoms\';\\nimport { produce } from \'immer\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\\n */\\nexport interface ContactData {\\n  /**  The email address of the person submitting the form. */\\n  email: string;\\n  /** The subject line of the message being sent. */\\n  subject: string;\\n  /** The body of the message being sent. */\\n  message: string;\\n}\\n\\n/** Initial empty contact data */\\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n};\\n\\n/**\\n * Contact modal component.\\n */\\n@Component({\\n  selector: \'hra-contact-modal\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    EmailInputComponent,\\n    MarkdownModule,\\n    RequiredTextboxComponent,\\n    RequiredInputComponent,\\n  ],\\n  templateUrl: \'./contact-modal.component.html\',\\n  styleUrls: [\'./contact-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactModalComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Emits when the submit button is clicked and all the values are appropriate. */\\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\\n\\n  /** Emits when the cancel button or close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n\\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\\n  get disableSubmit(): boolean {\\n    return Object.values(this.contactData).some((value) => value === undefined);\\n  }\\n\\n  /** Asigns the undefined initially to all the input fields. */\\n  contactData = EMPTY_CONTACT_DATA;\\n\\n  /** Default email address */\\n  readonly defaultMail = \'infoccf@iu.edu\';\\n\\n  /** Updates the contact data object with a new value for a given key. */\\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\\n    this.contactData = produce(this.contactData, (draft) => {\\n      draft[key] = value;\\n    });\\n  }\\n\\n  /** It emits the updated value of contact data */\\n  submit(): void {\\n    this.submitClick.emit(this.contactData as ContactData);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  position: relative;\\n  padding-top: 2rem;\\n  margin-right: 1.5rem;\\n  margin-left: 1.5rem;\\n\\n  .product-logo {\\n    display: flex;\\n    align-items: center;\\n\\n    .product-logo-image {\\n      margin-right: 1rem;\\n    }\\n\\n    .product-title {\\n      color: #990000;\\n      margin: 0;\\n      font-weight: 600;\\n    }\\n  }\\n\\n  .close {\\n    position: absolute;\\n    top: 1.5rem;\\n    right: 0rem;\\n  }\\n\\n  .submit {\\n    margin-right: 1.5rem;\\n  }\\n\\n  .submit,\\n  .cancel {\\n    width: 7.5rem;\\n  }\\n\\n  .email {\\n    margin-top: 1.25rem;\\n  }\\n\\n  .message-field {\\n    margin-top: 1rem;\\n  }\\n\\n  .subject-field {\\n    margin-top: 1rem;\\n  }\\n\\n  .desc {\\n    margin-top: 1.5rem;\\n  }\\n}\\n","styleUrl":"./contact-modal.component.scss"}],"stylesData":"","extends":[],"accessors":{"disableSubmit":{"name":"disableSubmit","getSignature":{"name":"disableSubmit","type":"boolean","returnType":"boolean","line":60,"rawdescription":"\\nA function to disable the submit button. If all the values are in approproiate format, then it will be enabled.","description":"<p>A function to disable the submit button. If all the values are in approproiate format, then it will be enabled.</p>\\n"}}},"templateData":"<a class=\\"product-logo\\">\\n  <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n  <h2 class=\\"product-title\\">{{ productTitle }}</h2>\\n</a>\\n\\n<button class=\\"close\\" mat-icon-button (click)=\\"closeClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n\\n<hra-email-input\\n  class=\\"email\\"\\n  placeholder=\\"Example@domain.com\\"\\n  (emailChange)=\\"updateData(\'email\', $event)\\"\\n  [defaultMail]=\\"defaultMail\\"\\n>\\n</hra-email-input>\\n\\n<hra-required-input label=\\"Subject\\" (inputChange)=\\"updateData(\'subject\', $event)\\" class=\\"subject-field\\">\\n</hra-required-input>\\n\\n<hra-required-textbox\\n  class=\\"message-field\\"\\n  label=\\"Message\\"\\n  placeholder=\\"Enter your message here\\"\\n  (messageChange)=\\"updateData(\'message\', $event)\\"\\n>\\n</hra-required-textbox>\\n\\n<markdown class=\\"desc\\" data=\\"Please allow two business days for a response to each inquiry.\\"></markdown>\\n\\n<button mat-flat-button class=\\"submit\\" color=\\"primary\\" [disabled]=\\"disableSubmit\\" (click)=\\"submit()\\">Submit</button>\\n<button mat-stroked-button class=\\"cancel\\" color=\\"accent\\" (click)=\\"closeClick.emit()\\">Cancel</button>\\n"},{"name":"FooterComponent","id":"component-FooterComponent-d95b0b4e10a79044ac7272022bf414b0c1585cd48c477fcab5de49a7cd96b274e1606486327ba0e89f6a9c98822d75033a6c50fdcf483bdf39c2ddf11447d5a7","file":"libs/components/molecules/src/lib/footer/footer.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-footer","styleUrls":["./footer.component.scss"],"styles":[],"templateUrl":["./footer.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"aboutLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for about link","description":"<p>Input for about link</p>\\n","line":74,"type":"any","decorators":[]},{"name":"downloadFormats","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDifferent download formats options displayed to the user","description":"<p>Different download formats options displayed to the user</p>\\n","line":71,"type":"T[]","decorators":[]},{"name":"embed","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for embed link in HRA Portal","description":"<p>Input for embed link in HRA Portal</p>\\n","line":68,"type":"any","decorators":[]},{"name":"illustrationMetadata","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for Illustration metadata page link in HRA Portal","description":"<p>Input for Illustration metadata page link in HRA Portal</p>\\n","line":65,"type":"any","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product logo URL to displayed on the left side.","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":59,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product title to displayed on the left side.","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":62,"type":"string","decorators":[]},{"name":"size","defaultValue":"\'large\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nHost binding of footer component","description":"<p>Host binding of footer component</p>\\n","line":56,"type":"\\"small\\" | \\"large\\"","decorators":[]}],"outputsClass":[{"name":"contactClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the contact button is clicked","description":"<p>Emits when the contact button is clicked</p>\\n","line":91,"type":"EventEmitter"},{"name":"download","defaultValue":"new EventEmitter<T>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits the selected download format","description":"<p>Emits the selected download format</p>\\n","line":77,"type":"EventEmitter"}],"propertiesClass":[{"name":"downloadListOpen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the download list panel is open</p>\\n","line":88,"rawdescription":"\\nWhether the download list panel is open"},{"name":"DOWNLOADS_LIST_POSITION","defaultValue":"DOWNLOADS_LIST_POSITION","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Download list popup overlay positioning</p>\\n","line":80,"rawdescription":"\\nDownload list popup overlay positioning","modifierKind":[148]},{"name":"ga","defaultValue":"inject(GoogleAnalyticsService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Google analytics tracking service</p>\\n","line":94,"rawdescription":"\\nGoogle analytics tracking service","modifierKind":[123,148]}],"methodsClass":[{"name":"aboutClicked","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":99,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs event when about button clicked\\n","description":"<p>Logs event when about button clicked</p>\\n"},{"name":"handleOutsideClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":107,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIgnore if button is clicked, otherwise close the download list panel\\n","description":"<p>Ignore if button is clicked, otherwise close the download list panel</p>\\n","jsdoctags":[{"name":{"pos":3092,"end":3097,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":3086,"end":3091,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Mouse event</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"OverlayModule","type":"module"},{"name":"MatListModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Component for footer that displays its content at the bottom of the page with different action buttons.</p>\\n","rawdescription":"\\n\\nComponent for footer that displays its content at the bottom of the page with different action buttons.\\n","type":"component","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatListModule } from \'@angular/material/list\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/**\\n * Base type for different download format options.\\n */\\nexport interface DownloadFormat {\\n  /**\\n   * User readable format label\\n   */\\n  label: string;\\n}\\n\\n/**\\n * Positioning value for the download list popup\\n */\\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n];\\n\\n/**\\n * Component for footer that displays its content at the bottom of the page with different action buttons.\\n */\\n@Component({\\n  selector: \'hra-footer\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\\n  templateUrl: \'./footer.component.html\',\\n  styleUrls: [\'./footer.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\\n  /** Host binding of footer component */\\n  @HostBinding(\'class\')\\n  @Input()\\n  size: \'small\' | \'large\' = \'large\';\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Input for Illustration metadata page link in HRA Portal */\\n  @Input() illustrationMetadata = EMPTY_LINK;\\n\\n  /** Input for embed link in HRA Portal */\\n  @Input() embed = EMPTY_LINK;\\n\\n  /** Different download formats options displayed to the user */\\n  @Input() downloadFormats: T[] = [];\\n\\n  /** Input for about link */\\n  @Input() aboutLink = EMPTY_LINK;\\n\\n  /** Emits the selected download format */\\n  @Output() readonly download = new EventEmitter<T>();\\n\\n  /** Download list popup overlay positioning */\\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\\n\\n  /** Gets whether the footer required is small */\\n  get isSmall(): boolean {\\n    return this.size === \'small\';\\n  }\\n\\n  /** Whether the download list panel is open */\\n  downloadListOpen = false;\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /**\\n   * Logs event when about button clicked\\n   */\\n  aboutClicked(): void {\\n    this.ga.event(\'about_icon_click\', \'link_click\');\\n  }\\n\\n  /**\\n   * Ignore if button is clicked, otherwise close the download list panel\\n   * @param event Mouse event\\n   */\\n  handleOutsideClick(event: MouseEvent): void {\\n    const target = event.target as HTMLElement;\\n    if ([\'download\', \'download\\\\nDownload\'].includes(target.innerText)) {\\n      return;\\n    }\\n\\n    this.downloadListOpen = false;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  padding: 2rem;\\n  border-top: 1px solid rgba(vars.$light-dividers);\\n  align-items: center;\\n  background: rgba(vars.$primary-lighter);\\n  gap: 2rem;\\n  height: 100%;\\n  width: 100%;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n\\n  .controls {\\n    display: flex;\\n    justify-content: flex-end;\\n  }\\n  .filler {\\n    display: none;\\n  }\\n\\n  .product-title {\\n    color: #990000;\\n    margin-right: 0rem;\\n  }\\n\\n  a {\\n    cursor: pointer;\\n    display: flex;\\n  }\\n\\n  .product-logo-image {\\n    height: 1.2rem;\\n    margin-right: 1rem;\\n  }\\n\\n  button {\\n    background: rgba(vars.$light-dividers);\\n    height: 1.75rem;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    padding: 0;\\n    min-width: 10rem;\\n    color: rgba(vars.$primary);\\n\\n    mat-icon,\\n    span {\\n      height: 1rem;\\n      width: 1rem;\\n      font-size: 1rem;\\n      margin-right: 0.25rem;\\n    }\\n  }\\n}\\n\\n::ng-deep {\\n  .download-options-panel {\\n    box-shadow: 0.1rem 0.1rem 0.4rem 0.2rem #dad7d7;\\n    background-color: #ffffff;\\n  }\\n}\\n::ng-deep .download,\\n::ng-deep .data-download {\\n  .mdc-button__label {\\n    display: flex;\\n    align-items: center;\\n  }\\n}\\n","styleUrl":"./footer.component.scss"}],"stylesData":"","extends":[],"accessors":{"isSmall":{"name":"isSmall","getSignature":{"name":"isSmall","type":"boolean","returnType":"boolean","line":83,"rawdescription":"\\nGets whether the footer required is small","description":"<p>Gets whether the footer required is small</p>\\n"}}},"templateData":"<div *ngIf=\\"isSmall\\">\\n  <a class=\\"product-logo-link\\">\\n    <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n    <div class=\\"product-title\\">{{ productTitle }}</div>\\n  </a>\\n</div>\\n<div class=\\"filler\\" *ngIf=\\"isSmall\\"></div>\\n\\n<button class=\\"button\\" mat-button [hraLink]=\\"embed\\" disableRipple>\\n  <mat-icon>code</mat-icon>\\n  Embed Illustration\\n</button>\\n\\n<button\\n  class=\\"button download\\"\\n  mat-button\\n  (click)=\\"downloadListOpen = !downloadListOpen\\"\\n  type=\\"button\\"\\n  cdkOverlayOrigin\\n  #anchor=\\"cdkOverlayOrigin\\"\\n  disableRipple\\n>\\n  <span class=\\"material-symbols-outlined\\"> download </span>\\n  Download Illustration\\n</button>\\n\\n<button class=\\"button illustration-metadata\\" mat-button [hraLink]=\\"illustrationMetadata\\" disableRipple>\\n  <mat-icon>info_outlined</mat-icon>\\n  Illustration Metadata\\n</button>\\n\\n\x3c!-- <button class=\\"button data-download\\" *ngIf=\\"!isSmall\\" mat-button disableRipple>\\n  <span class=\\"material-symbols-outlined\\"> download </span>\\n  Download Data\\n</button> --\x3e\\n\\n<button class=\\"button contact\\" *ngIf=\\"isSmall\\" mat-button (mouseup)=\\"contactClick.emit()\\" disableRipple>\\n  <mat-icon>mail_outlined</mat-icon>\\n  Contact\\n</button>\\n\\n<button class=\\"button ftu-explorer\\" *ngIf=\\"isSmall\\" mat-button [hraLink]=\\"aboutLink\\" disableRipple>\\n  <mat-icon>open_in_new</mat-icon>\\n  HRA Portal\\n</button>\\n\\n<div class=\\"filler\\" *ngIf=\\"!isSmall\\"></div>\\n\\n<ng-template\\n  cdkConnectedOverlay\\n  [cdkConnectedOverlayOrigin]=\\"anchor\\"\\n  [cdkConnectedOverlayOpen]=\\"downloadListOpen\\"\\n  [cdkConnectedOverlayPositions]=\\"DOWNLOADS_LIST_POSITION\\"\\n  [cdkConnectedOverlayOffsetX]=\\"0\\"\\n  cdkConnectedOverlayHasBackdrop=\\"false\\"\\n  cdkConnectedOverlayPush=\\"false\\"\\n  cdkConnectedOverlayPanelClass=\\"download-options-panel\\"\\n  (overlayOutsideClick)=\\"handleOutsideClick($event)\\"\\n>\\n  <mat-action-list>\\n    <button\\n      mat-list-item\\n      *ngFor=\\"let format of downloadFormats\\"\\n      (click)=\\"downloadListOpen = false; download.emit(format)\\"\\n    >\\n      {{ format.label }}\\n    </button>\\n  </mat-action-list>\\n</ng-template>\\n"},{"name":"FullscreenContainerComponent","id":"component-FullscreenContainerComponent-68f90299b5a74956fd0797d6dd9814a081133d4bb75fc09ac3e05c5d3728161722a3f2687d177d3740bd62fb856a2830c315e5002fbcfc6561e873e161d993a2","file":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-container","styleUrls":[],"styles":["\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"fullscreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA boolean input property that controls the fullscreen mode","description":"<p>A boolean input property that controls the fullscreen mode</p>\\n","line":37,"type":"boolean","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"content","deprecated":false,"deprecationMessage":"","type":"QueryList<FullscreenContentComponent>","indexKey":"","optional":true,"description":"<p>A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component&#39;s content area</p>\\n","line":34,"rawdescription":"\\nA property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component\'s content area","decorators":[{"name":"ContentChildren","stringifiedArguments":"FullscreenContentComponent"}],"modifierKind":[170,148]}],"methodsClass":[{"name":"ngAfterContentInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":42,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nIt calls the updateFullscreenMode method to set the isFullScreen property of the child\\nFullscreenContentComponent instances based on the value of the fullscreen input property\\n","description":"<p>It calls the updateFullscreenMode method to set the isFullScreen property of the child\\nFullscreenContentComponent instances based on the value of the fullscreen input property</p>\\n"},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nIt checks if the fullscreen input property has changed, and calls the updateFullscreenMode method if it has","description":"<p>It checks if the fullscreen input property has changed, and calls the updateFullscreenMode method if it has</p>\\n","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateFullscreenMode","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":54,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA private method that sets the isFullScreen property of each child FullscreenContentComponent based on the value of the fullscreen","description":"<p>A private method that sets the isFullScreen property of each child FullscreenContentComponent based on the value of the fullscreen</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"FullscreenContentComponent","type":"component"}],"description":"<p>A component that wraps any child components of type FullscreenContentComponent and\\nsets their isFullScreen property to true or false based on its own fullscreen input property</p>\\n","rawdescription":"\\nA component that wraps any child components of type FullscreenContentComponent and\\nsets their isFullScreen property to true or false based on its own fullscreen input property\\n","type":"component","sourceCode":"import {\\n  AfterContentInit,\\n  ChangeDetectionStrategy,\\n  Component,\\n  ContentChildren,\\n  Input,\\n  OnChanges,\\n  QueryList,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { FullscreenContentComponent } from \'./fullscreen-content.component\';\\n\\n/** A component that wraps any child components of type FullscreenContentComponent and\\n * sets their isFullScreen property to true or false based on its own fullscreen input property\\n */\\n@Component({\\n  selector: \'hra-fullscreen-container\',\\n  imports: [CommonModule, FullscreenContentComponent],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [\\n    `\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    `,\\n  ],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenContainerComponent implements AfterContentInit, OnChanges {\\n  /** A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component\'s content area */\\n  @ContentChildren(FullscreenContentComponent)\\n  readonly content?: QueryList<FullscreenContentComponent>;\\n\\n  /** A boolean input property that controls the fullscreen mode */\\n  @Input() fullscreen = false;\\n\\n  /** It calls the updateFullscreenMode method to set the isFullScreen property of the child\\n   * FullscreenContentComponent instances based on the value of the fullscreen input property\\n   */\\n  ngAfterContentInit(): void {\\n    this.updateFullscreenMode();\\n  }\\n\\n  /** It checks if the fullscreen input property has changed, and calls the updateFullscreenMode method if it has */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'fullscreen\' in changes) {\\n      this.updateFullscreenMode();\\n    }\\n  }\\n\\n  /** A private method that sets the isFullScreen property of each child FullscreenContentComponent based on the value of the fullscreen  */\\n  private updateFullscreenMode(): void {\\n    this.content?.forEach((content) => {\\n      content.isFullScreen = this.fullscreen;\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    \\n","extends":[],"implements":["AfterContentInit","OnChanges"]},{"name":"FullscreenContentComponent","id":"component-FullscreenContentComponent-39c8af58e140b74975c0fddc8a85682c02246502aae3088af1b0a412d0b6e068a04f176ac062f424ce4b16466e2261cc480bfcf1be752443c7dea296c8d1ee71","file":"libs/components/molecules/src/lib/fullscreen/fullscreen-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-content","styleUrls":["./fullscreen-content.component.scss"],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"isFullScreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":39,"rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","decorators":[{"name":"HostBinding","stringifiedArguments":"\'class.fullscreen-on\'"},{"name":"HostBinding","stringifiedArguments":"\'@animateResize\'"}],"modifierKind":[170,170]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"@animateResize","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":39,"type":"boolean","decorators":[]},{"name":"class.fullscreen-on","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":39,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>A component that displays its content in fullscreen mode when its isFullScreen property is set to true</p>\\n","rawdescription":"\\nA component that displays its content in fullscreen mode when its isFullScreen property is set to true","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { animate, state, style, transition, trigger } from \'@angular/animations\';\\n\\n/** A component that displays its content in fullscreen mode when its isFullScreen property is set to true */\\n@Component({\\n  selector: \'hra-fullscreen-content\',\\n  imports: [CommonModule],\\n  animations: [\\n    trigger(\'animateResize\', [\\n      state(\\n        \'true\',\\n        style({\\n          width: \'100%\',\\n          position: \'absolute\',\\n          right: \'0\',\\n        }),\\n      ),\\n      state(\\n        \'false\',\\n        style({\\n          width: \'46.3125rem\',\\n          position: \'absolute\',\\n          right: \'0\',\\n        }),\\n      ),\\n      transition(\'true <=> false\', [animate(\'0.5s ease\')]),\\n    ]),\\n  ],\\n  template: \'<ng-content></ng-content>\',\\n  styleUrls: [\'./fullscreen-content.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenContentComponent {\\n  /** This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true */\\n  @HostBinding(\'class.fullscreen-on\')\\n  /** This binds the isFullScreen property to the @animateResize when isFullScreen is true */\\n  @HostBinding(\'@animateResize\')\\n  isFullScreen = false;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  overflow-y: hidden;\\n  background: white;\\n}\\n","styleUrl":"./fullscreen-content.component.scss"}],"stylesData":"","extends":[]},{"name":"HeaderComponent","id":"component-HeaderComponent-f040966e18e676a28df676c5454018cb05e85c3d8d0872439b6886f589727bba4830c4b0b16e8f2c335c31011656ea1cf338a45fb0debec900f8edacee6d50d1","file":"libs/components/molecules/src/lib/header/header.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-header","styleUrls":["./header.component.scss"],"styles":[],"templateUrl":["./header.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"aboutLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for about link","description":"<p>Input for about link</p>\\n","line":39,"type":"any","decorators":[]},{"name":"appTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for app title to show on the left side.\\n","description":"<p>Input for app title to show on the left side.</p>\\n","line":33,"type":"string","decorators":[]},{"name":"hraPortal","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for HRA Portal link","description":"<p>Input for HRA Portal link</p>\\n","line":42,"type":"any","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for product logo URL to displayed on the left side.\\n","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":23,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for product title to displayed on the left side.\\n","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":28,"type":"string","decorators":[]},{"name":"productTitleLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for Product Title link","description":"<p>Input for Product Title link</p>\\n","line":36,"type":"any","decorators":[]}],"outputsClass":[{"name":"contactClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the contact button is clicked","description":"<p>Emits when the contact button is clicked</p>\\n","line":45,"type":"EventEmitter"}],"propertiesClass":[{"name":"ga","defaultValue":"inject(GoogleAnalyticsService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Google analytics tracking service</p>\\n","line":48,"rawdescription":"\\nGoogle analytics tracking service","modifierKind":[123,148]}],"methodsClass":[{"name":"aboutClicked","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":53,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs event when about button clicked\\n","description":"<p>Logs event when about button clicked</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatRippleModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Header component, displays on top of every page.</p>\\n","rawdescription":"\\n\\nHeader component, displays on top of every page.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { LinkDirective, EMPTY_LINK } from \'@hra-ui/cdk\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/**\\n * Header component, displays on top of every page.\\n */\\n@Component({\\n  selector: \'hra-header\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatRippleModule, LinkDirective],\\n  templateUrl: \'./header.component.html\',\\n  styleUrls: [\'./header.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HeaderComponent {\\n  /**\\n   * Input for product logo URL to displayed on the left side.\\n   */\\n  @Input() productLogoUrl = \'\';\\n\\n  /**\\n   * Input for product title to displayed on the left side.\\n   */\\n  @Input() productTitle = \'\';\\n\\n  /**\\n   * Input for app title to show on the left side.\\n   */\\n  @Input() appTitle = \'\';\\n\\n  /** Input for Product Title link */\\n  @Input() productTitleLink = EMPTY_LINK;\\n\\n  /** Input for about link */\\n  @Input() aboutLink = EMPTY_LINK;\\n\\n  /** Input for HRA Portal link */\\n  @Input() hraPortal = EMPTY_LINK;\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /**\\n   * Logs event when about button clicked\\n   */\\n  aboutClicked(): void {\\n    this.ga.event(\'about_icon_click\', \'link_click\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  align-items: center;\\n  height: 4rem;\\n  padding: 0 2rem;\\n\\n  @include utils.define-flex-filler();\\n\\n  h1 {\\n    // Reset margins for h1 elements\\n    margin: 0;\\n  }\\n\\n  .product {\\n    display: flex;\\n    align-items: center;\\n    text-decoration: none;\\n    // Style the ripple animation\\n    padding: 0 1rem;\\n    border-radius: 0.25rem;\\n\\n    &:hover {\\n      cursor: pointer;\\n    }\\n\\n    .text {\\n      margin-left: 1rem;\\n      font-weight: 600;\\n      color: vars.$accent-rgb;\\n    }\\n  }\\n\\n  .app {\\n    margin-left: 0.5rem;\\n  }\\n\\n  .button {\\n    background: rgba(vars.$light-dividers);\\n    height: 1.75rem;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    padding: 0;\\n    width: 7.5rem;\\n    color: rgba(vars.$primary);\\n\\n    mat-icon {\\n      height: 1rem;\\n      width: 1rem;\\n      font-size: 1rem;\\n    }\\n  }\\n\\n  .explorer {\\n    .about {\\n      display: flex;\\n      height: 100%;\\n      text-decoration: none;\\n      align-items: center;\\n      color: rgba(vars.$primary);\\n      gap: 0.25rem;\\n    }\\n  }\\n\\n  .contact {\\n    margin-left: 1rem;\\n  }\\n\\n  @media (max-width: 30rem) {\\n    height: 4.5rem;\\n\\n    .product .text,\\n    .about .text {\\n      @include utils.sr-only();\\n    }\\n\\n    .product {\\n      height: 2.5rem;\\n      padding: 0 0.25rem;\\n\\n      .logo {\\n        width: 1.5rem;\\n        height: 1.5rem;\\n      }\\n    }\\n\\n    .app {\\n      font-size: 1rem;\\n      line-height: 1.5rem;\\n    }\\n\\n    .about {\\n      min-width: 2.5rem;\\n      width: 2.5rem;\\n      height: 2.5rem;\\n      padding: 0;\\n\\n      .icon {\\n        margin: 0;\\n      }\\n    }\\n  }\\n\\n  @media (max-width: 20rem) {\\n    padding: 0;\\n  }\\n\\n  @media (max-width: 22.5rem) {\\n    padding: 0 1rem;\\n  }\\n\\n  @media (min-height: 49.5rem) {\\n    height: 4.5rem;\\n  }\\n}\\n","styleUrl":"./header.component.scss"}],"stylesData":"","extends":[],"templateData":"<a class=\\"product\\" matRipple [hraLink]=\\"productTitleLink\\">\\n  <img class=\\"logo image\\" [src]=\\"productLogoUrl\\" alt=\\"Product Logo\\" aria-hidden=\\"true\\" />\\n  <h1 class=\\"text\\">{{ productTitle }}</h1>\\n</a>\\n<h1 class=\\"app text\\">{{ appTitle }}</h1>\\n\\n<div class=\\"filler\\"></div>\\n\\n<button class=\\"button explorer\\" mat-button (click)=\\"aboutClicked()\\" disableRipple>\\n  <a class=\\"about\\" [hraLink]=\\"aboutLink\\">\\n    <mat-icon class=\\"icon\\">info_outlined</mat-icon>\\n    <span class=\\"text\\">FTU Explorer</span>\\n  </a>\\n</button>\\n\\n\x3c!-- <button class=\\"button contact\\" mat-button (mouseup)=\\"contactClick.emit()\\" disableRipple>\\n  <mat-icon>mail_outlined</mat-icon>\\n  Contact\\n</button> --\x3e\\n"},{"name":"HraLandingPageIntroWcComponent","id":"component-HraLandingPageIntroWcComponent-5ed3baf6be8747b042c0edb03c646e246310bbb6ea02c9efb320827cf1bc26048fe90d63cc787c7fc0c5021b49d1222a3acfda6c433f47f1d31eae88297763db","file":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-ui-hra-landing-page-intro-wc","styleUrls":["./hra-landing-page-intro-wc.component.scss"],"styles":[],"templateUrl":["./hra-landing-page-intro-wc.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for FTU Explorer","description":"<p>Description for FTU Explorer</p>\\n","line":18,"type":"string","decorators":[]},{"name":"partners","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThank you message to partners","description":"<p>Thank you message to partners</p>\\n","line":21,"type":"string","decorators":[]},{"name":"readMore","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro Image file url","description":"<p>Intro Image file url</p>\\n","line":24,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro title for FTU Explorer","description":"<p>Intro title for FTU Explorer</p>\\n","line":15,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"}],"description":"<p>Component for LandingPage Intro - Web coomponent</p>\\n","rawdescription":"\\nComponent for LandingPage Intro - Web coomponent","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Component for LandingPage Intro - Web coomponent */\\n@Component({\\n  selector: \'hra-ui-hra-landing-page-intro-wc\',\\n  imports: [CommonModule, MarkdownModule],\\n  templateUrl: \'./hra-landing-page-intro-wc.component.html\',\\n  styleUrls: [\'./hra-landing-page-intro-wc.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HraLandingPageIntroWcComponent {\\n  /** Intro title for FTU Explorer */\\n  @Input() title = \'\';\\n\\n  /** Description for FTU Explorer */\\n  @Input() description = \'\';\\n\\n  /** Thank you message to partners */\\n  @Input() partners = \'\';\\n\\n  /** Intro Image file url */\\n  @Input() readMore = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  gap: 0.5rem;\\n  padding: 1.5rem 2rem 1.5rem 2rem;\\n  display: flex;\\n  flex-wrap: wrap;\\n\\n  .title {\\n    width: 100%;\\n    font-size: 1.5rem;\\n    font-weight: 400;\\n    line-height: 1.5rem;\\n    letter-spacing: 0em;\\n    text-align: left;\\n  }\\n\\n  .description .partners .readMore {\\n    font-size: 1rem;\\n    font-weight: 400;\\n    line-height: 1.5rem;\\n    letter-spacing: 0em;\\n    text-align: left;\\n  }\\n  ::ng-deep a {\\n    color: vars.$primary-rgb;\\n    font-weight: 700;\\n  }\\n  ::ng-deep p {\\n    margin: 0;\\n  }\\n}\\n","styleUrl":"./hra-landing-page-intro-wc.component.scss"}],"stylesData":"","extends":[],"templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n\\n<markdown class=\\"readMore\\" [data]=\\"readMore\\"></markdown>\\n\\n<markdown class=\\"partners\\" [data]=\\"partners\\"></markdown>\\n"},{"name":"InfoModalComponent","id":"component-InfoModalComponent-1d3a8c223b5084da9139be6c8f9bbea002e468fc7a1c020295f1fb8c6ee9e2b5b57c3dd16f88b15a54427548f685b5a6f838700d16c537642c856d9c4a7d67e9","file":"libs/components/molecules/src/lib/info-modal/info-modal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-info-modal","styleUrls":["./info-modal.component.scss"],"styles":[],"templateUrl":["./info-modal.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInformation modal message to the user","description":"<p>Information modal message to the user</p>\\n","line":23,"type":"string","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nProduct logo shown to the user","description":"<p>Product logo shown to the user</p>\\n","line":20,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nProduct title shown to the user","description":"<p>Product title shown to the user</p>\\n","line":17,"type":"string","decorators":[]}],"outputsClass":[{"name":"closeClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the close icon is clicked","description":"<p>Emits when the close icon is clicked</p>\\n","line":26,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MarkdownModule","type":"module"}],"description":"<p>Displays an information modal to the user with the product title and logo and description</p>\\n","rawdescription":"\\nDisplays an information modal to the user with the product title and logo and description","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Displays an information modal to the user with the product title and logo and description */\\n@Component({\\n  selector: \'hra-info-modal\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule],\\n  templateUrl: \'./info-modal.component.html\',\\n  styleUrls: [\'./info-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class InfoModalComponent {\\n  /** Product title shown to the user */\\n  @Input() productTitle = \'\';\\n\\n  /** Product logo shown to the user */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Information modal message to the user */\\n  @Input() description = \'\';\\n\\n  /** Emits when the close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  position: relative;\\n  padding: 2rem 2rem 1.25rem 2rem;\\n\\n  .close {\\n    position: absolute;\\n    top: 1.5rem;\\n    right: 1.5rem;\\n  }\\n\\n  .title {\\n    display: flex;\\n    align-items: center;\\n\\n    .product-logo-image {\\n      height: 2.75rem;\\n      margin-right: 1rem;\\n    }\\n\\n    .product-title {\\n      margin: 0;\\n      color: #990000;\\n    }\\n  }\\n\\n  .description {\\n    display: block;\\n    margin-top: 1rem;\\n  }\\n}\\n","styleUrl":"./info-modal.component.scss"}],"stylesData":"","extends":[],"templateData":"<a class=\\"title\\">\\n  <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n  <h2 class=\\"product-title\\">{{ productTitle }}</h2>\\n</a>\\n\\n<button mat-icon-button class=\\"close\\" (click)=\\"closeClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n"},{"name":"InteractiveSvgComponent","id":"component-InteractiveSvgComponent-da5275c19f5af9ef7ba59c9787836ced9a7c6c2be9a2becafca81f532e1934801a74c2d695b5094f7a48f71b15bf21e295279452b6e8486affb89a5c2a2bf3b0","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.ShadowDom"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-interactive-svg","styleUrls":["./interactive-svg.component.scss"],"styles":[],"templateUrl":["./interactive-svg.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"highlightId","deprecated":false,"deprecationMessage":"","rawdescription":"\\nHighlighted ontology id","description":"<p>Highlighted ontology id</p>\\n","line":95,"type":"string","decorators":[]},{"name":"mapping","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMapping info","description":"<p>Mapping info</p>\\n","line":92,"type":"T[]","decorators":[]},{"name":"url","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSVG url","description":"<p>SVG url</p>\\n","line":89,"type":"string","decorators":[]}],"outputsClass":[{"name":"nodeClick","defaultValue":"new EventEmitter<T>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits node id when clicked","description":"<p>Emits node id when clicked</p>\\n","line":101,"type":"EventEmitter"},{"name":"nodeHover","defaultValue":"new EventEmitter<T | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits node id when hovered","description":"<p>Emits node id when hovered</p>\\n","line":98,"type":"EventEmitter"}],"propertiesClass":[{"name":"crosswalkEl","deprecated":false,"deprecationMessage":"","type":"Element","indexKey":"","optional":true,"description":"<p>Crosswalk element of svg</p>\\n","line":122,"rawdescription":"\\nCrosswalk element of svg","modifierKind":[123]},{"name":"destroy$","defaultValue":"new Subject<void>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Destroys</p>\\n","line":119,"rawdescription":"\\nDestroys","modifierKind":[123]},{"name":"highlightedElements","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"Element[]","indexKey":"","optional":false,"description":"<p>List of highlighted svg elements</p>\\n","line":125,"rawdescription":"\\nList of highlighted svg elements","modifierKind":[123]},{"name":"NEVER_EVAL_SCRIPTS","defaultValue":"SVGScriptEvalMode.NEVER","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>SVG script eval mode</p>\\n","line":104,"rawdescription":"\\nSVG script eval mode","modifierKind":[148]},{"name":"nodeHoverData$","defaultValue":"new BehaviorSubject<NodeTooltipData | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Observable of node hover data or undefined when there is no active hover</p>\\n","line":110,"rawdescription":"\\nObservable of node hover data or undefined when there is no active hover","modifierKind":[148]},{"name":"nodeHoverDelayedData$","defaultValue":"this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)))","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Observable of node hover with a timer</p>\\n","line":113,"rawdescription":"\\nObservable of node hover with a timer","modifierKind":[148]},{"name":"renderer","defaultValue":"inject(Renderer2)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Custom renderer</p>\\n","line":116,"rawdescription":"\\nCustom renderer","modifierKind":[123,148]},{"name":"TOOLTIP_POSITIONS","defaultValue":"TOOLTIP_POSITIONS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Tooltip position settings</p>\\n","line":107,"rawdescription":"\\nTooltip position settings","modifierKind":[148]}],"methodsClass":[{"name":"attachCrosswalkHover","args":[{"name":"el","type":"Element","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":206,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAttaches crosswalk hover\\n","description":"<p>Attaches crosswalk hover</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":5314,"end":5316,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"el"},"type":"Element","deprecated":false,"deprecationMessage":"","tagName":{"pos":5308,"end":5313,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>element</p>\\n"}]},{"name":"attachEvent","args":[{"name":"el","type":"Element","deprecated":false,"deprecationMessage":""},{"name":"event","type":"K","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<>","typeParameters":["K"],"line":299,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAttaches an event listener\\n","description":"<p>Attaches an event listener</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":8142,"end":8144,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"el"},"type":"Element","deprecated":false,"deprecationMessage":"","tagName":{"pos":8136,"end":8141,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Element</p>\\n"},{"name":{"pos":8165,"end":8170,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"K","deprecated":false,"deprecationMessage":"","tagName":{"pos":8159,"end":8164,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Event</p>\\n"},{"tagName":{"pos":8183,"end":8190,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Observable</p>\\n"}]},{"name":"clear","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":238,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nClears observables\\n","description":"<p>Clears observables</p>\\n","modifierKind":[123]},{"name":"decodeId","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":277,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDecodes id into a normal string\\n","description":"<p>Decodes id into a normal string</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":7546,"end":7548,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7540,"end":7545,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Undecoded ID</p>\\n"},{"tagName":{"pos":7568,"end":7575,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>id</p>\\n"}]},{"name":"encodeId","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":287,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTurns normal string into decoded SVG id\\n","description":"<p>Turns normal string into decoded SVG id</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":7847,"end":7849,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":7841,"end":7846,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>id</p>\\n"},{"tagName":{"pos":7859,"end":7866,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Encoded id</p>\\n"}]},{"name":"formatNodeName","args":[{"name":"name","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":198,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRemoves underscores from id\\n","description":"<p>Removes underscores from id</p>\\n","jsdoctags":[{"name":{"pos":5119,"end":5123,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"name"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":5113,"end":5118,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Node name</p>\\n"},{"tagName":{"pos":5140,"end":5147,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>node name without underscores</p>\\n"}]},{"name":"getNode","args":[{"name":"event","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"T | undefined","typeParameters":[],"line":249,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns entry from mapping if target, parent, or grandparent id matches the node name\\n","description":"<p>Returns entry from mapping if target, parent, or grandparent id matches the node name</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":6507,"end":6512,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"pos":6501,"end":6506,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Event</p>\\n"},{"tagName":{"pos":6525,"end":6532,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Node entry that matches the target id</p>\\n"}]},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":131,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates the highlighting based on current highlight id\\n","description":"<p>Updates the highlighting based on current highlight id</p>\\n","jsdoctags":[{"name":{"pos":3389,"end":3396,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"changes"},"type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"pos":3383,"end":3388,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":174,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nClears observables on destroy\\n","description":"<p>Clears observables on destroy</p>\\n"},{"name":"onCrosswalkHover","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":216,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nFinds matching node in data from a hovered element\\n","description":"<p>Finds matching node in data from a hovered element</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":5761,"end":5766,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":5755,"end":5760,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Mouse event</p>\\n"}]},{"name":"resetHighlight","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":164,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nResets all highlighted elements in the svg\\n","description":"<p>Resets all highlighted elements in the svg</p>\\n","modifierKind":[123]},{"name":"setHighlight","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":141,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHighlights cells that match highlightId\\n","description":"<p>Highlights cells that match highlightId</p>\\n","modifierKind":[123]},{"name":"setSvgElement","args":[{"name":"el","type":"SVGElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":182,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSets SVG element\\n","description":"<p>Sets SVG element</p>\\n","jsdoctags":[{"name":{"pos":4694,"end":4696,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"el"},"type":"SVGElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":4688,"end":4693,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>SVG element</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"InlineSVGModule","type":"module"},{"name":"OverlayModule","type":"module"},{"name":"TooltipComponent","type":"component"}],"description":"<p>Interactive SVG component</p>\\n","rawdescription":"\\n\\nInteractive SVG component\\n","type":"component","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  SimpleChanges,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { TooltipComponent } from \'@hra-ui/components/atoms\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node id in svg */\\n  id: string;\\n  /** Node group id */\\n  groupId: string;\\n  /** Ontology id of cell type */\\n  ontologyId: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.ShadowDom,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Highlighted ontology id */\\n  @Input() highlightId?: string;\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\\n\\n  /** Emits node id when clicked */\\n  @Output() readonly nodeClick = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /** Crosswalk element of svg */\\n  private crosswalkEl?: Element;\\n\\n  /** List of highlighted svg elements */\\n  private highlightedElements: Element[] = [];\\n\\n  /**\\n   * Updates the highlighting based on current highlight id\\n   * @param changes\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'highlightId\' in changes) {\\n      this.resetHighlight();\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Highlights cells that match highlightId\\n   */\\n  private setHighlight() {\\n    const { mapping, highlightId, crosswalkEl } = this;\\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\\n    if (!entry || !crosswalkEl) {\\n      return;\\n    }\\n\\n    const encodedId = this.encodeId(entry.id);\\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\\n    if (!element) {\\n      return;\\n    }\\n\\n    const gElement = element.nodeName === \'g\' ? element : (element.parentElement as Element);\\n    const id = gElement.id;\\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\\n    this.highlightedElements = Array.from(elements);\\n    elements.forEach((el) => el.classList.add(\'click-active\'));\\n  }\\n\\n  /**\\n   * Resets all highlighted elements in the svg\\n   */\\n  private resetHighlight(): void {\\n    for (const el of this.highlightedElements) {\\n      el.classList.remove(\'click-active\');\\n    }\\n    this.highlightedElements = [];\\n  }\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    this.crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\') ?? undefined;\\n    if (this.crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, this.crosswalkEl);\\n      this.attachCrosswalkHover(this.crosswalkEl);\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe((event) => this.onCrosswalkHover(event));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\\n    this.attachEvent(el, \'click\').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    if (event) {\\n      const node = this.getNode(event);\\n      if (node) {\\n        this.nodeHoverData$.next({\\n          node: node.label,\\n          origin: {\\n            x: event.clientX,\\n            y: event.clientY,\\n          },\\n        });\\n        this.nodeHover.emit(node); //emits node entry\\n      }\\n    } else {\\n      this.nodeHoverData$.next(undefined);\\n      this.nodeHover.emit();\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const cellMatch = this.mapping.find(\\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\\n      );\\n      if (cellMatch) {\\n        return cellMatch;\\n      }\\n      const groupMatch = this.mapping.find(\\n        (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\\n      );\\n      if (groupMatch) {\\n        return groupMatch;\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Turns normal string into decoded SVG id\\n   * @param id id\\n   * @returns Encoded id\\n   */\\n  private encodeId(id: string): string {\\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\\n    return id.replace(/[^a-z0-9-]/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".svg {\\n  height: 100%;\\n  width: 100%;\\n  max-width: 100%;\\n  max-height: 100%;\\n}\\n\\nsvg {\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n#Crosswalk {\\n  :is(path, polygon, polyline),\\n  .hover-active & .inset-group:hover :is(path, polygon, polyline) {\\n    fill: transparent;\\n    stroke: transparent;\\n  }\\n\\n  .hover-active & g:hover :is(path, polygon, polyline),\\n  .hover-active & .inset-group > g:hover :is(path, polygon, polyline),\\n  .click-active {\\n    fill: hsl(0deg 100% 50%);\\n    mix-blend-mode: saturation;\\n  }\\n}\\n\\n::-webkit-scrollbar {\\n  width: 0.5rem;\\n  height: 0.5rem;\\n}\\n\\n::-webkit-scrollbar-track {\\n  background: #f8f9fa;\\n  border: 0.063rem solid #d3d3d3;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n  background: #a0abb4;\\n  border-radius: 0.5rem;\\n}\\n","styleUrl":"./interactive-svg.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges","OnDestroy"],"templateData":"<div\\n  *ngIf=\\"url\\"\\n  class=\\"svg\\"\\n  [class.hover-active]=\\"nodeHoverData$ | async\\"\\n  [inlineSVG]=\\"url\\"\\n  [evalScripts]=\\"NEVER_EVAL_SCRIPTS\\"\\n  (onSVGInserted)=\\"setSvgElement($event)\\"\\n></div>\\n\\n<ng-container *ngIf=\\"nodeHoverDelayedData$ | async as hover\\">\\n  <ng-template\\n    cdkConnectedOverlay\\n    cdkConnectedOverlayPanelClass=\\"hra-interactive-svg-tooltip-panel\\"\\n    [cdkConnectedOverlayOrigin]=\\"hover.origin\\"\\n    [cdkConnectedOverlayPositions]=\\"TOOLTIP_POSITIONS\\"\\n    [cdkConnectedOverlayViewportMargin]=\\"16\\"\\n    [cdkConnectedOverlayOpen]=\\"true\\"\\n  >\\n    <hra-ui-tooltip [text]=\\"formatNodeName(hover.node)\\"></hra-ui-tooltip>\\n  </ng-template>\\n</ng-container>\\n"},{"name":"LandingPageInDepthComponent","id":"component-LandingPageInDepthComponent-19cb2e87ce03eb318eb1c32f280fcf34aea8bc37730c27bbcdee73c436cab1e943f70d71b222afbfc054359f08d1cf24b67e7afc34ae5897a37a35f91ec46d78","file":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-landing-page-in-depth","styleUrls":["./landing-page-in-depth.component.scss"],"styles":[],"templateUrl":["./landing-page-in-depth.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage description shown to the user","description":"<p>Image description shown to the user</p>\\n","line":23,"type":"string","decorators":[]},{"name":"img","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage shown to the user","description":"<p>Image shown to the user</p>\\n","line":26,"type":"string","decorators":[]},{"name":"moreLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLink to navigate to on more button click","description":"<p>Link to navigate to on more button click</p>\\n","line":32,"type":"any","decorators":[]},{"name":"moreText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText for more button","description":"<p>Text for more button</p>\\n","line":29,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage title shown to the user","description":"<p>Image title shown to the user</p>\\n","line":20,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Displays the image and also corresponding title and text along with a button to read more</p>\\n","rawdescription":"\\n\\nDisplays the image and also corresponding title and text along with a button to read more\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n * Displays the image and also corresponding title and text along with a button to read more\\n */\\n@Component({\\n  selector: \'hra-landing-page-in-depth\',\\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\\n  templateUrl: \'./landing-page-in-depth.component.html\',\\n  styleUrls: [\'./landing-page-in-depth.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageInDepthComponent {\\n  /**  Image title shown to the user */\\n  @Input() title = \'\';\\n\\n  /** Image description shown to the user */\\n  @Input() description = \'\';\\n\\n  /** Image shown to the user */\\n  @Input() img = \'\';\\n\\n  /** Text for more button */\\n  @Input() moreText = \'\';\\n\\n  /** Link to navigate to on more button click */\\n  @Input() moreLink = EMPTY_LINK;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 2fr 3fr;\\n  grid-template-rows: 0fr 0fr 1fr;\\n  column-gap: 4rem;\\n  row-gap: 2rem;\\n  padding: 3.5rem 6rem;\\n  max-height: 30rem;\\n\\n  .image {\\n    grid-column: 1;\\n    grid-row: 1 / span 3;\\n    width: 100%;\\n    height: 100%;\\n    align-self: center;\\n    border-radius: 1rem;\\n    box-shadow: 0.06rem 0.13rem 1rem 0.13rem #00000029;\\n  }\\n\\n  .title {\\n    font-size: 2rem;\\n    line-height: 2.5rem;\\n    margin: 0;\\n  }\\n\\n  .description {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n\\n    ::ng-deep p {\\n      margin: 0;\\n    }\\n\\n    ::ng-deep a {\\n      color: vars.$primary-rgb;\\n      font-weight: 700;\\n    }\\n  }\\n\\n  .more-button {\\n    width: fit-content;\\n    height: 3rem;\\n  }\\n\\n  @media (max-width: 1400px) {\\n    grid-template-columns: 1.8fr 1fr;\\n    grid-template-rows: auto auto 3rem;\\n    column-gap: 2rem;\\n    padding: 3.5rem 2rem;\\n    max-height: unset;\\n\\n    .title {\\n      font-size: 1.5rem;\\n      line-height: normal;\\n    }\\n  }\\n\\n  @media (max-width: 1280px) {\\n    grid-template-columns: unset;\\n    text-align: center;\\n\\n    .image {\\n      max-height: 22rem;\\n      width: auto;\\n    }\\n\\n    .image,\\n    .more-button {\\n      place-self: center;\\n    }\\n  }\\n}\\n","styleUrl":"./landing-page-in-depth.component.scss"}],"stylesData":"","extends":[],"templateData":"<img class=\\"image\\" [src]=\\"img\\" alt=\\"\\" />\\n<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n<button mat-flat-button class=\\"more-button\\" color=\\"primary\\" [hraLink]=\\"moreLink\\">\\n  {{ moreText }}\\n</button>\\n"},{"name":"LandingPageIntroComponent","id":"component-LandingPageIntroComponent-f098636dd31298c7afc11e8d1c5c66c6babed02fe8e9b713eac814d83edc629fca8eb62b5ae1f03c7b4e2270d9b8da772b20b6ab6be32924373e68da793ec96f","file":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-landing-page-intro","styleUrls":["./landing-page-intro.component.scss"],"styles":[],"templateUrl":["./landing-page-intro.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for FTU Explorer","description":"<p>Description for FTU Explorer</p>\\n","line":21,"type":"string","decorators":[]},{"name":"img","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro Image file url","description":"<p>Intro Image file url</p>\\n","line":27,"type":"string","decorators":[]},{"name":"moreLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLink to navigate to on more button click","description":"<p>Link to navigate to on more button click</p>\\n","line":33,"type":"any","decorators":[]},{"name":"moreText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText for more button","description":"<p>Text for more button</p>\\n","line":30,"type":"string","decorators":[]},{"name":"partners","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThank you message to partners","description":"<p>Thank you message to partners</p>\\n","line":24,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro title for FTU Explorer","description":"<p>Intro title for FTU Explorer</p>\\n","line":18,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MarkdownModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Component for LandingPage Intro</p>\\n","rawdescription":"\\nComponent for LandingPage Intro","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Component for LandingPage Intro */\\n@Component({\\n  selector: \'hra-landing-page-intro\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule, LinkDirective],\\n  templateUrl: \'./landing-page-intro.component.html\',\\n  styleUrls: [\'./landing-page-intro.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageIntroComponent {\\n  /** Intro title for FTU Explorer */\\n  @Input() title = \'\';\\n\\n  /** Description for FTU Explorer */\\n  @Input() description = \'\';\\n\\n  /** Thank you message to partners */\\n  @Input() partners = \'\';\\n\\n  /** Intro Image file url */\\n  @Input() img = \'\';\\n\\n  /** Text for more button */\\n  @Input() moreText = \'\';\\n\\n  /** Link to navigate to on more button click */\\n  @Input() moreLink = EMPTY_LINK;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 3fr 2fr;\\n  grid-template-rows: auto auto 3rem 1fr;\\n  align-items: start;\\n  column-gap: 2rem;\\n  row-gap: 2rem;\\n\\n  .title {\\n    font-size: 3rem;\\n    line-height: 4rem;\\n    margin: 0;\\n  }\\n\\n  .more-button {\\n    width: fit-content;\\n    height: 3rem;\\n  }\\n\\n  .image {\\n    grid-column: 2;\\n    grid-row: 1 / span 4;\\n    place-self: center;\\n    width: 100%;\\n    min-height: 23rem;\\n    max-height: 27rem;\\n  }\\n\\n  .description,\\n  .partners {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n\\n    ::ng-deep p {\\n      margin: 0;\\n    }\\n\\n    ::ng-deep a {\\n      color: vars.$primary-rgb;\\n      font-weight: 700;\\n    }\\n  }\\n\\n  mat-icon {\\n    font-size: 1.5rem;\\n    height: fit-content;\\n    width: fit-content;\\n    padding-right: 0.5rem;\\n    margin-left: 0.25rem !important;\\n  }\\n\\n  .red-theme {\\n    background-color: #990000;\\n    border-color: #990000;\\n    &:hover {\\n      background-color: #800000;\\n      border-color: #800000;\\n\\n      mat-icon {\\n        transform: translateX(30%);\\n        transition: 0.5s;\\n      }\\n    }\\n\\n    &:active,\\n    &:focus {\\n      background-color: #990000;\\n      border-color: #990000;\\n\\n      ::ng-deep .mat-mdc-focus-indicator {\\n        background-color: #990000 !important;\\n        border-color: #990000;\\n      }\\n    }\\n\\n    &:active {\\n      background-color: #ffffff;\\n      color: #990000;\\n\\n      ::ng-deep .mat-mdc-focus-indicator {\\n        background-color: #ffffff !important;\\n        border: 2px solid;\\n      }\\n    }\\n\\n    &:disabled {\\n      background-color: #ffd6db;\\n      border: 1px solid #ffd6db;\\n    }\\n  }\\n\\n  @media (max-width: 1400px) {\\n    .title {\\n      font-size: 2rem;\\n      line-height: normal;\\n    }\\n  }\\n\\n  @media (max-width: 1280px) {\\n    grid-template-columns: unset;\\n\\n    .image {\\n      grid-column: 1;\\n      grid-row: 5 / span 1;\\n    }\\n  }\\n}\\n","styleUrl":"./landing-page-intro.component.scss"}],"stylesData":"","extends":[],"templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n\\n<button mat-flat-button class=\\"more-button red-theme\\" color=\\"primary\\" [hraLink]=\\"moreLink\\">\\n  {{ moreText }}\\n  <mat-icon iconPositionEnd>arrow_forward</mat-icon>\\n</button>\\n<markdown class=\\"partners\\" [data]=\\"partners\\"></markdown>\\n\\n<img class=\\"image\\" [src]=\\"img\\" alt=\\"alt\\" />\\n"},{"name":"MetricsComponent","id":"component-MetricsComponent-d877d63626a0b1b5cd855f7aa7f9f09758ae9e6469a07ba7b48860ca5387606caa9ae0c2e9b44170d4419c78a5035af5762a8116e10efa82ee0fe3a56f5d97db","file":"libs/components/molecules/src/lib/metrics/metrics.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-metrics","styleUrls":["./metrics.component.scss"],"styles":[],"templateUrl":["./metrics.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"baseHref","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nBase url","description":"<p>Base url</p>\\n","line":36,"type":"string","decorators":[]},{"name":"logo","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLogo of metrics component.","description":"<p>Logo of metrics component.</p>\\n","line":30,"type":"string","decorators":[]},{"name":"metrics","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nList of metrics that will be shown to the user.","description":"<p>List of metrics that will be shown to the user.</p>\\n","line":33,"type":"MetricItem[]","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMain title of metrics component.","description":"<p>Main title of metrics component.</p>\\n","line":27,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Describes the metrics for the HuBMAP project.</p>\\n","rawdescription":"\\n\\nDescribes the metrics for the HuBMAP project.\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n  An interface representing a single metric with an icon, value and description.\\n */\\nexport interface MetricItem {\\n  /** Represents the icon associated with the metric. */\\n  icon: string;\\n  /** Describes the numberical value of the metric. */\\n  value: string;\\n  /** Describes the type of metric. */\\n  description: string;\\n}\\n/**\\n * Describes the metrics for the HuBMAP project.\\n */\\n@Component({\\n  selector: \'hra-metrics\',\\n  imports: [CommonModule],\\n  templateUrl: \'./metrics.component.html\',\\n  styleUrls: [\'./metrics.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MetricsComponent {\\n  /** Main title of metrics component. */\\n  @Input() title = \'\';\\n\\n  /** Logo of metrics component. */\\n  @Input() logo = \'\';\\n\\n  /** List of metrics that will be shown to the user. */\\n  @Input() metrics: MetricItem[] = [];\\n\\n  /** Base url */\\n  @Input() baseHref = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  padding: 2rem 0 0 0;\\n  background: #f8f9fa;\\n  gap: 0.5rem;\\n\\n  .logo {\\n    height: 2.75rem;\\n  }\\n\\n  .header-title {\\n    font-size: 2rem;\\n    line-height: 2.5rem;\\n    text-align: center;\\n  }\\n\\n  .metrics {\\n    display: flex;\\n    flex-direction: row;\\n    width: 100%;\\n    gap: 3%;\\n    padding: 2rem 1.75rem;\\n\\n    .metric {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      min-width: calc(100% / 7);\\n      height: 14.75rem;\\n      padding-top: 2rem;\\n      padding-bottom: 2rem;\\n\\n      .logo {\\n        margin-bottom: 2rem;\\n      }\\n\\n      .value {\\n        font-size: 3rem;\\n        line-height: 4rem;\\n        margin-bottom: 0.25rem;\\n      }\\n\\n      .description {\\n        font-size: 1rem;\\n        text-align: center;\\n      }\\n    }\\n  }\\n\\n  @media (max-width: 1400px) {\\n    .metrics {\\n      flex-wrap: wrap;\\n\\n      .metric {\\n        width: 31%;\\n      }\\n    }\\n  }\\n}\\n","styleUrl":"./metrics.component.scss"}],"stylesData":"","extends":[],"templateData":"<img class=\\"logo\\" [src]=\\"logo\\" alt=\\"\\" />\\n<span class=\\"header-title\\">{{ title }}</span>\\n\\n<div class=\\"metrics\\">\\n  <div class=\\"metric\\" *ngFor=\\"let item of metrics\\">\\n    <img class=\\"logo\\" [src]=\\"baseHref + item.icon\\" alt=\\"\\" />\\n    <span class=\\"value\\"> {{ item.value }} </span>\\n    <span class=\\"description\\"> {{ item.description }} </span>\\n  </div>\\n</div>\\n"},{"name":"ScreenSizeNoticeComponent","id":"component-ScreenSizeNoticeComponent-ebc9b4df72a66eb4b841157b9c7f3f97844b8b37fd92445f3d376be8dc3965d8465a0ba1e9dbff708a5f324337c37f8355c61f09de6904a4684aa83ee8894b98","file":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-screen-size-notice","styleUrls":["./screen-size-notice.component.scss"],"styles":[],"templateUrl":["./screen-size-notice.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"content","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for passing screen size notice content\\n","description":"<p>Input for passing screen size notice content</p>\\n","line":22,"type":"string","decorators":[]},{"name":"portal","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  of screen size notice component\\n","description":"<p>Input  of screen size notice component</p>\\n","line":27,"type":"any","decorators":[]}],"outputsClass":[{"name":"proceedClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the proceed button is clicked","description":"<p>Emits when the proceed button is clicked</p>\\n","line":30,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>The screen size notice component displays a notice for the users specifying the required screen size</p>\\n","rawdescription":"\\n\\nThe screen size notice component displays a notice for the users specifying the required screen size\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\n\\n/**\\n * The screen size notice component displays a notice for the users specifying the required screen size\\n */\\n@Component({\\n  selector: \'hra-screen-size-notice\',\\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\\n  templateUrl: \'./screen-size-notice.component.html\',\\n  styleUrls: [\'./screen-size-notice.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScreenSizeNoticeComponent {\\n  /**\\n   * Input for passing screen size notice content\\n   */\\n  @Input() content = \'\';\\n\\n  /**\\n   * Input  of screen size notice component\\n   */\\n  @Input() portal = EMPTY_LINK;\\n\\n  /** Emits when the proceed button is clicked */\\n  @Output() readonly proceedClick = new EventEmitter<void>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: none;\\n  position: relative;\\n  border-radius: 0.5rem;\\n  padding: 1.5rem;\\n  flex-direction: column;\\n  max-width: 30rem;\\n\\n  .header-close {\\n    position: absolute;\\n    top: 1.125rem;\\n    right: 1rem;\\n  }\\n\\n  h3 {\\n    margin: 0;\\n    height: 2.5rem;\\n    line-height: 2.5rem;\\n  }\\n\\n  button {\\n    height: 3rem;\\n    padding: 0.75rem 0;\\n    letter-spacing: 0.5px;\\n  }\\n\\n  .btn-stroked {\\n    margin-bottom: 1rem;\\n  }\\n\\n  .content {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n    letter-spacing: 0.5px;\\n  }\\n\\n  @media (max-width: 1279px) {\\n    display: flex;\\n  }\\n}\\n","styleUrl":"./screen-size-notice.component.scss"}],"stylesData":"","extends":[],"templateData":"<h3>Screen Size Notice</h3>\\n<button mat-icon-button class=\\"header-close\\" (click)=\\"proceedClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n<markdown [data]=\\"content\\" class=\\"content\\"></markdown>\\n<button mat-stroked-button color=\\"accent\\" class=\\"btn-stroked\\" (click)=\\"proceedClick.emit()\\">\\n  Proceed to FTU Explorer\\n</button>\\n<button mat-flat-button color=\\"primary\\" class=\\"btn-flat\\" [hraLink]=\\"portal\\">Human Reference Atlas Portal</button>\\n"},{"name":"SourceListComponent","id":"component-SourceListComponent-3f56281b3b2ba13bbb5c2b3896e7661ecb6baf009396cc0d9bf528b27260fe5ca67e778f87ea15a75a8f3780e63190d925f72bd25199f65b464b313b2da3ffa5","file":"libs/components/molecules/src/lib/source-list/source-list.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-source-list","styleUrls":["./source-list.component.scss"],"styles":[],"templateUrl":["./source-list.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"collaborateText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText that appears in the empty biomarker collaborate button","description":"<p>Text that appears in the empty biomarker collaborate button</p>\\n","line":62,"type":"string","decorators":[]},{"name":"message","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText that appears in the empty biomarker message","description":"<p>Text that appears in the empty biomarker message</p>\\n","line":65,"type":"string","decorators":[]},{"name":"sources","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nList of sources with titles and links displayed to the user","description":"<p>List of sources with titles and links displayed to the user</p>\\n","line":59,"type":"T[]","decorators":[]}],"outputsClass":[{"name":"collaborateClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the contact button is clicked","description":"<p>Emits when the contact button is clicked</p>\\n","line":80,"type":"EventEmitter"},{"name":"selectionChanged","defaultValue":"new EventEmitter<T[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when source selection changed","description":"<p>Emits when source selection changed</p>\\n","line":83,"type":"EventEmitter"}],"propertiesClass":[{"name":"dataSource","defaultValue":"new MatTableDataSource<T>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Data source for table</p>\\n","line":74,"rawdescription":"\\nData source for table"},{"name":"displayedColumns","defaultValue":"[\'select\', \'authors\', \'year\', \'title\', \'link\']","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":false,"description":"<p>Columns to display in the sources list</p>\\n","line":77,"rawdescription":"\\nColumns to display in the sources list"},{"name":"ga","defaultValue":"inject(GoogleAnalyticsService)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Google analytics tracking service</p>\\n","line":91,"rawdescription":"\\nGoogle analytics tracking service","modifierKind":[123,148]},{"name":"selection","defaultValue":"new SelectionModel<T>(true, [])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current source selection</p>\\n","line":71,"rawdescription":"\\nCurrent source selection"},{"name":"showTable","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether to show the biomarker table</p>\\n","line":68,"rawdescription":"\\nWhether to show the biomarker table"}],"methodsClass":[{"name":"isAllSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":120,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nWhether the number of selected elements matches the total number of rows.","description":"<p>Whether the number of selected elements matches the total number of rows.</p>\\n"},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":94,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nOn sources change, resets selection and selects all sources","description":"<p>On sources change, resets selection and selects all sources</p>\\n","jsdoctags":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"sourceLinkClicked","args":[{"name":"item","type":"SourceListItem","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":115,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs source link click\\n","description":"<p>Logs source link click</p>\\n","jsdoctags":[{"name":{"pos":3453,"end":3457,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"item"},"type":"SourceListItem","deprecated":false,"deprecationMessage":"","tagName":{"pos":3447,"end":3452,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Source list item</p>\\n"}]},{"name":"toggleAllRows","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":127,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nSelects all rows if they are not all selected; otherwise clear selection.","description":"<p>Selects all rows if they are not all selected; otherwise clear selection.</p>\\n"},{"name":"toggleRow","args":[{"name":"row","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":139,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nToggles selection status of a row","description":"<p>Toggles selection status of a row</p>\\n","jsdoctags":[{"name":"row","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"toggleTable","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":106,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt changes the value of showTable to false if value it true\\nand vice versa\\n","description":"<p>It changes the value of showTable to false if value it true\\nand vice versa</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatTableModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatSortModule","type":"module"},{"name":"LabelBoxComponent","type":"component"},{"name":"EmptyBiomarkerComponent","type":"component"},{"name":"MatCheckboxModule","type":"module"},{"name":"HoverDirective","type":"directive"}],"description":"<p>This component shows list of sources with title and links to the datasets</p>\\n","rawdescription":"\\nThis component shows list of sources with title and links to the datasets","type":"component","sourceCode":"import { SelectionModel } from \'@angular/cdk/collections\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatCheckboxModule } from \'@angular/material/checkbox\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatSort, MatSortModule } from \'@angular/material/sort\';\\nimport { MatTableDataSource, MatTableModule } from \'@angular/material/table\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { EmptyBiomarkerComponent, LabelBoxComponent } from \'@hra-ui/components/atoms\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\\nexport interface SourceListItem {\\n  /** List of authors for the source */\\n  authors: string[];\\n  /** Year dataset was released */\\n  year: number;\\n  /** Title of the dataset in the SourceList */\\n  title: string;\\n  /** DOI of dataset */\\n  doi: string;\\n  /** Label of the dataset in the SourceList */\\n  label: string;\\n  /** Link to the dataset in the SourceList */\\n  link: string;\\n}\\n\\n/** This component shows list of sources with title and links to the datasets */\\n@Component({\\n  selector: \'hra-source-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTableModule,\\n    MatIconModule,\\n    MatSortModule,\\n    LabelBoxComponent,\\n    EmptyBiomarkerComponent,\\n    MatCheckboxModule,\\n    HoverDirective,\\n  ],\\n  templateUrl: \'./source-list.component.html\',\\n  styleUrls: [\'./source-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SourceListComponent<T extends SourceListItem> implements OnChanges {\\n  /** List of sources with titles and links displayed to the user */\\n  @Input() sources: T[] = [];\\n\\n  /** Text that appears in the empty biomarker collaborate button */\\n  @Input() collaborateText = \'\';\\n\\n  /** Text that appears in the empty biomarker message */\\n  @Input() message = \'\';\\n\\n  /** Whether to show the biomarker table */\\n  showTable = true;\\n\\n  /** Current source selection */\\n  selection = new SelectionModel<T>(true, []);\\n\\n  /** Data source for table */\\n  dataSource = new MatTableDataSource<T>();\\n\\n  /** Columns to display in the sources list */\\n  displayedColumns: string[] = [\'select\', \'authors\', \'year\', \'title\', \'link\'];\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly collaborateClick = new EventEmitter<void>();\\n\\n  /** Emits when source selection changed */\\n  @Output() readonly selectionChanged = new EventEmitter<T[]>();\\n\\n  /** Sorter for sources list */\\n  @ViewChild(MatSort) set sort(sorter: MatSort) {\\n    this.dataSource.sort = sorter || null;\\n  }\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** On sources change, resets selection and selects all sources */\\n  ngOnChanges(changes: SimpleChanges) {\\n    if (\'sources\' in changes) {\\n      this.selection.clear();\\n      this.dataSource.data = this.sources;\\n      this.toggleAllRows();\\n    }\\n  }\\n\\n  /**\\n   * It changes the value of showTable to false if value it true\\n   * and vice versa\\n   */\\n  toggleTable(): void {\\n    this.showTable = !this.showTable;\\n    this.ga.event(\'source_table_toggle\', this.showTable.toString());\\n  }\\n\\n  /**\\n   * Logs source link click\\n   * @param item Source list item\\n   */\\n  sourceLinkClicked(item: SourceListItem): void {\\n    this.ga.event(\'source_link_clicked\', \'link_click\', item.link);\\n  }\\n\\n  /** Whether the number of selected elements matches the total number of rows. */\\n  isAllSelected() {\\n    const numSelected = this.selection.selected.length;\\n    const numRows = this.dataSource.data.length;\\n    return numSelected === numRows;\\n  }\\n\\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\\n  toggleAllRows() {\\n    if (this.isAllSelected()) {\\n      this.selection.clear();\\n      this.selectionChanged.emit(this.selection.selected);\\n      return;\\n    }\\n\\n    this.dataSource.data.forEach((row) => this.selection.select(row));\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n\\n  /** Toggles selection status of a row */\\n  toggleRow(row: T) {\\n    this.selection.toggle(row);\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n  height: 100%;\\n\\n  @media (min-height: 60.75rem) {\\n    .toggle {\\n      height: 3rem !important;\\n    }\\n\\n    ::ng-deep thead > tr {\\n      height: 3rem !important;\\n    }\\n  }\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n\\n  hra-label-box {\\n    font-size: 0.875rem;\\n    padding-left: 1.5rem;\\n  }\\n\\n  .toggle {\\n    display: flex;\\n    align-items: center;\\n    height: 2.5rem;\\n    grid-area: source-list-header;\\n    border-top: 1px solid rgba(vars.$light-dividers);\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  .table-content {\\n    max-height: 236px;\\n    overflow: auto;\\n\\n    &.hidden {\\n      display: none;\\n    }\\n\\n    .mat-column-select {\\n      width: 1rem;\\n      padding-right: 0;\\n    }\\n\\n    .mat-column-authors,\\n    .mat-column-title,\\n    .mat-column-doi,\\n    .mat-column-link {\\n      max-width: 7rem;\\n    }\\n\\n    .mat-column-year {\\n      max-width: 3.5rem;\\n    }\\n\\n    .mat-column-link {\\n      padding-right: 3rem;\\n      text-overflow: unset !important;\\n    }\\n\\n    ::ng-deep thead {\\n      .mat-sort-header-stem,\\n      .mat-sort-header-indicator {\\n        opacity: 0 !important;\\n      }\\n\\n      .mat-sort-header-arrow {\\n        background-image: url(\'../../assets/icons/arrow-upward.svg\');\\n        background-size: contain;\\n        height: 1rem;\\n        width: 1rem;\\n      }\\n\\n      [aria-sort=\'descending\'] {\\n        .mat-sort-header-arrow {\\n          background-image: url(\'../../assets/icons/arrow-down.svg\');\\n        }\\n      }\\n\\n      [aria-sort=\'none\'] {\\n        .mat-sort-header-arrow {\\n          background-image: url(\'../../assets/icons/arrow-upward.svg\');\\n          transition: 0.5s;\\n        }\\n      }\\n\\n      tr {\\n        color: rgba(vars.$primary-darker);\\n        background: rgba(vars.$primary-lighter);\\n        height: 2.5rem;\\n      }\\n    }\\n\\n    ::ng-deep tbody {\\n      .mat-column-doi,\\n      .mat-column-link {\\n        color: rgba(vars.$accent);\\n        font-weight: 500;\\n      }\\n    }\\n\\n    .mat-mdc-cell,\\n    .mat-mdc-header-cell {\\n      text-overflow: ellipsis;\\n      white-space: nowrap;\\n    }\\n\\n    .mat-mdc-header-cell {\\n      border-bottom-color: rgba(vars.$light-dividers);\\n    }\\n\\n    .mat-mdc-cell {\\n      border-bottom: none;\\n    }\\n\\n    tr {\\n      color: rgba(vars.$primary);\\n      font-size: 0.75rem;\\n      height: 2.25rem;\\n\\n      .mat-column-link {\\n        cursor: pointer;\\n      }\\n    }\\n\\n    .source-link {\\n      --mdc-filled-button-label-text-tracking: 0.0178571429em;\\n      font-size: 0.75rem;\\n      font-weight: 500;\\n      padding: 0;\\n      justify-content: left;\\n      color: #b20a2f;\\n      text-decoration: none;\\n      border: 0.25rem solid transparent;\\n\\n      &:hover {\\n        color: #8e0825;\\n      }\\n\\n      &:active {\\n        color: #6a061c;\\n      }\\n\\n      &:focus {\\n        color: #201e3d;\\n        border-color: #e00d3a;\\n      }\\n\\n      ::ng-deep .mdc-button__ripple::before {\\n        background-color: transparent;\\n      }\\n\\n      ::ng-deep .mdc-button__label {\\n        text-overflow: ellipsis;\\n        white-space: nowrap;\\n        max-width: 9rem;\\n        overflow: hidden;\\n      }\\n    }\\n  }\\n\\n  ::ng-deep mat-checkbox {\\n    .mdc-form-field {\\n      height: 2.25rem;\\n\\n      .mdc-checkbox {\\n        padding: 9px;\\n      }\\n    }\\n    --mdc-checkbox-selected-checkmark-color: rgba(vars.$primary) !important;\\n\\n    .mdc-checkbox__background {\\n      background-color: transparent !important;\\n      border-color: rgba(vars.$primary) !important;\\n      top: 9px;\\n      left: 9px;\\n    }\\n  }\\n\\n  .end {\\n    cursor: pointer;\\n  }\\n}\\n","styleUrl":"./source-list.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges"],"accessors":{"sort":{"name":"sort","setSignature":{"name":"sort","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"sorter","type":"MatSort","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":86,"rawdescription":"\\nSorter for sources list","description":"<p>Sorter for sources list</p>\\n","jsdoctags":[{"name":"sorter","type":"MatSort","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"templateData":"<hra-label-box class=\\"toggle\\" (click)=\\"toggleTable()\\">\\n  Source Data\\n  <mat-icon class=\\"end\\">\\n    {{ showTable ? \'keyboard_arrow_down\' : \'keyboard_arrow_up\' }}\\n  </mat-icon>\\n</hra-label-box>\\n\\n<div class=\\"table-content\\" [class.hidden]=\\"!showTable\\">\\n  <table\\n    *ngIf=\\"sources.length !== 0\\"\\n    mat-table\\n    [dataSource]=\\"dataSource\\"\\n    matSort\\n    matSortActive=\\"authors\\"\\n    matSortDirection=\\"asc\\"\\n  >\\n    <caption class=\\"sr-only\\">\\n      Source Data\\n    </caption>\\n\\n    \x3c!-- Checkbox Column --\x3e\\n    <ng-container matColumnDef=\\"select\\">\\n      <th mat-header-cell *matHeaderCellDef>\\n        <mat-checkbox\\n          (change)=\\"$event ? toggleAllRows() : null\\"\\n          [checked]=\\"selection.hasValue() && isAllSelected()\\"\\n          [indeterminate]=\\"selection.hasValue() && !isAllSelected()\\"\\n          [disableRipple]=\\"true\\"\\n        >\\n        </mat-checkbox>\\n      </th>\\n      <td mat-cell *matCellDef=\\"let row\\">\\n        <mat-checkbox\\n          (click)=\\"$event.stopPropagation()\\"\\n          (change)=\\"$event ? toggleRow(row) : null\\"\\n          [checked]=\\"selection.isSelected(row)\\"\\n          [disableRipple]=\\"true\\"\\n        >\\n        </mat-checkbox>\\n      </td>\\n    </ng-container>\\n\\n    \x3c!-- Authors Column --\x3e\\n    <ng-container matColumnDef=\\"authors\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Authors</th>\\n      <td mat-cell *matCellDef=\\"let row\\" [hraHover]=\\"dataHover\\" [hraHoverData]=\\"row.authors\\">\\n        {{ row.authors.join(\', \') }}\\n      </td>\\n    </ng-container>\\n\\n    \x3c!-- Year Column --\x3e\\n    <ng-container matColumnDef=\\"year\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Year</th>\\n      <td mat-cell *matCellDef=\\"let row\\">{{ row.year < 0 ? \'\' : row.year }}</td>\\n    </ng-container>\\n\\n    \x3c!-- Title Column --\x3e\\n    <ng-container matColumnDef=\\"title\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper Title</th>\\n      <td mat-cell *matCellDef=\\"let row\\" [hraHover]=\\"dataHover\\" [hraHoverData]=\\"row.title\\">{{ row.title }}</td>\\n    </ng-container>\\n\\n    \x3c!-- DOI Column --\x3e\\n    <ng-container matColumnDef=\\"link\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper DOI</th>\\n      <td\\n        mat-cell\\n        *matCellDef=\\"let row\\"\\n        [hraHover]=\\"dataHover\\"\\n        [hraHoverData]=\\"row.link\\"\\n        (click)=\\"sourceLinkClicked(row)\\"\\n      >\\n        <a\\n          class=\\"source-link\\"\\n          mat-flat-button\\n          [href]=\\"row.link\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n          disableRipple\\n        >\\n          {{ row.link }}\\n        </a>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\"displayedColumns; sticky: true\\"></tr>\\n    <tr mat-row *matRowDef=\\"let row; columns: displayedColumns\\"></tr>\\n  </table>\\n  <hra-empty-biomarker\\n    *ngIf=\\"sources.length === 0\\"\\n    [collaborateText]=\\"collaborateText\\"\\n    [message]=\\"message\\"\\n    (collaborateClick)=\\"collaborateClick.emit()\\"\\n  ></hra-empty-biomarker>\\n</div>\\n\\n<ng-template #dataHover let-columnName>\\n  <div class=\\"biomarker-table-hover full-column-name\\" [class.empty]=\\"columnName.toString() === \'\'\\">\\n    {{ columnName }}\\n  </div>\\n</ng-template>\\n"},{"name":"TissueTreeListComponent","id":"component-TissueTreeListComponent-3dcbdd59f4bd08b05fd0de0edc35c83e5b7ae42d957e9c2935086c91f5367743d6ec463b4ac1f3d8793ead2a4b1ebbc75ba1c0182f4a7fbd98d894f075fa4941","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-tissue-tree-list","styleUrls":["./tissue-tree-list.component.scss"],"styles":[],"templateUrl":["./tissue-tree-list.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"nodes","defaultValue":"{} as Record<K, T>","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  of tissue tree list component\\n","description":"<p>Input  of tissue tree list component</p>\\n","line":69,"type":"Record<K | T>","decorators":[]},{"name":"selected","defaultValue":"undefined","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNode selected, to view the data associated with it\\n","description":"<p>Node selected, to view the data associated with it</p>\\n","line":74,"type":"T","decorators":[]}],"outputsClass":[{"name":"navigate","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNavigates to an illustration page\\n","description":"<p>Navigates to an illustration page</p>\\n","line":84,"type":"EventEmitter"},{"name":"selectedChange","defaultValue":"new EventEmitter<T | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOutput  of tissue tree list component\\n","description":"<p>Output  of tissue tree list component</p>\\n","line":79,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>tree controller, used to control the nodes in the tree</p>\\n","line":94,"rawdescription":"\\n\\ntree controller, used to control the nodes in the tree\\n","modifierKind":[148]},{"name":"dataSource","defaultValue":"new MatTreeFlatDataSource(this.control, this.flattener)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Data source of tissue tree list component, defines the data in mat-tree</p>\\n","line":117,"rawdescription":"\\n\\nData source of tissue tree list component, defines the data in mat-tree\\n","modifierKind":[148]},{"name":"enableNav","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether keyboard navigation is enabled</p>\\n","line":89,"rawdescription":"\\n\\nWhether keyboard navigation is enabled\\n"},{"name":"flattener","defaultValue":"new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Flattener of tissue tree list component, returns flat-data structure</p>\\n","line":102,"rawdescription":"\\n\\nFlattener of tissue tree list component, returns flat-data structure\\n","modifierKind":[148]}],"methodsClass":[{"name":"dfsFindPath","args":[{"name":"nodes","type":"T[]","deprecated":false,"deprecationMessage":""},{"name":"target","type":"T","deprecated":false,"deprecationMessage":""},{"name":"path","type":"T[]","deprecated":false,"deprecationMessage":"","defaultValue":"[]"}],"optional":false,"returnType":"T[]","typeParameters":[],"line":198,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt used the logic of depth first search to find the target node.\\nreturns the path to the target node.\\n","description":"<p>It used the logic of depth first search to find the target node.\\nreturns the path to the target node.</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"nodes","type":"T[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"target","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"path","type":"T[]","deprecated":false,"deprecationMessage":"","defaultValue":"[]","tagName":{"text":"param"}}]},{"name":"expandPath","args":[{"name":"path","type":"DataNode<K>[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":189,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nexpands the tree nodes based on the path provided.\\n","description":"<p>expands the tree nodes based on the path provided.</p>\\n","modifierKind":[123],"jsdoctags":[{"name":{"pos":4971,"end":4975,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"path"},"type":"DataNode<K>[]","deprecated":false,"deprecationMessage":"","tagName":{"pos":4965,"end":4970,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>is given as an input.</p>\\n"}]},{"name":"findRootNodes","args":[],"optional":false,"returnType":"T[]","typeParameters":[],"line":173,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt creates a copy of the input nodes object.\\nIt iterates over it and removes all the children nodes from it.\\n","description":"<p>It creates a copy of the input nodes object.\\nIt iterates over it and removes all the children nodes from it.</p>\\n","modifierKind":[123],"jsdoctags":[{"tagName":{"pos":4579,"end":4586,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>remaining nodes which are root nodes.</p>\\n"}]},{"name":"handleListClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":275,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEnables keyboard nav only if the tissue tree list is clicked\\n","description":"<p>Enables keyboard nav only if the tissue tree list is clicked</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":7667,"end":7672,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":7661,"end":7666,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Click event</p>\\n"}]},{"name":"handlePageClick","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":266,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDisable keyboard nav on click\\n","description":"<p>Disable keyboard nav on click</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:click\'"}],"modifierKind":[170]},{"name":"hasChild","args":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":""},{"name":"node","type":"InternalNode<K | T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":145,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ncheck if the current node has children\\n","description":"<p>check if the current node has children</p>\\n","jsdoctags":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":3844,"end":3848,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"node"},"type":"InternalNode<K | T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":3838,"end":3843,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>current selected node</p>\\n"},{"tagName":{"pos":3877,"end":3884,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>boolean, which means if node has children</p>\\n"}]},{"name":"ngOnChanges","args":[{"name":"changes","type":"SimpleChanges","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":123,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTake actions if any data changes\\n","description":"<p>Take actions if any data changes</p>\\n","jsdoctags":[{"name":{"pos":3208,"end":3215,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"changes"},"type":"SimpleChanges","deprecated":false,"deprecationMessage":"","tagName":{"pos":3202,"end":3207,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>changes in data</p>\\n"}]},{"name":"onKeyDown","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":222,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nKeyboard navigation for tissue tree list\\n","description":"<p>Keyboard navigation for tissue tree list</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:keydown\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":5834,"end":5839,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":5828,"end":5833,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Keyboard event</p>\\n"}]},{"name":"resetSelection","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":163,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nResets selection and collapes all nodes of the tree.\\n","description":"<p>Resets selection and collapes all nodes of the tree.</p>\\n"},{"name":"selectNode","args":[{"name":"node","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":153,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt selects the node, which is clicked.\\n","description":"<p>It selects the node, which is clicked.</p>\\n","jsdoctags":[{"name":{"pos":4087,"end":4091,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"node"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":4081,"end":4086,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Tissue Tree Item, which is clicked</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEnables keyboard nav only if the tissue tree list is clicked\\n","description":"<p>Enables keyboard nav only if the tissue tree list is clicked</p>\\n","jsdoctags":[{"pos":7660,"end":7688,"kind":341,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":7661,"end":7666,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Click event</p>\\n","name":{"pos":7667,"end":7672,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"isNameFirst":true,"isBracketed":false}],"line":275},{"name":"document:click","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDisable keyboard nav on click\\n","description":"<p>Disable keyboard nav on click</p>\\n","line":266},{"name":"document:keydown","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nKeyboard navigation for tissue tree list\\n","description":"<p>Keyboard navigation for tissue tree list</p>\\n","jsdoctags":[{"pos":5827,"end":5858,"kind":341,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":5828,"end":5833,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Keyboard event</p>\\n","name":{"pos":5834,"end":5839,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"isNameFirst":true,"isBracketed":false}],"line":222}],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatTreeModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatExpansionModule","type":"module"},{"name":"MatRippleModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Tabular View for hubMap tissue side-bar</p>\\n","rawdescription":"\\n\\nTabular View for hubMap tissue side-bar\\n","type":"component","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  HostListener,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * Navigates to an illustration page\\n   */\\n  @Output() readonly navigate = new EventEmitter();\\n\\n  /**\\n   * Whether keyboard navigation is enabled\\n   */\\n  enableNav = true;\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n      this.control.expandAll();\\n    }\\n    if (\'selected\' in changes) {\\n      if (!this.selected) {\\n        this.control.expandAll();\\n      }\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      const node = this.control.dataNodes.find((n) => n.data === changes[\'selected\'].currentValue);\\n      if (!node?.expandable) {\\n        this.expandPath(path);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n\\n  /**\\n   * Keyboard navigation for tissue tree list\\n   * @param event Keyboard event\\n   */\\n  @HostListener(\'document:keydown\', [\'$event\'])\\n  onKeyDown(event: KeyboardEvent): void {\\n    if (!this.enableNav) {\\n      return;\\n    }\\n    if (this.control) {\\n      const nodes = this.control.dataNodes;\\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\\n\\n      const currentNode = nodes[selectedIndex];\\n      if (currentNode && currentNode.expandable) {\\n        const expandableNodes = nodes.filter((node) => node.expandable);\\n        const index = expandableNodes.indexOf(currentNode);\\n        if (event.key === \'ArrowLeft\') {\\n          this.control.collapse(currentNode);\\n        } else if (event.key === \'ArrowRight\') {\\n          this.control.expand(currentNode);\\n        } else if (\\n          event.key === \'ArrowDown\' &&\\n          index + 1 < expandableNodes.length &&\\n          !this.control.isExpanded(currentNode)\\n        ) {\\n          this.selectNode(expandableNodes[index + 1].data);\\n          return;\\n        } else if (event.key === \'ArrowUp\' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\\n          this.selectNode(expandableNodes[index - 1].data);\\n          return;\\n        }\\n      }\\n      if (event.key === \'ArrowDown\' && selectedIndex + 1 < nodes.length) {\\n        this.selectNode(nodes[selectedIndex + 1].data);\\n      }\\n      if (event.key === \'ArrowUp\' && selectedIndex - 1 >= 0) {\\n        this.selectNode(nodes[selectedIndex - 1].data);\\n      }\\n      if (event.key === \'Enter\' && !currentNode.expandable) {\\n        this.navigate.emit(currentNode.data);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Disable keyboard nav on click\\n   */\\n  @HostListener(\'document:click\')\\n  handlePageClick(): void {\\n    this.enableNav = false;\\n  }\\n\\n  /**\\n   * Enables keyboard nav only if the tissue tree list is clicked\\n   * @param event Click event\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  handleListClick(event: MouseEvent): void {\\n    event.stopPropagation();\\n    this.enableNav = true;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  overflow-y: auto;\\n\\n  .row {\\n    min-height: unset;\\n\\n    &.child {\\n      padding-left: 2rem !important;\\n\\n      @media (min-width: 90rem) {\\n        padding-left: 4rem !important;\\n      }\\n    }\\n\\n    &.selected {\\n      background-color: #fff3f0;\\n    }\\n\\n    .toggle {\\n      width: 2rem;\\n      height: 2rem;\\n      padding: 0.25rem;\\n    }\\n\\n    .label-container {\\n      display: flex;\\n      align-items: center;\\n      min-height: 2rem;\\n      border-radius: 0.25rem;\\n      width: 100%;\\n      font-weight: 500;\\n      font-size: 0.75rem;\\n\\n      .link {\\n        cursor: pointer;\\n        text-decoration: none;\\n        color: rgba(vars.$dark-primary-text);\\n        line-height: normal;\\n        width: 100%;\\n        height: 100%;\\n        align-items: center;\\n        display: flex;\\n      }\\n    }\\n\\n    &.selected .label-container .link {\\n      color: rgba(vars.$accent);\\n    }\\n\\n    &:focus-visible {\\n      outline: none;\\n    }\\n  }\\n}\\n","styleUrl":"./tissue-tree-list.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges"],"templateData":"<mat-tree [dataSource]=\\"dataSource\\" [treeControl]=\\"control\\" class=\\"tree\\">\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node; let level = level\\"\\n    [matTreeNodePadding]=\\"level\\"\\n    matTreeNodePaddingIndent=\\"64\\"\\n    [class.selected]=\\"node.data === selected\\"\\n    class=\\"row\\"\\n    [class.child]=\\"hasChild\\"\\n    tabIndex=\\"0\\"\\n  >\\n    <ng-container [ngTemplateOutlet]=\\"label\\" [ngTemplateOutletContext]=\\"node\\"> </ng-container>\\n  </mat-tree-node>\\n\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node; let level = level; when: hasChild\\"\\n    class=\\"row\\"\\n    [class.selected]=\\"node.data === selected\\"\\n    (mouseup)=\\"selectNode(node.data)\\"\\n  >\\n    <button mat-icon-button matTreeNodeToggle class=\\"toggle\\" [attr.aria-label]=\\"\'Toggle \' + node.label\\">\\n      <mat-icon>\\n        {{ control.isExpanded(node) ? \'keyboard_arrow_up\' : \'chevron_right\' }}\\n      </mat-icon>\\n    </button>\\n\\n    <ng-container [ngTemplateOutlet]=\\"label\\" [ngTemplateOutletContext]=\\"node\\"> </ng-container>\\n  </mat-tree-node>\\n</mat-tree>\\n\\n<ng-template let-label=\\"label\\" let-data=\\"data\\" #label>\\n  <div class=\\"label-container\\">\\n    <a\\n      *ngIf=\\"data.link; else noLink\\"\\n      [hraLink]=\\"data.link\\"\\n      [queryParams]=\\"{ id: data.id }\\"\\n      class=\\"link\\"\\n      (mouseup)=\\"selectNode(data)\\"\\n    >\\n      {{ label }}\\n    </a>\\n    <ng-template #noLink>\\n      <span>{{ label }}</span>\\n    </ng-template>\\n  </div>\\n</ng-template>\\n"},{"name":"TitleCardComponent","id":"component-TitleCardComponent-0a2974b2654b722a4713d86dc92bec29572f53a7c9be45dcfb238899cb2dde7218e5651a889589bc1f10c8f9a88d8b7399806ca74c64f64af5cf88eecb8f5650","file":"libs/components/molecules/src/lib/title-card/title-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-title-card","styleUrls":["./title-card.component.scss"],"styles":[],"templateUrl":["./title-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for the title card shown to the user","description":"<p>Description for the title card shown to the user</p>\\n","line":18,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTitle for the title card shown to the user","description":"<p>Title for the title card shown to the user</p>\\n","line":15,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"}],"description":"<p>Displays title card to the user with title and description</p>\\n","rawdescription":"\\nDisplays title card to the user with title and description","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Displays title card to the user with title and description */\\n@Component({\\n  selector: \'hra-title-card\',\\n  imports: [CommonModule, MarkdownModule],\\n  templateUrl: \'./title-card.component.html\',\\n  styleUrls: [\'./title-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TitleCardComponent {\\n  /** Title for the title card shown to the user*/\\n  @Input() title = \'\';\\n\\n  /** Description for the title card shown to the user*/\\n  @Input() description = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .title {\\n    margin-bottom: 0.5rem;\\n  }\\n}\\n","styleUrl":"./title-card.component.scss"}],"stylesData":"","extends":[],"templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n"}],"modules":[],"miscellaneous":{"variables":[{"name":"Data","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  [\\n    {\\n      label: \'Functional Tissue Unit Name\',\\n      value: \'Crypt of Lieberkuhn\',\\n    },\\n    {\\n      label: \'Uberon ID\',\\n      value: \'UBERON:0011184\',\\n    },\\n    {\\n      label: \'#Datasets\',\\n      value: \'3\',\\n    },\\n  ],\\n  [\\n    {\\n      label: \'Cell Type Name\',\\n      value: \'epithelial stem cell\',\\n    },\\n    {\\n      label: \'CL ID\',\\n      value: \'CL:0009016\',\\n    },\\n    {\\n      label: \'Number of Cells\',\\n      value: \'187\',\\n    },\\n  ],\\n  [\\n    {\\n      label: \'Gene Name\',\\n      value: \'RGMB\',\\n    },\\n    {\\n      label: \'HGNC ID\',\\n      value: \'HGNC:26896\',\\n    },\\n    {\\n      label: \'Mean Expression Value\',\\n      value: \'0.0642\',\\n    },\\n  ],\\n]"},{"name":"decorators","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/.storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  ...rootDecorators,\\n  applicationConfig({ providers: [importProvidersFrom(InlineSVGModule.forRoot())] }),\\n]"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    data: Data,\\n  },\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template(`\\n  Some content\\n  <hra-fullscreen-content>\\n    Other content\\n  </hra-fullscreen-content>\\n`)"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Welcome to the Functional Tissue Unit Explorer\',\\n\\n    description: `Explore functional tissue units (FTUs) featuring experimental datasets and Human Reference Atlas (HRA) technologies.`,\\n\\n    readMore: `Read more about this effort at  <a href=\'\' target=\'_blank\'>HRA Portal: FTU Explorer.</a>`,\\n\\n    partners: `A special thanks to our partners: The FTU Explorer was designed in close collaboration with\\n    <a href=\'\' target=\'_blank\'>Kidney Precision Medicine Project</a> and <a href=\'\'>European Bioinformatics Institute.</a>`,\\n  },\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Welcome to the Functional Tissue Unit Explorer\',\\n\\n    description: `A functional tissue unit (FTU) is the smallest tissue organization that performs a unique physiologic function\\n    and is replicated multiple times in a whole organ. Explore medical illustrations of FTUs to view cell type populations\\n    by gene, protein, and lipid biomarkers. The FTU Explorer showcases single-cell expression data from the <a href=\'https://www.ebi.ac.uk/about/news/updates-from-data-resources/anatomograms-new-feature-single-cell-expression-atlas/\' target=\'_blank\'>Anatomogram</a> site by EMBL-EBI.`,\\n\\n    partners: `A special thanks to our partners: The FTU Explorer was designed in close collaboration with\\n    <a href=\'\' target=\'_blank\'>Kidney Precision Medicine Project</a> and <a href=\'\'>European Bioinformatics Institute.</a>`,\\n\\n    moreText: \'Explore FTUs\',\\n\\n    img: \'assets/welcome.svg\',\\n  },\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/source-list/source-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    sources: [\\n      {\\n        title: \'Kidney Precision Medicine Project\',\\n        label: \'Ancillary Study Data, Clinical Data, HRT Codebook\',\\n        link: \'google.com\',\\n      },\\n      {\\n        title: \'[Dataset Owner Title]\',\\n        label: \'<Dataset Title + Link to Dataset>\',\\n        link: \'google.com\',\\n      },\\n      {\\n        title: \'[Dataset Owner Title]\',\\n        label: \'<Dataset Title + Link to Dataset>\',\\n        link: \'google.com\',\\n      },\\n      {\\n        title:\\n          \'[Dataset Owner Title but extremely long and wraps around to the next line as you can see here in this example]\',\\n        label:\\n          \'<Extremely long dataset title that wraps around to the next line as you can see in this example + link to dataset>\',\\n        link: \'google.com\',\\n      },\\n    ],\\n  },\\n}"},{"name":"DownloadFormat","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  { label: \'Download XLXS\' },\\n  { label: \'Download JSON-LD\' },\\n  { label: \'Download PDF\' },\\n  { label: \'Download AI\' },\\n  { label: \'Download PNG\' },\\n]"},{"name":"DOWNLOADS_LIST_POSITION","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n]","rawdescription":"Positioning value for the download list popup","description":"<p>Positioning value for the download list popup</p>\\n"},{"name":"EMPTY_CONTACT_DATA","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"Partial<ContactData>","defaultValue":"{\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n}","rawdescription":"Initial empty contact data","description":"<p>Initial empty contact data</p>\\n"},{"name":"HOVER_DELAY","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"200","rawdescription":"Delay before tooltip becomes visible","description":"<p>Delay before tooltip becomes visible</p>\\n"},{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    size: \'large\',\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n    downloadFormats: DownloadFormat,\\n  },\\n}"},{"name":"nodes","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Record<string, DataNode<string>>","defaultValue":"{\\n  id1: {\\n    label: \'Kidney\',\\n    children: [\'id2\', \'id3\'],\\n  },\\n  id2: {\\n    label: \'Ascending thin limb\',\\n    link: createLinkId(\'id2\'),\\n  },\\n  id3: {\\n    label: \'Cortical collecting duct\',\\n    link: createLinkId(\'id3\'),\\n  },\\n  id4: {\\n    label: \'Large Intestine\',\\n    link: createLinkId(\'id4\'),\\n    children: [\'id5\'],\\n  },\\n  id5: {\\n    label: \'Crypt of Lieberkuhn\',\\n    link: createLinkId(\'id5\'),\\n  },\\n  id6: {\\n    label: \'Liver\',\\n    children: [\'id7\'],\\n  },\\n  id7: {\\n    label: \'Liver lobule\',\\n    link: createLinkId(\'id7\'),\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    color: \'grey\',\\n    size: 2,\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/header/header.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n    appTitle: \'Functional Tissue Unit Explorer\',\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    productTitle: \'Human Reference Atlas\',\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    description: `We received your message. Please allow two business days for a <br>\\n                    response to each inquiry. Thanks for your time and expertise!`,\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Explore Medical Illustrations of the Human Reference Atlas\',\\n    img: \'assets/2d-ftu-pancreas-islets-langerhans.svg\',\\n    moreText: \'Read more about this effort\',\\n    description: `\\n    The 2D Functional Tissue Unit Library provides anatomically correct illustrations of functional tissue units (FTUs).\\n    The illustrations are developed by a specialist in 2D medical illustration and approved by organ experts.\\n    Illustrations are created using terms from the Anatomical Structures, Cell Types, and Biomarker (ASCT+B) table for each organ.\\n    Subject matter experts collaborate on a list of anatomical structures and/or cell types to be included in each FTU\\n    `,\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/metrics/metrics.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    logo: \'/assets/logo.svg\',\\n    title: \'Metrics of the Human Reference Atlas\',\\n    metrics: [\\n      { icon: \'/assets/diversity.svg\', value: \'17\', description: \'consortia\' },\\n      {\\n        icon: \'/assets/publications.svg\',\\n        value: \'1,000+\',\\n        description: \'publications\',\\n      },\\n      { icon: \'/assets/experts.svg\', value: \'250+\', description: \'experts\' },\\n      {\\n        icon: \'/assets/structures.svg\',\\n        value: \'2,665\',\\n        description: \'anatomical structures\',\\n      },\\n      {\\n        icon: \'/assets/celltypes.svg\',\\n        value: \'953\',\\n        description: \'cell types\',\\n      },\\n      {\\n        icon: \'/assets/biomarkers.svg\',\\n        value: \'2,842\',\\n        description: \'biomarkers\',\\n      },\\n    ],\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    content: \'Test test test\',\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    nodes,\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/title-card/title-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Welcome to the Functional Tissue Unit Explorer\',\\n\\n    description: `\\n    Explore functional tissue units (FTUs) featuring experimental datasets and Human Reference Atlas (HRA) technologies.<br><br>\\n    Read more about this effort at <a href=\'\' target=\'_blank\'>HRA Portal: FTU Explorer</a>.<br><br>\\n    A special thanks to our partners: <a href=\'\' target=\'_blank\'>Kidney Precision Medicine Project</a> and <a href=\'\' target=\'_blank\'>European Bioinformatics Institute</a>.\\n    `,\\n  },\\n}"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    size: \'small\',\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n    downloadFormats: DownloadFormat,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<BiomarkerTableDataCardComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<BiomarkerTableDataIconComponent>","defaultValue":"(args: BiomarkerTableDataIconComponent) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<ContactModalComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<FooterComponent>","defaultValue":"(args) => ({\\n  props: args,\\n  styles: [\\n    `\\n    hra-footer {\\n        position: absolute;\\n        inset: auto 0 0 0;\\n    }\\n  `,\\n  ],\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(content: string): StoryFn<FullscreenContainerComponent> =>\\n  (args) => ({\\n    props: args,\\n    template: `\\n    <hra-fullscreen-container [fullscreen]=\\"fullscreen\\">\\n      ${content}\\n    </hra-fullscreen-container>\\n  `,\\n  })"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/header/header.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<HeaderComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<HraLandingPageIntroWcComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<InfoModalComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<InteractiveSvgComponent<NodeMapEntry>>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<LandingPageInDepthComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<LandingPageIntroComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/metrics/metrics.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<MetricsComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<ScreenSizeNoticeComponent>","defaultValue":"(args) => ({\\n  props: args,\\n  styles: [\\n    `\\n      hra-screen-size-notice {\\n        display: flex;\\n      }\\n    `,\\n  ],\\n})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/source-list/source-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<SourceListComponent<SourceListItem>>","defaultValue":"(args) => ({ props: args })"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/title-card/title-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<TitleCardComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"},{"name":"TOOLTIP_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n]","rawdescription":"Tooltip position settings","description":"<p>Tooltip position settings</p>\\n"}],"functions":[],"typealiases":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TissueTreeListComponent<string, DataNode<string>>>","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}],"enumerations":[],"groupedVariables":{"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts":[{"name":"Data","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  [\\n    {\\n      label: \'Functional Tissue Unit Name\',\\n      value: \'Crypt of Lieberkuhn\',\\n    },\\n    {\\n      label: \'Uberon ID\',\\n      value: \'UBERON:0011184\',\\n    },\\n    {\\n      label: \'#Datasets\',\\n      value: \'3\',\\n    },\\n  ],\\n  [\\n    {\\n      label: \'Cell Type Name\',\\n      value: \'epithelial stem cell\',\\n    },\\n    {\\n      label: \'CL ID\',\\n      value: \'CL:0009016\',\\n    },\\n    {\\n      label: \'Number of Cells\',\\n      value: \'187\',\\n    },\\n  ],\\n  [\\n    {\\n      label: \'Gene Name\',\\n      value: \'RGMB\',\\n    },\\n    {\\n      label: \'HGNC ID\',\\n      value: \'HGNC:26896\',\\n    },\\n    {\\n      label: \'Mean Expression Value\',\\n      value: \'0.0642\',\\n    },\\n  ],\\n]"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    data: Data,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<BiomarkerTableDataCardComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/.storybook/preview.ts":[{"name":"decorators","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/.storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  ...rootDecorators,\\n  applicationConfig({ providers: [importProvidersFrom(InlineSVGModule.forRoot())] }),\\n]"}],"libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template(`\\n  Some content\\n  <hra-fullscreen-content>\\n    Other content\\n  </hra-fullscreen-content>\\n`)"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(content: string): StoryFn<FullscreenContainerComponent> =>\\n  (args) => ({\\n    props: args,\\n    template: `\\n    <hra-fullscreen-container [fullscreen]=\\"fullscreen\\">\\n      ${content}\\n    </hra-fullscreen-container>\\n  `,\\n  })"}],"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Welcome to the Functional Tissue Unit Explorer\',\\n\\n    description: `Explore functional tissue units (FTUs) featuring experimental datasets and Human Reference Atlas (HRA) technologies.`,\\n\\n    readMore: `Read more about this effort at  <a href=\'\' target=\'_blank\'>HRA Portal: FTU Explorer.</a>`,\\n\\n    partners: `A special thanks to our partners: The FTU Explorer was designed in close collaboration with\\n    <a href=\'\' target=\'_blank\'>Kidney Precision Medicine Project</a> and <a href=\'\'>European Bioinformatics Institute.</a>`,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<HraLandingPageIntroWcComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<InteractiveSvgComponent<NodeMapEntry>>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Welcome to the Functional Tissue Unit Explorer\',\\n\\n    description: `A functional tissue unit (FTU) is the smallest tissue organization that performs a unique physiologic function\\n    and is replicated multiple times in a whole organ. Explore medical illustrations of FTUs to view cell type populations\\n    by gene, protein, and lipid biomarkers. The FTU Explorer showcases single-cell expression data from the <a href=\'https://www.ebi.ac.uk/about/news/updates-from-data-resources/anatomograms-new-feature-single-cell-expression-atlas/\' target=\'_blank\'>Anatomogram</a> site by EMBL-EBI.`,\\n\\n    partners: `A special thanks to our partners: The FTU Explorer was designed in close collaboration with\\n    <a href=\'\' target=\'_blank\'>Kidney Precision Medicine Project</a> and <a href=\'\'>European Bioinformatics Institute.</a>`,\\n\\n    moreText: \'Explore FTUs\',\\n\\n    img: \'assets/welcome.svg\',\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<LandingPageIntroComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/source-list/source-list.component.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/source-list/source-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    sources: [\\n      {\\n        title: \'Kidney Precision Medicine Project\',\\n        label: \'Ancillary Study Data, Clinical Data, HRT Codebook\',\\n        link: \'google.com\',\\n      },\\n      {\\n        title: \'[Dataset Owner Title]\',\\n        label: \'<Dataset Title + Link to Dataset>\',\\n        link: \'google.com\',\\n      },\\n      {\\n        title: \'[Dataset Owner Title]\',\\n        label: \'<Dataset Title + Link to Dataset>\',\\n        link: \'google.com\',\\n      },\\n      {\\n        title:\\n          \'[Dataset Owner Title but extremely long and wraps around to the next line as you can see here in this example]\',\\n        label:\\n          \'<Extremely long dataset title that wraps around to the next line as you can see in this example + link to dataset>\',\\n        link: \'google.com\',\\n      },\\n    ],\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/source-list/source-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<SourceListComponent<SourceListItem>>","defaultValue":"(args) => ({ props: args })"}],"libs/components/molecules/src/lib/footer/footer.component.stories.ts":[{"name":"DownloadFormat","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  { label: \'Download XLXS\' },\\n  { label: \'Download JSON-LD\' },\\n  { label: \'Download PDF\' },\\n  { label: \'Download AI\' },\\n  { label: \'Download PNG\' },\\n]"},{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    size: \'large\',\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n    downloadFormats: DownloadFormat,\\n  },\\n}"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    size: \'small\',\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n    downloadFormats: DownloadFormat,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<FooterComponent>","defaultValue":"(args) => ({\\n  props: args,\\n  styles: [\\n    `\\n    hra-footer {\\n        position: absolute;\\n        inset: auto 0 0 0;\\n    }\\n  `,\\n  ],\\n})"}],"libs/components/molecules/src/lib/footer/footer.component.ts":[{"name":"DOWNLOADS_LIST_POSITION","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n]","rawdescription":"Positioning value for the download list popup","description":"<p>Positioning value for the download list popup</p>\\n"}],"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts":[{"name":"EMPTY_CONTACT_DATA","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"Partial<ContactData>","defaultValue":"{\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n}","rawdescription":"Initial empty contact data","description":"<p>Initial empty contact data</p>\\n"}],"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts":[{"name":"HOVER_DELAY","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"200","rawdescription":"Delay before tooltip becomes visible","description":"<p>Delay before tooltip becomes visible</p>\\n"},{"name":"TOOLTIP_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n]","rawdescription":"Tooltip position settings","description":"<p>Tooltip position settings</p>\\n"}],"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts":[{"name":"nodes","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Record<string, DataNode<string>>","defaultValue":"{\\n  id1: {\\n    label: \'Kidney\',\\n    children: [\'id2\', \'id3\'],\\n  },\\n  id2: {\\n    label: \'Ascending thin limb\',\\n    link: createLinkId(\'id2\'),\\n  },\\n  id3: {\\n    label: \'Cortical collecting duct\',\\n    link: createLinkId(\'id3\'),\\n  },\\n  id4: {\\n    label: \'Large Intestine\',\\n    link: createLinkId(\'id4\'),\\n    children: [\'id5\'],\\n  },\\n  id5: {\\n    label: \'Crypt of Lieberkuhn\',\\n    link: createLinkId(\'id5\'),\\n  },\\n  id6: {\\n    label: \'Liver\',\\n    children: [\'id7\'],\\n  },\\n  id7: {\\n    label: \'Liver lobule\',\\n    link: createLinkId(\'id7\'),\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    nodes,\\n  },\\n}"}],"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    color: \'grey\',\\n    size: 2,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<BiomarkerTableDataIconComponent>","defaultValue":"(args: BiomarkerTableDataIconComponent) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<ContactModalComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/header/header.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/header/header.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    productTitle: \'Human Reference Atlas\',\\n    appTitle: \'Functional Tissue Unit Explorer\',\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/header/header.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<HeaderComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    productTitle: \'Human Reference Atlas\',\\n    productLogoUrl: \'assets/icons/logo-icon.svg\',\\n    description: `We received your message. Please allow two business days for a <br>\\n                    response to each inquiry. Thanks for your time and expertise!`,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<InfoModalComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Explore Medical Illustrations of the Human Reference Atlas\',\\n    img: \'assets/2d-ftu-pancreas-islets-langerhans.svg\',\\n    moreText: \'Read more about this effort\',\\n    description: `\\n    The 2D Functional Tissue Unit Library provides anatomically correct illustrations of functional tissue units (FTUs).\\n    The illustrations are developed by a specialist in 2D medical illustration and approved by organ experts.\\n    Illustrations are created using terms from the Anatomical Structures, Cell Types, and Biomarker (ASCT+B) table for each organ.\\n    Subject matter experts collaborate on a list of anatomical structures and/or cell types to be included in each FTU\\n    `,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<LandingPageInDepthComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/metrics/metrics.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/metrics/metrics.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    logo: \'/assets/logo.svg\',\\n    title: \'Metrics of the Human Reference Atlas\',\\n    metrics: [\\n      { icon: \'/assets/diversity.svg\', value: \'17\', description: \'consortia\' },\\n      {\\n        icon: \'/assets/publications.svg\',\\n        value: \'1,000+\',\\n        description: \'publications\',\\n      },\\n      { icon: \'/assets/experts.svg\', value: \'250+\', description: \'experts\' },\\n      {\\n        icon: \'/assets/structures.svg\',\\n        value: \'2,665\',\\n        description: \'anatomical structures\',\\n      },\\n      {\\n        icon: \'/assets/celltypes.svg\',\\n        value: \'953\',\\n        description: \'cell types\',\\n      },\\n      {\\n        icon: \'/assets/biomarkers.svg\',\\n        value: \'2,842\',\\n        description: \'biomarkers\',\\n      },\\n    ],\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/metrics/metrics.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<MetricsComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}],"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    content: \'Test test test\',\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<ScreenSizeNoticeComponent>","defaultValue":"(args) => ({\\n  props: args,\\n  styles: [\\n    `\\n      hra-screen-size-notice {\\n        display: flex;\\n      }\\n    `,\\n  ],\\n})"}],"libs/components/molecules/src/lib/title-card/title-card.component.stories.ts":[{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/title-card/title-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  render: Template,\\n\\n  args: {\\n    title: \'Welcome to the Functional Tissue Unit Explorer\',\\n\\n    description: `\\n    Explore functional tissue units (FTUs) featuring experimental datasets and Human Reference Atlas (HRA) technologies.<br><br>\\n    Read more about this effort at <a href=\'\' target=\'_blank\'>HRA Portal: FTU Explorer</a>.<br><br>\\n    A special thanks to our partners: <a href=\'\' target=\'_blank\'>Kidney Precision Medicine Project</a> and <a href=\'\' target=\'_blank\'>European Bioinformatics Institute</a>.\\n    `,\\n  },\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"libs/components/molecules/src/lib/title-card/title-card.component.stories.ts","deprecated":false,"deprecationMessage":"","type":"StoryFn<TitleCardComponent>","defaultValue":"(args) => ({\\n  props: args,\\n})"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TissueTreeListComponent<string, DataNode<string>>>","file":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":183}]}},"routes":[],"coverage":{"count":45,"status":"medium","files":[{"filePath":"libs/components/molecules/.storybook/preview.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"decorators","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Data","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","type":"component","linktype":"component","name":"BiomarkerTableDataCardComponent","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","type":"interface","linktype":"interface","name":"DataItem","coveragePercent":100,"coverageCount":"3/3","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","type":"interface","linktype":"interface","name":"SectionItem","coveragePercent":100,"coverageCount":"4/4","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.ts","type":"component","linktype":"component","name":"BiomarkerTableDataIconComponent","coveragePercent":100,"coverageCount":"3/3","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts","type":"component","linktype":"component","name":"ContactModalComponent","coveragePercent":100,"coverageCount":"9/9","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts","type":"interface","linktype":"interface","name":"ContactData","coveragePercent":100,"coverageCount":"4/4","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/contact-modal/contact-modal.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"EMPTY_CONTACT_DATA","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DownloadFormat","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Large","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Small","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/footer/footer.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/footer/footer.component.ts","type":"component","linktype":"component","name":"FooterComponent","coveragePercent":100,"coverageCount":"15/15","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/footer/footer.component.ts","type":"interface","linktype":"interface","name":"DownloadFormat","coveragePercent":100,"coverageCount":"2/2","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/footer/footer.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DOWNLOADS_LIST_POSITION","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.component.ts","type":"component","linktype":"component","name":"FullscreenContainerComponent","coveragePercent":100,"coverageCount":"6/6","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/fullscreen/fullscreen-content.component.ts","type":"component","linktype":"component","name":"FullscreenContentComponent","coveragePercent":100,"coverageCount":"4/4","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/header/header.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/header/header.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/header/header.component.ts","type":"component","linktype":"component","name":"HeaderComponent","coveragePercent":100,"coverageCount":"10/10","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.ts","type":"component","linktype":"component","name":"HraLandingPageIntroWcComponent","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/info-modal/info-modal.component.ts","type":"component","linktype":"component","name":"InfoModalComponent","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","type":"component","linktype":"component","name":"InteractiveSvgComponent","coveragePercent":100,"coverageCount":"27/27","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","type":"interface","linktype":"interface","name":"NodeMapEntry","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","type":"interface","linktype":"interface","name":"NodeTooltipData","coveragePercent":100,"coverageCount":"3/3","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"HOVER_DELAY","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"TOOLTIP_POSITIONS","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.ts","type":"component","linktype":"component","name":"LandingPageInDepthComponent","coveragePercent":100,"coverageCount":"6/6","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.ts","type":"component","linktype":"component","name":"LandingPageIntroComponent","coveragePercent":100,"coverageCount":"7/7","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/metrics/metrics.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/metrics/metrics.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/metrics/metrics.component.ts","type":"component","linktype":"component","name":"MetricsComponent","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/metrics/metrics.component.ts","type":"interface","linktype":"interface","name":"MetricItem","coveragePercent":100,"coverageCount":"4/4","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.ts","type":"component","linktype":"component","name":"ScreenSizeNoticeComponent","coveragePercent":100,"coverageCount":"4/4","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/source-list/source-list.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/source-list/source-list.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/source-list/source-list.component.ts","type":"component","linktype":"component","name":"SourceListComponent","coveragePercent":100,"coverageCount":"17/17","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/source-list/source-list.component.ts","type":"interface","linktype":"interface","name":"SourceListItem","coveragePercent":100,"coverageCount":"7/7","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"nodes","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Story","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.ts","type":"component","linktype":"component","name":"TissueTreeListComponent","coveragePercent":100,"coverageCount":"22/22","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.ts","type":"interface","linktype":"interface","name":"DataNode","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.ts","type":"interface","linktype":"interface","name":"InternalNode","coveragePercent":100,"coverageCount":"5/5","status":"very-good"},{"filePath":"libs/components/molecules/src/lib/title-card/title-card.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/title-card/title-card.component.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/components/molecules/src/lib/title-card/title-card.component.ts","type":"component","linktype":"component","name":"TitleCardComponent","coveragePercent":100,"coverageCount":"3/3","status":"very-good"}]}}');var module_Bnny_XF2=__webpack_require__("./node_modules/@angular/common/fesm2022/module-Bnny_XF2.mjs"),animations=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),ngxs_logger_plugin=__webpack_require__("./node_modules/@ngxs/logger-plugin/fesm2022/ngxs-logger-plugin.mjs"),ngxs_store=__webpack_require__("./node_modules/@ngxs/store/fesm2022/ngxs-store.mjs"),ngx_markdown=__webpack_require__("./node_modules/ngx-markdown/fesm2022/ngx-markdown.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),angular_material_css_vars=__webpack_require__("./node_modules/angular-material-css-vars/fesm2022/angular-material-css-vars.mjs"),js_yaml=__webpack_require__("./node_modules/js-yaml/dist/js-yaml.mjs"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),Observable=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js");class Load{static{this.type="[Theming] Load Theming File"}constructor(url){this.url=url,this.type=Load.type}}var lib=__webpack_require__("./node_modules/zod/lib/index.mjs");const THEMING_FILE_SCHEMA=lib.z.record(lib.z.nativeEnum(angular_material_css_vars.GC),lib.z.string());let ThemingState=class ThemingState{constructor(){this.http=(0,core.inject)(module_Bnny_XF2.a),this.materialVars=(0,core.inject)(angular_material_css_vars.EH)}load(ctx,{url}){return this.http.get(url,{responseType:"text"}).pipe((0,map.T)((data=>(0,js_yaml.Hh)(data,{filename:url}))),(0,map.T)((data=>THEMING_FILE_SCHEMA.parse(data))),(0,tap.M)((data=>ctx.setState(data))),(0,tap.M)((data=>this.setVariables(data))))}setVariables(data){for(const[key,value]of Object.entries(data))this.materialVars.setVariable(key,value)}};(0,tslib_es6.Cg)([(0,ngxs_store.rc)(Load),(0,tslib_es6.Sn)("design:type",Function),(0,tslib_es6.Sn)("design:paramtypes",[Object,Load]),(0,tslib_es6.Sn)("design:returntype",Observable.c)],ThemingState.prototype,"load",null),ThemingState=(0,tslib_es6.Cg)([(0,ngxs_store.Uw)({name:"theming",defaults:{}}),(0,core.Injectable)()],ThemingState);let ThemingModule=class ThemingModule{};function parseDefaultValue(type){const{defaultValue,type:typeDef}=type;if(void 0===defaultValue||"string"!=typeof defaultValue||"string"===typeDef?.name)return defaultValue;switch(typeDef?.name){case"array":case"boolean":case"number":case"object":try{return new Function("return "+defaultValue)()}catch(_error){return}case"enum":return typeDef.value.includes(defaultValue)?defaultValue:void 0;default:return}}ThemingModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[angular_material_css_vars.tY.forRoot({}),ngxs_store.rK.forFeature([ThemingState])]})],ThemingModule);const parameters={actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}},docs:{inlineStories:!0}},argTypesEnhancers=[function fixArgTypes(){return context=>{const argTypes={...context.argTypes},exclude=[...context.parameters.controls?.exclude??[]];for(const[key,type]of Object.entries(argTypes))switch(type.table?.category){case"inputs":const defaultValue=parseDefaultValue(type);defaultValue!==type.defaultValue&&(argTypes[key]={...type,defaultValue});break;case"outputs":argTypes[key]={...type,defaultValue:void 0};break;default:exclude.push(key)}return context.parameters.controls={...context.parameters.controls,exclude},argTypes}}()],preview_decorators=[...[(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(animations.BrowserAnimationsModule,module_Bnny_XF2.o,ngxs_store.rK.forRoot([],{developmentMode:!0}),ngxs_logger_plugin.i_.forRoot(),ngx_markdown.y2.forRoot({loader:module_Bnny_XF2.a}),ThemingModule)]}),(0,dist.componentWrapperDecorator)((story=>`\n      <div class="mat-typography">${story}</div>\n      <div class="backdrop-filler" style="position: absolute; inset: 0; z-index: -1;"></div>\n    `)),function addState(){return(fn,ctx)=>{const config=ctx.parameters.state;return config?(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(ngxs_store.rK.forFeature(config.states)),{provide:core.APP_INITIALIZER,multi:!0,useFactory:store=>()=>{const{actions}=config;return actions&&actions.length>0?store.dispatch(actions):void 0},deps:[ngxs_store.il]}]})(fn,ctx):fn(ctx)}}()],(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(lib_esmodule.e1.forRoot())]})];(0,angular.$)(documentation_namespaceObject)},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_CHANNELS_=__webpack_require__("storybook/internal/channels"),csf=__webpack_require__("./node_modules/@storybook/core/dist/csf/index.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const importers=[function(){var _ref=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:libs\/components\/molecules(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(28);return __webpack_require__("./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:libs\/components\/molecules(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.(js|jsx|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(28);return __webpack_require__("./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")("./"+pathRemainder)}));return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.A)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield(x=()=>importers[i](path),x());if(moduleExports)return moduleExports}var x}))).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNELS_.createBrowserChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),"DEVELOPMENT"===external_STORYBOOK_MODULE_GLOBAL_.global.CONFIG_TYPE&&(window.__STORYBOOK_SERVER_CHANNEL__=channel);const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb((function importFn(_x3){return _importFn.apply(this,arguments)}),(()=>{const previewAnnotations=[__webpack_require__("./node_modules/@storybook/angular/dist/client/preview-prod.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/docs/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/viewport/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./libs/components/molecules/.storybook/preview.ts")],userPreview=previewAnnotations[previewAnnotations.length-1]?.default;return(0,csf.bU)(userPreview)?userPreview.composed:(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)(previewAnnotations)}));window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel},"@storybook/global":module=>{"use strict";module.exports=__STORYBOOK_MODULE_GLOBAL__},"storybook/internal/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"storybook/internal/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"storybook/internal/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"storybook/internal/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__},"storybook/internal/preview-errors":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[791],(()=>(__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_exec__("./storybook-config-entry.js"))));__webpack_require__.O()}]);