(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[303],{"./libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>tissue_tree_list_component_stories});var link_registry_state=__webpack_require__("./libs/cdk/state/src/link-registry/link-registry.state.ts"),link_registry_model=__webpack_require__("./libs/cdk/state/src/link-registry/link-registry.model.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var tissue_tree_list_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.scss?ngResource"),tissue_tree_list_componentngResource_default=__webpack_require__.n(tissue_tree_list_componentngResource),tree=__webpack_require__("./node_modules/@angular/cdk/fesm2022/tree.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_button=__webpack_require__("./node_modules/@angular/material/fesm2022/button.mjs"),fesm2022_core=__webpack_require__("./node_modules/@angular/material/fesm2022/core.mjs"),expansion=__webpack_require__("./node_modules/@angular/material/fesm2022/expansion.mjs"),icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),fesm2022_tree=__webpack_require__("./node_modules/@angular/material/fesm2022/tree.mjs"),link_directive=__webpack_require__("./libs/cdk/src/lib/link/link.directive.ts");let TissueTreeListComponent=class TissueTreeListComponent{constructor(){this.nodes={},this.selected=void 0,this.selectedChange=new core.EventEmitter,this.navigate=new core.EventEmitter,this.enableNav=!0,this.control=new tree.XW((node=>node.level),(node=>node.expandable)),this.flattener=new fesm2022_tree.yj(((node,level)=>({label:0===level?node.label:node.label.toLowerCase(),expandable:!!node.children?.length,level,data:node})),(node=>node.level),(node=>node.expandable),(node=>(node.children??[]).map((id=>this.nodes[id])).sort(((a,b)=>a.label.localeCompare(b.label))))),this.dataSource=new fesm2022_tree.zw(this.control,this.flattener)}ngOnChanges(changes){if("nodes"in changes&&(this.dataSource.data=this.findRootNodes(),this.control.expandAll()),"selected"in changes){this.selected||this.control.expandAll();const path=this.selected?this.dfsFindPath(this.findRootNodes(),this.selected):[],node=this.control.dataNodes.find((n=>n.data===changes.selected.currentValue));node?.expandable||this.expandPath(path)}}hasChild(_,node){return node.expandable}selectNode(node){this.selected!==node&&(this.selected=node,this.selectedChange.emit(this.selected))}resetSelection(){this.selected=void 0,this.control.collapseAll()}findRootNodes(){const{nodes}=this,roots={...this.nodes};for(const key in nodes)for(const child of nodes[key].children??[])delete roots[child];return Object.values(roots)}expandPath(path){this.control.dataNodes.filter((node=>path.includes(node.data))).forEach((node=>this.control.expand(node)))}dfsFindPath(nodes,target,path=[]){for(const node of nodes){if(path.push(node),node===target)return path;const savedLength=path.length,children=node.children?.map((id=>this.nodes[id]))??[];if(this.dfsFindPath(children,target,path).length>savedLength)return path;path.pop()}return path}onKeyDown(event){if(this.enableNav&&this.control){const nodes=this.control.dataNodes,selectedIndex=this.control.dataNodes.findIndex((node=>node.data.id===this.selected?.id)),currentNode=nodes[selectedIndex];if(currentNode&&currentNode.expandable){const expandableNodes=nodes.filter((node=>node.expandable)),index=expandableNodes.indexOf(currentNode);if("ArrowLeft"===event.key)this.control.collapse(currentNode);else if("ArrowRight"===event.key)this.control.expand(currentNode);else{if("ArrowDown"===event.key&&index+1<expandableNodes.length&&!this.control.isExpanded(currentNode))return void this.selectNode(expandableNodes[index+1].data);if("ArrowUp"===event.key&&index-1>=0&&!this.control.isExpanded(expandableNodes[index-1]))return void this.selectNode(expandableNodes[index-1].data)}}"ArrowDown"===event.key&&selectedIndex+1<nodes.length&&this.selectNode(nodes[selectedIndex+1].data),"ArrowUp"===event.key&&selectedIndex-1>=0&&this.selectNode(nodes[selectedIndex-1].data),"Enter"!==event.key||currentNode.expandable||this.navigate.emit(currentNode.data)}}handlePageClick(){this.enableNav=!1}handleListClick(event){event.stopPropagation(),this.enableNav=!0}static{this.propDecorators={nodes:[{type:core.Input}],selected:[{type:core.Input}],selectedChange:[{type:core.Output}],navigate:[{type:core.Output}],onKeyDown:[{type:core.HostListener,args:["document:keydown",["$event"]]}],handlePageClick:[{type:core.HostListener,args:["document:click"]}],handleListClick:[{type:core.HostListener,args:["click",["$event"]]}]}}};TissueTreeListComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-tissue-tree-list",standalone:!0,imports:[common.CommonModule,fesm2022_button.Hl,fesm2022_tree.jH,icon.m_,expansion.MY,fesm2022_core.pZ,link_directive.g],template:'<mat-tree [dataSource]="dataSource" [treeControl]="control" class="tree">\n  <mat-tree-node\n    *matTreeNodeDef="let node; let level = level"\n    [matTreeNodePadding]="level"\n    matTreeNodePaddingIndent="64"\n    [class.selected]="node.data === selected"\n    class="row"\n    [class.child]="hasChild"\n    tabIndex="0"\n  >\n    <ng-container [ngTemplateOutlet]="label" [ngTemplateOutletContext]="node"> </ng-container>\n  </mat-tree-node>\n\n  <mat-tree-node\n    *matTreeNodeDef="let node; let level = level; when: hasChild"\n    class="row"\n    [class.selected]="node.data === selected"\n    (mouseup)="selectNode(node.data)"\n  >\n    <button mat-icon-button matTreeNodeToggle class="toggle" [attr.aria-label]="\'Toggle \' + node.label">\n      <mat-icon>\n        {{ control.isExpanded(node) ? \'keyboard_arrow_up\' : \'chevron_right\' }}\n      </mat-icon>\n    </button>\n\n    <ng-container [ngTemplateOutlet]="label" [ngTemplateOutletContext]="node"> </ng-container>\n  </mat-tree-node>\n</mat-tree>\n\n<ng-template let-label="label" let-data="data" #label>\n  <div class="label-container">\n    <a\n      *ngIf="data.link; else noLink"\n      [hraLink]="data.link"\n      [queryParams]="{ id: data.id }"\n      class="link"\n      (mouseup)="selectNode(data)"\n    >\n      {{ label }}\n    </a>\n    <ng-template #noLink>\n      <span>{{ label }}</span>\n    </ng-template>\n  </div>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[tissue_tree_list_componentngResource_default()]})],TissueTreeListComponent);const tissue_tree_list_component_stories={title:"TissueTreeListComponent",component:TissueTreeListComponent,parameters:{state:{states:[link_registry_state.P]}}},Primary={args:{nodes:{id1:{label:"Kidney",children:["id2","id3"]},id2:{label:"Ascending thin limb",link:(0,link_registry_model.cp)("id2")},id3:{label:"Cortical collecting duct",link:(0,link_registry_model.cp)("id3")},id4:{label:"Large Intestine",link:(0,link_registry_model.cp)("id4"),children:["id5"]},id5:{label:"Crypt of Lieberkuhn",link:(0,link_registry_model.cp)("id5")},id6:{label:"Liver",children:["id7"]},id7:{label:"Liver lobule",link:(0,link_registry_model.cp)("id7")}}}},__namedExportsOrder=["Primary"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  args: {\n    nodes\n  }\n}",...Primary.parameters?.docs?.source}}}},"./libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  overflow-y: auto;\n}\n:host .row {\n  min-height: unset;\n}\n:host .row.child {\n  padding-left: 2rem !important;\n}\n@media (min-width: 90rem) {\n  :host .row.child {\n    padding-left: 4rem !important;\n  }\n}\n:host .row.selected {\n  background-color: #fff3f0;\n}\n:host .row .toggle {\n  width: 2rem;\n  height: 2rem;\n  padding: 0.25rem;\n}\n:host .row .label-container {\n  display: flex;\n  align-items: center;\n  min-height: 2rem;\n  border-radius: 0.25rem;\n  width: 100%;\n  font-weight: 500;\n  font-size: 0.75rem;\n}\n:host .row .label-container .link {\n  cursor: pointer;\n  text-decoration: none;\n  color: rgba(var(--dark-primary-text));\n  line-height: normal;\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  display: flex;\n}\n:host .row.selected .label-container .link {\n  color: rgba(var(--palette-accent-A200));\n}\n:host .row:focus-visible {\n  outline: none;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);