(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[792],{"./.storybook/styles.scss?ngGlobalStyle":()=>{},"./dist/compodoc sync recursive ^\\.\\/.*\\/documentation\\.json$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./cdk/documentation.json":"./dist/compodoc/cdk/documentation.json","./components-atoms/documentation.json":"./dist/compodoc/components-atoms/documentation.json","./components-behavioral/documentation.json":"./dist/compodoc/components-behavioral/documentation.json","./components-molecules/documentation.json":"./dist/compodoc/components-molecules/documentation.json","./components-organisms/documentation.json":"./dist/compodoc/components-organisms/documentation.json","./design-system/documentation.json":"./dist/compodoc/design-system/documentation.json","./shared-theming/documentation.json":"./dist/compodoc/shared-theming/documentation.json"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./dist/compodoc sync recursive ^\\.\\/.*\\/documentation\\.json$"},"./dist/compodoc/cdk/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[{"name":"AssetUrlPipe","id":"pipe-AssetUrlPipe-a96539a34995185b2ebac2f091d9862610837705da27c441cb5f561237308a6d653aa951546ae0a4803ecf648569919946162f248c3df56420b633459338eb07","file":"app-href/src/lib/asset-url.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"<p>Create a full url with the appHref prefixed</p>\\n","rawdescription":"\\nCreate a full url with the appHref prefixed","properties":[{"name":"markChangeRef","defaultValue":"effect(() => {\\n    if (this.prevHref() !== null) {\\n      this.cdr.markForCheck();\\n    }\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Notifies the change detection when the appHref changes</p>\\n","line":19,"rawdescription":"\\nNotifies the change detection when the appHref changes","modifierKind":[124,148]}],"methods":[{"name":"transform","args":[{"name":"path","type":"string","deprecated":false,"deprecationMessage":""},{"name":"type","type":"","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"string","typeParameters":[],"line":31,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nPrefixes an asset path with the current appHref value\\n","description":"<p>Prefixes an asset path with the current appHref value</p>\\n","jsdoctags":[{"name":{"pos":944,"end":948,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"path"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":938,"end":943,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Path to asset</p>\\n"},{"name":{"pos":975,"end":979,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"type"},"type":"","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":969,"end":974,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Whether the url will be bound to a css property</p>\\n"},{"tagName":{"pos":1034,"end":1041,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A full url</p>\\n"}]}],"standalone":true,"pure":false,"ngname":"assetUrl","sourceCode":"import { ChangeDetectorRef, Pipe, PipeTransform, effect, inject } from \'@angular/core\';\\nimport { computedPrevious } from \'ngxtension/computed-previous\';\\nimport { AppHrefService } from \'./app-href.service\';\\n\\n/** Create a full url with the appHref prefixed */\\n@Pipe({\\n  name: \'assetUrl\',\\n  standalone: true,\\n  pure: false,\\n})\\nexport class AssetUrlPipe implements PipeTransform {\\n  /** Current appHref value signal */\\n  private readonly appHref = inject(AppHrefService).appHref;\\n  /** Previous appHref value signal */\\n  private readonly prevHref = computedPrevious(this.appHref);\\n  /** Reference to the change detector */\\n  private readonly cdr = inject(ChangeDetectorRef);\\n  /** Notifies the change detection when the appHref changes */\\n  protected readonly markChangeRef = effect(() => {\\n    if (this.prevHref() !== null) {\\n      this.cdr.markForCheck();\\n    }\\n  });\\n\\n  /**\\n   * Prefixes an asset path with the current appHref value\\n   * @param path Path to asset\\n   * @param type Whether the url will be bound to a css property\\n   * @returns A full url\\n   */\\n  transform(path: string, type?: \'css\'): string {\\n    const url = `${this.appHref()}${path}`;\\n    return type === \'css\' ? `url(\\"${url}\\")` : url;\\n  }\\n}\\n"}],"interfaces":[{"name":"ActionConstructor","id":"interface-ActionConstructor-79d65b59eb27f474fc1f2fbef720f134360ce0d1017b538dfe48bd3ca60c6a0472d1789cdc31f57a5190150ce49b1ca0d304e9e44f722b1c4c992c619605ba68","file":"state/src/actions/actions.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { registerActionType } from \'./action-type-registry\';\\n\\n/** Base action type */\\nexport interface Action {\\n  /** Action type */\\n  readonly type: string;\\n}\\n\\n/** Base action constructor */\\nexport interface ActionConstructor {\\n  /** Action type */\\n  readonly type: string;\\n\\n  /** Create a new action */\\n  new (): Action;\\n}\\n\\n/**\\n * Creates an action factory that adds a common group string to each action type\\n * @param group Common action type group\\n * @returns An action factory\\n */\\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\\n  return (type) => Action(`[${group}] ${type}`);\\n}\\n\\n/**\\n * Creates a new base action with a specified type\\n * @param type Action type\\n * @returns A base action class\\n */\\nexport function Action(type: string): ActionConstructor {\\n  registerActionType(type);\\n  return class BaseAction {\\n    static readonly type = type;\\n    readonly type = type;\\n  };\\n}\\n","properties":[{"name":"type","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Action type</p>\\n","line":12,"rawdescription":"\\nAction type","modifierKind":[148]}],"indexSignatures":[],"kind":180,"description":"<p>Base action constructor</p>\\n","rawdescription":"\\nBase action constructor","methods":[],"extends":[]},{"name":"DestructorScope","id":"interface-DestructorScope-c4b53b823f2f6845a68f4b66881cc81070616d6b5124d0d203f80f1eeee060d84d1d05eab91b3a6e833ea4aef93cdf9d68ef0051d58b85ca5101c609dad76a05","file":"injectors/src/lib/on-destroy/destructor-subject.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ReplaySubject } from \'rxjs\';\\n\\n/** Object on which cleanup functions can be registered */\\nexport interface DestructorScope {\\n  /**\\n   * Register a cleanup function\\n   * @param cb Cleanup callback function\\n   */\\n  onDestroy(cb: () => void): void;\\n}\\n\\n/**\\n * Determines whether an object is destructor scope like\\n * @param obj Value to test\\n * @returns true if the object seems to be a destructor scope, otherwise false\\n */\\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\\n  const isObject = typeof obj === \'object\' && obj !== null;\\n  return isObject && \'onDestroy\' in obj && typeof obj.onDestroy === \'function\';\\n}\\n\\n/**\\n * A subject type that is associated with a destructor scope.\\n * When the cleanup function is run the subject emits a single\\n * undefined value and immediately completes\\n */\\nexport class ScopedDestructorSubject extends ReplaySubject<void> {\\n  /**\\n   * Creates a new subject and attaches cleanup to the destructor scope\\n   * @param scope Associated scope\\n   */\\n  constructor(scope: DestructorScope) {\\n    super(1);\\n\\n    scope.onDestroy(() => {\\n      this.next();\\n      this.complete();\\n    });\\n  }\\n}\\n","properties":[],"indexSignatures":[],"kind":173,"description":"<p>Object on which cleanup functions can be registered</p>\\n","rawdescription":"\\nObject on which cleanup functions can be registered","methods":[{"name":"onDestroy","args":[{"name":"cb","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":9,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRegister a cleanup function\\n","description":"<p>Register a cleanup function</p>\\n","jsdoctags":[{"name":{"pos":184,"end":186,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"cb"},"type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"pos":178,"end":183,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Cleanup callback function</p>\\n"}]}],"extends":[]},{"name":"FontIconsConfig","id":"interface-FontIconsConfig-6505a5c6b505fd0f89096763ca0276c56fb5a8eb17c333bdf4a0e98caffea9ea1f571700721cf36b01133629bf438d5b25c93d64025355fe3fb27b80098c31ae","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\n  EnvironmentProviders,\\n  InjectionToken,\\n  makeEnvironmentProviders,\\n  inject,\\n  provideAppInitializer,\\n} from \'@angular/core\';\\nimport { MatIconRegistry } from \'@angular/material/icon\';\\nimport { DomSanitizer } from \'@angular/platform-browser\';\\nimport { AppHrefService } from \'@hra-ui/cdk/app-href\';\\nimport { createSvgIconResolver } from \'./resolvers\';\\n\\n/** Font icon provider configuration */\\nexport interface FontIconsConfig {\\n  /** Default classes to apply when no font set is specified */\\n  defaultClasses?: string[];\\n}\\n\\n/** Svg icon provider configuration */\\nexport interface SvgIconsConfig {\\n  /** Base directory containing icons and namespace folders */\\n  directory?: string;\\n}\\n\\n/** Configuration when providing font icons and svg icon at the same time */\\nexport interface IconsConfig {\\n  /** Font icon configuration */\\n  fontIcons?: FontIconsConfig;\\n  /** Svg icon configuration */\\n  svgIcons?: SvgIconsConfig;\\n}\\n\\n/** Injection token for font icon configuration */\\nconst FONT_ICONS_CONFIG = new InjectionToken<Required<FontIconsConfig>>(\'FONT_ICONS_CONFIG\');\\n\\n/** Injection token for svg icon configuration */\\nconst SVG_ICONS_CONFIG = new InjectionToken<Required<SvgIconsConfig>>(\'SVG_ICONS_CONFIG\');\\n\\n/** Default values for font icon configuration */\\nconst DEFAULT_FONT_ICONS_CONFIG: Required<FontIconsConfig> = {\\n  defaultClasses: [],\\n};\\n\\n/** Default values for svg icon configuration */\\nconst DEFAULT_SVG_ICONS_CONFIG: Required<SvgIconsConfig> = {\\n  directory: \'assets/icons\',\\n};\\n\\n/**\\n * Factory for registering default font icon classes\\n *\\n * @param registry Material icon registry\\n * @param config Configuration object\\n * @returns Registration function\\n */\\nfunction registerDefaultFontSetClassesFactory(\\n  registry: MatIconRegistry,\\n  { defaultClasses }: Required<FontIconsConfig>,\\n): () => void {\\n  return () => {\\n    const existingClasses = registry.getDefaultFontSetClass();\\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\\n  };\\n}\\n\\n/**\\n * Factory for registering a svg icon resolver\\n *\\n * @param registry Material icon registry\\n * @param location Location service\\n * @param sanitizer Resource url sanitizer\\n * @param config Configuration object\\n * @returns Registration function\\n */\\nfunction registerSvgIconResolverFactory(\\n  registry: MatIconRegistry,\\n  appHrefService: AppHrefService,\\n  sanitizer: DomSanitizer,\\n  { directory }: Required<SvgIconsConfig>,\\n): () => void {\\n  return () => {\\n    const resolver = createSvgIconResolver({\\n      appHref: appHrefService.appHref,\\n      sanitizer,\\n      directory,\\n    });\\n\\n    registry.addSvgIconResolver(resolver);\\n  };\\n}\\n\\n/**\\n * Provides font icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    {\\n      provide: FONT_ICONS_CONFIG,\\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\\n    },\\n    provideAppInitializer(() => {\\n      const initializerFn = registerDefaultFontSetClassesFactory(inject(MatIconRegistry), inject(FONT_ICONS_CONFIG));\\n      return initializerFn();\\n    }),\\n  ]);\\n}\\n\\n/**\\n * Provides svg icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    {\\n      provide: SVG_ICONS_CONFIG,\\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\\n    },\\n    provideAppInitializer(() => {\\n      const initializerFn = registerSvgIconResolverFactory(\\n        inject(MatIconRegistry),\\n        inject(AppHrefService),\\n        inject(DomSanitizer),\\n        inject(SVG_ICONS_CONFIG),\\n      );\\n      return initializerFn();\\n    }),\\n  ]);\\n}\\n\\n/**\\n * Provides both font and svg icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideIcons(config: IconsConfig = {}): EnvironmentProviders {\\n  return makeEnvironmentProviders([provideFontIcons(config.fontIcons), provideSvgIcons(config.svgIcons)]);\\n}\\n","properties":[{"name":"defaultClasses","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":true,"description":"<p>Default classes to apply when no font set is specified</p>\\n","line":16,"rawdescription":"\\nDefault classes to apply when no font set is specified"}],"indexSignatures":[],"kind":171,"description":"<p>Font icon provider configuration</p>\\n","rawdescription":"\\nFont icon provider configuration","methods":[],"extends":[]},{"name":"HoverContext","id":"interface-HoverContext-49a4c26570f0d04f23fe4fbc0dc828e41ceb60105a94f0556e120079f4aeedd891c1d1b2ef505b2650ef16efedefd686eee12c9218a6144616e86020fe84d016","file":"src/lib/hover/hover.directive.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectionPositionPair, Overlay, OverlayRef } from \'@angular/cdk/overlay\';\\nimport { TemplatePortal } from \'@angular/cdk/portal\';\\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from \'@angular/core\';\\n\\n/**  Context passed to hover content templates */\\nexport interface HoverContext<T = unknown> {\\n  /** Data provided by the user for use inside the content template */\\n  $implicit: T;\\n}\\n\\n/** Hover overlay directive to be used across the application */\\n@Directive({\\n  selector: \'[hraHover]\',\\n  standalone: true,\\n})\\nexport class HoverDirective<T = unknown> {\\n  /**  Setter for the content to be displayed in the overlay */\\n  @Input(\'hraHover\')\\n  set content(content: TemplateRef<HoverContext<T>>) {\\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\\n    this.updateContent();\\n  }\\n\\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\\n  @Input(\'hraHoverData\')\\n  set data(data: T) {\\n    this._data = { $implicit: data };\\n    if (this.portal) {\\n      this.portal.context = this._data;\\n      this.updateContent();\\n    }\\n  }\\n\\n  /**  Reference to the element that the directive is attached to */\\n  private readonly el: Element = inject(ElementRef).nativeElement;\\n\\n  /** Overlay service */\\n  private readonly overlay = inject(Overlay);\\n\\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\\n  private overlayRef?: OverlayRef;\\n\\n  /** Reference view container that the directive is attached to */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Store the data that is passed into the data input property */\\n  private _data?: HoverContext<T>;\\n\\n  /** Portal that is created to display the overlay */\\n  portal?: TemplatePortal<HoverContext<T>>;\\n\\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\\n  @HostListener(\'mouseover\')\\n  startHover(): void {\\n    const { portal } = this;\\n    if (portal) {\\n      this.overlayRef = this.createOverlay();\\n      this.overlayRef.attach(portal);\\n    }\\n  }\\n\\n  /** Function to handle the mouse out event to detach the portal  */\\n  @HostListener(\'mouseout\')\\n  endHover(): void {\\n    const { overlayRef } = this;\\n    overlayRef?.dispose();\\n  }\\n\\n  /** Function to handle the updation of overlay with up to date content when the input changes */\\n  private updateContent(): void {\\n    const { overlayRef, portal } = this;\\n    if (overlayRef && portal) {\\n      overlayRef.detach();\\n      overlayRef.attach(portal);\\n    }\\n  }\\n\\n  /** Function to create overlay and set its position */\\n  private createOverlay(): OverlayRef {\\n    return this.overlay.create({\\n      positionStrategy: this.overlay\\n        .position()\\n        .flexibleConnectedTo(this.el)\\n        .withPositions([\\n          new ConnectionPositionPair({ originX: \'start\', originY: \'bottom\' }, { overlayX: \'start\', overlayY: \'top\' }),\\n          new ConnectionPositionPair({ originX: \'end\', originY: \'bottom\' }, { overlayX: \'end\', overlayY: \'top\' }),\\n          new ConnectionPositionPair({ originX: \'start\', originY: \'top\' }, { overlayX: \'start\', overlayY: \'bottom\' }),\\n          new ConnectionPositionPair({ originX: \'end\', originY: \'top\' }, { overlayX: \'end\', overlayY: \'bottom\' }),\\n        ])\\n        .withPush(true),\\n    });\\n  }\\n}\\n","properties":[{"name":"$implicit","deprecated":false,"deprecationMessage":"","type":"T","indexKey":"","optional":false,"description":"<p>Data provided by the user for use inside the content template</p>\\n","line":8,"rawdescription":"\\nData provided by the user for use inside the content template"}],"indexSignatures":[],"kind":171,"description":"<p>Context passed to hover content templates</p>\\n","rawdescription":"\\nContext passed to hover content templates","methods":[],"extends":[]},{"name":"IconsConfig","id":"interface-IconsConfig-6505a5c6b505fd0f89096763ca0276c56fb5a8eb17c333bdf4a0e98caffea9ea1f571700721cf36b01133629bf438d5b25c93d64025355fe3fb27b80098c31ae","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\n  EnvironmentProviders,\\n  InjectionToken,\\n  makeEnvironmentProviders,\\n  inject,\\n  provideAppInitializer,\\n} from \'@angular/core\';\\nimport { MatIconRegistry } from \'@angular/material/icon\';\\nimport { DomSanitizer } from \'@angular/platform-browser\';\\nimport { AppHrefService } from \'@hra-ui/cdk/app-href\';\\nimport { createSvgIconResolver } from \'./resolvers\';\\n\\n/** Font icon provider configuration */\\nexport interface FontIconsConfig {\\n  /** Default classes to apply when no font set is specified */\\n  defaultClasses?: string[];\\n}\\n\\n/** Svg icon provider configuration */\\nexport interface SvgIconsConfig {\\n  /** Base directory containing icons and namespace folders */\\n  directory?: string;\\n}\\n\\n/** Configuration when providing font icons and svg icon at the same time */\\nexport interface IconsConfig {\\n  /** Font icon configuration */\\n  fontIcons?: FontIconsConfig;\\n  /** Svg icon configuration */\\n  svgIcons?: SvgIconsConfig;\\n}\\n\\n/** Injection token for font icon configuration */\\nconst FONT_ICONS_CONFIG = new InjectionToken<Required<FontIconsConfig>>(\'FONT_ICONS_CONFIG\');\\n\\n/** Injection token for svg icon configuration */\\nconst SVG_ICONS_CONFIG = new InjectionToken<Required<SvgIconsConfig>>(\'SVG_ICONS_CONFIG\');\\n\\n/** Default values for font icon configuration */\\nconst DEFAULT_FONT_ICONS_CONFIG: Required<FontIconsConfig> = {\\n  defaultClasses: [],\\n};\\n\\n/** Default values for svg icon configuration */\\nconst DEFAULT_SVG_ICONS_CONFIG: Required<SvgIconsConfig> = {\\n  directory: \'assets/icons\',\\n};\\n\\n/**\\n * Factory for registering default font icon classes\\n *\\n * @param registry Material icon registry\\n * @param config Configuration object\\n * @returns Registration function\\n */\\nfunction registerDefaultFontSetClassesFactory(\\n  registry: MatIconRegistry,\\n  { defaultClasses }: Required<FontIconsConfig>,\\n): () => void {\\n  return () => {\\n    const existingClasses = registry.getDefaultFontSetClass();\\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\\n  };\\n}\\n\\n/**\\n * Factory for registering a svg icon resolver\\n *\\n * @param registry Material icon registry\\n * @param location Location service\\n * @param sanitizer Resource url sanitizer\\n * @param config Configuration object\\n * @returns Registration function\\n */\\nfunction registerSvgIconResolverFactory(\\n  registry: MatIconRegistry,\\n  appHrefService: AppHrefService,\\n  sanitizer: DomSanitizer,\\n  { directory }: Required<SvgIconsConfig>,\\n): () => void {\\n  return () => {\\n    const resolver = createSvgIconResolver({\\n      appHref: appHrefService.appHref,\\n      sanitizer,\\n      directory,\\n    });\\n\\n    registry.addSvgIconResolver(resolver);\\n  };\\n}\\n\\n/**\\n * Provides font icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    {\\n      provide: FONT_ICONS_CONFIG,\\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\\n    },\\n    provideAppInitializer(() => {\\n      const initializerFn = registerDefaultFontSetClassesFactory(inject(MatIconRegistry), inject(FONT_ICONS_CONFIG));\\n      return initializerFn();\\n    }),\\n  ]);\\n}\\n\\n/**\\n * Provides svg icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    {\\n      provide: SVG_ICONS_CONFIG,\\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\\n    },\\n    provideAppInitializer(() => {\\n      const initializerFn = registerSvgIconResolverFactory(\\n        inject(MatIconRegistry),\\n        inject(AppHrefService),\\n        inject(DomSanitizer),\\n        inject(SVG_ICONS_CONFIG),\\n      );\\n      return initializerFn();\\n    }),\\n  ]);\\n}\\n\\n/**\\n * Provides both font and svg icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideIcons(config: IconsConfig = {}): EnvironmentProviders {\\n  return makeEnvironmentProviders([provideFontIcons(config.fontIcons), provideSvgIcons(config.svgIcons)]);\\n}\\n","properties":[{"name":"fontIcons","deprecated":false,"deprecationMessage":"","type":"FontIconsConfig","indexKey":"","optional":true,"description":"<p>Font icon configuration</p>\\n","line":28,"rawdescription":"\\nFont icon configuration"},{"name":"svgIcons","deprecated":false,"deprecationMessage":"","type":"SvgIconsConfig","indexKey":"","optional":true,"description":"<p>Svg icon configuration</p>\\n","line":30,"rawdescription":"\\nSvg icon configuration"}],"indexSignatures":[],"kind":171,"description":"<p>Configuration when providing font icons and svg icon at the same time</p>\\n","rawdescription":"\\nConfiguration when providing font icons and svg icon at the same time","methods":[],"extends":[]},{"name":"SelectOptions","id":"interface-SelectOptions-2a1e9b4935fb82769eb1dadf40ec0992c0e3f24e9bc0b33376fb53e5f271e89e87100bf0c22b87ea85ce9dd36fbdd2e6fb22f6978dc61aff4d02559ba5c9c8f0","file":"injectors/src/lib/select/select.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectorRef, inject } from \'@angular/core\';\\nimport { Any } from \'@hra-ui/utils/types\';\\nimport { StateToken, Store } from \'@ngxs/store\';\\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from \'rxjs\';\\nimport { injectDestroy$ } from \'../on-destroy/on-destroy\';\\n\\n/** Selector type for select style functions */\\nexport type StateSelector<T> = ((...args: Any[]) => T) | StateToken<T>;\\n\\n/** `select$` configuration options */\\nexport interface SelectOptions {\\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\\n  notifyOnChange?: boolean;\\n}\\n\\n/**\\n * Marks a view for change detection whenever a new value is emitted\\n * @param options Options to explicitly disable marking\\n * @returns A rxjs operator\\n */\\nfunction markForCheck<T>(options?: SelectOptions): MonoTypeOperatorFunction<T> {\\n  const notifyOnChange = options?.notifyOnChange ?? true;\\n  const cdr = inject(ChangeDetectorRef, { optional: true });\\n  if (notifyOnChange && cdr) {\\n    const markFn = () => cdr.markForCheck();\\n    return tap({ next: markFn, error: markFn, complete: markFn });\\n  }\\n\\n  return (source) => source;\\n}\\n\\n/**\\n * Creates an observable emitting parts of the state. The observable\'s lifetime\\n * is automatically tied to the injection context where this is called.\\n * @param selector State selection function or token\\n * @param options Additional select options\\n * @returns An observable of the selected state\\n */\\nexport function select$<T>(selector: StateSelector<T>, options?: SelectOptions): Observable<T> {\\n  return inject(Store)\\n    .select(selector as StateToken<T>)\\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\\n}\\n","properties":[{"name":"notifyOnChange","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":true,"description":"<p>Whether to mark the containing view for change detection on emits. Defaults to true.</p>\\n","line":13,"rawdescription":"\\nWhether to mark the containing view for change detection on emits. Defaults to true."}],"indexSignatures":[],"kind":171,"description":"<p><code>select$</code> configuration options</p>\\n","rawdescription":"\\n`select$` configuration options","methods":[],"extends":[]},{"name":"SvgIconResolverConfig","id":"interface-SvgIconResolverConfig-8fd5990c884e085500d881e468f0642aea026a4f7cf5ac5ac266c1b88a84f1f9692c68077e10516b54a28f56c01ccb5b6e2bcf04ad4af65202668e0c5ec8cd5d","file":"icons/src/lib/resolvers.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Signal } from \'@angular/core\';\\nimport { IconResolver } from \'@angular/material/icon\';\\nimport { DomSanitizer } from \'@angular/platform-browser\';\\n\\n/** Configuration for a svg icon resolver */\\nexport interface SvgIconResolverConfig {\\n  /** App href value */\\n  appHref: Signal<string>;\\n  /** Sanitizer to create resource urls */\\n  sanitizer: DomSanitizer;\\n  /** Base directory of icons and namespace folders */\\n  directory: string;\\n}\\n\\n/**\\n * Creates svg icon resolver with the specified configuration.\\n * The function resolves all svg icons to `directory/[namespace/]name.svg`\\n *\\n * @param config Configuration object\\n * @returns A resolver function\\n */\\nexport function createSvgIconResolver(config: SvgIconResolverConfig): IconResolver {\\n  const { appHref, sanitizer, directory } = config;\\n  return (name, namespace) => {\\n    const path = joinPath(directory, namespace, name) + \'.svg\';\\n    const url = appHref() + path;\\n    return sanitizer.bypassSecurityTrustResourceUrl(url);\\n  };\\n}\\n\\n/**\\n * Joins path segments into a single string. Removes empty segments and double \'/\' sequences.\\n *\\n * @param segments Segments, some of which may be the empty string\\n * @returns The joined path\\n */\\nfunction joinPath(...segments: string[]): string {\\n  return segments.join(\'/\').replace(/\\\\/{2,}/g, \'/\');\\n}\\n","properties":[{"name":"appHref","deprecated":false,"deprecationMessage":"","type":"Signal<string>","indexKey":"","optional":false,"description":"<p>App href value</p>\\n","line":8,"rawdescription":"\\nApp href value"},{"name":"directory","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Base directory of icons and namespace folders</p>\\n","line":12,"rawdescription":"\\nBase directory of icons and namespace folders"},{"name":"sanitizer","deprecated":false,"deprecationMessage":"","type":"DomSanitizer","indexKey":"","optional":false,"description":"<p>Sanitizer to create resource urls</p>\\n","line":10,"rawdescription":"\\nSanitizer to create resource urls"}],"indexSignatures":[],"kind":171,"description":"<p>Configuration for a svg icon resolver</p>\\n","rawdescription":"\\nConfiguration for a svg icon resolver","methods":[],"extends":[]},{"name":"SvgIconsConfig","id":"interface-SvgIconsConfig-6505a5c6b505fd0f89096763ca0276c56fb5a8eb17c333bdf4a0e98caffea9ea1f571700721cf36b01133629bf438d5b25c93d64025355fe3fb27b80098c31ae","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import {\\n  EnvironmentProviders,\\n  InjectionToken,\\n  makeEnvironmentProviders,\\n  inject,\\n  provideAppInitializer,\\n} from \'@angular/core\';\\nimport { MatIconRegistry } from \'@angular/material/icon\';\\nimport { DomSanitizer } from \'@angular/platform-browser\';\\nimport { AppHrefService } from \'@hra-ui/cdk/app-href\';\\nimport { createSvgIconResolver } from \'./resolvers\';\\n\\n/** Font icon provider configuration */\\nexport interface FontIconsConfig {\\n  /** Default classes to apply when no font set is specified */\\n  defaultClasses?: string[];\\n}\\n\\n/** Svg icon provider configuration */\\nexport interface SvgIconsConfig {\\n  /** Base directory containing icons and namespace folders */\\n  directory?: string;\\n}\\n\\n/** Configuration when providing font icons and svg icon at the same time */\\nexport interface IconsConfig {\\n  /** Font icon configuration */\\n  fontIcons?: FontIconsConfig;\\n  /** Svg icon configuration */\\n  svgIcons?: SvgIconsConfig;\\n}\\n\\n/** Injection token for font icon configuration */\\nconst FONT_ICONS_CONFIG = new InjectionToken<Required<FontIconsConfig>>(\'FONT_ICONS_CONFIG\');\\n\\n/** Injection token for svg icon configuration */\\nconst SVG_ICONS_CONFIG = new InjectionToken<Required<SvgIconsConfig>>(\'SVG_ICONS_CONFIG\');\\n\\n/** Default values for font icon configuration */\\nconst DEFAULT_FONT_ICONS_CONFIG: Required<FontIconsConfig> = {\\n  defaultClasses: [],\\n};\\n\\n/** Default values for svg icon configuration */\\nconst DEFAULT_SVG_ICONS_CONFIG: Required<SvgIconsConfig> = {\\n  directory: \'assets/icons\',\\n};\\n\\n/**\\n * Factory for registering default font icon classes\\n *\\n * @param registry Material icon registry\\n * @param config Configuration object\\n * @returns Registration function\\n */\\nfunction registerDefaultFontSetClassesFactory(\\n  registry: MatIconRegistry,\\n  { defaultClasses }: Required<FontIconsConfig>,\\n): () => void {\\n  return () => {\\n    const existingClasses = registry.getDefaultFontSetClass();\\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\\n  };\\n}\\n\\n/**\\n * Factory for registering a svg icon resolver\\n *\\n * @param registry Material icon registry\\n * @param location Location service\\n * @param sanitizer Resource url sanitizer\\n * @param config Configuration object\\n * @returns Registration function\\n */\\nfunction registerSvgIconResolverFactory(\\n  registry: MatIconRegistry,\\n  appHrefService: AppHrefService,\\n  sanitizer: DomSanitizer,\\n  { directory }: Required<SvgIconsConfig>,\\n): () => void {\\n  return () => {\\n    const resolver = createSvgIconResolver({\\n      appHref: appHrefService.appHref,\\n      sanitizer,\\n      directory,\\n    });\\n\\n    registry.addSvgIconResolver(resolver);\\n  };\\n}\\n\\n/**\\n * Provides font icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    {\\n      provide: FONT_ICONS_CONFIG,\\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\\n    },\\n    provideAppInitializer(() => {\\n      const initializerFn = registerDefaultFontSetClassesFactory(inject(MatIconRegistry), inject(FONT_ICONS_CONFIG));\\n      return initializerFn();\\n    }),\\n  ]);\\n}\\n\\n/**\\n * Provides svg icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    {\\n      provide: SVG_ICONS_CONFIG,\\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\\n    },\\n    provideAppInitializer(() => {\\n      const initializerFn = registerSvgIconResolverFactory(\\n        inject(MatIconRegistry),\\n        inject(AppHrefService),\\n        inject(DomSanitizer),\\n        inject(SVG_ICONS_CONFIG),\\n      );\\n      return initializerFn();\\n    }),\\n  ]);\\n}\\n\\n/**\\n * Provides both font and svg icons\\n *\\n * @param config Configuration object\\n * @returns Application providers\\n */\\nexport function provideIcons(config: IconsConfig = {}): EnvironmentProviders {\\n  return makeEnvironmentProviders([provideFontIcons(config.fontIcons), provideSvgIcons(config.svgIcons)]);\\n}\\n","properties":[{"name":"directory","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Base directory containing icons and namespace folders</p>\\n","line":22,"rawdescription":"\\nBase directory containing icons and namespace folders"}],"indexSignatures":[],"kind":171,"description":"<p>Svg icon provider configuration</p>\\n","rawdescription":"\\nSvg icon provider configuration","methods":[],"extends":[]}],"injectables":[{"name":"AppHrefService","id":"injectable-AppHrefService-ddac3f00aa86fa8b22b821fb6ad04937a9b62c821b2b2d3f585f04fc9e1aee90b20f0945d85a10a695a6dbac92da8633af9f3db908d84e86cca1fed8243783d5","file":"app-href/src/lib/app-href.service.ts","properties":[{"name":"appHref","defaultValue":"this.appHrefSignal.asReadonly()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Readonly appHref value signal</p>\\n","line":21,"rawdescription":"\\nReadonly appHref value signal","modifierKind":[148]}],"methods":[{"name":"resetAppHref","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":35,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nResets the appHref to it\'s initial value\\n","description":"<p>Resets the appHref to it&#39;s initial value</p>\\n"},{"name":"setAppHref","args":[{"name":"href","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":28,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates the current appHref value\\n\\n","description":"<p>Updates the current appHref value</p>\\n","jsdoctags":[{"name":{"pos":839,"end":843,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"href"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":833,"end":838,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>New appHref value</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Service for getting and setting the appHref</p>\\n","rawdescription":"\\n\\nService for getting and setting the appHref\\n","sourceCode":"import { Injectable, InjectionToken, inject, signal } from \'@angular/core\';\\nimport { getCurrentScriptBasePath } from \'./current-script\';\\n\\n/** Initial value for appHref. Defaults to the current script\'s base path */\\nexport const INITIAL_APP_HREF = new InjectionToken<string>(\'InitialAppHref\', {\\n  providedIn: \'root\',\\n  factory: () => getCurrentScriptBasePath(),\\n});\\n\\n/**\\n * Service for getting and setting the appHref\\n */\\n@Injectable({ providedIn: \'root\' })\\nexport class AppHrefService {\\n  /** Initial appHref value */\\n  private readonly initialAppHref = inject(INITIAL_APP_HREF);\\n  /** Current appHref value signal */\\n  private readonly appHrefSignal = signal(this.initialAppHref);\\n\\n  /** Readonly appHref value signal */\\n  readonly appHref = this.appHrefSignal.asReadonly();\\n\\n  /**\\n   * Updates the current appHref value\\n   *\\n   * @param href New appHref value\\n   */\\n  setAppHref(href: string): void {\\n    this.appHrefSignal.set(href);\\n  }\\n\\n  /**\\n   * Resets the appHref to it\'s initial value\\n   */\\n  resetAppHref(): void {\\n    this.setAppHref(this.initialAppHref);\\n  }\\n}\\n","extends":[],"type":"injectable"},{"name":"BaseHrefState","id":"injectable-BaseHrefState-1be6cbd75a5f6aa5f68ad6a0f54a1d08558c7734ff174ec131e1420651b13d0bd410d82d1052133b70996882de9dec7ca422dd10cb04136ded2f3940a7868070","file":"state/src/base-href/base-href.state.ts","properties":[],"methods":[{"name":"setBaseHref","args":[{"name":"ctx","type":"StateContext<string>","deprecated":false,"deprecationMessage":""},{"type":"Set","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":20,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSets base href value\\n","description":"<p>Sets base href value</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Set"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":329,"end":332,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"StateContext<string>","deprecated":false,"deprecationMessage":"","tagName":{"pos":323,"end":328,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>state context</p>\\n"},{"type":"Set","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State holding the base href</p>\\n","rawdescription":"\\n\\nState holding the base href\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { Action, State, StateContext } from \'@ngxs/store\';\\nimport { Set } from \'./base-href.actions\';\\n\\n/**\\n * State holding the base href\\n */\\n@State<string>({\\n  name: \'baseHref\',\\n  defaults: \'\',\\n})\\n@Injectable()\\nexport class BaseHrefState {\\n  /**\\n   * Sets base href value\\n   * @param ctx state context\\n   * @param { baseHref } href value\\n   */\\n  @Action(Set)\\n  setBaseHref(ctx: StateContext<string>, { baseHref }: Set) {\\n    if (baseHref !== \'\' && !baseHref.endsWith(\'/\')) {\\n      baseHref = baseHref + \'/\';\\n    }\\n    ctx.setState(baseHref);\\n  }\\n}\\n","extends":[],"type":"injectable"},{"name":"LinkRegistryState","id":"injectable-LinkRegistryState-3325fba1d80b5e5c754e81e763e79552be404284eaaefd02ae5ad7a208591b687b6adc95607127b760ead160ba5289ae67d2373cc53a3d42eef116d92bee0fbb","file":"state/src/link-registry/link-registry.state.ts","properties":[],"methods":[{"name":"addMany","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddMany","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd multiple entries\\n","description":"<p>Add multiple entries</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddMany"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1615,"end":1618,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1609,"end":1614,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddMany","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addOne","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"Add","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd a single entry\\n","description":"<p>Add a single entry</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Add"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1360,"end":1363,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1354,"end":1359,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"Add","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addYaml","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":""},{"name":"filename","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nParse and add entries from yaml\\n","description":"<p>Parse and add entries from yaml</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddFromYaml"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1859,"end":1862,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1853,"end":1858,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":1934,"end":1942,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"filename"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1928,"end":1933,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional url/filename from which the data was loaded (for improved error messages)</p>\\n"}]},{"name":"loadYaml","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<void>","typeParameters":[],"line":81,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLoad and add entries from an external yaml file\\n","description":"<p>Load and add entries from an external yaml file</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"LoadFromYaml"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":2359,"end":2362,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":2353,"end":2358,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2436,"end":2443,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable that completes when the entries has been added</p>\\n"}]},{"name":"navigate","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"Navigate","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<void>","typeParameters":[],"line":94,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNavigate to Internal or External urls from id\\n","description":"<p>Navigate to Internal or External urls from id</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Navigate"}],"modifierKind":[170,134],"jsdoctags":[{"name":{"pos":2827,"end":2830,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":2821,"end":2826,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"Navigate","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2899,"end":2906,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A promise</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State for keeping track of links globally</p>\\n","rawdescription":"\\nState for keeping track of links globally","sourceCode":"import { HttpClient } from \'@angular/common/http\';\\nimport { inject, Injectable, NgZone } from \'@angular/core\';\\nimport { Router, UrlCreationOptions } from \'@angular/router\';\\nimport { createExternalUrl } from \'@hra-ui/utils\';\\nimport { UnionMember } from \'@hra-ui/utils/types\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { load } from \'js-yaml\';\\nimport { map, Observable } from \'rxjs\';\\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from \'./link-registry.actions\';\\nimport {\\n  ExternalLinkEntry,\\n  InternalLinkEntry,\\n  LinkEntry,\\n  LinkId,\\n  LinkRegistryContext,\\n  LinkRegistryModel,\\n  LinkType,\\n  LINK_REGISTRY_SCHEMA,\\n} from \'./link-registry.model\';\\n\\n/** Query function for link entry optionally with type specified */\\nexport type LinkRegistryQuery = <T extends LinkType | string = string>(\\n  id: LinkId,\\n  type?: T,\\n) => UnionMember<LinkEntry, \'type\', T> | undefined;\\n\\n/** State for keeping track of links globally */\\n@State<LinkRegistryModel>({\\n  name: \'linkRegistry\',\\n  defaults: {},\\n})\\n@Injectable()\\nexport class LinkRegistryState {\\n  /** Http service for link loading */\\n  private readonly http = inject(HttpClient);\\n  /** Injects angular router */\\n  private readonly router = inject(Router, { optional: true });\\n  /** Injects ngZone for routing */\\n  private readonly zone = inject(NgZone);\\n\\n  /**\\n   * Add a single entry\\n   * @param ctx State context\\n   * @param action Action with id and entry to add\\n   */\\n  @Action(Add)\\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\\n    this.addMany(ctx, new AddMany({ [id]: entry }));\\n  }\\n\\n  /**\\n   * Add multiple entries\\n   * @param ctx State context\\n   * @param action Action with entries to add\\n   */\\n  @Action(AddMany)\\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\\n    ctx.patchState(entries);\\n  }\\n\\n  /**\\n   * Parse and add entries from yaml\\n   * @param ctx State context\\n   * @param action Action with raw yaml data\\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\\n   */\\n  @Action(AddFromYaml)\\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\\n    const data = load(yaml, { filename });\\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\\n    this.addMany(ctx, new AddMany(entries));\\n  }\\n\\n  /**\\n   * Load and add entries from an external yaml file\\n   * @param ctx State context\\n   * @param action Action with the external file url\\n   * @returns An observable that completes when the entries has been added\\n   */\\n  @Action(LoadFromYaml)\\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable<void> {\\n    return this.http\\n      .get(url, { responseType: \'text\' })\\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\\n  }\\n\\n  /**\\n   * Navigate to Internal or External urls from id\\n   * @param ctx State context\\n   * @param param1 Navigate action with link id\\n   * @returns A promise\\n   */\\n  @Action(Navigate)\\n  async navigate(ctx: LinkRegistryContext, { id, extras }: Navigate): Promise<void> {\\n    const entry = ctx.getState()[id];\\n    switch (entry?.type) {\\n      case LinkType.Internal:\\n        await this.navigateToInternal(entry, extras);\\n        break;\\n\\n      case LinkType.External:\\n        this.navigateToExternal(entry, extras);\\n        break;\\n\\n      default:\\n        throw new Error(`Cannot navigate to non-existing link \'${id}\'`);\\n    }\\n  }\\n\\n  /**\\n   * Method to navigate to an internal link using Angular router\\n   * @param entry Internal Link Entry with commands and extras\\n   */\\n  private async navigateToInternal(entry: InternalLinkEntry, extras: UrlCreationOptions): Promise<void> {\\n    await this.zone.run(() => this.router?.navigate(entry.commands, { ...entry.extras, ...extras }));\\n  }\\n\\n  /**\\n   * Method to navigate to an external link using window\\n   * @param entry External link entry with url, target, and rel\\n   */\\n  private navigateToExternal(entry: ExternalLinkEntry, extras: UrlCreationOptions): void {\\n    const url = createExternalUrl(entry.url, extras);\\n    window.open(url, entry.target, entry.rel);\\n  }\\n}\\n","extends":[],"type":"injectable"},{"name":"ResourceRegistryState","id":"injectable-ResourceRegistryState-ee091eca7099a68b29fcf8b081af0f6e4eec5cfb7b538ee0423d54f17301e5430869290d05c8adab76fffaddd9c6c3cfff4569f15b2e831e632827f4347dee77","file":"state/src/resource-registry/resource-registry.state.ts","properties":[],"methods":[{"name":"addMany","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddMany","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":40,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd multiple entries\\n","description":"<p>Add multiple entries</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddMany"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1038,"end":1041,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1032,"end":1037,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddMany","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addOne","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"Add","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd a single entry\\n","description":"<p>Add a single entry</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Add"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":779,"end":782,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":773,"end":778,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"Add","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addYaml","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":""},{"name":"filename","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":51,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nParse and add entries from yaml\\n","description":"<p>Parse and add entries from yaml</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddFromYaml"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1286,"end":1289,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1280,"end":1285,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":1361,"end":1369,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"filename"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1355,"end":1360,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional url/filename from which the data was loaded (for improved error messages)</p>\\n"}]},{"name":"loadMarkdown","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"LoadMarkdown","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<void>","typeParameters":[],"line":77,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdds a markdown entry with content loaded from an external file\\n","description":"<p>Adds a markdown entry with content loaded from an external file</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"LoadMarkdown"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":2284,"end":2287,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":2278,"end":2283,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"LoadMarkdown","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2375,"end":2382,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable that completes when the entry has been added</p>\\n"}]},{"name":"loadYaml","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<void>","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLoad and add entries from an external yaml file\\n","description":"<p>Load and add entries from an external yaml file</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"LoadFromYaml"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1794,"end":1797,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1788,"end":1793,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":1871,"end":1878,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable that completes when the entries has been added</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State keeping track of global resources</p>\\n","rawdescription":"\\nState keeping track of global resources","sourceCode":"import { HttpClient } from \'@angular/common/http\';\\nimport { inject, Injectable } from \'@angular/core\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { load } from \'js-yaml\';\\nimport { map, Observable } from \'rxjs\';\\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from \'./resource-registry.actions\';\\nimport {\\n  BuiltinResourceType,\\n  ResourceRegistryContext,\\n  ResourceRegistryModel,\\n  RESOURCE_REGISTRY_SCHEMA,\\n} from \'./resource-registry.model\';\\n\\n/** State keeping track of global resources */\\n@State<ResourceRegistryModel>({\\n  name: \'resourceRegistry\',\\n  defaults: {},\\n})\\n@Injectable()\\nexport class ResourceRegistryState {\\n  /** Http service for resource loading */\\n  private readonly http = inject(HttpClient);\\n\\n  /**\\n   * Add a single entry\\n   * @param ctx State context\\n   * @param action Action with id and entry to add\\n   */\\n  @Action(Add)\\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\\n    this.addMany(ctx, new AddMany({ [id]: entry }));\\n  }\\n\\n  /**\\n   * Add multiple entries\\n   * @param ctx State context\\n   * @param action Action with entries to add\\n   */\\n  @Action(AddMany)\\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\\n    ctx.patchState(entries);\\n  }\\n\\n  /**\\n   * Parse and add entries from yaml\\n   * @param ctx State context\\n   * @param action Action with raw yaml data\\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\\n   */\\n  @Action(AddFromYaml)\\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\\n    const data = load(yaml, { filename });\\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\\n    this.addMany(ctx, new AddMany(entries));\\n  }\\n\\n  /**\\n   * Load and add entries from an external yaml file\\n   * @param ctx State context\\n   * @param action Action with the external file url\\n   * @returns An observable that completes when the entries has been added\\n   */\\n  @Action(LoadFromYaml)\\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable<void> {\\n    return this.http\\n      .get(url, { responseType: \'text\' })\\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\\n  }\\n\\n  /**\\n   * Adds a markdown entry with content loaded from an external file\\n   * @param ctx State context\\n   * @param action Action with id and url to the external markdown\\n   * @returns An observable that completes when the entry has been added\\n   */\\n  @Action(LoadMarkdown)\\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable<void> {\\n    return this.http.get(url, { responseType: \'text\' }).pipe(\\n      map((markdown) => new Add(id, { type: BuiltinResourceType.Markdown, markdown })),\\n      map((action) => this.addOne(ctx, action))\\n    );\\n  }\\n}\\n","extends":[],"type":"injectable"},{"name":"StorageState","id":"injectable-StorageState-0ea776849f53b42ade81bab300bdb894f33eaab8344d5374968b6ded672350cc7bc1fcd84b705e59cdce5ba7c431f6153dbb5313152debe46e4668dc2c419376","file":"state/src/storage/storage.state.ts","properties":[],"methods":[{"name":"clear","args":[{"name":"ctx","type":"StorageContext","deprecated":false,"deprecationMessage":""},{"type":"Clear","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":63,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nclears the values of the specified storage id\\n","description":"<p>clears the values of the specified storage id</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Clear"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1781,"end":1784,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"StorageContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1775,"end":1780,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>StorageContext object</li>\\n</ul>\\n"},{"type":"Clear","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"delete","args":[{"name":"ctx","type":"StorageContext","deprecated":false,"deprecationMessage":""},{"type":"Delete","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":53,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ndeletes the value pointed by key in the list of values stored in the specified storage id\\n","description":"<p>deletes the value pointed by key in the list of values stored in the specified storage id</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Delete"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1397,"end":1400,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"StorageContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1391,"end":1396,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>StorageContext object</li>\\n</ul>\\n"},{"type":"Delete","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStorage","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Storage","typeParameters":[],"line":25,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nStorageState class to manage storage objects\\n","description":"<p>StorageState class to manage storage objects</p>\\n","modifierKind":[126],"jsdoctags":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":583,"end":590,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<ul>\\n<li>Storage objects - session and local</li>\\n</ul>\\n"}]},{"name":"set","args":[{"name":"ctx","type":"StorageContext","deprecated":false,"deprecationMessage":""},{"type":"Set","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":43,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nsets the key,value pair in the given storageId\\n","description":"<p>sets the key,value pair in the given storageId</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Set"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":966,"end":969,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"StorageContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":960,"end":965,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>StorageContext object</li>\\n</ul>\\n"},{"type":"Set","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State holding Storage types</p>\\n","rawdescription":"\\n\\nState holding Storage types\\n","sourceCode":"import { produce } from \'immer\';\\nimport { StorageContext } from \'./storage.model\';\\nimport { Injectable } from \'@angular/core\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { StorageId, StorageModel } from \'./storage.model\';\\nimport { Set, Delete, Clear } from \'./storage.actions\';\\n\\n/**\\n * State holding Storage types\\n */\\n@State<StorageModel>({\\n  name: \'storage\',\\n  defaults: {\\n    [StorageId.Local]: 0,\\n    [StorageId.Session]: 0,\\n  },\\n})\\n@Injectable()\\nexport class StorageState {\\n  /**\\n   * StorageState class to manage storage objects\\n   * @param id-Storage Identifier\\n   * @returns - Storage objects - session and local\\n   */\\n  static getStorage(id: StorageId): Storage {\\n    switch (id) {\\n      case StorageId.Local:\\n        return localStorage;\\n\\n      case StorageId.Session:\\n        return sessionStorage;\\n\\n      default:\\n        throw new Error(`No such storage \'${id}\'`);\\n    }\\n  }\\n  /**\\n   * sets the key,value pair in the given storageId\\n   * @param ctx - StorageContext object\\n   * @param param1- {id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\\n   */\\n  @Action(Set)\\n  set(ctx: StorageContext, { id, key, value }: Set): void {\\n    StorageState.getStorage(id).setItem(key, value);\\n    this.increaseChangeCount(ctx, id);\\n  }\\n  /**\\n   * deletes the value pointed by key in the list of values stored in the specified storage id\\n   * @param ctx - StorageContext object\\n   * @param param1- id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\\n   */\\n  @Action(Delete)\\n  delete(ctx: StorageContext, { id, key }: Delete): void {\\n    StorageState.getStorage(id).removeItem(key);\\n    this.increaseChangeCount(ctx, id);\\n  }\\n  /**\\n   * clears the values of the specified storage id\\n   * @param ctx - StorageContext object\\n   * @param param1 - id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\\n   */\\n  @Action(Clear)\\n  clear(ctx: StorageContext, { id }: Clear): void {\\n    StorageState.getStorage(id).clear();\\n    this.increaseChangeCount(ctx, id);\\n  }\\n  /**\\n   * increases count after each operation is performed on the specified storage id\\n   * @param ctx  - StorageContext obje\\n   * @param id - StorageId - Storage identifier for which the change count has to be updated\\n   */\\n  private increaseChangeCount(ctx: StorageContext, id: StorageId): void {\\n    ctx.setState(\\n      produce((draft) => {\\n        draft[id] += 1;\\n      }),\\n    );\\n  }\\n}\\n","extends":[],"type":"injectable"},{"name":"StyleComponentManagerService","id":"injectable-StyleComponentManagerService-68404690b99d557d9cf32aa8bf84780a121212ef3524398e3441d1ae4f520121cfce9af1f2d9093beb5b6008ff3f3c96958f2cb3cfb7f2f3e356499ddb9a6fdf","file":"styling/src/lib/style-component-manager.service.ts","properties":[],"methods":[{"name":"registerStyleComponents","args":[{"name":"components","type":"Types","deprecated":false,"deprecationMessage":""},{"name":"options","type":"literal type","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ComponentRefsFromTypes<Types>","typeParameters":["Types"],"line":58,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRegister style components. Each component is registered at most once.\\n\\n","description":"<p>Register style components. Each component is registered at most once.</p>\\n","jsdoctags":[{"name":{"pos":1598,"end":1608,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"components"},"type":"Types","deprecated":false,"deprecationMessage":"","tagName":{"pos":1592,"end":1597,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Component classes</p>\\n"},{"name":{"pos":1639,"end":1646,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"options"},"type":"literal type","deprecated":false,"deprecationMessage":"","tagName":{"pos":1633,"end":1638,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Options object</p>\\n"},{"tagName":{"pos":1668,"end":1675,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Component instance references</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Manager of global style components</p>\\n","rawdescription":"\\n\\nManager of global style components\\n","sourceCode":"import {\\n  ApplicationRef,\\n  ComponentRef,\\n  EnvironmentInjector,\\n  Injectable,\\n  Injector,\\n  Type,\\n  assertInInjectionContext,\\n  createComponent,\\n  inject,\\n  runInInjectionContext,\\n} from \'@angular/core\';\\n\\n/** Map of component types to instances */\\ntype ComponentInstanceMap = Map<Type<unknown>, ComponentRef<unknown>>;\\n\\n/** Helper that turns an array of types into an array of component refs */\\ntype ComponentRefsFromTypes<Types extends Type<unknown>[]> = {\\n  [Index in keyof Types]: ComponentRef<InstanceType<Types[Index]>>;\\n};\\n\\n/**\\n * Register style components. Each component is registered at most once.\\n * Must be called in an injection context or pass an injector in the options.\\n *\\n * @param components Component classes\\n * @param options Additional options\\n * @returns A component ref for each class\\n */\\nexport function registerStyleComponents<const Types extends Type<unknown>[]>(\\n  components: Types,\\n  options?: { injector?: Injector },\\n): ComponentRefsFromTypes<Types> {\\n  if (!options?.injector) {\\n    assertInInjectionContext(registerStyleComponents);\\n  }\\n\\n  const injector = options?.injector ?? inject(Injector);\\n  const manager = inject(StyleComponentManagerService);\\n  return manager.registerStyleComponents(components, { injector });\\n}\\n\\n/**\\n * Manager of global style components\\n */\\n@Injectable({ providedIn: \'root\' })\\nexport class StyleComponentManagerService {\\n  /** Component instance registry */\\n  private readonly registry = new Map<ApplicationRef, ComponentInstanceMap>();\\n\\n  /**\\n   * Register style components. Each component is registered at most once.\\n   *\\n   * @param components Component classes\\n   * @param options Options object\\n   * @returns Component instance references\\n   */\\n  registerStyleComponents<const Types extends Type<unknown>[]>(\\n    components: Types,\\n    options: { injector: Injector },\\n  ): ComponentRefsFromTypes<Types> {\\n    return runInInjectionContext(options.injector, () => {\\n      const instanceMap = this.getInstanceMap(inject(ApplicationRef));\\n      const environmentInjector = inject(EnvironmentInjector);\\n\\n      return components.map((component) =>\\n        this.getInstance(component, instanceMap, environmentInjector),\\n      ) as ComponentRefsFromTypes<Types>;\\n    });\\n  }\\n\\n  /**\\n   * Gets the component instance map for an application ref.\\n   * The map is created if it doesn\'t already exist and\\n   * is registered to cleanup when the application is destroyed.\\n   *\\n   * @param appRef Application reference\\n   * @returns A component instance map\\n   */\\n  private getInstanceMap(appRef: ApplicationRef): ComponentInstanceMap {\\n    let instanceMap = this.registry.get(appRef);\\n    if (!instanceMap) {\\n      instanceMap = new Map();\\n      this.registry.set(appRef, instanceMap);\\n      appRef.onDestroy(() => {\\n        this.registry.delete(appRef);\\n        instanceMap?.forEach((instance) => instance.destroy());\\n      });\\n    }\\n\\n    return instanceMap;\\n  }\\n\\n  /**\\n   * Gets or creates a component instance, adding it to the provided instance map.\\n   *\\n   * @param component Component class\\n   * @param instanceMap Instance map to check\\n   * @param environmentInjector The environment injector used when creating a new instance\\n   * @returns A component ref to the existing or newly created instance\\n   */\\n  private getInstance<T>(\\n    component: Type<T>,\\n    instanceMap: ComponentInstanceMap,\\n    environmentInjector: EnvironmentInjector,\\n  ): ComponentRef<T> {\\n    let instance = instanceMap.get(component) as ComponentRef<T>;\\n    if (!instance) {\\n      instance = createComponent(component, { environmentInjector });\\n      instanceMap.set(component, instance);\\n    }\\n\\n    return instance;\\n  }\\n}\\n","extends":[],"type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"Add","id":"class-Add-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite a single link</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"LinkId","deprecated":false,"deprecationMessage":""},{"name":"entry","type":"LinkEntry","deprecated":false,"deprecationMessage":""}],"line":9,"rawdescription":"\\n\\nAdd or overwrite a single link\\n","jsdoctags":[{"name":{"pos":356,"end":358,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"LinkId","deprecated":false,"deprecationMessage":"","tagName":{"pos":350,"end":355,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>link identifier</p>\\n"},{"name":{"pos":387,"end":392,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"entry"},"type":"LinkEntry","deprecated":false,"deprecationMessage":"","tagName":{"pos":381,"end":386,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>link entry</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add a single link</p>\\n","rawdescription":"\\nAdd a single link","methods":[],"indexSignatures":[],"extends":["Action(\'Add\')"],"hostBindings":[],"hostListeners":[]},{"name":"Add","id":"class-Add-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite a single resource</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"entry","type":"ResourceEntry","deprecated":false,"deprecationMessage":""}],"line":8,"rawdescription":"\\n\\nAdd or overwrite a single resource\\n","jsdoctags":[{"name":{"pos":326,"end":328,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":320,"end":325,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Resource identifier</p>\\n"},{"name":{"pos":361,"end":366,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"entry"},"type":"ResourceEntry","deprecated":false,"deprecationMessage":"","tagName":{"pos":355,"end":360,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Resource entry</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add a single resource</p>\\n","rawdescription":"\\nAdd a single resource","methods":[],"indexSignatures":[],"extends":["Action(\'Add\')"],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"Add-1"},{"name":"AddFromYaml","id":"class-AddFromYaml-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add links from unparsed yaml</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"yaml","type":"string","deprecated":false,"deprecationMessage":""}],"line":32,"rawdescription":"\\n\\nAdd links from unparsed yaml\\n","jsdoctags":[{"name":{"pos":892,"end":896,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"yaml"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":886,"end":891,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Unparsed yaml data</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add entries from yaml file</p>\\n","rawdescription":"\\nAdd entries from yaml file","methods":[],"indexSignatures":[],"extends":["Action(\'Add from Yaml\')"],"hostBindings":[],"hostListeners":[]},{"name":"AddFromYaml","id":"class-AddFromYaml-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add resources from unparsed yaml</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"yaml","type":"string","deprecated":false,"deprecationMessage":""}],"line":31,"rawdescription":"\\n\\nAdd resources from unparsed yaml\\n","jsdoctags":[{"name":{"pos":908,"end":912,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"yaml"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":902,"end":907,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Unparsed yaml data</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add resources from raw yaml data</p>\\n","rawdescription":"\\nAdd resources from raw yaml data","methods":[],"indexSignatures":[],"extends":["Action(\'Add from Yaml\')"],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"AddFromYaml-1"},{"name":"AddMany","id":"class-AddMany-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite multiple links</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"entries","type":"Partial<Record<LinkId, LinkEntry>>","deprecated":false,"deprecationMessage":""}],"line":21,"rawdescription":"\\n\\nAdd or overwrite multiple links\\n","jsdoctags":[{"name":{"pos":633,"end":640,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"entries"},"type":"Partial<Record<LinkId, LinkEntry>>","deprecated":false,"deprecationMessage":"","tagName":{"pos":627,"end":632,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>New links</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add multiple links at once</p>\\n","rawdescription":"\\nAdd multiple links at once","methods":[],"indexSignatures":[],"extends":["Action(\'Add Many\')"],"hostBindings":[],"hostListeners":[]},{"name":"AddMany","id":"class-AddMany-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite multiple resources</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"entries","type":"Partial<Record<ResourceId, ResourceEntry>>","deprecated":false,"deprecationMessage":""}],"line":20,"rawdescription":"\\n\\nAdd or overwrite multiple resources\\n","jsdoctags":[{"name":{"pos":627,"end":634,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"entries"},"type":"Partial<Record<ResourceId, ResourceEntry>>","deprecated":false,"deprecationMessage":"","tagName":{"pos":621,"end":626,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>New resources</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add multiple resources at once</p>\\n","rawdescription":"\\nAdd multiple resources at once","methods":[],"indexSignatures":[],"extends":["Action(\'Add Many\')"],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"AddMany-1"},{"name":"BaseHrefSelectors","id":"class-BaseHrefSelectors-9b69008bbdefa0766db51dd61bbff34c6aa4f8e026a542024154051d1f7b63dadda9ff193414e9fff6f95da40e12ec2e32bd0c72b0bc27f3d9fce6a12a597d18","file":"state/src/base-href/base-href.selectors.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Selector } from \'@ngxs/store\';\\nimport { BaseHrefState } from \'./base-href.state\';\\n\\n/** Selectors for BaseHrefState */\\nexport class BaseHrefSelectors {\\n  /**\\n   * Returns base href value\\n   * @param value href value\\n   * @returns href value\\n   */\\n  @Selector([BaseHrefState])\\n  static baseHref(value: string): string {\\n    return value;\\n  }\\n}\\n","inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Selectors for BaseHrefState</p>\\n","rawdescription":"\\nSelectors for BaseHrefState","methods":[{"name":"baseHref","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":12,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns base href value\\n","description":"<p>Returns base href value</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'BaseHrefState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":{"pos":207,"end":212,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":201,"end":206,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>href value</p>\\n"},{"tagName":{"pos":230,"end":237,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>href value</p>\\n"}]}],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"BreakpointWatchState","id":"class-BreakpointWatchState-b7f0b01db7db76cb22fd560717eb772dec46c1eb122492b67703bbc3855028cbe59afcb9d7af66397ebf1645f2795ce7065f348b1c7661c359ad17f272a5c629","file":"breakpoints/src/lib/observers.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { BreakpointObserver, BreakpointState } from \'@angular/cdk/layout\';\\nimport { computed, inject, Signal } from \'@angular/core\';\\nimport { toSignal } from \'@angular/core/rxjs-interop\';\\nimport { map } from \'rxjs\';\\nimport { Breakpoint, Breakpoints } from \'./breakpoints\';\\n\\n/** State produced by `watchBreakpoints` */\\nexport class BreakpointWatchState<T extends string = never> {\\n  /**\\n   * Initialize the state\\n   *\\n   * @param state The underlying state provided by @angular/cdk\\n   * @param mapping Mapping from breakpoint names to queries\\n   */\\n  constructor(\\n    private readonly state: BreakpointState,\\n    private readonly mapping: Record<T, string>,\\n  ) {}\\n\\n  /**\\n   * Checks whether at least one query matches\\n   *\\n   * @returns true if any matches, false otherwise\\n   */\\n  matchesAny(): boolean {\\n    return this.state.matches;\\n  }\\n\\n  /**\\n   * Checks whether the specific query matches\\n   *\\n   * @param query The query to check\\n   * @returns true if the query matches, false otherwise\\n   */\\n  matchesQuery(query: string): boolean {\\n    return this.state.breakpoints[query] ?? false;\\n  }\\n\\n  /**\\n   * Checks whether a specific breakpoint matches\\n   *\\n   * @param breakpoint The breakpoint to check\\n   * @returns true if the breakpoint matches, false otherwise\\n   */\\n  matchesBreakpoint(breakpoint: T): boolean {\\n    return this.matchesQuery(this.mapping[breakpoint]);\\n  }\\n}\\n\\n/**\\n * Watch a single query.\\n * Must be called in an injection context.\\n *\\n * @param query Breakpoint query to watch\\n * @returns A signal with indicating when the query matches\\n */\\nexport function watchBreakpoint(query: string): Signal<boolean> {\\n  const watcher = watchBreakpoints([query]);\\n  return computed(() => watcher().matchesAny());\\n}\\n\\n/**\\n * Watch the default breakpoints.\\n * Must be called in an injection context.\\n *\\n * @returns A signal containing the latest watch state\\n */\\nexport function watchBreakpoints(): Signal<BreakpointWatchState<Breakpoint>>;\\n/**\\n * Watch multiple queries.\\n * Must be called in an injection context.\\n *\\n * @param queries Queries to watch\\n * @returns A signal containing the latest watch state\\n */\\nexport function watchBreakpoints(queries: string[]): Signal<BreakpointWatchState>;\\n/**\\n * Watch multiple breakpoints.\\n * Must be called in an injection context.\\n *\\n * @param mapping Mapping from breakpoints to queries\\n * @returns A signal containing the latest watch state\\n */\\nexport function watchBreakpoints<T extends string>(mapping: Record<T, string>): Signal<BreakpointWatchState<T>>;\\n/**\\n * Watch multiple queries or breakpoints.\\n *\\n * @param arg A list of queries or mapping from breakpoints to queries\\n * @returns A signal containing the latest watch state\\n */\\nexport function watchBreakpoints(arg: string[] | Record<string, string> = Breakpoints): Signal<BreakpointWatchState> {\\n  const mapping = Array.isArray(arg) ? {} : arg;\\n  const queries = Array.isArray(arg) ? arg : Object.values(arg);\\n  const breakpoints$ = inject(BreakpointObserver).observe(queries);\\n  const state$ = breakpoints$.pipe(map((state) => new BreakpointWatchState(state, mapping)));\\n  return toSignal(state$, { requireSync: true });\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Initialize the state</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"state","type":"BreakpointState","deprecated":false,"deprecationMessage":""},{"name":"mapping","type":"Record<T | string>","deprecated":false,"deprecationMessage":""}],"line":8,"rawdescription":"\\n\\nInitialize the state\\n\\n","jsdoctags":[{"name":{"pos":429,"end":434,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"state"},"type":"BreakpointState","deprecated":false,"deprecationMessage":"","tagName":{"pos":423,"end":428,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The underlying state provided by</p>\\n"},{"name":{"pos":493,"end":500,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"mapping"},"type":"Record<T | string>","deprecated":false,"deprecationMessage":"","tagName":{"pos":487,"end":492,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Mapping from breakpoint names to queries</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>State produced by <code>watchBreakpoints</code></p>\\n","rawdescription":"\\nState produced by `watchBreakpoints`","methods":[{"name":"matchesAny","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":25,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks whether at least one query matches\\n\\n","description":"<p>Checks whether at least one query matches</p>\\n","jsdoctags":[{"tagName":{"pos":729,"end":736,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true if any matches, false otherwise</p>\\n"}]},{"name":"matchesBreakpoint","args":[{"name":"breakpoint","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks whether a specific breakpoint matches\\n\\n","description":"<p>Checks whether a specific breakpoint matches</p>\\n","jsdoctags":[{"name":{"pos":1170,"end":1180,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"breakpoint"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":1164,"end":1169,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The breakpoint to check</p>\\n"},{"tagName":{"pos":1211,"end":1218,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true if the breakpoint matches, false otherwise</p>\\n"}]},{"name":"matchesQuery","args":[{"name":"query","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":35,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks whether the specific query matches\\n\\n","description":"<p>Checks whether the specific query matches</p>\\n","jsdoctags":[{"name":{"pos":912,"end":917,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"query"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":906,"end":911,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The query to check</p>\\n"},{"tagName":{"pos":943,"end":950,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true if the query matches, false otherwise</p>\\n"}]}],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"Clear","id":"class-Clear-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { StorageId } from \'./storage.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'Storage\');\\n\\n/**\\n * Class Set Action for set method\\n */\\nexport class Set extends Action(\'Set\') {\\n  /**\\n   * constructor class for Set action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   * @param value - type: string - value to be stored with the key\\n   */\\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\\n    super();\\n  }\\n}\\n/**\\n *  Class Delete Action for delete method\\n */\\nexport class Delete extends Action(\'Delete\') {\\n  /**\\n   * constructor class for Delete action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   */\\n  constructor(readonly id: StorageId, readonly key: string) {\\n    super();\\n  }\\n}\\n/**\\n * Clear the values stored in the specified StorageId\\n */\\nexport class Clear extends Action(\'Clear\') {\\n  /**\\n   * constructor class for clear action object\\n   * @param id - type: StorageId - Storage identifier\\n   */\\n  constructor(readonly id: StorageId) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>constructor class for clear action object</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""}],"line":37,"rawdescription":"\\n\\nconstructor class for clear action object\\n","jsdoctags":[{"name":{"pos":1146,"end":1148,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"pos":1140,"end":1145,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>type: StorageId - Storage identifier</li>\\n</ul>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Clear the values stored in the specified StorageId</p>\\n","rawdescription":"\\n\\nClear the values stored in the specified StorageId\\n","methods":[],"indexSignatures":[],"extends":["Action(\'Clear\')"],"hostBindings":[],"hostListeners":[]},{"name":"Delete","id":"class-Delete-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { StorageId } from \'./storage.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'Storage\');\\n\\n/**\\n * Class Set Action for set method\\n */\\nexport class Set extends Action(\'Set\') {\\n  /**\\n   * constructor class for Set action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   * @param value - type: string - value to be stored with the key\\n   */\\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\\n    super();\\n  }\\n}\\n/**\\n *  Class Delete Action for delete method\\n */\\nexport class Delete extends Action(\'Delete\') {\\n  /**\\n   * constructor class for Delete action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   */\\n  constructor(readonly id: StorageId, readonly key: string) {\\n    super();\\n  }\\n}\\n/**\\n * Clear the values stored in the specified StorageId\\n */\\nexport class Clear extends Action(\'Clear\') {\\n  /**\\n   * constructor class for clear action object\\n   * @param id - type: StorageId - Storage identifier\\n   */\\n  constructor(readonly id: StorageId) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>constructor class for Delete action object</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""},{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"line":24,"rawdescription":"\\n\\nconstructor class for Delete action object\\n","jsdoctags":[{"name":{"pos":769,"end":771,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"pos":763,"end":768,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>type: StorageId - Storage identifier</li>\\n</ul>\\n"},{"name":{"pos":823,"end":826,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":817,"end":822,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>type: string - Key to be stored in the storage identifier</li>\\n</ul>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p> Class Delete Action for delete method</p>\\n","rawdescription":"\\n\\n Class Delete Action for delete method\\n","methods":[],"indexSignatures":[],"extends":["Action(\'Delete\')"],"hostBindings":[],"hostListeners":[]},{"name":"LinkRegistrySelectors","id":"class-LinkRegistrySelectors-06d9e020c846f4521dcfb2095cd0e77e9f6aa4c734e6cd2f8081eef02dec593dc6ad455cf1a4d65585ecec0f48fb03db1829258cbc3db21e3c7603e10eb90644","file":"state/src/link-registry/link-registry.selectors.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UnionMember } from \'@hra-ui/utils/types\';\\nimport { Selector } from \'@ngxs/store\';\\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from \'./link-registry.model\';\\nimport { LinkRegistryQuery, LinkRegistryState } from \'./link-registry.state\';\\n\\n/**\\n * Selectors for Link Registry\\n */\\nexport class LinkRegistrySelectors {\\n  /**\\n   * Queries for a link entry\\n   * @param state Current state\\n   * @returns link query function\\n   */\\n  @Selector([LinkRegistryState])\\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\\n    return (id, type) => this.getEntry(state, id, type);\\n  }\\n\\n  /**\\n   * Gets a link entry by id and optionally type\\n   * @param state link registry state\\n   * @param id Entry id\\n   * @param type Optional entry type\\n   * @returns The entry if found, undefined otherwise\\n   */\\n  private static getEntry<T extends LinkType | string>(\\n    state: LinkRegistryModel,\\n    id: LinkId,\\n    type?: T\\n  ): UnionMember<LinkEntry, \'type\', T> | undefined {\\n    const entry = state[id] as UnionMember<LinkEntry, \'type\', T>;\\n    const typeMatches = type === undefined || entry?.type === type;\\n    return typeMatches ? entry : undefined;\\n  }\\n}\\n","inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Selectors for Link Registry</p>\\n","rawdescription":"\\n\\nSelectors for Link Registry\\n","methods":[{"name":"query","args":[{"name":"state","type":"LinkRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"LinkRegistryQuery","typeParameters":[],"line":16,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries for a link entry\\n","description":"<p>Queries for a link entry</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'LinkRegistryState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":{"pos":382,"end":387,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"state"},"type":"LinkRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":376,"end":381,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":408,"end":415,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>link query function</p>\\n"}]}],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"LoadFromYaml","id":"class-LoadFromYaml-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Loads a remote yaml file and add links</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":43,"rawdescription":"\\n\\nLoads a remote yaml file and add links\\n","jsdoctags":[{"name":{"pos":1145,"end":1148,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1139,"end":1144,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Remote yaml file url</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add links from a remote yaml file</p>\\n","rawdescription":"\\nAdd links from a remote yaml file","methods":[],"indexSignatures":[],"extends":["Action(\'Load from Yaml\')"],"hostBindings":[],"hostListeners":[]},{"name":"LoadFromYaml","id":"class-LoadFromYaml-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Loads a remote yaml file and add resources</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":42,"rawdescription":"\\n\\nLoads a remote yaml file and add resources\\n","jsdoctags":[{"name":{"pos":1169,"end":1172,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1163,"end":1168,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Remote yaml file url</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add resources from a remote yaml file</p>\\n","rawdescription":"\\nAdd resources from a remote yaml file","methods":[],"indexSignatures":[],"extends":["Action(\'Load from Yaml\')"],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"LoadFromYaml-1"},{"name":"LoadMarkdown","id":"class-LoadMarkdown-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Loads a remote markdown file and add a resource</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":53,"rawdescription":"\\n\\nLoads a remote markdown file and add a resource\\n","jsdoctags":[{"name":{"pos":1456,"end":1458,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":1450,"end":1455,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Resource id</p>\\n"},{"name":{"pos":1483,"end":1486,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1477,"end":1482,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Remote markdown file url</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Add a markdown resource with data loaded from a remote file</p>\\n","rawdescription":"\\nAdd a markdown resource with data loaded from a remote file","methods":[],"indexSignatures":[],"extends":["Action(\'Load Markdown\')"],"hostBindings":[],"hostListeners":[]},{"name":"Navigate","id":"class-Navigate-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>navigate to a link</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"LinkId","deprecated":false,"deprecationMessage":""},{"name":"extras","type":"UrlCreationOptions","deprecated":false,"deprecationMessage":"","defaultValue":"{}"}],"line":53,"rawdescription":"\\n\\nnavigate to a link\\n","jsdoctags":[{"name":{"pos":1386,"end":1388,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"LinkId","deprecated":false,"deprecationMessage":"","tagName":{"pos":1380,"end":1385,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>unqiue identifier of link</p>\\n"},{"name":{"pos":1427,"end":1433,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"extras"},"type":"UrlCreationOptions","deprecated":false,"deprecationMessage":"","defaultValue":"{}","tagName":{"pos":1421,"end":1426,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Options when building the navigation url</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Navigate to an Internal or external url from Link id</p>\\n","rawdescription":"\\nNavigate to an Internal or external url from Link id","methods":[],"indexSignatures":[],"extends":["Action(\'Navigate\')"],"hostBindings":[],"hostListeners":[]},{"name":"ResourceRegistrySelectors","id":"class-ResourceRegistrySelectors-5e0841c52a4c3ae9fe5e04a8c194f6bd5dae08bd23852a126efce3a9a37c778b5cdfa7ed98d1180a9b34dee2d34e6b80bf7c7099dec3823e64762b0c86ff7c7d","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Selector } from \'@ngxs/store\';\\nimport {\\n  BuiltinResourceType,\\n  getEntry,\\n  ResourceEntry,\\n  ResourceId,\\n  ResourceRegistryModel,\\n  ResourceType,\\n} from \'./resource-registry.model\';\\nimport { ResourceRegistryState } from \'./resource-registry.state\';\\nimport { BaseHrefSelectors } from \'../base-href\';\\n\\n/** Query function returned by {@link ResourceRegistrySelectors.entry} */\\nexport type EntryQuery = <T extends ResourceEntry>(id: ResourceId, type: ResourceType<T>) => T | undefined;\\n\\n/** Query function returned by {@link ResourceRegistrySelectors.anyEntry} */\\nexport type AnyEntryQuery = (id: ResourceId) => ResourceEntry | undefined;\\n\\n/** Query function returned by {@link ResourceRegistrySelectors.field} */\\nexport type FieldQuery = <T extends ResourceEntry, K extends keyof T>(\\n  id: ResourceId,\\n  type: ResourceType<T>,\\n  field: K,\\n  defaultValue?: T[K],\\n) => T[K];\\n\\n/** Query function for resource data */\\nexport type DataQuery<T> = (id: ResourceId) => T;\\n\\n/** Selectors for ResourceRegistry */\\nexport class ResourceRegistrySelectors {\\n  /**\\n   * Queries an entry by id and type\\n   * @param state Current state\\n   * @returns Entry query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static entry(state: ResourceRegistryModel): EntryQuery {\\n    return (id, type) => getEntry(state, id, type);\\n  }\\n\\n  /**\\n   * Queries an entry by id\\n   * @param state Current state\\n   * @returns Any entry query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static anyEntry(state: ResourceRegistryModel): AnyEntryQuery {\\n    return (id) => getEntry(state, id);\\n  }\\n\\n  /**\\n   * Queries a field of an entry\\n   * @param state Current state\\n   * @returns A field query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static field(state: ResourceRegistryModel): FieldQuery {\\n    return (id, type, field, defaultValue?) => {\\n      const entry = getEntry(state, id, type);\\n      return entry?.[field] ?? (defaultValue as never);\\n    };\\n  }\\n\\n  /**\\n   * Query for any text data\\n   * @param state Current state\\n   * @returns Text data query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static anyText(state: ResourceRegistryModel): DataQuery<string> {\\n    return (id) => {\\n      const entry = getEntry(state, id);\\n      switch (entry?.type) {\\n        case BuiltinResourceType.Markdown:\\n          return entry.markdown;\\n\\n        case BuiltinResourceType.Text:\\n          return entry.text;\\n\\n        default:\\n          return \'\';\\n      }\\n    };\\n  }\\n\\n  /**\\n   * Query for markdown data\\n   * @param state Current state\\n   * @returns Markdown data query function\\n   */\\n  @Selector([ResourceRegistrySelectors.field])\\n  static markdown(getField: FieldQuery): DataQuery<string> {\\n    return (id) => getField(id, BuiltinResourceType.Markdown, \'markdown\', \'\');\\n  }\\n\\n  /**\\n   * Query for text data\\n   * @param state Current state\\n   * @returns Text data query function\\n   */\\n  @Selector([ResourceRegistrySelectors.field])\\n  static text(getField: FieldQuery): DataQuery<string> {\\n    return (id) => getField(id, BuiltinResourceType.Text, \'text\', \'\');\\n  }\\n\\n  /**\\n   * Query for an url\\n   * @param state Current state\\n   * @returns Url query function\\n   */\\n  @Selector([ResourceRegistrySelectors.field, BaseHrefSelectors.baseHref])\\n  static url(getField: FieldQuery, baseHref = \'\'): DataQuery<string> {\\n    return (id) => {\\n      const relUrl = getField(id, BuiltinResourceType.Url, \'url\', \'\');\\n      return relUrl !== \'\' ? baseHref + relUrl : \'\';\\n    };\\n  }\\n}\\n","inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Selectors for ResourceRegistry</p>\\n","rawdescription":"\\nSelectors for ResourceRegistry","methods":[{"name":"anyEntry","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"AnyEntryQuery","typeParameters":[],"line":48,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries an entry by id\\n","description":"<p>Queries an entry by id</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":{"pos":1366,"end":1371,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1360,"end":1365,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":1392,"end":1399,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Any entry query function</p>\\n"}]},{"name":"anyText","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for any text data\\n","description":"<p>Query for any text data</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":{"pos":1999,"end":2004,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1993,"end":1998,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":2025,"end":2032,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Text data query function</p>\\n"}]},{"name":"entry","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"EntryQuery","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries an entry by id and type\\n","description":"<p>Queries an entry by id and type</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":{"pos":1106,"end":1111,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1100,"end":1105,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":1132,"end":1139,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Entry query function</p>\\n"}]},{"name":"field","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"FieldQuery","typeParameters":[],"line":58,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries a field of an entry\\n","description":"<p>Queries a field of an entry</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":{"pos":1629,"end":1634,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1623,"end":1628,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":1655,"end":1662,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A field query function</p>\\n"}]},{"name":"markdown","args":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":93,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for markdown data\\n","description":"<p>Query for markdown data</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'undefined\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2537,"end":2544,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Markdown data query function</p>\\n"}]},{"name":"text","args":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":103,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for text data\\n","description":"<p>Query for text data</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'undefined\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2841,"end":2848,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Text data query function</p>\\n"}]},{"name":"url","args":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":""},{"name":"baseHref","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'\'"}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":113,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for an url\\n","description":"<p>Query for an url</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'undefined\', \'undefined\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"baseHref","type":"string","deprecated":false,"deprecationMessage":"","defaultValue":"\'\'","tagName":{"text":"param"}},{"tagName":{"pos":3126,"end":3133,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Url query function</p>\\n"}]}],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"ScopedDestructorSubject","id":"class-ScopedDestructorSubject-c4b53b823f2f6845a68f4b66881cc81070616d6b5124d0d203f80f1eeee060d84d1d05eab91b3a6e833ea4aef93cdf9d68ef0051d58b85ca5101c609dad76a05","file":"injectors/src/lib/on-destroy/destructor-subject.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ReplaySubject } from \'rxjs\';\\n\\n/** Object on which cleanup functions can be registered */\\nexport interface DestructorScope {\\n  /**\\n   * Register a cleanup function\\n   * @param cb Cleanup callback function\\n   */\\n  onDestroy(cb: () => void): void;\\n}\\n\\n/**\\n * Determines whether an object is destructor scope like\\n * @param obj Value to test\\n * @returns true if the object seems to be a destructor scope, otherwise false\\n */\\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\\n  const isObject = typeof obj === \'object\' && obj !== null;\\n  return isObject && \'onDestroy\' in obj && typeof obj.onDestroy === \'function\';\\n}\\n\\n/**\\n * A subject type that is associated with a destructor scope.\\n * When the cleanup function is run the subject emits a single\\n * undefined value and immediately completes\\n */\\nexport class ScopedDestructorSubject extends ReplaySubject<void> {\\n  /**\\n   * Creates a new subject and attaches cleanup to the destructor scope\\n   * @param scope Associated scope\\n   */\\n  constructor(scope: DestructorScope) {\\n    super(1);\\n\\n    scope.onDestroy(() => {\\n      this.next();\\n      this.complete();\\n    });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Creates a new subject and attaches cleanup to the destructor scope</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"scope","type":"DestructorScope","deprecated":false,"deprecationMessage":""}],"line":27,"rawdescription":"\\n\\nCreates a new subject and attaches cleanup to the destructor scope\\n","jsdoctags":[{"name":{"pos":985,"end":990,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"scope"},"type":"DestructorScope","deprecated":false,"deprecationMessage":"","tagName":{"pos":979,"end":984,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Associated scope</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>A subject type that is associated with a destructor scope.\\nWhen the cleanup function is run the subject emits a single\\nundefined value and immediately completes</p>\\n","rawdescription":"\\n\\nA subject type that is associated with a destructor scope.\\nWhen the cleanup function is run the subject emits a single\\nundefined value and immediately completes\\n","methods":[],"indexSignatures":[],"extends":["ReplaySubject"],"hostBindings":[],"hostListeners":[]},{"name":"Set","id":"class-Set-b7490c9fa59a88e26f373bca7409c2d1dc4a46ede355f7af9b6de6ccdde9839d867a750a056797f989147e0f64d68c2936d231d79f4019177be25f0a247831d9","file":"state/src/base-href/base-href.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'BaseHref\');\\n\\n/** Sets the base href */\\nexport class Set extends Action(\'Set\') {\\n  /**\\n   * Sets the base href\\n   * @param baseHref New href\\n   */\\n  constructor(readonly baseHref: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Sets the base href</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"baseHref","type":"string","deprecated":false,"deprecationMessage":""}],"line":7,"rawdescription":"\\n\\nSets the base href\\n","jsdoctags":[{"name":{"pos":228,"end":236,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"baseHref"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":222,"end":227,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>New href</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Sets the base href</p>\\n","rawdescription":"\\nSets the base href","methods":[],"indexSignatures":[],"extends":["Action(\'Set\')"],"hostBindings":[],"hostListeners":[]},{"name":"Set","id":"class-Set-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1-1","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { StorageId } from \'./storage.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'Storage\');\\n\\n/**\\n * Class Set Action for set method\\n */\\nexport class Set extends Action(\'Set\') {\\n  /**\\n   * constructor class for Set action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   * @param value - type: string - value to be stored with the key\\n   */\\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\\n    super();\\n  }\\n}\\n/**\\n *  Class Delete Action for delete method\\n */\\nexport class Delete extends Action(\'Delete\') {\\n  /**\\n   * constructor class for Delete action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   */\\n  constructor(readonly id: StorageId, readonly key: string) {\\n    super();\\n  }\\n}\\n/**\\n * Clear the values stored in the specified StorageId\\n */\\nexport class Clear extends Action(\'Clear\') {\\n  /**\\n   * constructor class for clear action object\\n   * @param id - type: StorageId - Storage identifier\\n   */\\n  constructor(readonly id: StorageId) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>constructor class for Set action object</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""},{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"line":10,"rawdescription":"\\n\\nconstructor class for Set action object\\n","jsdoctags":[{"name":{"pos":310,"end":312,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"id"},"type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"pos":304,"end":309,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>type: StorageId - Storage identifier</li>\\n</ul>\\n"},{"name":{"pos":364,"end":367,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":358,"end":363,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>type: string - Key to be stored in the storage identifier</li>\\n</ul>\\n"},{"name":{"pos":440,"end":445,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":434,"end":439,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<ul>\\n<li>type: string - value to be stored with the key</li>\\n</ul>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Class Set Action for set method</p>\\n","rawdescription":"\\n\\nClass Set Action for set method\\n","methods":[],"indexSignatures":[],"extends":["Action(\'Set\')"],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"Set-1"},{"name":"SnapshotObserver","id":"class-SnapshotObserver-e299315c33d01b7c5b9d7d2f8238209af3dd388427c9dfe124370b0bfb7c5852050237aaa3ca958ccb01cd0160e3e0a8d823189c91a4e0415996d17a10fef041","file":"injectors/src/lib/select/snapshot-observer.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ErrorObserver, NextObserver } from \'rxjs\';\\n\\n/** Object indicating that no error has been emitted */\\nconst NO_ERROR_SENTINEL_OBJ = {};\\n\\n/** Observer storing the latest value from a snapshot stream */\\nexport class SnapshotObserver<T> implements NextObserver<T>, ErrorObserver<T> {\\n  /** The latest value */\\n  private value?: T = undefined;\\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\\n\\n  /**\\n   * Gets the latest value or throw on errors\\n   * @returns The latest value\\n   * @throws If an error has been emitted\\n   */\\n  get(): T {\\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\\n      throw this.errorValue;\\n    }\\n\\n    return this.value as T;\\n  }\\n\\n  /**\\n   * Handles value emits\\n   * @param value The new value\\n   */\\n  next(value: T): void {\\n    this.value = value;\\n  }\\n\\n  /**\\n   * Handles error emits\\n   * @param err The error value\\n   */\\n  error(err: unknown): void {\\n    this.value = undefined;\\n    this.errorValue = err;\\n  }\\n}\\n","inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Observer storing the latest value from a snapshot stream</p>\\n","rawdescription":"\\nObserver storing the latest value from a snapshot stream","methods":[{"name":"error","args":[{"name":"err","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandles error emits\\n","description":"<p>Handles error emits</p>\\n","jsdoctags":[{"name":{"pos":895,"end":898,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"err"},"type":"","deprecated":false,"deprecationMessage":"","tagName":{"pos":889,"end":894,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The error value</p>\\n"}]},{"name":"get","args":[],"optional":false,"returnType":"T","typeParameters":[],"line":18,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGets the latest value or throw on errors\\n","description":"<p>Gets the latest value or throw on errors</p>\\n","jsdoctags":[{"tagName":{"pos":521,"end":528,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The latest value</p>\\n"}]},{"name":"next","args":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandles value emits\\n","description":"<p>Handles value emits</p>\\n","jsdoctags":[{"name":{"pos":772,"end":777,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"value"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":766,"end":771,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The new value</p>\\n"}]}],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[],"implements":["NextObserver","ErrorObserver"]},{"name":"StorageSelectors","id":"class-StorageSelectors-6e576be4f221d6636d6b7a149b402c8e640ddebf2ae1dba42a6be2fc1435b938679689e904f41ca64b282b1cef4d274a45fb4de9dcd315116751057089d76e85","file":"state/src/storage/storage.selectors.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Selector } from \'@ngxs/store\';\\nimport { StorageId } from \'./storage.model\';\\nimport { StorageState } from \'./storage.state\';\\n/**\\n * Storage selectors - class for retrieving storage types\\n */\\nexport class StorageSelectors {\\n  /**\\n   * returns the value stored in the key,value pair in the storageId given\\n   * @returns (id,key) of the given storage id else undefined\\n   */\\n  @Selector([StorageState])\\n  static get(_state: unknown): (id: StorageId, key: string) => string | undefined {\\n    return (id, key) => StorageState.getStorage(id).getItem(key) ?? undefined;\\n  }\\n  /**\\n   * returns the number of items in the given storage id stored\\n   * @returns length of the given StorageId supplied\\n   */\\n  @Selector([StorageState])\\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\\n  // @ts-ignore Allow selector name\\n  static length(_state: unknown): (id: StorageId) => number | undefined {\\n    return (id) => StorageState.getStorage(id).length;\\n  }\\n}\\n","inputsClass":[],"outputsClass":[],"properties":[],"description":"<p>Storage selectors - class for retrieving storage types</p>\\n","rawdescription":"\\n\\nStorage selectors - class for retrieving storage types\\n","methods":[{"name":"get","args":[{"name":"_state","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string | undefined","typeParameters":[],"line":13,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nreturns the value stored in the key,value pair in the storageId given\\n","description":"<p>returns the value stored in the key,value pair in the storageId given</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'StorageState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":"_state","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":318,"end":325,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>(id,key) of the given storage id else undefined</p>\\n"}]},{"name":"length","args":[{"name":"_state","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number | undefined","typeParameters":[],"line":23,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nreturns the number of items in the given storage id stored\\n","description":"<p>returns the number of items in the given storage id stored</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'StorageState\']"}],"modifierKind":[170,126],"jsdoctags":[{"name":"_state","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":651,"end":658,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>length of the given StorageId supplied</p>\\n"}]}],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]}],"directives":[{"name":"HoverDirective","id":"directive-HoverDirective-49a4c26570f0d04f23fe4fbc0dc828e41ceb60105a94f0556e120079f4aeedd891c1d1b2ef505b2650ef16efedefd686eee12c9218a6144616e86020fe84d016","file":"src/lib/hover/hover.directive.ts","type":"directive","description":"<p>Hover overlay directive to be used across the application</p>\\n","rawdescription":"\\nHover overlay directive to be used across the application","sourceCode":"import { ConnectionPositionPair, Overlay, OverlayRef } from \'@angular/cdk/overlay\';\\nimport { TemplatePortal } from \'@angular/cdk/portal\';\\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from \'@angular/core\';\\n\\n/**  Context passed to hover content templates */\\nexport interface HoverContext<T = unknown> {\\n  /** Data provided by the user for use inside the content template */\\n  $implicit: T;\\n}\\n\\n/** Hover overlay directive to be used across the application */\\n@Directive({\\n  selector: \'[hraHover]\',\\n  standalone: true,\\n})\\nexport class HoverDirective<T = unknown> {\\n  /**  Setter for the content to be displayed in the overlay */\\n  @Input(\'hraHover\')\\n  set content(content: TemplateRef<HoverContext<T>>) {\\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\\n    this.updateContent();\\n  }\\n\\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\\n  @Input(\'hraHoverData\')\\n  set data(data: T) {\\n    this._data = { $implicit: data };\\n    if (this.portal) {\\n      this.portal.context = this._data;\\n      this.updateContent();\\n    }\\n  }\\n\\n  /**  Reference to the element that the directive is attached to */\\n  private readonly el: Element = inject(ElementRef).nativeElement;\\n\\n  /** Overlay service */\\n  private readonly overlay = inject(Overlay);\\n\\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\\n  private overlayRef?: OverlayRef;\\n\\n  /** Reference view container that the directive is attached to */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Store the data that is passed into the data input property */\\n  private _data?: HoverContext<T>;\\n\\n  /** Portal that is created to display the overlay */\\n  portal?: TemplatePortal<HoverContext<T>>;\\n\\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\\n  @HostListener(\'mouseover\')\\n  startHover(): void {\\n    const { portal } = this;\\n    if (portal) {\\n      this.overlayRef = this.createOverlay();\\n      this.overlayRef.attach(portal);\\n    }\\n  }\\n\\n  /** Function to handle the mouse out event to detach the portal  */\\n  @HostListener(\'mouseout\')\\n  endHover(): void {\\n    const { overlayRef } = this;\\n    overlayRef?.dispose();\\n  }\\n\\n  /** Function to handle the updation of overlay with up to date content when the input changes */\\n  private updateContent(): void {\\n    const { overlayRef, portal } = this;\\n    if (overlayRef && portal) {\\n      overlayRef.detach();\\n      overlayRef.attach(portal);\\n    }\\n  }\\n\\n  /** Function to create overlay and set its position */\\n  private createOverlay(): OverlayRef {\\n    return this.overlay.create({\\n      positionStrategy: this.overlay\\n        .position()\\n        .flexibleConnectedTo(this.el)\\n        .withPositions([\\n          new ConnectionPositionPair({ originX: \'start\', originY: \'bottom\' }, { overlayX: \'start\', overlayY: \'top\' }),\\n          new ConnectionPositionPair({ originX: \'end\', originY: \'bottom\' }, { overlayX: \'end\', overlayY: \'top\' }),\\n          new ConnectionPositionPair({ originX: \'start\', originY: \'top\' }, { overlayX: \'start\', overlayY: \'bottom\' }),\\n          new ConnectionPositionPair({ originX: \'end\', originY: \'top\' }, { overlayX: \'end\', overlayY: \'bottom\' }),\\n        ])\\n        .withPush(true),\\n    });\\n  }\\n}\\n","selector":"[hraHover]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[{"name":"hraHover","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSetter for the content to be displayed in the overlay","description":"<p>Setter for the content to be displayed in the overlay</p>\\n","line":19,"type":"TemplateRef<HoverContext<T>>","decorators":[]},{"name":"hraHoverData","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSetter for the context that is to be displayed in the portal attached to the overlay","description":"<p>Setter for the context that is to be displayed in the portal attached to the overlay</p>\\n","line":26,"type":"T","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"mouseout","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse out event to detach the portal","description":"<p>Function to handle the mouse out event to detach the portal</p>\\n","line":64},{"name":"mouseover","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse over event to attach the portal and display the hover content","description":"<p>Function to handle the mouse over event to attach the portal and display the hover content</p>\\n","line":54}],"propertiesClass":[{"name":"portal","deprecated":false,"deprecationMessage":"","type":"TemplatePortal<HoverContext<T>>","indexKey":"","optional":true,"description":"<p>Portal that is created to display the overlay</p>\\n","line":50,"rawdescription":"\\nPortal that is created to display the overlay"}],"methodsClass":[{"name":"endHover","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse out event to detach the portal","description":"<p>Function to handle the mouse out event to detach the portal</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'mouseout\'"}],"modifierKind":[170]},{"name":"startHover","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":54,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse over event to attach the portal and display the hover content","description":"<p>Function to handle the mouse over event to attach the portal and display the hover content</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'mouseover\'"}],"modifierKind":[170]}],"extends":[],"accessors":{"content":{"name":"content","setSignature":{"name":"content","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"content","type":"TemplateRef<HoverContext<T>>","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":19,"rawdescription":"\\nSetter for the content to be displayed in the overlay","description":"<p>Setter for the content to be displayed in the overlay</p>\\n","jsdoctags":[{"name":"content","type":"TemplateRef<HoverContext<T>>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"data":{"name":"data","setSignature":{"name":"data","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"data","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":26,"rawdescription":"\\nSetter for the context that is to be displayed in the portal attached to the overlay","description":"<p>Setter for the context that is to be displayed in the portal attached to the overlay</p>\\n","jsdoctags":[{"name":"data","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"LinkDirective","id":"directive-LinkDirective-6d1ee2a34fa010cef8dd551f887757960f4da61bcde8437d902bc420600e1b7bddc012665d96c36c28d021e5b99891304cc1eb3e3ff42bfc939ec9b1ac2473ad","file":"src/lib/link/link.directive.ts","type":"directive","description":"<p>Link Directive for routing</p>\\n","rawdescription":"\\nLink Directive for routing","sourceCode":"import { Directive, DoCheck, ElementRef, HostBinding, HostListener, inject, Injector, Input } from \'@angular/core\';\\nimport { ActivatedRoute, Params, QueryParamsHandling, UrlCreationOptions } from \'@angular/router\';\\nimport { dispatch, selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { EMPTY_LINK, LinkEntry, LinkRegistryActions, LinkRegistrySelectors, LinkType } from \'@hra-ui/cdk/state\';\\nimport { createExternalUrl, createInternalUrl } from \'@hra-ui/utils\';\\n\\n/** Link Directive for routing */\\n@Directive({\\n  selector: \'[hraLink]\',\\n  standalone: true,\\n})\\nexport class LinkDirective implements DoCheck {\\n  /** linkId with empty string as default value */\\n  @Input(\'hraLink\') linkId = EMPTY_LINK;\\n\\n  /** Query string parameters */\\n  @Input() queryParams?: Params;\\n\\n  /** How to handle existing query params */\\n  @Input() queryParamsHandling?: QueryParamsHandling;\\n\\n  /** Url fragment */\\n  @Input() fragment?: string;\\n\\n  /** Whether to preserve the existing fragment */\\n  @Input() preserveFragment?: boolean;\\n\\n  /** Nagivate relative to a route. Only affects internal links. */\\n  @Input() relativeTo?: ActivatedRoute;\\n\\n  /** href of the element */\\n  @HostBinding(\'attr.href\') href?: string;\\n  /** rel attribute of the element */\\n  @HostBinding(\'attr.rel\') rel?: string;\\n  /** target attribute of the element */\\n  @HostBinding(\'attr.target\') target?: string;\\n\\n  /** Reference to this component\'s injector */\\n  private readonly injector = inject(Injector);\\n  /** Element tag on which this directive is mounted */\\n  private readonly tagName = inject<ElementRef<Element>>(ElementRef).nativeElement.tagName.toLowerCase();\\n  /** Selector for querying the link registry state */\\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\\n  /** Dispatch action to navigate to a url */\\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\\n\\n  /** Link Entry */\\n  private link?: LinkEntry;\\n\\n  /** Whether the host element is an anchor */\\n  private get isAnchorElement(): boolean {\\n    return [\'a\', \'area\'].includes(this.tagName);\\n  }\\n\\n  /** Whether the host element deals with resource urls */\\n  private get isResourceUrl(): boolean {\\n    return [\'base\', \'link\'].includes(this.tagName);\\n  }\\n\\n  /** Collects query params and fragment options into a single object */\\n  private get extras(): UrlCreationOptions {\\n    const { link } = this;\\n    return this.mergeExtras(link?.type === LinkType.Internal ? link.extras : undefined, this);\\n  }\\n\\n  /** Updates the current link/url based on the inputs */\\n  ngDoCheck(): void {\\n    const link = this.queryLink(this.linkId);\\n    if (this.link !== link) {\\n      this.updateLink(link);\\n    }\\n  }\\n\\n  /**\\n   * Triggers when a click action is performed on the element\\n   * @param event type of event\\n   * @returns true/false based on entry and element\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  onClick(event: MouseEvent): boolean {\\n    const { link, linkId, isAnchorElement } = this;\\n    if (!link) {\\n      return true;\\n    }\\n\\n    if (isAnchorElement) {\\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\\n      if (link.type === LinkType.External || button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\\n        return true;\\n      }\\n    }\\n\\n    this.navigate(linkId, this.extras);\\n    return !isAnchorElement;\\n  }\\n\\n  /** Updates the link entry and bound attributes */\\n  private updateLink(link?: LinkEntry): void {\\n    this.link = link;\\n    ({ href: this.href, rel: this.rel, target: this.target } = this.getLinkAttributes(link));\\n  }\\n\\n  /**\\n   * Gets the new values for different attributes bound to the host element\\n   * @param link Current link entry\\n   * @returns New attributes values to bind on the host element\\n   */\\n  private getLinkAttributes(link?: LinkEntry): { href?: string; rel?: string; target?: string } {\\n    const { injector, extras, isResourceUrl } = this;\\n    switch (link?.type) {\\n      case LinkType.Internal:\\n        return { href: createInternalUrl(injector, link.commands, extras, isResourceUrl) };\\n\\n      case LinkType.External:\\n        return { ...link, href: createExternalUrl(link.url, extras) };\\n\\n      default:\\n        return {};\\n    }\\n  }\\n\\n  /**\\n   * Merges two UrlCreationOptions.\\n   * Undefined values in the second set does not override values from the first set.\\n   * @param opt1 First set of options\\n   * @param opt2 Second set of options\\n   * @returns Merged options\\n   */\\n  private mergeExtras(opt1: UrlCreationOptions | undefined, opt2: UrlCreationOptions): UrlCreationOptions {\\n    const result = { ...opt1 };\\n    const mergeKey = <K extends keyof UrlCreationOptions>(key: K) => {\\n      if (opt2[key] !== undefined) {\\n        result[key] = opt2[key];\\n      }\\n    };\\n\\n    mergeKey(\'queryParams\');\\n    mergeKey(\'queryParamsHandling\');\\n    mergeKey(\'fragment\');\\n    mergeKey(\'preserveFragment\');\\n    mergeKey(\'relativeTo\');\\n    return result;\\n  }\\n}\\n","selector":"[hraLink]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[{"name":"fragment","deprecated":false,"deprecationMessage":"","rawdescription":"\\nUrl fragment","description":"<p>Url fragment</p>\\n","line":23,"type":"string","decorators":[]},{"name":"hraLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nlinkId with empty string as default value","description":"<p>linkId with empty string as default value</p>\\n","line":14,"type":"any","decorators":[]},{"name":"preserveFragment","deprecated":false,"deprecationMessage":"","rawdescription":"\\nWhether to preserve the existing fragment","description":"<p>Whether to preserve the existing fragment</p>\\n","line":26,"type":"boolean","decorators":[]},{"name":"queryParams","deprecated":false,"deprecationMessage":"","rawdescription":"\\nQuery string parameters","description":"<p>Query string parameters</p>\\n","line":17,"type":"Params","decorators":[]},{"name":"queryParamsHandling","deprecated":false,"deprecationMessage":"","rawdescription":"\\nHow to handle existing query params","description":"<p>How to handle existing query params</p>\\n","line":20,"type":"QueryParamsHandling","decorators":[]},{"name":"relativeTo","deprecated":false,"deprecationMessage":"","rawdescription":"\\nNagivate relative to a route. Only affects internal links.","description":"<p>Nagivate relative to a route. Only affects internal links.</p>\\n","line":29,"type":"ActivatedRoute","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.href","deprecated":false,"deprecationMessage":"","rawdescription":"\\nhref of the element","description":"<p>href of the element</p>\\n","line":32,"type":"string","decorators":[]},{"name":"attr.rel","deprecated":false,"deprecationMessage":"","rawdescription":"\\nrel attribute of the element","description":"<p>rel attribute of the element</p>\\n","line":34,"type":"string","decorators":[]},{"name":"attr.target","deprecated":false,"deprecationMessage":"","rawdescription":"\\ntarget attribute of the element","description":"<p>target attribute of the element</p>\\n","line":36,"type":"string","decorators":[]}],"hostListeners":[{"name":"click","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTriggers when a click action is performed on the element\\n","description":"<p>Triggers when a click action is performed on the element</p>\\n","jsdoctags":[{"pos":2741,"end":2773,"kind":341,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":2742,"end":2747,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>type of event</p>\\n","name":{"pos":2748,"end":2753,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"isNameFirst":true,"isBracketed":false},{"pos":2773,"end":2823,"kind":342,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":2774,"end":2781,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true/false based on entry and element</p>\\n"}],"line":80}],"propertiesClass":[{"name":"href","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>href of the element</p>\\n","line":32,"rawdescription":"\\nhref of the element","decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.href\'"}],"modifierKind":[170]},{"name":"rel","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>rel attribute of the element</p>\\n","line":34,"rawdescription":"\\nrel attribute of the element","decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.rel\'"}],"modifierKind":[170]},{"name":"target","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>target attribute of the element</p>\\n","line":36,"rawdescription":"\\ntarget attribute of the element","decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.target\'"}],"modifierKind":[170]}],"methodsClass":[{"name":"onClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":80,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTriggers when a click action is performed on the element\\n","description":"<p>Triggers when a click action is performed on the element</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":2748,"end":2753,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":2742,"end":2747,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>type of event</p>\\n"},{"tagName":{"pos":2774,"end":2781,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true/false based on entry and element</p>\\n"}]}],"extends":[],"implements":["DoCheck"]}],"components":[{"name":"DestroyHostComponent","id":"component-DestroyHostComponent-673df9acfa9566a60f8f4a880379e6b99e54ae5d5ad511c7cd7a96cae5e2bdc436037556a9ad3ca44bdc0a5f74c3a300031212bae7e0df53e349d8e34d30dd92","file":"injectors/src/lib/on-destroy/destroy-host.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-destroy-host","styleUrls":[],"styles":[":host { display: none }"],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"el","defaultValue":"inject(ElementRef).nativeElement","deprecated":false,"deprecationMessage":"","type":"Element","indexKey":"","optional":false,"description":"<p>Reference to own dom element</p>\\n","line":14,"rawdescription":"\\nReference to own dom element","modifierKind":[148]}],"methodsClass":[{"name":"create","args":[{"name":"container","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ComponentRef<DestroyHostComponent>","typeParameters":[],"line":22,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCreates a new DestroyHostComponent inside the provided container.\\nThe element is inserted as the first child (index \'0\') in the container.\\n","description":"<p>Creates a new DestroyHostComponent inside the provided container.\\nThe element is inserted as the first child (index &#39;0&#39;) in the container.</p>\\n","modifierKind":[126],"jsdoctags":[{"name":{"pos":661,"end":670,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"container"},"type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"pos":655,"end":660,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>View in which to create the element</p>\\n"},{"tagName":{"pos":713,"end":720,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The ComponentRef of the newly inserted element</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Component used when attaching destroy lifecycle observables to a component/directive/pipe</p>\\n","rawdescription":"\\n\\nComponent used when attaching destroy lifecycle observables to a component/directive/pipe\\n","type":"component","sourceCode":"import { AfterViewInit, Component, ComponentRef, ElementRef, inject, ViewContainerRef } from \'@angular/core\';\\n\\n/**\\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\\n */\\n@Component({\\n  selector: \'hra-destroy-host\',\\n  standalone: true,\\n  template: \'\',\\n  styles: [\':host { display: none }\'],\\n})\\nexport class DestroyHostComponent implements AfterViewInit {\\n  /** Reference to own dom element */\\n  readonly el: Element = inject(ElementRef).nativeElement;\\n\\n  /**\\n   * Creates a new DestroyHostComponent inside the provided container.\\n   * The element is inserted as the first child (index \'0\') in the container.\\n   * @param container View in which to create the element\\n   * @returns The ComponentRef of the newly inserted element\\n   */\\n  static create(container: ViewContainerRef): ComponentRef<DestroyHostComponent> {\\n    return container.createComponent(DestroyHostComponent, { index: 0 });\\n  }\\n\\n  /** Disconnects the component from the dom tree */\\n  ngAfterViewInit(): void {\\n    this.el.remove();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":":host { display: none }\\n","extends":[],"implements":["AfterViewInit"]}],"modules":[{"name":"CdkStateModule","id":"module-CdkStateModule-049d74c98fc5f8a8d1a77e745e50e1490654ff08103771fef674e28702b1c7f1ea3d4013804386caa70e2542e498754db1dafa90a3298b0069ec7f1ebe34fbb2","description":"","deprecationMessage":"","deprecated":false,"file":"state/src/state.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { NgxsModule } from \'@ngxs/store\';\\nimport { BaseHrefState } from \'./base-href\';\\nimport { LinkRegistryState } from \'./link-registry\';\\nimport { ResourceRegistryState } from \'./resource-registry\';\\nimport { StorageState } from \'./storage\';\\n\\n@NgModule({\\n  imports: [NgxsModule.forFeature([BaseHrefState, LinkRegistryState, ResourceRegistryState, StorageState])],\\n})\\nexport class CdkStateModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/base-href/base-href.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'BaseHref\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"},{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'LinkRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"},{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'ResourceRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"},{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'Storage\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"},{"name":"actionTypeRegistry","ctype":"miscellaneous","subtype":"variable","file":"state/src/actions/action-type-registry.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new Set<string>()","rawdescription":"Registry of action types","description":"<p>Registry of action types</p>\\n"},{"name":"Breakpoints","ctype":"miscellaneous","subtype":"variable","file":"breakpoints/src/lib/breakpoints.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  Mobile: \'(max-width: 639.98px)\',\\n  Desktop: \'(min-width: 640px) and (max-width: 1920.98px)\',\\n  LargeDesktop: \'(min-width: 1921px)\',\\n}","rawdescription":"Builtin breakpoints","description":"<p>Builtin breakpoints</p>\\n"},{"name":"BUILTIN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.discriminatedUnion(\'type\', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])","rawdescription":"Union of all builtin entries","description":"<p>Union of all builtin entries</p>\\n"},{"name":"BUILTIN_TYPE_VALUES","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.values(RawBuiltinResourceType)","rawdescription":"Builtin type strings as an array","description":"<p>Builtin type strings as an array</p>\\n"},{"name":"BuiltinResourceType","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"RawBuiltinResourceType as BuiltinTypes","rawdescription":"Builtin resource types","description":"<p>Builtin resource types</p>\\n"},{"name":"currentScriptEl","ctype":"miscellaneous","subtype":"variable","file":"app-href/src/lib/current-script.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"document.currentScript","rawdescription":"Currently executing script\'s element.\\nShould be reliable in most cases unless the script is executed as a module\\nor in an older browser, IE etc. (which we don\'t support anyway)","description":"<p>Currently executing script&#39;s element.\\nShould be reliable in most cases unless the script is executed as a module\\nor in an older browser, IE etc. (which we don&#39;t support anyway)</p>\\n"},{"name":"currentScriptPath","ctype":"miscellaneous","subtype":"variable","file":"app-href/src/lib/current-script.ts","deprecated":false,"deprecationMessage":"","type":"string | undefined","rawdescription":"Cached value of found script path","description":"<p>Cached value of found script path</p>\\n"},{"name":"CUSTOM_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()","rawdescription":"Custom entry","description":"<p>Custom entry</p>\\n"},{"name":"CUSTOM_ENTRY_TYPE","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .refine((val) => !isBuiltinType(val), \'Invalid builtin resource format\')\\n  .transform<CustomResourceType<string>>(createCustomType)","rawdescription":"Custom entry type validator with transformation","description":"<p>Custom entry type validator with transformation</p>\\n"},{"name":"CUSTOM_TYPE_PREFIX","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'custom:\'","rawdescription":"Prefix of all custom types","description":"<p>Prefix of all custom types</p>\\n"},{"name":"DEFAULT_FONT_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"Required<FontIconsConfig>","defaultValue":"{\\n  defaultClasses: [],\\n}","rawdescription":"Default values for font icon configuration","description":"<p>Default values for font icon configuration</p>\\n"},{"name":"DEFAULT_SVG_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"Required<SvgIconsConfig>","defaultValue":"{\\n  directory: \'assets/icons\',\\n}","rawdescription":"Default values for svg icon configuration","description":"<p>Default values for svg icon configuration</p>\\n"},{"name":"DESTRUCTOR_CACHE","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/on-destroy/on-destroy.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new WeakMap<object, Observable<void>>()","rawdescription":"Cached destructor observables","description":"<p>Cached destructor observables</p>\\n"},{"name":"EMPTY_LINK","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"createLinkId(\'@@__EMPTY__\')","rawdescription":"Empty link id","description":"<p>Empty link id</p>\\n"},{"name":"EXTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.External),\\n    url: z.string(),\\n    rel: z.string().default(\'noopener\'),\\n    target: z.string(),\\n  })\\n  .partial({ rel: true, target: true })","rawdescription":"Type for external link entry","description":"<p>Type for external link entry</p>\\n"},{"name":"FONT_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Required<FontIconsConfig>>(\'FONT_ICONS_CONFIG\')","rawdescription":"Injection token for font icon configuration","description":"<p>Injection token for font icon configuration</p>\\n"},{"name":"INITIAL_APP_HREF","ctype":"miscellaneous","subtype":"variable","file":"app-href/src/lib/app-href.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<string>(\'InitialAppHref\', {\\n  providedIn: \'root\',\\n  factory: () => getCurrentScriptBasePath(),\\n})","rawdescription":"Initial value for appHref. Defaults to the current script\'s base path","description":"<p>Initial value for appHref. Defaults to the current script&#39;s base path</p>\\n"},{"name":"INTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.Internal),\\n    commands: z.any().array(),\\n    extras: z\\n      .object({\\n        queryParams: z.record(z.any()).nullable(),\\n        fragment: z.string(),\\n        queryParamsHandling: z.enum([\'merge\', \'preserve\', \'\']).nullable(),\\n        preserveFragment: z.boolean(),\\n        onSameUrlNavigation: z.literal(\'reload\'),\\n        skipLocationChange: z.boolean(),\\n        replaceUrl: z.boolean(),\\n      })\\n      .partial(),\\n  })\\n  .partial({ extras: true })","rawdescription":"Type for internal link entry","description":"<p>Type for internal link entry</p>\\n"},{"name":"LINK_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(\\n  z\\n    .string()\\n    .transform((id) => `LinkId:\'${id}\'`)\\n    .brand(\'LinkId\'),\\n  z.discriminatedUnion(\'type\', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\\n)","rawdescription":"Schema for link registry","description":"<p>Schema for link registry</p>\\n"},{"name":"MARKDOWN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Markdown),\\n  markdown: z.string(),\\n})","rawdescription":"Markdown data","description":"<p>Markdown data</p>\\n"},{"name":"NO_ERROR_SENTINEL_OBJ","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/select/snapshot-observer.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{}","rawdescription":"Object indicating that no error has been emitted","description":"<p>Object indicating that no error has been emitted</p>\\n"},{"name":"PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS","ctype":"miscellaneous","subtype":"variable","file":"platform-location/src/lib/nothrow-platform-location.ts","deprecated":false,"deprecationMessage":"","type":"PatchablePlatformLocationHistoryMethod[]","defaultValue":"[\\n  \'replaceState\',\\n  \'pushState\',\\n  \'forward\',\\n  \'back\',\\n  \'historyGo\',\\n]","rawdescription":"Array of all patchable platform location history methods","description":"<p>Array of all patchable platform location history methods</p>\\n"},{"name":"RESOURCE_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])","rawdescription":"Builtin or custom entries","description":"<p>Builtin or custom entries</p>\\n"},{"name":"RESOURCE_ID","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .transform((id) => `ResourceId:\'${id}\'`)\\n  .brand(\'ResourceId\')","rawdescription":"Resource identifier validator with transformation","description":"<p>Resource identifier validator with transformation</p>\\n"},{"name":"RESOURCE_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(RESOURCE_ID, RESOURCE_ENTRY)","rawdescription":"State schema","description":"<p>State schema</p>\\n"},{"name":"SVG_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Required<SvgIconsConfig>>(\'SVG_ICONS_CONFIG\')","rawdescription":"Injection token for svg icon configuration","description":"<p>Injection token for svg icon configuration</p>\\n"},{"name":"TEXT_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Text),\\n  text: z.string(),\\n})","rawdescription":"Text data","description":"<p>Text data</p>\\n"},{"name":"URL_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Url),\\n  url: z.string(),\\n})","rawdescription":"External url","description":"<p>External url</p>\\n"}],"functions":[{"name":"Action","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new base action with a specified type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":685,"end":689,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":679,"end":684,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action type</p>\\n"},{"tagName":{"pos":706,"end":713,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A base action class</p>\\n"}]},{"name":"ActionGroup","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory that adds a common group string to each action type</p>\\n","args":[{"name":"group","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":421,"end":426,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"group"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Common action type group</p>\\n"},{"tagName":{"pos":456,"end":463,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An action factory</p>\\n"}]},{"name":"assertUniqueActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Asserts that an action type is unique</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":141,"end":145,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":135,"end":140,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]},{"name":"createActionFactory","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory function</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":""}],"returnType":"A","jsdoctags":[{"name":{"pos":500,"end":504,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":494,"end":499,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action constructor</p>\\n"},{"name":{"pos":534,"end":543,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","tagName":{"pos":528,"end":533,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Initial bound arguments</p>\\n"},{"tagName":{"pos":572,"end":579,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A factory function creating a new action on each call</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Partial<Record<string, >>>>","jsdoctags":[{"name":{"pos":4708,"end":4712,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":4702,"end":4707,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"tagName":{"pos":4735,"end":4742,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type with a payload. The payload should be\\nspecified using the {@link payload} function</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""},{"name":"payload","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Props>>","jsdoctags":[{"name":{"pos":5138,"end":5142,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":5132,"end":5137,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"name":{"pos":5171,"end":5178,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"payload"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":5165,"end":5170,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Payload type</p>\\n"},{"tagName":{"pos":5032,"end":5039,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"example"},"comment":"<p>const MyResourceType = createCustomType(&#39;my-type&#39;, payload&lt;{ value: number }&gt;());</p>\\n"},{"tagName":{"pos":5196,"end":5203,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Implementation of createCustomType overloads</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"createLinkId","file":"state/src/link-registry/link-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>function to createa unique link ids</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"LinkId","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"createResourceId","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new resource identifier</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":{"pos":4258,"end":4260,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"id"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4252,"end":4257,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Raw identifier</p>\\n"},{"tagName":{"pos":4280,"end":4287,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A resource id</p>\\n"}]},{"name":"createSvgIconResolver","file":"icons/src/lib/resolvers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates svg icon resolver with the specified configuration.\\nThe function resolves all svg icons to <code>directory/[namespace/]name.svg</code></p>\\n","args":[{"name":"config","type":"SvgIconResolverConfig","deprecated":false,"deprecationMessage":""}],"returnType":"IconResolver","jsdoctags":[{"name":{"pos":595,"end":601,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"SvgIconResolverConfig","deprecated":false,"deprecationMessage":"","tagName":{"pos":589,"end":594,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":627,"end":634,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A resolver function</p>\\n"}]},{"name":"dispatch","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"A","jsdoctags":[{"name":{"pos":1730,"end":1734,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1724,"end":1729,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":1788,"end":1797,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":1782,"end":1787,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":1844,"end":1851,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatch$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.\\nEach call to the wrapper returns an observable that emits the action instance once the\\ndispatch action has completed.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"Observable<A>","jsdoctags":[{"name":{"pos":2435,"end":2439,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":2429,"end":2434,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":2493,"end":2502,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2487,"end":2492,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":2549,"end":2556,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatchAction","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns passed actions unchanged</p>\\n","args":[],"returnType":"A","jsdoctags":[{"tagName":{"pos":3063,"end":3070,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchAction$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns an observable that emits the passed actions when the dispatch has finished</p>\\n","args":[],"returnType":"Observable<A>","jsdoctags":[{"tagName":{"pos":3427,"end":3434,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchImpl","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Common dispatch functionality used to implement all dispatch functions</p>\\n","args":[{"name":"actionFactory","deprecated":false,"deprecationMessage":""},{"name":"resultHandler","deprecated":false,"deprecationMessage":""}],"returnType":"R","jsdoctags":[{"name":{"pos":977,"end":990,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"actionFactory"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":971,"end":976,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Creates an action or array of actions from the user provided arguments</p>\\n"},{"name":{"pos":1072,"end":1085,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"resultHandler"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1066,"end":1071,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Selects the output value from the action and the dispatch observable</p>\\n"},{"tagName":{"pos":1159,"end":1166,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A new dispatch function taking user arguments, dispatches actions, and returns a value</p>\\n"}]},{"name":"findCurrentScriptPath","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Searches for the current script&#39;s path in a couple of different ways.</p>\\n","args":[],"returnType":"string","jsdoctags":[{"tagName":{"pos":898,"end":905,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The current script&#39;s path if found, otherwise the empty string</p>\\n"}]},{"name":"findCurrentScriptPathFromStackTrace","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Try to find the current script&#39;s path using a stack trace.\\nAdapted from ://stackoverflow.com/a/22165218{@link https}</p>\\n","args":[],"returnType":"string | undefined","jsdoctags":[{"tagName":{"pos":1297,"end":1304,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A path if found</p>\\n"}]},{"name":"findDestructorScope","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds the nearest destructor scope object in the current injection context</p>\\n","args":[],"returnType":"DestructorScope","jsdoctags":[{"tagName":{"pos":1267,"end":1274,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The scope on which cleanup can be attached</p>\\n"}]},{"name":"findStableKeyObject","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds a stable object in the current injection context to be\\nused as a key in the destructor cache</p>\\n","args":[],"returnType":"object","jsdoctags":[{"tagName":{"pos":912,"end":919,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An object</p>\\n"}]},{"name":"firstDefinedValue","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the first defined value returned by a generator</p>\\n","args":[{"name":"genFn","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":441,"end":446,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"genFn"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":435,"end":440,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Generator function taking no arguments</p>\\n"},{"tagName":{"pos":490,"end":497,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The first non-null value</p>\\n"}]},{"name":"getCurrentScriptBasePath","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the current script&#39;s base path.</p>\\n","args":[],"returnType":"string","jsdoctags":[{"tagName":{"pos":590,"end":597,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The current script&#39;s base path</p>\\n"}]},{"name":"getCurrentScriptPath","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the current script&#39;s path.</p>\\n","args":[],"returnType":"string","jsdoctags":[{"tagName":{"pos":373,"end":380,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The current script&#39;s path</p>\\n"}]},{"name":"getEntry","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Internal helper function for getting an entry from the state</p>\\n","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""},{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"type","type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"T | undefined","jsdoctags":[{"name":{"pos":5670,"end":5675,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":5664,"end":5669,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Current state snapshot</p>\\n"},{"name":{"pos":5709,"end":5711,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":5703,"end":5708,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Resource id</p>\\n"},{"name":{"pos":5734,"end":5738,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":5728,"end":5733,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional entry type</p>\\n"},{"tagName":{"pos":5763,"end":5770,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The entry object it exists and has the correct type, otherwise undefined</p>\\n"}]},{"name":"identity","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Identity function returning the first argument passed</p>\\n","args":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"injectDestroy$","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\\nit is injected into. It can be used to control the lifetime of other observables using\\nthe <code>takeUntil</code> pipe, and to build other complex injection functions.</p>\\n<p>Caveats:</p>\\n<ul>\\n<li>There are NO guarantees about whether the returned observable will emit and complete\\nbefore or after the regular ngOnDestroy lifecycle hook</li>\\n<li>For root and module level services the observable may never complete unless\\nthe containing module is explicitly destroyed, so don&#39;t rely on it for important operations</li>\\n<li>Components, directives, pipe, and services that manipulate the <code>ViewContainerRef</code> MUST\\ntake care to maintain the view controlling the lifecycle of the observable. Failure\\nto do so may result in early emit and completion of the returned observable</li>\\n</ul>\\n<p>Based on comment on <a href=\\"https://github.com/angular/angular/issues/10185\\">https://github.com/angular/angular/issues/10185</a>\\nMostly <a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1165545544\\">https://github.com/angular/angular/issues/10185#issuecomment-1165545544</a> and\\n<a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1199063426\\">https://github.com/angular/angular/issues/10185#issuecomment-1199063426</a></p>\\n","args":[],"returnType":"Observable<void>","jsdoctags":[{"tagName":{"pos":2694,"end":2701,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable that emits and completes when the component/directive/etc. is destroyed</p>\\n"}]},{"name":"isBuiltinType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type string has builtin support</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"BuiltinTypes","jsdoctags":[{"name":{"pos":3572,"end":3576,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3566,"end":3571,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3597,"end":3604,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>True if type is one of the builtin types, otherwise false</p>\\n"}]},{"name":"isCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type is a custom resource type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<z.infer<>>","jsdoctags":[{"name":{"pos":3881,"end":3885,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3875,"end":3880,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3906,"end":3913,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>True if type is a custom type, otherwise false</p>\\n"}]},{"name":"isDestructorScopeLike","file":"injectors/src/lib/on-destroy/destructor-subject.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether an object is destructor scope like</p>\\n","args":[{"name":"obj","deprecated":false,"deprecationMessage":""}],"returnType":"DestructorScope","jsdoctags":[{"name":{"pos":328,"end":331,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"obj"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":322,"end":327,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Value to test</p>\\n"},{"tagName":{"pos":350,"end":357,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true if the object seems to be a destructor scope, otherwise false</p>\\n"}]},{"name":"joinPath","file":"icons/src/lib/resolvers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Joins path segments into a single string. Removes empty segments and double &#39;/&#39; sequences.</p>\\n","args":[{"name":"segments","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"string","jsdoctags":[{"name":{"pos":1103,"end":1111,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"segments"},"deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":1097,"end":1102,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Segments, some of which may be the empty string</p>\\n"},{"tagName":{"pos":1164,"end":1171,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The joined path</p>\\n"}]},{"name":"markForCheck","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Marks a view for change detection whenever a new value is emitted</p>\\n","args":[{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"MonoTypeOperatorFunction<T>","jsdoctags":[{"name":{"pos":689,"end":696,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":683,"end":688,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Options to explicitly disable marking</p>\\n"},{"tagName":{"pos":739,"end":746,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A rxjs operator</p>\\n"}]},{"name":"patchPlatformLocationHistoryMethod","file":"platform-location/src/lib/nothrow-platform-location.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Patches a platform location method to catch and ignore <code>SecurityError</code> DOMExceptions\\nin environments where the history api may not be fully available.</p>\\n","args":[{"name":"impl","type":"PlatformLocation","deprecated":false,"deprecationMessage":""},{"name":"method","type":"PatchablePlatformLocationHistoryMethod","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":750,"end":754,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"impl"},"type":"PlatformLocation","deprecated":false,"deprecationMessage":"","tagName":{"pos":744,"end":749,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>PlatformLocation instance</p>\\n"},{"name":{"pos":791,"end":797,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"method"},"type":"PatchablePlatformLocationHistoryMethod","deprecated":false,"deprecationMessage":"","tagName":{"pos":785,"end":790,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Name of method to patch</p>\\n"}]},{"name":"patchPlatformLocationHistoryMethods","file":"platform-location/src/lib/nothrow-platform-location.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Patches multiple platform location methods to catch and ignore <code>SecurityError</code> DOMExceptions\\nin environments where the history api may not be fully available.</p>\\n","args":[{"name":"impl","type":"PlatformLocation","deprecated":false,"deprecationMessage":""},{"name":"methods","deprecated":false,"deprecationMessage":"","defaultValue":"PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS"}],"returnType":"void","jsdoctags":[{"name":{"pos":1565,"end":1569,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"impl"},"type":"PlatformLocation","deprecated":false,"deprecationMessage":"","tagName":{"pos":1559,"end":1564,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>PlatformLocation instance</p>\\n"},{"name":{"pos":1606,"end":1613,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"methods"},"deprecated":false,"deprecationMessage":"","defaultValue":"PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS","tagName":{"pos":1600,"end":1605,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Array of methods to patch</p>\\n"}]},{"name":"payload","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Helper function used to specify the payload format when creating custom types</p>\\n","args":[],"returnType":"ResourceEntryPayload<Props>","jsdoctags":[{"tagName":{"pos":4477,"end":4484,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A custom payload type</p>\\n"}]},{"name":"pipeActionInstance","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Maps all emits to an action value</p>\\n","args":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":""},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":""}],"returnType":"Observable<A>","jsdoctags":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"provideAppHref","file":"app-href/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides an initial appHref value for the entire application</p>\\n","args":[{"name":"href","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":217,"end":221,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"href"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":211,"end":216,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Initial appHref value</p>\\n"}]},{"name":"provideFontIcons","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides font icons</p>\\n","args":[{"name":"config","type":"FontIconsConfig","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":2660,"end":2666,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"FontIconsConfig","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":2654,"end":2659,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":2692,"end":2699,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Application providers</p>\\n"}]},{"name":"provideIcons","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides both font and svg icons</p>\\n","args":[{"name":"config","type":"IconsConfig","deprecated":false,"deprecationMessage":"","defaultValue":"{}"}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":3812,"end":3818,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"IconsConfig","deprecated":false,"deprecationMessage":"","defaultValue":"{}","tagName":{"pos":3806,"end":3811,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":3844,"end":3851,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Application providers</p>\\n"}]},{"name":"provideNothrowPlatformLocation","file":"platform-location/src/lib/nothrow-platform-location.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Ensures that the PlatformLocation does not throw errors when using the history in\\nan environment where it is not fully supported. The patch still allows errors due\\nto invalid input, etc. to propagate through.</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":2150,"end":2157,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Providers</p>\\n"}]},{"name":"provideStyleComponents","file":"styling/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provide style components that are registered on application initialization.</p>\\n","args":[{"name":"components","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":319,"end":329,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"components"},"deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":313,"end":318,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Component classes</p>\\n"},{"tagName":{"pos":352,"end":359,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Environment provider</p>\\n"}]},{"name":"provideSvgIcons","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides svg icons</p>\\n","args":[{"name":"config","type":"SvgIconsConfig","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":3191,"end":3197,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"SvgIconsConfig","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":3185,"end":3190,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":3223,"end":3230,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Application providers</p>\\n"}]},{"name":"registerActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Registers an action type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":421,"end":425,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]},{"name":"registerDefaultFontSetClassesFactory","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Factory for registering default font icon classes</p>\\n","args":[{"name":"registry","type":"MatIconRegistry","deprecated":false,"deprecationMessage":""},{"name":"defaultClasses","type":"Required<FontIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"62b852c2-9baf-4986-9331-fc3aa2bce97e","destructuredParameter":true}],"returnType":"void","jsdoctags":[{"name":{"pos":1571,"end":1579,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"registry"},"type":"MatIconRegistry","deprecated":false,"deprecationMessage":"","tagName":{"pos":1565,"end":1570,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Material icon registry</p>\\n"},{"name":"defaultClasses","type":"Required<FontIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"62b852c2-9baf-4986-9331-fc3aa2bce97e","destructuredParameter":true,"tagName":{"text":"param"}},{"tagName":{"pos":1645,"end":1652,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Registration function</p>\\n"}]},{"name":"registerStyleComponents","file":"styling/src/lib/style-component-manager.service.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Register style components. Each component is registered at most once.\\nMust be called in an injection context or pass an injector in the options.</p>\\n","args":[{"name":"components","type":"Types","deprecated":false,"deprecationMessage":""},{"name":"options","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"ComponentRefsFromTypes<Types>","jsdoctags":[{"name":{"pos":700,"end":710,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"components"},"type":"Types","deprecated":false,"deprecationMessage":"","tagName":{"pos":694,"end":699,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Component classes</p>\\n"},{"name":{"pos":739,"end":746,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":733,"end":738,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Additional options</p>\\n"},{"tagName":{"pos":770,"end":777,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A component ref for each class</p>\\n"}]},{"name":"registerSvgIconResolverFactory","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Factory for registering a svg icon resolver</p>\\n","args":[{"name":"registry","type":"MatIconRegistry","deprecated":false,"deprecationMessage":""},{"name":"appHrefService","type":"AppHrefService","deprecated":false,"deprecationMessage":""},{"name":"sanitizer","type":"DomSanitizer","deprecated":false,"deprecationMessage":""},{"name":"directory","type":"Required<SvgIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"b5eaca61-7479-485c-8945-19131ce477f0","destructuredParameter":true}],"returnType":"void","jsdoctags":[{"name":{"pos":2048,"end":2056,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"registry"},"type":"MatIconRegistry","deprecated":false,"deprecationMessage":"","tagName":{"pos":2042,"end":2047,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Material icon registry</p>\\n"},{"name":"appHrefService","type":"AppHrefService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":2126,"end":2135,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"sanitizer"},"type":"DomSanitizer","deprecated":false,"deprecationMessage":"","tagName":{"pos":2120,"end":2125,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Resource url sanitizer</p>\\n"},{"name":"directory","type":"Required<SvgIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"b5eaca61-7479-485c-8945-19131ce477f0","destructuredParameter":true,"tagName":{"text":"param"}},{"tagName":{"pos":2201,"end":2208,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Registration function</p>\\n"}]},{"name":"select$","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an observable emitting parts of the state. The observable&#39;s lifetime\\nis automatically tied to the injection context where this is called.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Observable<T>","jsdoctags":[{"name":{"pos":1313,"end":1321,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":1307,"end":1312,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>State selection function or token</p>\\n"},{"name":{"pos":1366,"end":1373,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1360,"end":1365,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Additional select options</p>\\n"},{"tagName":{"pos":1404,"end":1411,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable of the selected state</p>\\n"}]},{"name":"selectQuerySnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that can be called with the same arguments as the query selector\\nand returns the latest value each time. Automatically marks components, directives, or pipes\\nfor change detection whenever a new value is available. Note that since typescript has yet to\\nimplement support for higher order generics there is sometimes a need to specialize the\\nreturned query function with the correct arguments and return type. This can be done as shown\\nin the examples.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"SelectQuery<F, BoundArgs>","jsdoctags":[{"name":{"pos":2433,"end":2441,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":2427,"end":2432,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Store query selector</p>\\n"},{"name":{"pos":2473,"end":2482,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2467,"end":2472,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional bound query arguments</p>\\n"},{"tagName":{"pos":1631,"end":1638,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"example"},"comment":"<caption>Basic usage</caption>\\nclass Component {\\n...\\n// Return type: () => string\\nreadonly markdown = querySelectSnapshot(ResourceRegistrySelectors.markdown, id);\\n// Return type: (id: ResourceId) => string\\nreadonly markdownById = querySelectSnapshot(ResourceRegistrySelectors.markdown);\\n...\\n}"},{"tagName":{"pos":1975,"end":1982,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"example"},"comment":"<caption>Specialize query arguments and/or return type</caption>\\nclass Component {\\n...\\n// Return type: () => number[]\\nreadonly points = querySelectSnapshot(ResourceRegistrySelectors.field, id, type, \'points\', [])<number[]>;\\n// Return type: (field: string, defaultValue: string) => string\\nreadonly getStringField = querySelectSnapshot(ResourceRegistrySelectors.field, id, type)<string, [string, string]>;\\n}"},{"tagName":{"pos":2518,"end":2525,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A snapshot function taking the same arguments as the query selector (excluding bound arguments)</p>\\n"}]},{"name":"selectSnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that returns the latest snapshot value each time it is called\\nAutomatically marks components, directives, or pipes for change detection whenever\\na new value is available</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":819,"end":827,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":813,"end":818,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Store data selector</p>\\n"},{"tagName":{"pos":852,"end":859,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A snapshot function</p>\\n"}]},{"name":"watchBreakpoint","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch a single query.\\nMust be called in an injection context.</p>\\n","args":[{"name":"query","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"Signal<boolean>","jsdoctags":[{"name":{"pos":1467,"end":1472,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"query"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1461,"end":1466,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Breakpoint query to watch</p>\\n"},{"tagName":{"pos":1503,"end":1510,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal with indicating when the query matches</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch the default breakpoints.\\nMust be called in an injection context.</p>\\n","args":[],"returnType":"Signal<BreakpointWatchState<Breakpoint>>","jsdoctags":[{"tagName":{"pos":1814,"end":1821,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch multiple queries.\\nMust be called in an injection context.</p>\\n","args":[{"name":"queries","deprecated":false,"deprecationMessage":""}],"returnType":"Signal<BreakpointWatchState>","jsdoctags":[{"name":{"pos":2034,"end":2041,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"queries"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":2028,"end":2033,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Queries to watch</p>\\n"},{"tagName":{"pos":2063,"end":2070,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch multiple breakpoints.\\nMust be called in an injection context.</p>\\n","args":[{"name":"mapping","type":"Record","deprecated":false,"deprecationMessage":""}],"returnType":"Signal<BreakpointWatchState<T>>","jsdoctags":[{"name":{"pos":2292,"end":2299,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"mapping"},"type":"Record","deprecated":false,"deprecationMessage":"","tagName":{"pos":2286,"end":2291,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Mapping from breakpoints to queries</p>\\n"},{"tagName":{"pos":2340,"end":2347,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch multiple queries or breakpoints.</p>\\n","args":[{"name":"arg","deprecated":false,"deprecationMessage":"","defaultValue":"Breakpoints"}],"returnType":"Signal<BreakpointWatchState>","jsdoctags":[{"name":{"pos":2567,"end":2570,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"arg"},"deprecated":false,"deprecationMessage":"","defaultValue":"Breakpoints","tagName":{"pos":2561,"end":2566,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>A list of queries or mapping from breakpoints to queries</p>\\n"},{"tagName":{"pos":2632,"end":2639,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]}],"typealiases":[{"name":"AnyEntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.anyEntry}</p>\\n","kind":184},{"name":"Breakpoint","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"breakpoints/src/lib/breakpoints.ts","deprecated":false,"deprecationMessage":"","description":"<p>Name of a single builtin breakpoint</p>\\n","kind":198},{"name":"BuiltinTypes","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Maps raw builtin type strings to ResourceType</p>\\n","kind":200},{"name":"ComponentInstanceMap","ctype":"miscellaneous","subtype":"typealias","rawtype":"Map<Type<> | ComponentRef<>>","file":"styling/src/lib/style-component-manager.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>Map of component types to instances</p>\\n","kind":183},{"name":"ComponentRefsFromTypes","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"styling/src/lib/style-component-manager.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>Helper that turns an array of types into an array of component refs</p>\\n","kind":200},{"name":"CustomResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Typed custom resource entry</p>\\n","kind":193},{"name":"CustomResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":" `custom:${T}`","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom entry types</p>\\n","kind":203},{"name":"DataQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for resource data</p>\\n","kind":184},{"name":"EntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.entry}</p>\\n","kind":184},{"name":"ExternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for external link entry</p>\\n","kind":183},{"name":"ExtractBuiltinEntryType","ctype":"miscellaneous","subtype":"typealias","rawtype":"UnionMember<z.infer<> | type | T>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Extracts the builtin entry with type T</p>\\n","kind":183},{"name":"FieldQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.field}</p>\\n","kind":184},{"name":"InternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for internal link entry</p>\\n","kind":183},{"name":"LinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>entry for link registry</p>\\n","kind":183},{"name":"LinkId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type for unique identifier for link</p>\\n","kind":183},{"name":"LinkRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<LinkRegistryModel>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for State Context of LinkRegistry</p>\\n","kind":183},{"name":"LinkRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for LinkRegistry State</p>\\n","kind":183},{"name":"LinkRegistryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/link-registry/link-registry.state.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for link entry optionally with type specified</p>\\n","kind":184},{"name":"PatchablePlatformLocationHistoryMethod","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"replaceState\\" | \\"pushState\\" | \\"forward\\" | \\"back\\" | \\"historyGo\\"","file":"platform-location/src/lib/nothrow-platform-location.ts","deprecated":false,"deprecationMessage":"","description":"<p>Patchable platform location history methods</p>\\n","kind":192},{"name":"ResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Any resource entry</p>\\n","kind":183},{"name":"ResourceEntryPayload","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Payload type used when creating custom types</p>\\n","kind":193},{"name":"ResourceId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource identifier</p>\\n","kind":183},{"name":"ResourceRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ResourceRegistryModel>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Context type for action handlers</p>\\n","kind":183},{"name":"ResourceRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State data model</p>\\n","kind":183},{"name":"ResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource type string with entry typings</p>\\n","kind":193},{"name":"RestArgs","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Get remaining arguments after applying bound arguments</p>\\n","kind":194},{"name":"SelectQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Function type returned by {@link selectQuerySnapshot}</p>\\n","kind":184},{"name":"StateSelector","ctype":"miscellaneous","subtype":"typealias","rawtype":" | StateToken<T>","file":"injectors/src/lib/select/select.ts","deprecated":false,"deprecationMessage":"","description":"<p>Selector type for select style functions</p>\\n","kind":192},{"name":"StorageContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<StorageModel>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Helper alias for action handler&#39;s ctx argument</p>\\n","kind":183},{"name":"StorageModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<StorageId | number>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type alias for the array of Storage objects</p>\\n","kind":183}],"enumerations":[{"name":"LinkType","childs":[{"name":"Internal","deprecated":false,"deprecationMessage":"","value":"internal"},{"name":"External","deprecated":false,"deprecationMessage":"","value":"external"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Types for Link</p>\\n","file":"state/src/link-registry/link-registry.model.ts"},{"name":"RawBuiltinResourceType","childs":[{"name":"Markdown","deprecated":false,"deprecationMessage":"","value":"markdown"},{"name":"Text","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"Url","deprecated":false,"deprecationMessage":"","value":"url"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Raw builtin type strings</p>\\n","file":"state/src/resource-registry/resource-registry.model.ts"},{"name":"StorageId","childs":[{"name":"Local","deprecated":false,"deprecationMessage":"","value":"local"},{"name":"Session","deprecated":false,"deprecationMessage":"","value":"session"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>StorageId - enum with values as Local, Session - identifier for storage types</p>\\n","file":"state/src/storage/storage.model.ts"}],"groupedVariables":{"state/src/base-href/base-href.actions.ts":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/base-href/base-href.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'BaseHref\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"}],"state/src/link-registry/link-registry.actions.ts":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'LinkRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"}],"state/src/resource-registry/resource-registry.actions.ts":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'ResourceRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"}],"state/src/storage/storage.actions.ts":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'Storage\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"}],"state/src/actions/action-type-registry.ts":[{"name":"actionTypeRegistry","ctype":"miscellaneous","subtype":"variable","file":"state/src/actions/action-type-registry.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new Set<string>()","rawdescription":"Registry of action types","description":"<p>Registry of action types</p>\\n"}],"breakpoints/src/lib/breakpoints.ts":[{"name":"Breakpoints","ctype":"miscellaneous","subtype":"variable","file":"breakpoints/src/lib/breakpoints.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  Mobile: \'(max-width: 639.98px)\',\\n  Desktop: \'(min-width: 640px) and (max-width: 1920.98px)\',\\n  LargeDesktop: \'(min-width: 1921px)\',\\n}","rawdescription":"Builtin breakpoints","description":"<p>Builtin breakpoints</p>\\n"}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"BUILTIN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.discriminatedUnion(\'type\', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])","rawdescription":"Union of all builtin entries","description":"<p>Union of all builtin entries</p>\\n"},{"name":"BUILTIN_TYPE_VALUES","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.values(RawBuiltinResourceType)","rawdescription":"Builtin type strings as an array","description":"<p>Builtin type strings as an array</p>\\n"},{"name":"BuiltinResourceType","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"RawBuiltinResourceType as BuiltinTypes","rawdescription":"Builtin resource types","description":"<p>Builtin resource types</p>\\n"},{"name":"CUSTOM_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()","rawdescription":"Custom entry","description":"<p>Custom entry</p>\\n"},{"name":"CUSTOM_ENTRY_TYPE","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .refine((val) => !isBuiltinType(val), \'Invalid builtin resource format\')\\n  .transform<CustomResourceType<string>>(createCustomType)","rawdescription":"Custom entry type validator with transformation","description":"<p>Custom entry type validator with transformation</p>\\n"},{"name":"CUSTOM_TYPE_PREFIX","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'custom:\'","rawdescription":"Prefix of all custom types","description":"<p>Prefix of all custom types</p>\\n"},{"name":"MARKDOWN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Markdown),\\n  markdown: z.string(),\\n})","rawdescription":"Markdown data","description":"<p>Markdown data</p>\\n"},{"name":"RESOURCE_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])","rawdescription":"Builtin or custom entries","description":"<p>Builtin or custom entries</p>\\n"},{"name":"RESOURCE_ID","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .transform((id) => `ResourceId:\'${id}\'`)\\n  .brand(\'ResourceId\')","rawdescription":"Resource identifier validator with transformation","description":"<p>Resource identifier validator with transformation</p>\\n"},{"name":"RESOURCE_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(RESOURCE_ID, RESOURCE_ENTRY)","rawdescription":"State schema","description":"<p>State schema</p>\\n"},{"name":"TEXT_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Text),\\n  text: z.string(),\\n})","rawdescription":"Text data","description":"<p>Text data</p>\\n"},{"name":"URL_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Url),\\n  url: z.string(),\\n})","rawdescription":"External url","description":"<p>External url</p>\\n"}],"app-href/src/lib/current-script.ts":[{"name":"currentScriptEl","ctype":"miscellaneous","subtype":"variable","file":"app-href/src/lib/current-script.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"document.currentScript","rawdescription":"Currently executing script\'s element.\\nShould be reliable in most cases unless the script is executed as a module\\nor in an older browser, IE etc. (which we don\'t support anyway)","description":"<p>Currently executing script&#39;s element.\\nShould be reliable in most cases unless the script is executed as a module\\nor in an older browser, IE etc. (which we don&#39;t support anyway)</p>\\n"},{"name":"currentScriptPath","ctype":"miscellaneous","subtype":"variable","file":"app-href/src/lib/current-script.ts","deprecated":false,"deprecationMessage":"","type":"string | undefined","rawdescription":"Cached value of found script path","description":"<p>Cached value of found script path</p>\\n"}],"icons/src/lib/providers.ts":[{"name":"DEFAULT_FONT_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"Required<FontIconsConfig>","defaultValue":"{\\n  defaultClasses: [],\\n}","rawdescription":"Default values for font icon configuration","description":"<p>Default values for font icon configuration</p>\\n"},{"name":"DEFAULT_SVG_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"Required<SvgIconsConfig>","defaultValue":"{\\n  directory: \'assets/icons\',\\n}","rawdescription":"Default values for svg icon configuration","description":"<p>Default values for svg icon configuration</p>\\n"},{"name":"FONT_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Required<FontIconsConfig>>(\'FONT_ICONS_CONFIG\')","rawdescription":"Injection token for font icon configuration","description":"<p>Injection token for font icon configuration</p>\\n"},{"name":"SVG_ICONS_CONFIG","ctype":"miscellaneous","subtype":"variable","file":"icons/src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Required<SvgIconsConfig>>(\'SVG_ICONS_CONFIG\')","rawdescription":"Injection token for svg icon configuration","description":"<p>Injection token for svg icon configuration</p>\\n"}],"injectors/src/lib/on-destroy/on-destroy.ts":[{"name":"DESTRUCTOR_CACHE","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/on-destroy/on-destroy.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new WeakMap<object, Observable<void>>()","rawdescription":"Cached destructor observables","description":"<p>Cached destructor observables</p>\\n"}],"state/src/link-registry/link-registry.model.ts":[{"name":"EMPTY_LINK","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"createLinkId(\'@@__EMPTY__\')","rawdescription":"Empty link id","description":"<p>Empty link id</p>\\n"},{"name":"EXTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.External),\\n    url: z.string(),\\n    rel: z.string().default(\'noopener\'),\\n    target: z.string(),\\n  })\\n  .partial({ rel: true, target: true })","rawdescription":"Type for external link entry","description":"<p>Type for external link entry</p>\\n"},{"name":"INTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.Internal),\\n    commands: z.any().array(),\\n    extras: z\\n      .object({\\n        queryParams: z.record(z.any()).nullable(),\\n        fragment: z.string(),\\n        queryParamsHandling: z.enum([\'merge\', \'preserve\', \'\']).nullable(),\\n        preserveFragment: z.boolean(),\\n        onSameUrlNavigation: z.literal(\'reload\'),\\n        skipLocationChange: z.boolean(),\\n        replaceUrl: z.boolean(),\\n      })\\n      .partial(),\\n  })\\n  .partial({ extras: true })","rawdescription":"Type for internal link entry","description":"<p>Type for internal link entry</p>\\n"},{"name":"LINK_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(\\n  z\\n    .string()\\n    .transform((id) => `LinkId:\'${id}\'`)\\n    .brand(\'LinkId\'),\\n  z.discriminatedUnion(\'type\', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\\n)","rawdescription":"Schema for link registry","description":"<p>Schema for link registry</p>\\n"}],"app-href/src/lib/app-href.service.ts":[{"name":"INITIAL_APP_HREF","ctype":"miscellaneous","subtype":"variable","file":"app-href/src/lib/app-href.service.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<string>(\'InitialAppHref\', {\\n  providedIn: \'root\',\\n  factory: () => getCurrentScriptBasePath(),\\n})","rawdescription":"Initial value for appHref. Defaults to the current script\'s base path","description":"<p>Initial value for appHref. Defaults to the current script&#39;s base path</p>\\n"}],"injectors/src/lib/select/snapshot-observer.ts":[{"name":"NO_ERROR_SENTINEL_OBJ","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/select/snapshot-observer.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{}","rawdescription":"Object indicating that no error has been emitted","description":"<p>Object indicating that no error has been emitted</p>\\n"}],"platform-location/src/lib/nothrow-platform-location.ts":[{"name":"PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS","ctype":"miscellaneous","subtype":"variable","file":"platform-location/src/lib/nothrow-platform-location.ts","deprecated":false,"deprecationMessage":"","type":"PatchablePlatformLocationHistoryMethod[]","defaultValue":"[\\n  \'replaceState\',\\n  \'pushState\',\\n  \'forward\',\\n  \'back\',\\n  \'historyGo\',\\n]","rawdescription":"Array of all patchable platform location history methods","description":"<p>Array of all patchable platform location history methods</p>\\n"}]},"groupedFunctions":{"state/src/actions/actions.ts":[{"name":"Action","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new base action with a specified type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":685,"end":689,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":679,"end":684,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action type</p>\\n"},{"tagName":{"pos":706,"end":713,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A base action class</p>\\n"}]},{"name":"ActionGroup","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory that adds a common group string to each action type</p>\\n","args":[{"name":"group","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":421,"end":426,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"group"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Common action type group</p>\\n"},{"tagName":{"pos":456,"end":463,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An action factory</p>\\n"}]}],"state/src/actions/action-type-registry.ts":[{"name":"assertUniqueActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Asserts that an action type is unique</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":141,"end":145,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":135,"end":140,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]},{"name":"registerActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Registers an action type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":421,"end":425,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]}],"injectors/src/lib/dispatch/dispatch.ts":[{"name":"createActionFactory","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory function</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":""}],"returnType":"A","jsdoctags":[{"name":{"pos":500,"end":504,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":494,"end":499,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action constructor</p>\\n"},{"name":{"pos":534,"end":543,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","tagName":{"pos":528,"end":533,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Initial bound arguments</p>\\n"},{"tagName":{"pos":572,"end":579,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A factory function creating a new action on each call</p>\\n"}]},{"name":"dispatch","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"A","jsdoctags":[{"name":{"pos":1730,"end":1734,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1724,"end":1729,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":1788,"end":1797,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":1782,"end":1787,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":1844,"end":1851,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatch$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.\\nEach call to the wrapper returns an observable that emits the action instance once the\\ndispatch action has completed.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"Observable<A>","jsdoctags":[{"name":{"pos":2435,"end":2439,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":2429,"end":2434,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":2493,"end":2502,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2487,"end":2492,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":2549,"end":2556,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatchAction","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns passed actions unchanged</p>\\n","args":[],"returnType":"A","jsdoctags":[{"tagName":{"pos":3063,"end":3070,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchAction$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns an observable that emits the passed actions when the dispatch has finished</p>\\n","args":[],"returnType":"Observable<A>","jsdoctags":[{"tagName":{"pos":3427,"end":3434,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchImpl","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Common dispatch functionality used to implement all dispatch functions</p>\\n","args":[{"name":"actionFactory","deprecated":false,"deprecationMessage":""},{"name":"resultHandler","deprecated":false,"deprecationMessage":""}],"returnType":"R","jsdoctags":[{"name":{"pos":977,"end":990,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"actionFactory"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":971,"end":976,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Creates an action or array of actions from the user provided arguments</p>\\n"},{"name":{"pos":1072,"end":1085,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"resultHandler"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1066,"end":1071,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Selects the output value from the action and the dispatch observable</p>\\n"},{"tagName":{"pos":1159,"end":1166,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A new dispatch function taking user arguments, dispatches actions, and returns a value</p>\\n"}]},{"name":"identity","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Identity function returning the first argument passed</p>\\n","args":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pipeActionInstance","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Maps all emits to an action value</p>\\n","args":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":""},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":""}],"returnType":"Observable<A>","jsdoctags":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Partial<Record<string, >>>>","jsdoctags":[{"name":{"pos":4708,"end":4712,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":4702,"end":4707,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"tagName":{"pos":4735,"end":4742,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type with a payload. The payload should be\\nspecified using the {@link payload} function</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""},{"name":"payload","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Props>>","jsdoctags":[{"name":{"pos":5138,"end":5142,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":5132,"end":5137,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"name":{"pos":5171,"end":5178,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"payload"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":5165,"end":5170,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Payload type</p>\\n"},{"tagName":{"pos":5032,"end":5039,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"example"},"comment":"<p>const MyResourceType = createCustomType(&#39;my-type&#39;, payload&lt;{ value: number }&gt;());</p>\\n"},{"tagName":{"pos":5196,"end":5203,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Implementation of createCustomType overloads</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"createResourceId","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new resource identifier</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":{"pos":4258,"end":4260,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"id"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4252,"end":4257,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Raw identifier</p>\\n"},{"tagName":{"pos":4280,"end":4287,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A resource id</p>\\n"}]},{"name":"getEntry","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Internal helper function for getting an entry from the state</p>\\n","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""},{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"type","type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"T | undefined","jsdoctags":[{"name":{"pos":5670,"end":5675,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":5664,"end":5669,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Current state snapshot</p>\\n"},{"name":{"pos":5709,"end":5711,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":5703,"end":5708,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Resource id</p>\\n"},{"name":{"pos":5734,"end":5738,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":5728,"end":5733,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional entry type</p>\\n"},{"tagName":{"pos":5763,"end":5770,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The entry object it exists and has the correct type, otherwise undefined</p>\\n"}]},{"name":"isBuiltinType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type string has builtin support</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"BuiltinTypes","jsdoctags":[{"name":{"pos":3572,"end":3576,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3566,"end":3571,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3597,"end":3604,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>True if type is one of the builtin types, otherwise false</p>\\n"}]},{"name":"isCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type is a custom resource type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<z.infer<>>","jsdoctags":[{"name":{"pos":3881,"end":3885,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3875,"end":3880,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3906,"end":3913,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>True if type is a custom type, otherwise false</p>\\n"}]},{"name":"payload","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Helper function used to specify the payload format when creating custom types</p>\\n","args":[],"returnType":"ResourceEntryPayload<Props>","jsdoctags":[{"tagName":{"pos":4477,"end":4484,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A custom payload type</p>\\n"}]}],"state/src/link-registry/link-registry.model.ts":[{"name":"createLinkId","file":"state/src/link-registry/link-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>function to createa unique link ids</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"LinkId","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"icons/src/lib/resolvers.ts":[{"name":"createSvgIconResolver","file":"icons/src/lib/resolvers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates svg icon resolver with the specified configuration.\\nThe function resolves all svg icons to <code>directory/[namespace/]name.svg</code></p>\\n","args":[{"name":"config","type":"SvgIconResolverConfig","deprecated":false,"deprecationMessage":""}],"returnType":"IconResolver","jsdoctags":[{"name":{"pos":595,"end":601,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"SvgIconResolverConfig","deprecated":false,"deprecationMessage":"","tagName":{"pos":589,"end":594,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":627,"end":634,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A resolver function</p>\\n"}]},{"name":"joinPath","file":"icons/src/lib/resolvers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Joins path segments into a single string. Removes empty segments and double &#39;/&#39; sequences.</p>\\n","args":[{"name":"segments","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"string","jsdoctags":[{"name":{"pos":1103,"end":1111,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"segments"},"deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":1097,"end":1102,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Segments, some of which may be the empty string</p>\\n"},{"tagName":{"pos":1164,"end":1171,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The joined path</p>\\n"}]}],"app-href/src/lib/current-script.ts":[{"name":"findCurrentScriptPath","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Searches for the current script&#39;s path in a couple of different ways.</p>\\n","args":[],"returnType":"string","jsdoctags":[{"tagName":{"pos":898,"end":905,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The current script&#39;s path if found, otherwise the empty string</p>\\n"}]},{"name":"findCurrentScriptPathFromStackTrace","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Try to find the current script&#39;s path using a stack trace.\\nAdapted from ://stackoverflow.com/a/22165218{@link https}</p>\\n","args":[],"returnType":"string | undefined","jsdoctags":[{"tagName":{"pos":1297,"end":1304,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A path if found</p>\\n"}]},{"name":"getCurrentScriptBasePath","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the current script&#39;s base path.</p>\\n","args":[],"returnType":"string","jsdoctags":[{"tagName":{"pos":590,"end":597,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The current script&#39;s base path</p>\\n"}]},{"name":"getCurrentScriptPath","file":"app-href/src/lib/current-script.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the current script&#39;s path.</p>\\n","args":[],"returnType":"string","jsdoctags":[{"tagName":{"pos":373,"end":380,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The current script&#39;s path</p>\\n"}]}],"injectors/src/lib/on-destroy/on-destroy.ts":[{"name":"findDestructorScope","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds the nearest destructor scope object in the current injection context</p>\\n","args":[],"returnType":"DestructorScope","jsdoctags":[{"tagName":{"pos":1267,"end":1274,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The scope on which cleanup can be attached</p>\\n"}]},{"name":"findStableKeyObject","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds a stable object in the current injection context to be\\nused as a key in the destructor cache</p>\\n","args":[],"returnType":"object","jsdoctags":[{"tagName":{"pos":912,"end":919,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An object</p>\\n"}]},{"name":"firstDefinedValue","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the first defined value returned by a generator</p>\\n","args":[{"name":"genFn","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":441,"end":446,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"genFn"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":435,"end":440,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Generator function taking no arguments</p>\\n"},{"tagName":{"pos":490,"end":497,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>The first non-null value</p>\\n"}]},{"name":"injectDestroy$","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\\nit is injected into. It can be used to control the lifetime of other observables using\\nthe <code>takeUntil</code> pipe, and to build other complex injection functions.</p>\\n<p>Caveats:</p>\\n<ul>\\n<li>There are NO guarantees about whether the returned observable will emit and complete\\nbefore or after the regular ngOnDestroy lifecycle hook</li>\\n<li>For root and module level services the observable may never complete unless\\nthe containing module is explicitly destroyed, so don&#39;t rely on it for important operations</li>\\n<li>Components, directives, pipe, and services that manipulate the <code>ViewContainerRef</code> MUST\\ntake care to maintain the view controlling the lifecycle of the observable. Failure\\nto do so may result in early emit and completion of the returned observable</li>\\n</ul>\\n<p>Based on comment on <a href=\\"https://github.com/angular/angular/issues/10185\\">https://github.com/angular/angular/issues/10185</a>\\nMostly <a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1165545544\\">https://github.com/angular/angular/issues/10185#issuecomment-1165545544</a> and\\n<a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1199063426\\">https://github.com/angular/angular/issues/10185#issuecomment-1199063426</a></p>\\n","args":[],"returnType":"Observable<void>","jsdoctags":[{"tagName":{"pos":2694,"end":2701,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable that emits and completes when the component/directive/etc. is destroyed</p>\\n"}]}],"injectors/src/lib/on-destroy/destructor-subject.ts":[{"name":"isDestructorScopeLike","file":"injectors/src/lib/on-destroy/destructor-subject.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether an object is destructor scope like</p>\\n","args":[{"name":"obj","deprecated":false,"deprecationMessage":""}],"returnType":"DestructorScope","jsdoctags":[{"name":{"pos":328,"end":331,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"obj"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":322,"end":327,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Value to test</p>\\n"},{"tagName":{"pos":350,"end":357,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true if the object seems to be a destructor scope, otherwise false</p>\\n"}]}],"injectors/src/lib/select/select.ts":[{"name":"markForCheck","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Marks a view for change detection whenever a new value is emitted</p>\\n","args":[{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"MonoTypeOperatorFunction<T>","jsdoctags":[{"name":{"pos":689,"end":696,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":683,"end":688,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Options to explicitly disable marking</p>\\n"},{"tagName":{"pos":739,"end":746,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A rxjs operator</p>\\n"}]},{"name":"select$","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an observable emitting parts of the state. The observable&#39;s lifetime\\nis automatically tied to the injection context where this is called.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Observable<T>","jsdoctags":[{"name":{"pos":1313,"end":1321,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":1307,"end":1312,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>State selection function or token</p>\\n"},{"name":{"pos":1366,"end":1373,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1360,"end":1365,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Additional select options</p>\\n"},{"tagName":{"pos":1404,"end":1411,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An observable of the selected state</p>\\n"}]}],"platform-location/src/lib/nothrow-platform-location.ts":[{"name":"patchPlatformLocationHistoryMethod","file":"platform-location/src/lib/nothrow-platform-location.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Patches a platform location method to catch and ignore <code>SecurityError</code> DOMExceptions\\nin environments where the history api may not be fully available.</p>\\n","args":[{"name":"impl","type":"PlatformLocation","deprecated":false,"deprecationMessage":""},{"name":"method","type":"PatchablePlatformLocationHistoryMethod","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":750,"end":754,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"impl"},"type":"PlatformLocation","deprecated":false,"deprecationMessage":"","tagName":{"pos":744,"end":749,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>PlatformLocation instance</p>\\n"},{"name":{"pos":791,"end":797,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"method"},"type":"PatchablePlatformLocationHistoryMethod","deprecated":false,"deprecationMessage":"","tagName":{"pos":785,"end":790,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Name of method to patch</p>\\n"}]},{"name":"patchPlatformLocationHistoryMethods","file":"platform-location/src/lib/nothrow-platform-location.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Patches multiple platform location methods to catch and ignore <code>SecurityError</code> DOMExceptions\\nin environments where the history api may not be fully available.</p>\\n","args":[{"name":"impl","type":"PlatformLocation","deprecated":false,"deprecationMessage":""},{"name":"methods","deprecated":false,"deprecationMessage":"","defaultValue":"PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS"}],"returnType":"void","jsdoctags":[{"name":{"pos":1565,"end":1569,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"impl"},"type":"PlatformLocation","deprecated":false,"deprecationMessage":"","tagName":{"pos":1559,"end":1564,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>PlatformLocation instance</p>\\n"},{"name":{"pos":1606,"end":1613,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"methods"},"deprecated":false,"deprecationMessage":"","defaultValue":"PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS","tagName":{"pos":1600,"end":1605,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Array of methods to patch</p>\\n"}]},{"name":"provideNothrowPlatformLocation","file":"platform-location/src/lib/nothrow-platform-location.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Ensures that the PlatformLocation does not throw errors when using the history in\\nan environment where it is not fully supported. The patch still allows errors due\\nto invalid input, etc. to propagate through.</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":2150,"end":2157,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Providers</p>\\n"}]}],"app-href/src/lib/providers.ts":[{"name":"provideAppHref","file":"app-href/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides an initial appHref value for the entire application</p>\\n","args":[{"name":"href","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":217,"end":221,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"href"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":211,"end":216,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Initial appHref value</p>\\n"}]}],"icons/src/lib/providers.ts":[{"name":"provideFontIcons","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides font icons</p>\\n","args":[{"name":"config","type":"FontIconsConfig","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":2660,"end":2666,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"FontIconsConfig","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":2654,"end":2659,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":2692,"end":2699,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Application providers</p>\\n"}]},{"name":"provideIcons","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides both font and svg icons</p>\\n","args":[{"name":"config","type":"IconsConfig","deprecated":false,"deprecationMessage":"","defaultValue":"{}"}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":3812,"end":3818,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"IconsConfig","deprecated":false,"deprecationMessage":"","defaultValue":"{}","tagName":{"pos":3806,"end":3811,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":3844,"end":3851,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Application providers</p>\\n"}]},{"name":"provideSvgIcons","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides svg icons</p>\\n","args":[{"name":"config","type":"SvgIconsConfig","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":3191,"end":3197,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"config"},"type":"SvgIconsConfig","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":3185,"end":3190,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Configuration object</p>\\n"},{"tagName":{"pos":3223,"end":3230,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Application providers</p>\\n"}]},{"name":"registerDefaultFontSetClassesFactory","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Factory for registering default font icon classes</p>\\n","args":[{"name":"registry","type":"MatIconRegistry","deprecated":false,"deprecationMessage":""},{"name":"defaultClasses","type":"Required<FontIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"62b852c2-9baf-4986-9331-fc3aa2bce97e","destructuredParameter":true}],"returnType":"void","jsdoctags":[{"name":{"pos":1571,"end":1579,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"registry"},"type":"MatIconRegistry","deprecated":false,"deprecationMessage":"","tagName":{"pos":1565,"end":1570,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Material icon registry</p>\\n"},{"name":"defaultClasses","type":"Required<FontIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"62b852c2-9baf-4986-9331-fc3aa2bce97e","destructuredParameter":true,"tagName":{"text":"param"}},{"tagName":{"pos":1645,"end":1652,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Registration function</p>\\n"}]},{"name":"registerSvgIconResolverFactory","file":"icons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Factory for registering a svg icon resolver</p>\\n","args":[{"name":"registry","type":"MatIconRegistry","deprecated":false,"deprecationMessage":""},{"name":"appHrefService","type":"AppHrefService","deprecated":false,"deprecationMessage":""},{"name":"sanitizer","type":"DomSanitizer","deprecated":false,"deprecationMessage":""},{"name":"directory","type":"Required<SvgIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"b5eaca61-7479-485c-8945-19131ce477f0","destructuredParameter":true}],"returnType":"void","jsdoctags":[{"name":{"pos":2048,"end":2056,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"registry"},"type":"MatIconRegistry","deprecated":false,"deprecationMessage":"","tagName":{"pos":2042,"end":2047,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Material icon registry</p>\\n"},{"name":"appHrefService","type":"AppHrefService","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":2126,"end":2135,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"sanitizer"},"type":"DomSanitizer","deprecated":false,"deprecationMessage":"","tagName":{"pos":2120,"end":2125,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Resource url sanitizer</p>\\n"},{"name":"directory","type":"Required<SvgIconsConfig>","deprecated":false,"deprecationMessage":"","destrucuredGroupId":"b5eaca61-7479-485c-8945-19131ce477f0","destructuredParameter":true,"tagName":{"text":"param"}},{"tagName":{"pos":2201,"end":2208,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Registration function</p>\\n"}]}],"styling/src/lib/providers.ts":[{"name":"provideStyleComponents","file":"styling/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provide style components that are registered on application initialization.</p>\\n","args":[{"name":"components","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":319,"end":329,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"components"},"deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":313,"end":318,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Component classes</p>\\n"},{"tagName":{"pos":352,"end":359,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Environment provider</p>\\n"}]}],"styling/src/lib/style-component-manager.service.ts":[{"name":"registerStyleComponents","file":"styling/src/lib/style-component-manager.service.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Register style components. Each component is registered at most once.\\nMust be called in an injection context or pass an injector in the options.</p>\\n","args":[{"name":"components","type":"Types","deprecated":false,"deprecationMessage":""},{"name":"options","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"ComponentRefsFromTypes<Types>","jsdoctags":[{"name":{"pos":700,"end":710,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"components"},"type":"Types","deprecated":false,"deprecationMessage":"","tagName":{"pos":694,"end":699,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Component classes</p>\\n"},{"name":{"pos":739,"end":746,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":733,"end":738,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Additional options</p>\\n"},{"tagName":{"pos":770,"end":777,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A component ref for each class</p>\\n"}]}],"injectors/src/lib/select/select-snapshot.ts":[{"name":"selectQuerySnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that can be called with the same arguments as the query selector\\nand returns the latest value each time. Automatically marks components, directives, or pipes\\nfor change detection whenever a new value is available. Note that since typescript has yet to\\nimplement support for higher order generics there is sometimes a need to specialize the\\nreturned query function with the correct arguments and return type. This can be done as shown\\nin the examples.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"SelectQuery<F, BoundArgs>","jsdoctags":[{"name":{"pos":2433,"end":2441,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":2427,"end":2432,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Store query selector</p>\\n"},{"name":{"pos":2473,"end":2482,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2467,"end":2472,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Optional bound query arguments</p>\\n"},{"tagName":{"pos":1631,"end":1638,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"example"},"comment":"<caption>Basic usage</caption>\\nclass Component {\\n...\\n// Return type: () => string\\nreadonly markdown = querySelectSnapshot(ResourceRegistrySelectors.markdown, id);\\n// Return type: (id: ResourceId) => string\\nreadonly markdownById = querySelectSnapshot(ResourceRegistrySelectors.markdown);\\n...\\n}"},{"tagName":{"pos":1975,"end":1982,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"example"},"comment":"<caption>Specialize query arguments and/or return type</caption>\\nclass Component {\\n...\\n// Return type: () => number[]\\nreadonly points = querySelectSnapshot(ResourceRegistrySelectors.field, id, type, \'points\', [])<number[]>;\\n// Return type: (field: string, defaultValue: string) => string\\nreadonly getStringField = querySelectSnapshot(ResourceRegistrySelectors.field, id, type)<string, [string, string]>;\\n}"},{"tagName":{"pos":2518,"end":2525,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A snapshot function taking the same arguments as the query selector (excluding bound arguments)</p>\\n"}]},{"name":"selectSnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that returns the latest snapshot value each time it is called\\nAutomatically marks components, directives, or pipes for change detection whenever\\na new value is available</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":819,"end":827,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":813,"end":818,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Store data selector</p>\\n"},{"tagName":{"pos":852,"end":859,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A snapshot function</p>\\n"}]}],"breakpoints/src/lib/observers.ts":[{"name":"watchBreakpoint","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch a single query.\\nMust be called in an injection context.</p>\\n","args":[{"name":"query","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"Signal<boolean>","jsdoctags":[{"name":{"pos":1467,"end":1472,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"query"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1461,"end":1466,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Breakpoint query to watch</p>\\n"},{"tagName":{"pos":1503,"end":1510,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal with indicating when the query matches</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch the default breakpoints.\\nMust be called in an injection context.</p>\\n","args":[],"returnType":"Signal<BreakpointWatchState<Breakpoint>>","jsdoctags":[{"tagName":{"pos":1814,"end":1821,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch multiple queries.\\nMust be called in an injection context.</p>\\n","args":[{"name":"queries","deprecated":false,"deprecationMessage":""}],"returnType":"Signal<BreakpointWatchState>","jsdoctags":[{"name":{"pos":2034,"end":2041,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"queries"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":2028,"end":2033,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Queries to watch</p>\\n"},{"tagName":{"pos":2063,"end":2070,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch multiple breakpoints.\\nMust be called in an injection context.</p>\\n","args":[{"name":"mapping","type":"Record","deprecated":false,"deprecationMessage":""}],"returnType":"Signal<BreakpointWatchState<T>>","jsdoctags":[{"name":{"pos":2292,"end":2299,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"mapping"},"type":"Record","deprecated":false,"deprecationMessage":"","tagName":{"pos":2286,"end":2291,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Mapping from breakpoints to queries</p>\\n"},{"tagName":{"pos":2340,"end":2347,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]},{"name":"watchBreakpoints","file":"breakpoints/src/lib/observers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Watch multiple queries or breakpoints.</p>\\n","args":[{"name":"arg","deprecated":false,"deprecationMessage":"","defaultValue":"Breakpoints"}],"returnType":"Signal<BreakpointWatchState>","jsdoctags":[{"name":{"pos":2567,"end":2570,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"arg"},"deprecated":false,"deprecationMessage":"","defaultValue":"Breakpoints","tagName":{"pos":2561,"end":2566,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>A list of queries or mapping from breakpoints to queries</p>\\n"},{"tagName":{"pos":2632,"end":2639,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>A signal containing the latest watch state</p>\\n"}]}]},"groupedEnumerations":{"state/src/link-registry/link-registry.model.ts":[{"name":"LinkType","childs":[{"name":"Internal","deprecated":false,"deprecationMessage":"","value":"internal"},{"name":"External","deprecated":false,"deprecationMessage":"","value":"external"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Types for Link</p>\\n","file":"state/src/link-registry/link-registry.model.ts"}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"RawBuiltinResourceType","childs":[{"name":"Markdown","deprecated":false,"deprecationMessage":"","value":"markdown"},{"name":"Text","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"Url","deprecated":false,"deprecationMessage":"","value":"url"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Raw builtin type strings</p>\\n","file":"state/src/resource-registry/resource-registry.model.ts"}],"state/src/storage/storage.model.ts":[{"name":"StorageId","childs":[{"name":"Local","deprecated":false,"deprecationMessage":"","value":"local"},{"name":"Session","deprecated":false,"deprecationMessage":"","value":"session"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>StorageId - enum with values as Local, Session - identifier for storage types</p>\\n","file":"state/src/storage/storage.model.ts"}]},"groupedTypeAliases":{"state/src/resource-registry/resource-registry.selectors.ts":[{"name":"AnyEntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.anyEntry}</p>\\n","kind":184},{"name":"DataQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for resource data</p>\\n","kind":184},{"name":"EntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.entry}</p>\\n","kind":184},{"name":"FieldQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.field}</p>\\n","kind":184}],"breakpoints/src/lib/breakpoints.ts":[{"name":"Breakpoint","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"breakpoints/src/lib/breakpoints.ts","deprecated":false,"deprecationMessage":"","description":"<p>Name of a single builtin breakpoint</p>\\n","kind":198}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"BuiltinTypes","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Maps raw builtin type strings to ResourceType</p>\\n","kind":200},{"name":"CustomResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Typed custom resource entry</p>\\n","kind":193},{"name":"CustomResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":" `custom:${T}`","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom entry types</p>\\n","kind":203},{"name":"ExtractBuiltinEntryType","ctype":"miscellaneous","subtype":"typealias","rawtype":"UnionMember<z.infer<> | type | T>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Extracts the builtin entry with type T</p>\\n","kind":183},{"name":"ResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Any resource entry</p>\\n","kind":183},{"name":"ResourceEntryPayload","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Payload type used when creating custom types</p>\\n","kind":193},{"name":"ResourceId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource identifier</p>\\n","kind":183},{"name":"ResourceRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ResourceRegistryModel>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Context type for action handlers</p>\\n","kind":183},{"name":"ResourceRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State data model</p>\\n","kind":183},{"name":"ResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource type string with entry typings</p>\\n","kind":193}],"styling/src/lib/style-component-manager.service.ts":[{"name":"ComponentInstanceMap","ctype":"miscellaneous","subtype":"typealias","rawtype":"Map<Type<> | ComponentRef<>>","file":"styling/src/lib/style-component-manager.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>Map of component types to instances</p>\\n","kind":183},{"name":"ComponentRefsFromTypes","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"styling/src/lib/style-component-manager.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>Helper that turns an array of types into an array of component refs</p>\\n","kind":200}],"state/src/link-registry/link-registry.model.ts":[{"name":"ExternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for external link entry</p>\\n","kind":183},{"name":"InternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for internal link entry</p>\\n","kind":183},{"name":"LinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>entry for link registry</p>\\n","kind":183},{"name":"LinkId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type for unique identifier for link</p>\\n","kind":183},{"name":"LinkRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<LinkRegistryModel>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for State Context of LinkRegistry</p>\\n","kind":183},{"name":"LinkRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for LinkRegistry State</p>\\n","kind":183}],"state/src/link-registry/link-registry.state.ts":[{"name":"LinkRegistryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/link-registry/link-registry.state.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for link entry optionally with type specified</p>\\n","kind":184}],"platform-location/src/lib/nothrow-platform-location.ts":[{"name":"PatchablePlatformLocationHistoryMethod","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"replaceState\\" | \\"pushState\\" | \\"forward\\" | \\"back\\" | \\"historyGo\\"","file":"platform-location/src/lib/nothrow-platform-location.ts","deprecated":false,"deprecationMessage":"","description":"<p>Patchable platform location history methods</p>\\n","kind":192}],"injectors/src/lib/select/select-snapshot.ts":[{"name":"RestArgs","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Get remaining arguments after applying bound arguments</p>\\n","kind":194},{"name":"SelectQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Function type returned by {@link selectQuerySnapshot}</p>\\n","kind":184}],"injectors/src/lib/select/select.ts":[{"name":"StateSelector","ctype":"miscellaneous","subtype":"typealias","rawtype":" | StateToken<T>","file":"injectors/src/lib/select/select.ts","deprecated":false,"deprecationMessage":"","description":"<p>Selector type for select style functions</p>\\n","kind":192}],"state/src/storage/storage.model.ts":[{"name":"StorageContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<StorageModel>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Helper alias for action handler&#39;s ctx argument</p>\\n","kind":183},{"name":"StorageModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<StorageId | number>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type alias for the array of Storage objects</p>\\n","kind":183}]}}}')},"./dist/compodoc/components-atoms/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"GradientPoint","id":"interface-GradientPoint-9a01e43ec9683cd38d326cab8fc9372dfdb711227a20cbb6c7d0c9320a749751251f9113ef6815b6f3e8f70285746b125735c9e7daa0a72bc7f113a68c8cd575","file":"src/lib/gradient-legend/gradient-legend.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** An interface of gradient colors along with their percentages for the gradient bar. */\\nexport interface GradientPoint {\\n  /** Gradient color at a specific percentage */\\n  color: string;\\n  /** Percentage point along the gradient bar */\\n  percentage: number;\\n}\\n\\n/** Gradient legend for biomarkers */\\n@Component({\\n  selector: \'hra-gradient-legend\',\\n  imports: [CommonModule],\\n  templateUrl: \'./gradient-legend.component.html\',\\n  styleUrls: [\'./gradient-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class GradientLegendComponent {\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Computes the css linear-gradient function for the gradient bar */\\n  get gradientCss(): string {\\n    const stops = this.gradient.map(({ color, percentage }) => `${color} ${percentage}%`).join(\',\');\\n    return `linear-gradient(90deg, ${stops})`;\\n  }\\n}\\n","properties":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Gradient color at a specific percentage</p>\\n","line":7,"rawdescription":"\\nGradient color at a specific percentage"},{"name":"percentage","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Percentage point along the gradient bar</p>\\n","line":9,"rawdescription":"\\nPercentage point along the gradient bar"}],"indexSignatures":[],"kind":171,"description":"<p>An interface of gradient colors along with their percentages for the gradient bar.</p>\\n","rawdescription":"\\nAn interface of gradient colors along with their percentages for the gradient bar.","methods":[],"extends":[]},{"name":"SizeLegend","id":"interface-SizeLegend-ea030ff0bc583ed2f7a89edf789e1ae5bcf8d0b5975f75fbc05954ea798fcaf10dccf90397403ef8e607a7a1f83e50d0f3f69b083143b2940ed41cfe3e5bb7e6","file":"src/lib/size-legend/size-legend.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** Defining the input data types for the radius and label to be displayed. */\\nexport interface SizeLegend {\\n  /** Label under circle */\\n  label: string;\\n  /** Radius for cirlce */\\n  radius: number;\\n}\\n\\n/** Size legend component for the biomarkers table. */\\n@Component({\\n  selector: \'hra-size-legend\',\\n  imports: [CommonModule],\\n  templateUrl: \'./size-legend.component.html\',\\n  styleUrls: [\'./size-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SizeLegendComponent {\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Label under circle</p>\\n","line":7,"rawdescription":"\\nLabel under circle"},{"name":"radius","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Radius for cirlce</p>\\n","line":9,"rawdescription":"\\nRadius for cirlce"}],"indexSignatures":[],"kind":171,"description":"<p>Defining the input data types for the radius and label to be displayed.</p>\\n","rawdescription":"\\nDefining the input data types for the radius and label to be displayed.","methods":[],"extends":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"EmailInputComponent","id":"component-EmailInputComponent-9057f7ea83398361428fbdcd4e2ac518e9cf738f740b9f265e04a90129f7a5ad4652f70454a8bdede4ba3293241a02f20d981399f75e4de7d672e37e032769f2","file":"src/lib/email-input/email-input.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-email-input","styleUrls":["./email-input.component.scss"],"styles":[],"templateUrl":["./email-input.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"defaultMail","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDefault email address","description":"<p>Default email address</p>\\n","line":32,"type":"string","decorators":[]},{"name":"placeholder","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA placeholder for the email input field. This will be disappeared when the email is typed.","description":"<p>A placeholder for the email input field. This will be disappeared when the email is typed.</p>\\n","line":29,"type":"string","decorators":[]}],"outputsClass":[{"name":"emailChange","defaultValue":"new EventEmitter<string | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits the new email when the input changes or undefined if the email is invalid","description":"<p>Emits the new email when the input changes or undefined if the email is invalid</p>\\n","line":35,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required, Validators.email],\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>A control to validate the email.</p>\\n","line":41,"rawdescription":"\\nA control to validate the email.","modifierKind":[148]},{"name":"destroy$","defaultValue":"injectDestroy$()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Observable emitting when the component is destroyed</p>\\n","line":38,"rawdescription":"\\nObservable emitting when the component is destroyed","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatFormFieldModule","type":"module"},{"name":"ReactiveFormsModule","type":"module"},{"name":"MatInputModule","type":"module"}],"description":"<p>Email input components for contact modal.</p>\\n","rawdescription":"\\n\\nEmail input components for contact modal.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { FormControl, ReactiveFormsModule, Validators } from \'@angular/forms\';\\nimport { MatFormFieldModule } from \'@angular/material/form-field\';\\nimport { MatInputModule } from \'@angular/material/input\';\\nimport { injectDestroy$ } from \'@hra-ui/cdk/injectors\';\\nimport { map, takeUntil } from \'rxjs\';\\n\\n/**\\n * Email input components for contact modal.\\n */\\n@Component({\\n  selector: \'hra-email-input\',\\n  imports: [CommonModule, MatFormFieldModule, ReactiveFormsModule, MatInputModule],\\n  templateUrl: \'./email-input.component.html\',\\n  styleUrls: [\'./email-input.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class EmailInputComponent implements OnChanges {\\n  /** A placeholder for the email input field. This will be disappeared when the email is typed. */\\n  @Input() placeholder = \'\';\\n\\n  /** Default email address */\\n  @Input() defaultMail = \'\';\\n\\n  /** Emits the new email when the input changes or undefined if the email is invalid  */\\n  @Output() readonly emailChange = new EventEmitter<string | undefined>();\\n\\n  /** Observable emitting when the component is destroyed */\\n  readonly destroy$ = injectDestroy$();\\n\\n  /**  A control to validate the email. */\\n  readonly control = new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required, Validators.email],\\n  });\\n\\n  /** Connects the input control to component outputs */\\n  constructor() {\\n    const { control, destroy$ } = this;\\n    control.valueChanges\\n      .pipe(\\n        takeUntil(destroy$),\\n        map((value) => (control.valid ? value : undefined)),\\n      )\\n      .subscribe((value) => this.emailChange.emit(value as string | undefined));\\n  }\\n\\n  /** Sets the value to default email if provided */\\n  ngOnChanges(changes: SimpleChanges) {\\n    if (\'defaultMail\' in changes) {\\n      this.control.setValue(this.defaultMail);\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .email-text-field {\\n    width: 100%;\\n    background: #ffffff;\\n  }\\n\\n  ::ng-deep .mat-mdc-form-field-required-marker {\\n    color: #dc231e;\\n  }\\n}\\n","styleUrl":"./email-input.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Connects the input control to component outputs</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":44,"rawdescription":"\\nConnects the input control to component outputs"},"extends":[],"implements":["OnChanges"],"templateData":"<mat-form-field class=\\"email-text-field\\" appearance=\\"outline\\">\\n  <mat-label> Email </mat-label>\\n  <input type=\\"email\\" matInput [formControl]=\\"control\\" [placeholder]=\\"placeholder\\" />\\n\\n  <mat-error *ngIf=\\"control.hasError(\'email\') && !control.hasError(\'required\')\\">\\n    Please enter a valid email address\\n  </mat-error>\\n  <mat-error *ngIf=\\"control.hasError(\'required\')\\"> Email is required </mat-error>\\n</mat-form-field>\\n"},{"name":"EmptyBiomarkerComponent","id":"component-EmptyBiomarkerComponent-93d3d38cbb88f56efaced1382d4f4ac209de5f98872da28cdcc26cdb9575c682fadf1a8e30bf9bc50e76af9fb61d77c6893b1ea766f862056872745c260edd1e","file":"src/lib/empty-biomarker/empty-biomarker.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-empty-biomarker","styleUrls":["./empty-biomarker.component.scss"],"styles":[],"templateUrl":["./empty-biomarker.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"collaborateText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  buttonon text of empty biomarker component.\\n","description":"<p>Input  buttonon text of empty biomarker component.</p>\\n","line":22,"type":"string","decorators":[]},{"name":"message","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  message markdown of empty biomarker component.\\n","description":"<p>Input  message markdown of empty biomarker component.</p>\\n","line":27,"type":"string","decorators":[]}],"outputsClass":[{"name":"collaborateClick","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAn event emitter that emits the user button click event\\n","description":"<p>An event emitter that emits the user button click event</p>\\n","line":32,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MarkdownModule","type":"module"}],"description":"<p> Component for any empty biomaker cell\\n to inform about the empty data and has\\n button to navigate to HRA Team.</p>\\n","rawdescription":"\\n\\n Component for any empty biomaker cell\\n to inform about the empty data and has\\n button to navigate to HRA Team.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n *  Component for any empty biomaker cell\\n *  to inform about the empty data and has\\n *  button to navigate to HRA Team.\\n */\\n@Component({\\n  selector: \'hra-empty-biomarker\',\\n  imports: [CommonModule, MatButtonModule, MarkdownModule],\\n  templateUrl: \'./empty-biomarker.component.html\',\\n  styleUrls: [\'./empty-biomarker.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class EmptyBiomarkerComponent {\\n  /**\\n   * Input  buttonon text of empty biomarker component.\\n   */\\n  @Input() collaborateText = \'\';\\n\\n  /**\\n   * Input  message markdown of empty biomarker component.\\n   */\\n  @Input() message = \'\';\\n\\n  /**\\n   * An event emitter that emits the user button click event\\n   */\\n  @Output() readonly collaborateClick = new EventEmitter();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  padding: 1.5rem;\\n\\n  .collaborate-button {\\n    margin-top: 0.5rem;\\n    font-weight: 700;\\n    color: #fff;\\n    width: 100%;\\n    max-width: 20rem;\\n    height: 3rem;\\n  }\\n}\\n","styleUrl":"./empty-biomarker.component.scss"}],"stylesData":"","extends":[],"templateData":"<markdown [data]=\\"message\\" class=\\"message\\"></markdown>\\n<button mat-flat-button class=\\"collaborate-button\\" color=\\"primary\\" (click)=\\"collaborateClick.emit($event)\\">\\n  {{ collaborateText }}\\n</button>\\n"},{"name":"GradientLegendComponent","id":"component-GradientLegendComponent-9a01e43ec9683cd38d326cab8fc9372dfdb711227a20cbb6c7d0c9320a749751251f9113ef6815b6f3e8f70285746b125735c9e7daa0a72bc7f113a68c8cd575","file":"src/lib/gradient-legend/gradient-legend.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-gradient-legend","styleUrls":["./gradient-legend.component.scss"],"styles":[],"templateUrl":["./gradient-legend.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"gradient","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nGradient colors along with their stop points","description":"<p>Gradient colors along with their stop points</p>\\n","line":22,"type":"GradientPoint[]","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Gradient legend for biomarkers</p>\\n","rawdescription":"\\nGradient legend for biomarkers","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** An interface of gradient colors along with their percentages for the gradient bar. */\\nexport interface GradientPoint {\\n  /** Gradient color at a specific percentage */\\n  color: string;\\n  /** Percentage point along the gradient bar */\\n  percentage: number;\\n}\\n\\n/** Gradient legend for biomarkers */\\n@Component({\\n  selector: \'hra-gradient-legend\',\\n  imports: [CommonModule],\\n  templateUrl: \'./gradient-legend.component.html\',\\n  styleUrls: [\'./gradient-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class GradientLegendComponent {\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Computes the css linear-gradient function for the gradient bar */\\n  get gradientCss(): string {\\n    const stops = this.gradient.map(({ color, percentage }) => `${color} ${percentage}%`).join(\',\');\\n    return `linear-gradient(90deg, ${stops})`;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .gradient-bar {\\n    height: 1.5rem;\\n    width: 100%;\\n    margin-bottom: 5px;\\n  }\\n\\n  .legend {\\n    display: flex;\\n\\n    .filler {\\n      flex-grow: 1;\\n    }\\n  }\\n}\\n","styleUrl":"./gradient-legend.component.scss"}],"stylesData":"","extends":[],"accessors":{"gradientCss":{"name":"gradientCss","getSignature":{"name":"gradientCss","type":"string","returnType":"string","line":25,"rawdescription":"\\nComputes the css linear-gradient function for the gradient bar","description":"<p>Computes the css linear-gradient function for the gradient bar</p>\\n"}}},"templateData":"<div class=\\"gradient-bar\\" [style.background]=\\"gradientCss\\"></div>\\n<div class=\\"legend\\">\\n  <div class=\\"start\\">0.0</div>\\n  <div class=\\"filler\\"></div>\\n  <div class=\\"end\\">1.0</div>\\n</div>\\n"},{"name":"LabelBoxComponent","id":"component-LabelBoxComponent-fa1db851f9c5f748fcab401b8e6051593d5051e4834cfb078479508ee536d7c3f77b3f8a0cc80531c3a017f71db0c9fa1f2d60a70d73575fd0a2cb2612893d86","file":"src/lib/label-box/label-box.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-label-box","styleUrls":["./label-box.component.scss"],"styles":[],"templateUrl":["./label-box.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Label box component for reuse accross the page. The content with &quot;end&quot; selector will be added to the end of the label box</p>\\n","rawdescription":"\\nLabel box component for reuse accross the page. The content with \\"end\\" selector will be added to the end of the label box","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** Label box component for reuse accross the page. The content with \\"end\\" selector will be added to the end of the label box */\\n@Component({\\n  selector: \'hra-label-box\',\\n  imports: [CommonModule],\\n  templateUrl: \'./label-box.component.html\',\\n  styleUrls: [\'./label-box.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LabelBoxComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  align-items: center;\\n  padding: 0.75rem 2rem;\\n  background: rgba(vars.$primary-lighter);\\n  border-bottom: 1px solid rgba(vars.$light-dividers);\\n  font-size: 1rem;\\n\\n  .filler {\\n    flex-grow: 1;\\n  }\\n}\\n","styleUrl":"./label-box.component.scss"}],"stylesData":"","extends":[],"templateData":"<ng-content></ng-content>\\n\\n<div class=\\"filler\\"></div>\\n\\n<ng-content select=\\".end\\"></ng-content>\\n"},{"name":"RequiredInputComponent","id":"component-RequiredInputComponent-171a397f5ffd2081612670f0ce937c29b1885e8a82ae5fa00f399d76514b4ebebd23cd1bf75d552b774854971bf41bfab87336edca362a71099bececf63ed91c","file":"src/lib/required-input/required-input.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-required-input","styleUrls":["./required-input.component.scss"],"styles":[],"templateUrl":["./required-input.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"label","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe label to display for the text field.\\n","description":"<p>The label to display for the text field.</p>\\n","line":24,"type":"string","decorators":[]}],"outputsClass":[{"name":"inputChange","defaultValue":"new EventEmitter<string | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAn event emitter that emits the input value when it changes.\\n","description":"<p>An event emitter that emits the input value when it changes.</p>\\n","line":29,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: Validators.required,\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Form control for input to set some input validation.</p>\\n","line":39,"rawdescription":"\\n\\nForm control for input to set some input validation.\\n","modifierKind":[148]},{"name":"destroy$","defaultValue":"injectDestroy$()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Destroy observable used to control the lifetime of other observables.</p>\\n","line":34,"rawdescription":"\\n\\nDestroy observable used to control the lifetime of other observables.\\n","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatFormFieldModule","type":"module"},{"name":"MatInputModule","type":"module"},{"name":"ReactiveFormsModule","type":"module"}],"description":"<p>A reusable text field component that can be used to input text.\\nThis input field component also had required validation check.</p>\\n","rawdescription":"\\n\\nA reusable text field component that can be used to input text.\\nThis input field component also had required validation check.\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatFormFieldModule } from \'@angular/material/form-field\';\\nimport { MatInputModule } from \'@angular/material/input\';\\nimport { FormControl, ReactiveFormsModule, Validators } from \'@angular/forms\';\\nimport { injectDestroy$ } from \'@hra-ui/cdk/injectors\';\\nimport { map, takeUntil } from \'rxjs\';\\n\\n/**\\n * A reusable text field component that can be used to input text.\\n * This input field component also had required validation check.\\n */\\n@Component({\\n  selector: \'hra-required-input\',\\n  imports: [CommonModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule],\\n  templateUrl: \'./required-input.component.html\',\\n  styleUrls: [\'./required-input.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class RequiredInputComponent {\\n  /**\\n   * The label to display for the text field.\\n   */\\n  @Input() label = \'\';\\n\\n  /**\\n   * An event emitter that emits the input value when it changes.\\n   */\\n  @Output() readonly inputChange = new EventEmitter<string | undefined>();\\n\\n  /**\\n   * Destroy observable used to control the lifetime of other observables.\\n   */\\n  readonly destroy$ = injectDestroy$();\\n\\n  /**\\n   * Form control for input to set some input validation.\\n   */\\n  readonly control = new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: Validators.required,\\n  });\\n\\n  /**\\n   * Creates an instance of required input component\\n   * and it connect the form control value changes to check for validation\\n   * before output emmiter is triggered\\n   */\\n  constructor() {\\n    const { control, destroy$, inputChange } = this;\\n    control.valueChanges\\n      .pipe(\\n        takeUntil(destroy$),\\n        map((value) => (control.valid ? (value as string) : undefined)),\\n      )\\n      .subscribe(inputChange);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .form-field {\\n    width: 100%;\\n  }\\n\\n  ::ng-deep .mat-mdc-form-field-required-marker {\\n    color: #dc231e;\\n  }\\n}\\n","styleUrl":"./required-input.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Creates an instance of required input component\\nand it connect the form control value changes to check for validation\\nbefore output emmiter is triggered</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":42,"rawdescription":"\\n\\nCreates an instance of required input component\\nand it connect the form control value changes to check for validation\\nbefore output emmiter is triggered\\n"},"extends":[],"templateData":"<mat-form-field class=\\"form-field\\" appearance=\\"outline\\">\\n  <mat-label> {{ label }} </mat-label>\\n  <input matInput [formControl]=\\"control\\" />\\n  <mat-error *ngIf=\\"control.hasError(\'required\')\\">{{ label }} is required</mat-error>\\n</mat-form-field>\\n"},{"name":"RequiredTextboxComponent","id":"component-RequiredTextboxComponent-c85977565cc3c673a4e5739273ad9fc33662bec2420117e0da3a32c6ef954d8e35fc31676f3e3dd9c78e62771c2569e7c8034103c8ef2f4cdd9059384823bc79","file":"src/lib/required-textbox/required-textbox.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-required-textbox","styleUrls":["./required-textbox.component.scss"],"styles":[],"templateUrl":["./required-textbox.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"label","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA label for the textarea field","description":"<p>A label for the textarea field</p>\\n","line":24,"type":"string","decorators":[]},{"name":"placeholder","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA placeholder for the message textarea field","description":"<p>A placeholder for the message textarea field</p>\\n","line":21,"type":"string","decorators":[]}],"outputsClass":[{"name":"messageChange","defaultValue":"new EventEmitter<string | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits the new message when the input changes or undefined if the message is invalid","description":"<p>Emits the new message when the input changes or undefined if the message is invalid</p>\\n","line":27,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required],\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>A control to validate if the message field is empty</p>\\n","line":33,"rawdescription":"\\nA control to validate if the message field is empty","modifierKind":[148]},{"name":"destroy$","defaultValue":"injectDestroy$()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Observable emitting when the component is destroyed</p>\\n","line":30,"rawdescription":"\\nObservable emitting when the component is destroyed","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatInputModule","type":"module"},{"name":"MatFormFieldModule","type":"module"},{"name":"ReactiveFormsModule","type":"module"}],"description":"<p>The required textbox component displays a message box for users to add a message</p>\\n","rawdescription":"\\n\\nThe required textbox component displays a message box for users to add a message\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { injectDestroy$ } from \'@hra-ui/cdk/injectors\';\\nimport { FormControl, Validators, ReactiveFormsModule } from \'@angular/forms\';\\nimport { map, takeUntil } from \'rxjs\';\\nimport { MatFormFieldModule } from \'@angular/material/form-field\';\\nimport { MatInputModule } from \'@angular/material/input\';\\n\\n/**\\n * The required textbox component displays a message box for users to add a message\\n */\\n@Component({\\n  selector: \'hra-required-textbox\',\\n  imports: [CommonModule, MatInputModule, MatFormFieldModule, ReactiveFormsModule],\\n  templateUrl: \'./required-textbox.component.html\',\\n  styleUrls: [\'./required-textbox.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class RequiredTextboxComponent {\\n  /** A placeholder for the message textarea field */\\n  @Input() placeholder = \'\';\\n\\n  /** A label for the textarea field */\\n  @Input() label = \'\';\\n\\n  /** Emits the new message when the input changes or undefined if the message is invalid  */\\n  @Output() readonly messageChange = new EventEmitter<string | undefined>();\\n\\n  /** Observable emitting when the component is destroyed */\\n  readonly destroy$ = injectDestroy$();\\n\\n  /**  A control to validate if the message field is empty */\\n  readonly control = new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required],\\n  });\\n\\n  /** Connects the input control to component outputs */\\n  constructor() {\\n    const { control, destroy$ } = this;\\n    control.valueChanges\\n      .pipe(\\n        takeUntil(destroy$),\\n        map((value) => (control.valid ? value : undefined)),\\n      )\\n      .subscribe((value) => this.messageChange.emit(value as string | undefined));\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .message-field {\\n    width: 100%;\\n    background: #ffffff;\\n  }\\n\\n  ::ng-deep .mat-mdc-form-field-required-marker {\\n    color: #dc231e;\\n  }\\n}\\n","styleUrl":"./required-textbox.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Connects the input control to component outputs</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":36,"rawdescription":"\\nConnects the input control to component outputs"},"extends":[],"templateData":"<mat-form-field class=\\"message-field\\" appearance=\\"outline\\">\\n  <mat-label> {{ label }} </mat-label>\\n  <textarea\\n    cdkTextareaAutosize\\n    cdkAutosizeMinRows=\\"10\\"\\n    cdkAutosizeMaxRows=\\"20\\"\\n    matInput\\n    [formControl]=\\"control\\"\\n    [placeholder]=\\"placeholder\\"\\n  ></textarea>\\n  <mat-error *ngIf=\\"control.hasError(\'required\')\\"> {{ label }} is required </mat-error>\\n</mat-form-field>\\n"},{"name":"SizeLegendComponent","id":"component-SizeLegendComponent-ea030ff0bc583ed2f7a89edf789e1ae5bcf8d0b5975f75fbc05954ea798fcaf10dccf90397403ef8e607a7a1f83e50d0f3f69b083143b2940ed41cfe3e5bb7e6","file":"src/lib/size-legend/size-legend.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-size-legend","styleUrls":["./size-legend.component.scss"],"styles":[],"templateUrl":["./size-legend.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"sizes","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTaking input for the radius of the circle and the label to be displayed.","description":"<p>Taking input for the radius of the circle and the label to be displayed.</p>\\n","line":22,"type":"SizeLegend[]","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Size legend component for the biomarkers table.</p>\\n","rawdescription":"\\nSize legend component for the biomarkers table.","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** Defining the input data types for the radius and label to be displayed. */\\nexport interface SizeLegend {\\n  /** Label under circle */\\n  label: string;\\n  /** Radius for cirlce */\\n  radius: number;\\n}\\n\\n/** Size legend component for the biomarkers table. */\\n@Component({\\n  selector: \'hra-size-legend\',\\n  imports: [CommonModule],\\n  templateUrl: \'./size-legend.component.html\',\\n  styleUrls: [\'./size-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SizeLegendComponent {\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: flex;\\n  flex-direction: row;\\n  column-gap: 2rem;\\n\\n  .item {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    line-height: 0.5rem;\\n\\n    .circle {\\n      height: var(--size);\\n      width: var(--size);\\n      border-radius: 50%;\\n      border: 0.125rem solid #75838f;\\n    }\\n\\n    .label {\\n      margin-top: 0.5rem;\\n    }\\n\\n    .filler {\\n      flex-grow: 1;\\n    }\\n  }\\n}\\n","styleUrl":"./size-legend.component.scss"}],"stylesData":"","extends":[],"templateData":"<div *ngFor=\\"let text of sizes\\" class=\\"item\\">\\n  <div class=\\"filler\\"></div>\\n  <div class=\\"circle\\" style=\\"--size: {{ text.radius }}rem\\"></div>\\n  <div class=\\"filler\\"></div>\\n  <div class=\\"label\\">{{ text.label }}</div>\\n</div>\\n"},{"name":"TooltipComponent","id":"component-TooltipComponent-f6a42ad599d181ecafa9f054955a21940de6d02d03c5339aa9b1a7f46ea9765eb8a505646b61096cb07f9ee7477dd7d31ed4b0b63a657948997484b40ce553cc","file":"src/lib/tooltip/tooltip.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-ui-tooltip","styleUrls":["./tooltip.component.scss"],"styles":[],"templateUrl":["./tooltip.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"text","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nText to display\\n","description":"<p>Text to display</p>\\n","line":18,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Tooltips for illustrations</p>\\n","rawdescription":"\\n\\nTooltips for illustrations\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Tooltips for illustrations\\n */\\n@Component({\\n  selector: \'hra-ui-tooltip\',\\n  imports: [CommonModule],\\n  templateUrl: \'./tooltip.component.html\',\\n  styleUrls: [\'./tooltip.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TooltipComponent {\\n  /**\\n   * Text to display\\n   */\\n  @Input() text = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  .tooltip {\\n    display: flex;\\n    flex-direction: column;\\n    background: white;\\n    box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n    border-radius: 0.5rem;\\n    padding: 1rem;\\n    font-family: \'Metropolis\';\\n    font-size: 0.875rem;\\n    line-height: 1.3125rem;\\n    color: #243142;\\n    font-weight: 500;\\n  }\\n}\\n","styleUrl":"./tooltip.component.scss"}],"stylesData":"","extends":[],"templateData":"<div class=\\"tooltip\\">{{ text }}</div>\\n"}],"modules":[],"miscellaneous":[]}')},"./dist/compodoc/components-behavioral/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"BiomarkerDetailsComponent","id":"component-BiomarkerDetailsComponent-22cdd90ab131f5751c3b7c835dc675a11b8c61af6077063d643338cd560ed8a5817c06c10699f237099f550704777ee1445460479377a0b426746faabdfdfa20","file":"src/lib/biomarker-details/biomarker-details.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-biomarker-details","styleUrls":["./biomarker-details.component.scss"],"styles":[],"templateUrl":["./biomarker-details.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"collaborateText","defaultValue":"\'Collaborate with the HRA Team\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>button text of empty biomarker component.</p>\\n","line":152,"rawdescription":"\\n\\nbutton text of empty biomarker component.\\n","modifierKind":[148]},{"name":"getTabs","defaultValue":"selectSnapshot(CellSummarySelectors.aggregates)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Table tabs</p>\\n","line":70,"rawdescription":"\\nTable tabs","modifierKind":[148]},{"name":"gradientHoverInfo","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Info to be shown on the tooltip for Gradient Legend</p>\\n","line":73,"rawdescription":"\\nInfo to be shown on the tooltip for Gradient Legend","modifierKind":[148]},{"name":"gradients","defaultValue":"selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, \'points\' as const, [])<\\n    GradientPoint[]\\n  >","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Gradient colors along with their stop points</p>\\n","line":82,"rawdescription":"\\nGradient colors along with their stop points","modifierKind":[148]},{"name":"highlightCell","defaultValue":"dispatch(IllustratorActions.HighlightCellType)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Action to highlight a cell type</p>\\n","line":109,"rawdescription":"\\nAction to highlight a cell type","modifierKind":[148]},{"name":"iri","defaultValue":"selectSnapshot(ActiveFtuSelectors.iri)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Iri  of medical illustration behavior component</p>\\n","line":95,"rawdescription":"\\n\\nIri  of medical illustration behavior component\\n","modifierKind":[148]},{"name":"isTableFullScreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Indicates if the table is fully shown, defaults to false</p>\\n","line":79,"rawdescription":"\\nIndicates if the table is fully shown, defaults to false"},{"name":"mapping","defaultValue":"selectSnapshot(IllustratorSelectors.mapping)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Illustration mapping data</p>\\n","line":106,"rawdescription":"\\nIllustration mapping data","modifierKind":[148]},{"name":"message","defaultValue":"`We currently do not have cell type data for this biomarker.\\n  <br><br> Please contact us to discuss your dataset.`","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>message markdown of empty biomarker component.</p>\\n","line":157,"rawdescription":"\\n\\nmessage markdown of empty biomarker component.\\n","modifierKind":[148]},{"name":"selectedOnHovered","defaultValue":"selectSnapshot(IllustratorSelectors.selectedOnHovered)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Selects the cells hovered currently to highlight in table</p>\\n","line":103,"rawdescription":"\\nSelects the cells hovered currently to highlight in table","modifierKind":[148]},{"name":"setSelectedSources","defaultValue":"dispatch(SourceRefsActions.SetSelectedSources)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Action to set selected sources</p>\\n","line":112,"rawdescription":"\\nAction to set selected sources","modifierKind":[148]},{"name":"sizeHoverInfo","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Info to be shown on the tooltip for Size Legend</p>\\n","line":76,"rawdescription":"\\nInfo to be shown on the tooltip for Size Legend","modifierKind":[148]},{"name":"sizes","defaultValue":"selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, \'sizes\' as const, [])<SizeLegend[]>","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Taking input for the radius of the circle and the label to be displayed.</p>\\n","line":87,"rawdescription":"\\nTaking input for the radius of the circle and the label to be displayed.","modifierKind":[148]},{"name":"source","defaultValue":"selectSnapshot(SourceRefsSelectors.sourceReferences)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of sources with titles and links displayed to the user</p>\\n","line":90,"rawdescription":"\\nList of sources with titles and links displayed to the user","modifierKind":[148]},{"name":"table","deprecated":false,"deprecationMessage":"","type":"BiomarkerTableComponent<DataCell>","indexKey":"","optional":false,"description":"<p>Reference to biomarker table</p>\\n","line":67,"rawdescription":"\\nReference to biomarker table","decorators":[{"name":"ViewChild","stringifiedArguments":"\'table\'"}],"modifierKind":[170]},{"name":"tissues","defaultValue":"selectSnapshot(TissueLibrarySelectors.tissues)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Get all tissues</p>\\n","line":100,"rawdescription":"\\n\\nGet all tissues\\n","modifierKind":[148]}],"methodsClass":[{"name":"collaborate","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":199,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which opens the contact modal dialog box","description":"<p>A function which opens the contact modal dialog box</p>\\n"},{"name":"highlightCells","args":[{"name":"label","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":210,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHighlights cells matching the label\\n","description":"<p>Highlights cells matching the label</p>\\n","jsdoctags":[{"name":"label","type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"logTabChange","args":[{"name":"event","type":"MatTabChangeEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":218,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs tab change event\\n","description":"<p>Logs tab change event</p>\\n","jsdoctags":[{"name":{"pos":6724,"end":6729,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MatTabChangeEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":6718,"end":6723,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>tab change event</p>\\n"}]},{"name":"toggleFullscreen","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":189,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function that toggles isTableFullScreen and\\ncalls the setScreenMode function.\\n","description":"<p>A function that toggles isTableFullScreen and\\ncalls the setScreenMode function.</p>\\n"},{"name":"trackByLabel","args":[{"name":"_index","type":"number","deprecated":false,"deprecationMessage":""},{"name":"tab","type":"CellSummaryAggregate","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":182,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTrack a tab by it\'s label\\n\\n","description":"<p>Track a tab by it&#39;s label</p>\\n","jsdoctags":[{"name":{"pos":5790,"end":5796,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"_index"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":5784,"end":5789,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Unused index of tab</p>\\n"},{"name":{"pos":5829,"end":5832,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"tab"},"type":"CellSummaryAggregate","deprecated":false,"deprecationMessage":"","tagName":{"pos":5823,"end":5828,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Tab data</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatTabsModule","type":"module"},{"name":"MatDialogModule","type":"module"},{"name":"BiomarkerTableComponent","type":"component"},{"name":"GradientLegendComponent","type":"component"},{"name":"HoverDirective","type":"directive"},{"name":"LabelBoxComponent","type":"component"},{"name":"SizeLegendComponent","type":"component"},{"name":"SourceListComponent","type":"component"},{"name":"EmptyBiomarkerComponent","type":"component"}],"description":"<p>The component displays the biomarker details which includes the details, gradient legends, size legends and source lists</p>\\n","rawdescription":"\\nThe component displays the biomarker details which includes the details, gradient legends, size legends and source lists","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject, ViewChild } from \'@angular/core\';\\nimport { MatDialog, MatDialogConfig, MatDialogModule } from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTabChangeEvent, MatTabsModule } from \'@angular/material/tabs\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { dispatch, selectQuerySnapshot, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport {\\n  EmptyBiomarkerComponent,\\n  GradientLegendComponent,\\n  GradientPoint,\\n  LabelBoxComponent,\\n  SizeLegend,\\n  SizeLegendComponent,\\n} from \'@hra-ui/components/atoms\';\\nimport { SourceListComponent } from \'@hra-ui/components/molecules\';\\nimport { BiomarkerTableComponent, DataCell, TissueInfo } from \'@hra-ui/components/organisms\';\\nimport { IllustrationMappingItem } from \'@hra-ui/services\';\\nimport {\\n  ActiveFtuSelectors,\\n  CellSummaryAggregate,\\n  CellSummarySelectors,\\n  ResourceIds as Ids,\\n  IllustratorActions,\\n  IllustratorSelectors,\\n  ResourceTypes as RTypes,\\n  ScreenModeAction,\\n  SourceRefsActions,\\n  SourceRefsSelectors,\\n  TissueLibrarySelectors,\\n} from \'@hra-ui/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\nimport { ContactBehaviorComponent } from \'../contact-behavior/contact-behavior.component\';\\n\\n/**\\n * PlaceHolder for Empty Tissue Info\\n */\\nconst EMPTY_TISSUE_INFO: TissueInfo = {\\n  id: \'\',\\n  label: \'\',\\n};\\n\\n/** The component displays the biomarker details which includes the details, gradient legends, size legends and source lists*/\\n@Component({\\n  selector: \'ftu-biomarker-details\',\\n  imports: [\\n    CommonModule,\\n    MatIconModule,\\n    MatTabsModule,\\n    MatDialogModule,\\n    BiomarkerTableComponent,\\n    GradientLegendComponent,\\n    HoverDirective,\\n    LabelBoxComponent,\\n    SizeLegendComponent,\\n    SourceListComponent,\\n    EmptyBiomarkerComponent,\\n  ],\\n  templateUrl: \'./biomarker-details.component.html\',\\n  styleUrls: [\'./biomarker-details.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerDetailsComponent {\\n  /** Reference to biomarker table */\\n  @ViewChild(\'table\') table!: BiomarkerTableComponent<DataCell>;\\n\\n  /** Table tabs */\\n  readonly getTabs = selectSnapshot(CellSummarySelectors.aggregates);\\n\\n  /** Info to be shown on the tooltip for Gradient Legend */\\n  readonly gradientHoverInfo = selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo);\\n\\n  /** Info to be shown on the tooltip for Size Legend */\\n  readonly sizeHoverInfo = selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo);\\n\\n  /** Indicates if the table is fully shown, defaults to false*/\\n  isTableFullScreen = false;\\n\\n  /** Gradient colors along with their stop points */\\n  readonly gradients = selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, \'points\' as const, [])<\\n    GradientPoint[]\\n  >;\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  readonly sizes = selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, \'sizes\' as const, [])<SizeLegend[]>;\\n\\n  /** List of sources with titles and links displayed to the user */\\n  readonly source = selectSnapshot(SourceRefsSelectors.sourceReferences);\\n\\n  /**\\n   * Iri  of medical illustration behavior component\\n   */\\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\\n\\n  /**\\n   * Get all tissues\\n   */\\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\\n\\n  /** Selects the cells hovered currently to highlight in table */\\n  readonly selectedOnHovered = selectSnapshot(IllustratorSelectors.selectedOnHovered);\\n\\n  /** Illustration mapping data */\\n  readonly mapping = selectSnapshot(IllustratorSelectors.mapping);\\n\\n  /** Action to highlight a cell type */\\n  readonly highlightCell = dispatch(IllustratorActions.HighlightCellType);\\n\\n  /** Action to set selected sources */\\n  readonly setSelectedSources = dispatch(SourceRefsActions.SetSelectedSources);\\n\\n  /** Table tabs */\\n  get tabs(): CellSummaryAggregate[] {\\n    const tabs = this.getTabs();\\n    if (tabs.length !== 0) {\\n      this.tabs_ = tabs;\\n    }\\n    return this.tabs_;\\n  }\\n\\n  /**\\n   * Gets tissue title from the list of tissues\\n   */\\n  get tissueInfo(): TissueInfo {\\n    const iri = this.iri();\\n    const tissues = this.tissues();\\n    if (iri === undefined || tissues === undefined) {\\n      return EMPTY_TISSUE_INFO;\\n    }\\n    const { id, label } = tissues[iri];\\n    return { id, label };\\n  }\\n\\n  /**\\n   * Gets ids for cells in the illustration\\n   */\\n  get illustrationIds(): string[] {\\n    const mapping = this.mapping();\\n    if (mapping !== this.mapping_) {\\n      this.mapping_ = mapping;\\n      this.illustrationIds_ = Array.from(new Set(this.mapping().map((data) => data.ontologyId)));\\n    }\\n\\n    return this.illustrationIds_;\\n  }\\n\\n  /**\\n   * button text of empty biomarker component.\\n   */\\n  readonly collaborateText = \'Collaborate with the HRA Team\';\\n\\n  /**\\n   * message markdown of empty biomarker component.\\n   */\\n  readonly message = `We currently do not have cell type data for this biomarker.\\n  <br><br> Please contact us to discuss your dataset.`;\\n\\n  /** A dispatcher function to set the screen mode */\\n  private readonly setScreenMode = dispatch(ScreenModeAction.Set);\\n\\n  /** A dialog box which shows contact modal after clicking on contact */\\n  private readonly dialog = inject(MatDialog);\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** Table tabs */\\n  private tabs_: CellSummaryAggregate[] = [];\\n  /** Mapping items reference */\\n  private mapping_: IllustrationMappingItem[] = [];\\n  /** Illustration ids reference */\\n  private illustrationIds_: string[] = [];\\n\\n  /**\\n   * Track a tab by it\'s label\\n   *\\n   * @param _index Unused index of tab\\n   * @param tab Tab data\\n   */\\n  trackByLabel(_index: number, tab: CellSummaryAggregate): string {\\n    return tab.label;\\n  }\\n\\n  /** A function that toggles isTableFullScreen and\\n   * calls the setScreenMode function.\\n   */\\n  toggleFullscreen(): void {\\n    setTimeout(() => {\\n      this.table.checkDisplayedColumns();\\n    }, 250);\\n\\n    this.isTableFullScreen = !this.isTableFullScreen;\\n    this.setScreenMode(this.isTableFullScreen);\\n  }\\n\\n  /** A function which opens the contact modal dialog box */\\n  collaborate(): void {\\n    const dialogConfig = new MatDialogConfig();\\n    dialogConfig.disableClose = true;\\n    this.ga.event(\'contact_open\', \'modal\');\\n    this.dialog.open(ContactBehaviorComponent, dialogConfig);\\n  }\\n\\n  /**\\n   * Highlights cells matching the label\\n   * @param event\\n   */\\n  highlightCells(label?: string) {\\n    this.highlightCell(label);\\n  }\\n\\n  /**\\n   * Logs tab change event\\n   * @param event tab change event\\n   */\\n  logTabChange(event: MatTabChangeEvent) {\\n    this.ga.event(\'biomarker_tab_change\', event.tab ? event.tab.textLabel : \'\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 1fr 1fr auto;\\n  grid-template-rows: auto 2rem 69px min-content;\\n  grid-template-areas:\\n    \'table table table\'\\n    \'gradient-legend-header size-legend-header size-legend-header\'\\n    \'gradient-legend size-legend .\'\\n    \'source-list source-list source-list\';\\n\\n  ::ng-deep .table-tab-header {\\n    height: 39px !important;\\n    background-color: white;\\n    font-weight: 400;\\n    letter-spacing: 0;\\n    font-size: 0.75rem;\\n\\n    &:hover {\\n      background: rgba(vars.$primary-lighter);\\n    }\\n  }\\n\\n  @media (min-height: 49.5rem) {\\n    grid-template-rows: auto 37px 69px min-content;\\n    ::ng-deep .table-tab-header {\\n      height: calc(3rem - 1px) !important;\\n    }\\n  }\\n\\n  @media (min-height: 60.75rem) {\\n    grid-template-rows: auto 3rem 5rem min-content;\\n  }\\n\\n  .cursor {\\n    cursor: pointer;\\n    position: fixed;\\n    top: 4.5rem;\\n    right: 2rem;\\n    z-index: 3;\\n\\n    @media (min-height: 49.5rem) {\\n      top: 5.25rem;\\n    }\\n  }\\n\\n  .table {\\n    grid-area: table;\\n    max-width: 100%;\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n\\n    ::ng-deep .mat-mdc-tab-body-wrapper {\\n      height: 100%;\\n      border-top: 1px solid rgba(vars.$light-dividers);\\n    }\\n\\n    ::ng-deep .mat-mdc-tab {\\n      max-width: 14rem;\\n    }\\n  }\\n\\n  ::ng-deep {\\n    .table-tab-header > .mdc-tab__content > span {\\n      color: rgba(vars.$primary-600);\\n      user-select: none;\\n      font-weight: 500;\\n    }\\n\\n    .mat-mdc-tab-group.mat-accent .mat-mdc-tab:not(.mat-mdc-tab-disabled).mdc-tab--active {\\n      color: vars.$primary;\\n      user-select: none;\\n    }\\n\\n    .mdc-tab-indicator__content--underline {\\n      border-color: rgba(vars.$accent-lighter) !important;\\n    }\\n  }\\n\\n  .legend-header {\\n    color: vars.$dark-primary-text;\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n    gap: 0.5rem;\\n    min-width: max-content;\\n    line-height: normal;\\n\\n    &.gradient {\\n      grid-area: gradient-legend-header;\\n      border-right: 1px solid rgba(vars.$light-dividers);\\n    }\\n\\n    &.size {\\n      grid-area: size-legend-header;\\n    }\\n\\n    .icon {\\n      font-size: 1.125rem;\\n      height: 1.125rem;\\n      width: 1.125rem;\\n    }\\n  }\\n\\n  .legend {\\n    padding: 1rem 1.5rem;\\n\\n    &.gradient {\\n      grid-area: gradient-legend;\\n      border-right: 1px solid rgba(vars.$light-dividers);\\n\\n      .content {\\n        width: 10rem;\\n      }\\n    }\\n\\n    &.size {\\n      grid-area: size-legend;\\n    }\\n  }\\n\\n  .source-list {\\n    height: min-content;\\n    grid-area: source-list;\\n    overflow: hidden;\\n    max-height: 276px;\\n  }\\n\\n  hra-biomarker-table {\\n    height: 100%;\\n\\n    &.small {\\n      min-height: fit-content;\\n    }\\n  }\\n\\n  hra-label-box {\\n    font-size: 0.875rem;\\n    padding-left: 1.5rem;\\n  }\\n}\\n\\n::ng-deep .biomarker-details.info-tooltip {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n  max-width: 21rem;\\n  font-family: Metropolis;\\n  font-weight: 500;\\n  font-size: 0.75rem;\\n  line-height: 1.375rem;\\n}\\n\\n::ng-deep .mdc-tab__ripple::before {\\n  opacity: 0 !important;\\n}\\n\\n::ng-deep .biomarker-table-hover.full-column-name {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n  overflow: auto;\\n  max-width: fit-content;\\n  font-family: Metropolis;\\n  font-size: 0.75rem;\\n\\n  &.empty {\\n    display: none;\\n  }\\n}\\n","styleUrl":"./biomarker-details.component.scss"}],"stylesData":"","extends":[],"accessors":{"tabs":{"name":"tabs","getSignature":{"name":"tabs","type":"[]","returnType":"CellSummaryAggregate[]","line":115,"rawdescription":"\\nTable tabs","description":"<p>Table tabs</p>\\n"}},"tissueInfo":{"name":"tissueInfo","getSignature":{"name":"tissueInfo","type":"","returnType":"TissueInfo","line":126,"rawdescription":"\\n\\nGets tissue title from the list of tissues\\n","description":"<p>Gets tissue title from the list of tissues</p>\\n"}},"illustrationIds":{"name":"illustrationIds","getSignature":{"name":"illustrationIds","type":"[]","returnType":"string[]","line":139,"rawdescription":"\\n\\nGets ids for cells in the illustration\\n","description":"<p>Gets ids for cells in the illustration</p>\\n"}}},"templateData":"<span (click)=\\"toggleFullscreen()\\" class=\\"end material-symbols-outlined cursor\\">\\n  {{ isTableFullScreen ? \'close_fullscreen\' : \'open_in_full\' }}\\n</span>\\n\\n<mat-tab-group\\n  class=\\"table\\"\\n  [class.table-fullscreen]=\\"isTableFullScreen\\"\\n  mat-stretch-tabs=\\"true\\"\\n  color=\\"accent\\"\\n  (selectedTabChange)=\\"logTabChange($event)\\"\\n  disablePagination=\\"true\\"\\n  disableRipple=\\"true\\"\\n>\\n  <mat-tab\\n    *ngFor=\\"let tab of tabs; trackBy: trackByLabel\\"\\n    labelClass=\\"table-tab-header\\"\\n    [label]=\\"\'Cell Types by \' + tab.label\\"\\n  >\\n    <hra-biomarker-table\\n      #table\\n      *ngIf=\\"tab.rows.length !== 0\\"\\n      [class.small]=\\"tab.rows.length < 10\\"\\n      [data]=\\"$any(tab.rows)\\"\\n      [columns]=\\"tab.columns\\"\\n      [gradient]=\\"gradients()\\"\\n      [sizes]=\\"sizes()\\"\\n      [tissueInfo]=\\"tissueInfo\\"\\n      [illustrationIds]=\\"illustrationIds\\"\\n      [dataSources]=\\"source()\\"\\n      [highlightedCellId]=\\"selectedOnHovered()?.ontologyId ?? \'\'\\"\\n      (rowHover)=\\"highlightCells($event)\\"\\n    ></hra-biomarker-table>\\n    <hra-empty-biomarker\\n      *ngIf=\\"tab.rows.length === 0\\"\\n      [collaborateText]=\\"collaborateText\\"\\n      [message]=\\"message\\"\\n      (collaborateClick)=\\"collaborate()\\"\\n    ></hra-empty-biomarker>\\n  </mat-tab>\\n</mat-tab-group>\\n\\n<hra-label-box class=\\"legend-header gradient\\">\\n  <mat-icon class=\\"icon\\" [hraHover]=\\"infoTooltip\\" [hraHoverData]=\\"gradientHoverInfo()\\">info_outlined</mat-icon>\\n  Biomarker Expression Mean in FTU\\n</hra-label-box>\\n<div class=\\"legend gradient\\">\\n  <hra-gradient-legend [gradient]=\\"gradients()\\" class=\\"content\\"></hra-gradient-legend>\\n</div>\\n\\n<hra-label-box class=\\"legend-header size\\">\\n  <mat-icon class=\\"icon\\" [hraHover]=\\"infoTooltip\\" [hraHoverData]=\\"sizeHoverInfo()\\">info_outlined</mat-icon>\\n  Percentage of Cells in FTU\\n</hra-label-box>\\n<div class=\\"legend size\\">\\n  <hra-size-legend [sizes]=\\"sizes()\\" class=\\"content\\"></hra-size-legend>\\n</div>\\n\\n<div class=\\"source-list\\">\\n  <hra-source-list\\n    [collaborateText]=\\"collaborateText\\"\\n    [message]=\\"message\\"\\n    (collaborateClick)=\\"collaborate()\\"\\n    [sources]=\\"source()\\"\\n    (selectionChanged)=\\"setSelectedSources($event)\\"\\n    class=\\"content\\"\\n  ></hra-source-list>\\n</div>\\n\\n<ng-template #infoTooltip let-tooltip>\\n  <div class=\\"biomarker-details info-tooltip\\">\\n    {{ tooltip }}\\n  </div>\\n</ng-template>\\n"},{"name":"BiomarkerDetailsWcComponent","id":"component-BiomarkerDetailsWcComponent-2c72d9dfca9e7dd06ac8013f7efd0c97e07d6abce462261bb9beb6f475c116d9b71411d9f0016a3c269ceebb864ee6e20ef922c64f354ddd347436d9308165e4","file":"src/lib/biomarker-details-wc/biomarker-details-wc.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-wc-biomarker-details","styleUrls":["./biomarker-details-wc.component.scss"],"styles":[],"templateUrl":["./biomarker-details-wc.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"collaborateText","defaultValue":"\'Collaborate with the HRA Team\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>button text of empty biomarker component.</p>\\n","line":179,"rawdescription":"\\n\\nbutton text of empty biomarker component.\\n","modifierKind":[148]},{"name":"currentUrl","defaultValue":"selectSnapshot(IllustratorSelectors.url)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current illustration url</p>\\n","line":79,"rawdescription":"\\n\\nCurrent illustration url\\n","modifierKind":[148]},{"name":"getTabs","defaultValue":"selectSnapshot(CellSummarySelectors.aggregates)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Table tabs</p>\\n","line":116,"rawdescription":"\\nTable tabs","modifierKind":[148]},{"name":"gradientHoverInfo","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Info to be shown on the tooltip for Gradient Legend</p>\\n","line":119,"rawdescription":"\\nInfo to be shown on the tooltip for Gradient Legend","modifierKind":[148]},{"name":"gradients","defaultValue":"selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, \'points\' as const, [])<\\n    GradientPoint[]\\n  >","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Gradient colors along with their stop points</p>\\n","line":128,"rawdescription":"\\nGradient colors along with their stop points","modifierKind":[148]},{"name":"iri","defaultValue":"selectSnapshot(ActiveFtuSelectors.iri)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Iri  of medical illustration behavior component</p>\\n","line":89,"rawdescription":"\\n\\nIri  of medical illustration behavior component\\n","modifierKind":[148]},{"name":"isTableFullScreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Indicates if the table is fully shown, defaults to false</p>\\n","line":125,"rawdescription":"\\nIndicates if the table is fully shown, defaults to false"},{"name":"mapping","defaultValue":"selectSnapshot(IllustratorSelectors.mapping)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current mapping file</p>\\n","line":84,"rawdescription":"\\n\\nCurrent mapping file\\n","modifierKind":[148]},{"name":"message","defaultValue":"`We currently do not have cell type data for this biomarker.\\n<br><br> Please contact us to discuss your dataset.`","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>message markdown of empty biomarker component.</p>\\n","line":184,"rawdescription":"\\n\\nmessage markdown of empty biomarker component.\\n","modifierKind":[148]},{"name":"setSelectedSources","defaultValue":"dispatch(SourceRefsActions.SetSelectedSources)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Sets currently selected sources</p>\\n","line":188,"rawdescription":"\\nSets currently selected sources","modifierKind":[148]},{"name":"sizeHoverInfo","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Info to be shown on the tooltip for Size Legend</p>\\n","line":122,"rawdescription":"\\nInfo to be shown on the tooltip for Size Legend","modifierKind":[148]},{"name":"sizes","defaultValue":"selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, \'sizes\' as const, [])<SizeLegend[]>","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Taking input for the radius of the circle and the label to be displayed.</p>\\n","line":133,"rawdescription":"\\nTaking input for the radius of the circle and the label to be displayed.","modifierKind":[148]},{"name":"source","defaultValue":"selectSnapshot(SourceRefsSelectors.sourceReferences)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of sources with titles and links displayed to the user</p>\\n","line":136,"rawdescription":"\\nList of sources with titles and links displayed to the user","modifierKind":[148]},{"name":"table","deprecated":false,"deprecationMessage":"","type":"BiomarkerTableComponent<DataCell>","indexKey":"","optional":false,"description":"<p>Reference to the biomarker table component</p>\\n","line":74,"rawdescription":"\\n\\nReference to the biomarker table component\\n","decorators":[{"name":"ViewChild","stringifiedArguments":"\'table\'"}],"modifierKind":[170]},{"name":"tissues","defaultValue":"selectSnapshot(TissueLibrarySelectors.tissues)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Get all tissues</p>\\n","line":94,"rawdescription":"\\n\\nGet all tissues\\n","modifierKind":[148]},{"name":"updateNodeOnClicked","defaultValue":"dispatch(IllustratorActions.SetClicked)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Updates the active node on node click</p>\\n","line":113,"rawdescription":"\\n\\nUpdates the active node on node click\\n","modifierKind":[148]},{"name":"updateNodeOnHover","defaultValue":"dispatch(IllustratorActions.SetHover)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Updates the active node on node hover</p>\\n","line":108,"rawdescription":"\\n\\nUpdates the active node on node hover\\n","modifierKind":[148]}],"methodsClass":[{"name":"collaborate","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":224,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which opens the contact modal dialog box","description":"<p>A function which opens the contact modal dialog box</p>\\n"},{"name":"logTabChange","args":[{"name":"event","type":"MatTabChangeEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":235,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs tab change event\\n","description":"<p>Logs tab change event</p>\\n","jsdoctags":[{"name":{"pos":6874,"end":6879,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MatTabChangeEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":6868,"end":6873,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>tab change event</p>\\n"}]},{"name":"toggleFullscreen","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":214,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function that toggles isTableFullScreen and\\ncalls the setScreenMode function.\\n","description":"<p>A function that toggles isTableFullScreen and\\ncalls the setScreenMode function.</p>\\n"},{"name":"trackByIndex","args":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":207,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nReturns the index number","description":"<p>Returns the index number</p>\\n","jsdoctags":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatTabsModule","type":"module"},{"name":"BiomarkerTableComponent","type":"component"},{"name":"BiomarkerTableDataCardComponent","type":"component"},{"name":"GradientLegendComponent","type":"component"},{"name":"HoverDirective","type":"directive"},{"name":"LabelBoxComponent","type":"component"},{"name":"SizeLegendComponent","type":"component"},{"name":"SourceListComponent","type":"component"},{"name":"EmptyBiomarkerComponent","type":"component"},{"name":"InteractiveSvgComponent","type":"component"}],"description":"<p>Component for Biomarker Table Details Web component</p>\\n","rawdescription":"\\nComponent for Biomarker Table Details Web component","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject, ViewChild } from \'@angular/core\';\\nimport { MatDialog, MatDialogConfig } from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTabChangeEvent, MatTabsModule } from \'@angular/material/tabs\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { dispatch, selectQuerySnapshot, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport {\\n  EmptyBiomarkerComponent,\\n  GradientLegendComponent,\\n  GradientPoint,\\n  LabelBoxComponent,\\n  SizeLegend,\\n  SizeLegendComponent,\\n} from \'@hra-ui/components/atoms\';\\nimport {\\n  BiomarkerTableDataCardComponent,\\n  InteractiveSvgComponent,\\n  SourceListComponent,\\n} from \'@hra-ui/components/molecules\';\\nimport { BiomarkerTableComponent, DataCell, TissueInfo } from \'@hra-ui/components/organisms\';\\nimport { IllustrationMappingItem } from \'@hra-ui/services\';\\nimport {\\n  ActiveFtuSelectors,\\n  CellSummaryAggregate,\\n  CellSummarySelectors,\\n  IllustratorActions,\\n  IllustratorSelectors,\\n  ResourceIds as Ids,\\n  ResourceTypes as RTypes,\\n  ScreenModeAction,\\n  SourceRefsActions,\\n  SourceRefsSelectors,\\n  TissueLibrarySelectors,\\n} from \'@hra-ui/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\nimport { ContactBehaviorComponent } from \'../contact-behavior/contact-behavior.component\';\\n\\n/**\\n * PlaceHolder for Empty Tissue Info\\n */\\nconst EMPTY_TISSUE_INFO: TissueInfo = {\\n  id: \'\',\\n  label: \'\',\\n};\\n\\n/** Component for Biomarker Table Details Web component */\\n@Component({\\n  selector: \'ftu-wc-biomarker-details\',\\n  imports: [\\n    CommonModule,\\n    MatIconModule,\\n    MatTabsModule,\\n    BiomarkerTableComponent,\\n    BiomarkerTableDataCardComponent,\\n    GradientLegendComponent,\\n    HoverDirective,\\n    LabelBoxComponent,\\n    SizeLegendComponent,\\n    SourceListComponent,\\n    EmptyBiomarkerComponent,\\n    InteractiveSvgComponent,\\n  ],\\n  templateUrl: \'./biomarker-details-wc.component.html\',\\n  styleUrls: [\'./biomarker-details-wc.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerDetailsWcComponent {\\n  /**\\n   * Reference to the biomarker table component\\n   */\\n  @ViewChild(\'table\') table!: BiomarkerTableComponent<DataCell>;\\n\\n  /**\\n   * Current illustration url\\n   */\\n  readonly currentUrl = selectSnapshot(IllustratorSelectors.url);\\n\\n  /**\\n   * Current mapping file\\n   */\\n  readonly mapping = selectSnapshot(IllustratorSelectors.mapping);\\n\\n  /**\\n   * Iri  of medical illustration behavior component\\n   */\\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\\n\\n  /**\\n   * Get all tissues\\n   */\\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\\n\\n  /**\\n   * Gets tissue title from the list of tissues\\n   */\\n  get tissueTitle(): string {\\n    const iri = this.iri();\\n    const tissues = this.tissues();\\n    return iri ? tissues[iri].label : \'\';\\n  }\\n\\n  /**\\n   * Updates the active node on node hover\\n   */\\n  readonly updateNodeOnHover = dispatch(IllustratorActions.SetHover);\\n\\n  /**\\n   * Updates the active node on node click\\n   */\\n  readonly updateNodeOnClicked = dispatch(IllustratorActions.SetClicked);\\n\\n  /** Table tabs */\\n  readonly getTabs = selectSnapshot(CellSummarySelectors.aggregates);\\n\\n  /** Info to be shown on the tooltip for Gradient Legend */\\n  readonly gradientHoverInfo = selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo);\\n\\n  /** Info to be shown on the tooltip for Size Legend */\\n  readonly sizeHoverInfo = selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo);\\n\\n  /** Indicates if the table is fully shown, defaults to false*/\\n  isTableFullScreen = false;\\n\\n  /** Gradient colors along with their stop points */\\n  readonly gradients = selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, \'points\' as const, [])<\\n    GradientPoint[]\\n  >;\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  readonly sizes = selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, \'sizes\' as const, [])<SizeLegend[]>;\\n\\n  /** List of sources with titles and links displayed to the user */\\n  readonly source = selectSnapshot(SourceRefsSelectors.sourceReferences);\\n\\n  /**\\n   * Gets tissue title from the list of tissues\\n   */\\n  get tissueInfo(): TissueInfo {\\n    const iri = this.iri();\\n    const tissues = this.tissues();\\n    if (iri === undefined) {\\n      return EMPTY_TISSUE_INFO;\\n    }\\n    const { id, label } = tissues[iri];\\n    return { id, label };\\n  }\\n\\n  /**\\n   * Gets tabs containing cell summary aggregate data\\n   */\\n  get tabs(): CellSummaryAggregate[] {\\n    const tabs = this.getTabs();\\n    if (tabs !== this.tabs_ && tabs.length !== 0) {\\n      this.tabs_ = tabs;\\n    }\\n\\n    return this.tabs_;\\n  }\\n\\n  /**\\n   * Gets ids for cells in the illustration\\n   */\\n  get illustrationIds(): string[] {\\n    const mapping = this.mapping();\\n    if (mapping !== this.mapping_) {\\n      this.mapping_ = mapping;\\n      this.illustrationIds_ = Array.from(new Set(this.mapping().map((data) => data.ontologyId)));\\n    }\\n\\n    return this.illustrationIds_;\\n  }\\n\\n  /**\\n   * button text of empty biomarker component.\\n   */\\n  readonly collaborateText = \'Collaborate with the HRA Team\';\\n\\n  /**\\n   * message markdown of empty biomarker component.\\n   */\\n  readonly message = `We currently do not have cell type data for this biomarker.\\n<br><br> Please contact us to discuss your dataset.`;\\n\\n  /** Sets currently selected sources */\\n  readonly setSelectedSources = dispatch(SourceRefsActions.SetSelectedSources);\\n\\n  /** A dispatcher function to set the screen mode */\\n  private readonly setScreenMode = dispatch(ScreenModeAction.Set);\\n\\n  /** A dialog box which shows contact modal after clicking on contact */\\n  private readonly dialog = inject(MatDialog);\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** Mapping item reference */\\n  private mapping_: IllustrationMappingItem[] = [];\\n  /** Illustration ids reference */\\n  private illustrationIds_: string[] = [];\\n  /** Tabs reference */\\n  private tabs_: CellSummaryAggregate[] = [];\\n\\n  /** Returns the index number */\\n  trackByIndex(index: number): number {\\n    return index;\\n  }\\n\\n  /** A function that toggles isTableFullScreen and\\n   * calls the setScreenMode function.\\n   */\\n  toggleFullscreen(): void {\\n    setTimeout(() => {\\n      this.table.checkDisplayedColumns();\\n    }, 250);\\n\\n    this.isTableFullScreen = !this.isTableFullScreen;\\n    this.setScreenMode(this.isTableFullScreen);\\n  }\\n\\n  /** A function which opens the contact modal dialog box */\\n  collaborate(): void {\\n    const dialogConfig = new MatDialogConfig();\\n    dialogConfig.disableClose = true;\\n    this.ga.event(\'contact_open\', \'modal\');\\n    this.dialog.open(ContactBehaviorComponent, dialogConfig);\\n  }\\n\\n  /**\\n   * Logs tab change event\\n   * @param event tab change event\\n   */\\n  logTabChange(event: MatTabChangeEvent) {\\n    this.ga.event(\'biomarker_tab_change\', event.tab ? event.tab.textLabel : \'\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  flex-direction: column;\\n\\n  ::ng-deep .extraTab {\\n    padding-left: 1rem;\\n    padding-right: 1rem;\\n    letter-spacing: 0;\\n    font-weight: 500;\\n\\n    &:last-child {\\n      border-right: 1px solid rgba(vars.$light-dividers);\\n      border-left: 1px solid rgba(vars.$light-dividers);\\n    }\\n\\n    &.mdc-tab-indicator--active {\\n      background-color: rgba(vars.$primary-lighter);\\n    }\\n\\n    &:hover {\\n      background-color: rgba(vars.$primary-lighter);\\n    }\\n    .mat-tab__text-label {\\n      --palette-accent-500-rgb: #243142;\\n    }\\n  }\\n\\n  .table-header {\\n    grid-area: table-header;\\n    border: 1px solid rgba(vars.$light-dividers);\\n    border-bottom: none;\\n    width: 43rem;\\n    height: 2.5rem;\\n\\n    @media (min-height: 49.5rem) {\\n      height: 3rem;\\n    }\\n\\n    @media (min-height: 60.75rem) {\\n      font-size: 1.25rem;\\n    }\\n\\n    span {\\n      cursor: pointer;\\n      padding: 0.4rem;\\n      &:hover {\\n        background-color: rgba(vars.$light-dividers);\\n        border-radius: 5px;\\n      }\\n    }\\n  }\\n\\n  .table {\\n    grid-area: table;\\n    max-width: 100%;\\n    overflow: auto;\\n    border: 1px solid rgba(vars.$light-dividers);\\n    flex-grow: 1;\\n\\n    ::ng-deep .table-tab-header {\\n      padding-left: 1rem;\\n      padding-right: 1rem;\\n      border-left: 1px solid rgba(vars.$light-dividers);\\n      background-color: white;\\n      font-weight: 500;\\n      letter-spacing: 0;\\n\\n      &:last-child {\\n        border-right: 1px solid rgba(vars.$light-dividers);\\n      }\\n\\n      &.mdc-tab-indicator--active {\\n        background-color: rgba(vars.$primary-lighter);\\n      }\\n\\n      &:hover {\\n        background-color: rgba(vars.$primary-lighter);\\n      }\\n    }\\n  }\\n\\n  hra-interactive-svg {\\n    display: block;\\n    height: calc(100% - 3px);\\n  }\\n\\n  hra-biomarker-table {\\n    overflow-y: auto;\\n    overflow-x: auto;\\n  }\\n\\n  .legends {\\n    display: inline-flex;\\n    width: 100%;\\n    height: 8rem;\\n\\n    .legends-right {\\n      width: 50%;\\n    }\\n    .legends-left {\\n      width: 50%;\\n    }\\n  }\\n\\n  .legend-header {\\n    color: vars.$dark-primary-text;\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n    gap: 0.5rem;\\n    min-width: max-content;\\n    line-height: normal;\\n    height: 3rem;\\n\\n    &.gradient {\\n      grid-area: gradient-legend-header;\\n      border-right: 1px solid rgba(vars.$light-dividers);\\n    }\\n\\n    &.size {\\n      grid-area: size-legend-header;\\n    }\\n\\n    .icon {\\n      font-size: 1.125rem;\\n      height: 1.125rem;\\n      width: 1.125rem;\\n    }\\n  }\\n\\n  .legend {\\n    padding: 1rem 1.5rem;\\n    height: 5rem;\\n\\n    &.gradient {\\n      grid-area: gradient-legend-header;\\n      border-right: 1px solid rgba(vars.$light-dividers);\\n\\n      hra-gradient-legend {\\n        width: 10rem !important;\\n      }\\n    }\\n\\n    &.size {\\n      grid-area: size-legend;\\n      font-size: 0.75rem;\\n    }\\n\\n    .icon {\\n      margin-left: 0.6rem;\\n      width: unset;\\n    }\\n  }\\n\\n  .source-list {\\n    grid-area: source-list;\\n\\n    .content {\\n      width: min-content;\\n    }\\n  }\\n  .cursor {\\n    cursor: default;\\n  }\\n}\\n\\n::ng-deep .biomarker-details.info-tooltip {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n  max-width: 21rem;\\n  font-family: Metropolis;\\n  font-weight: 500;\\n  font-size: 0.75rem;\\n  line-height: 1.375rem;\\n}\\n\\n::ng-deep {\\n  .table-tab-header,\\n  .extraTab > .mdc-tab__content > span {\\n    color: rgba(vars.$primary-600);\\n    user-select: none;\\n    font-weight: 500;\\n  }\\n\\n  mat-tab-header {\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  .mat-mdc-tab-body-wrapper {\\n    height: calc(100% - 3rem);\\n  }\\n\\n  .mat-mdc-tab-group.mat-accent .mat-mdc-tab:not(.mat-mdc-tab-disabled).mdc-tab--active .mdc-tab__text-label {\\n    color: vars.$primary;\\n  }\\n\\n  .mdc-tab__text-label {\\n    color: rgba(vars.$primary-600) !important;\\n  }\\n\\n  .mdc-tab-indicator__content--underline {\\n    border-color: rgba(vars.$accent-lighter) !important;\\n  }\\n\\n  .mdc-tab__ripple::before {\\n    opacity: 0 !important;\\n  }\\n\\n  cdk-virtual-scroll-viewport {\\n    height: 100% !important;\\n  }\\n}\\n\\n::ng-deep .biomarker-table-hover.full-column-name {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n  overflow: auto;\\n  max-width: fit-content;\\n  font-family: Metropolis;\\n  font-size: 0.75rem;\\n\\n  &.empty {\\n    display: none;\\n  }\\n}\\n","styleUrl":"./biomarker-details-wc.component.scss"}],"stylesData":"","extends":[],"accessors":{"tissueTitle":{"name":"tissueTitle","getSignature":{"name":"tissueTitle","type":"string","returnType":"string","line":99,"rawdescription":"\\n\\nGets tissue title from the list of tissues\\n","description":"<p>Gets tissue title from the list of tissues</p>\\n"}},"tissueInfo":{"name":"tissueInfo","getSignature":{"name":"tissueInfo","type":"","returnType":"TissueInfo","line":141,"rawdescription":"\\n\\nGets tissue title from the list of tissues\\n","description":"<p>Gets tissue title from the list of tissues</p>\\n"}},"tabs":{"name":"tabs","getSignature":{"name":"tabs","type":"[]","returnType":"CellSummaryAggregate[]","line":154,"rawdescription":"\\n\\nGets tabs containing cell summary aggregate data\\n","description":"<p>Gets tabs containing cell summary aggregate data</p>\\n"}},"illustrationIds":{"name":"illustrationIds","getSignature":{"name":"illustrationIds","type":"[]","returnType":"string[]","line":166,"rawdescription":"\\n\\nGets ids for cells in the illustration\\n","description":"<p>Gets ids for cells in the illustration</p>\\n"}}},"templateData":"<hra-label-box class=\\"table-header\\">\\n  {{ tissueTitle }}: FTU Illustration\\n  <span (click)=\\"toggleFullscreen()\\" class=\\"end material-symbols-outlined cursor\\">\\n    {{ isTableFullScreen ? \'close_fullscreen\' : \'open_in_full\' }}\\n  </span>\\n</hra-label-box>\\n\\n<mat-tab-group\\n  class=\\"table\\"\\n  [class.table-fullscreen]=\\"isTableFullScreen\\"\\n  mat-stretch-tabs=\\"true\\"\\n  color=\\"accent\\"\\n  (selectedTabChange)=\\"logTabChange($event)\\"\\n  disablePagination=\\"true\\"\\n  disableRipple=\\"true\\"\\n>\\n  <mat-tab labelClass=\\"extraTab\\" label=\\"FTU Illustration\\">\\n    <hra-interactive-svg\\n      [url]=\\"currentUrl()\\"\\n      [mapping]=\\"mapping()\\"\\n      (nodeHover)=\\"updateNodeOnHover($event)\\"\\n      (nodeClick)=\\"updateNodeOnClicked($event)\\"\\n    >\\n    </hra-interactive-svg>\\n  </mat-tab>\\n  <mat-tab\\n    *ngFor=\\"let tab of tabs; trackBy: trackByIndex\\"\\n    labelClass=\\"table-tab-header\\"\\n    [label]=\\"\'Cell Types by \' + tab.label\\"\\n  >\\n    <ng-template matTabContent>\\n      <hra-biomarker-table\\n        *ngIf=\\"tab.rows.length !== 0\\"\\n        [data]=\\"$any(tab.rows)\\"\\n        [columns]=\\"tab.columns\\"\\n        [gradient]=\\"gradients()\\"\\n        [sizes]=\\"sizes()\\"\\n        [tissueInfo]=\\"tissueInfo\\"\\n        [illustrationIds]=\\"illustrationIds\\"\\n        [dataSources]=\\"source()\\"\\n      ></hra-biomarker-table>\\n\\n      <div *ngIf=\\"tab.rows.length !== 0\\" class=\\"legends\\">\\n        <div class=\\"legends-left\\">\\n          <hra-label-box class=\\"legend-header gradient\\">\\n            <mat-icon class=\\"icon\\" [hraHover]=\\"infoTooltip\\" [hraHoverData]=\\"gradientHoverInfo()\\"\\n              >info_outlined</mat-icon\\n            >\\n            Biomarker Expression Mean in FTU\\n          </hra-label-box>\\n          <div class=\\"legend gradient\\">\\n            <hra-gradient-legend [gradient]=\\"gradients()\\" class=\\"content\\"></hra-gradient-legend>\\n          </div>\\n        </div>\\n\\n        <div class=\\"legends-right\\">\\n          <hra-label-box class=\\"legend-header size\\">\\n            <mat-icon class=\\"icon\\" [hraHover]=\\"infoTooltip\\" [hraHoverData]=\\"sizeHoverInfo()\\">info_outlined</mat-icon>\\n            Percentage of Cells in FTU\\n          </hra-label-box>\\n          <div class=\\"legend size\\">\\n            <hra-size-legend [sizes]=\\"sizes()\\" class=\\"content\\"></hra-size-legend>\\n          </div>\\n        </div>\\n      </div>\\n      <hra-empty-biomarker\\n        *ngIf=\\"tab.rows.length === 0\\"\\n        [collaborateText]=\\"collaborateText\\"\\n        [message]=\\"message\\"\\n        (collaborateClick)=\\"collaborate()\\"\\n      ></hra-empty-biomarker>\\n    </ng-template>\\n  </mat-tab>\\n  <mat-tab labelClass=\\"extraTab\\" label=\\"Source Data\\">\\n    <div class=\\"source-list\\">\\n      <hra-source-list\\n        [collaborateText]=\\"collaborateText\\"\\n        [message]=\\"message\\"\\n        (collaborateClick)=\\"collaborate()\\"\\n        [sources]=\\"source()\\"\\n        (selectionChanged)=\\"setSelectedSources($event)\\"\\n        class=\\"content\\"\\n      ></hra-source-list>\\n    </div>\\n\\n    <ng-template #infoTooltip let-tooltip>\\n      <div class=\\"biomarker-details info-tooltip\\">\\n        {{ tooltip }}\\n      </div>\\n    </ng-template>\\n  </mat-tab>\\n</mat-tab-group>\\n"},{"name":"ContactBehaviorComponent","id":"component-ContactBehaviorComponent-8ff8cf0dc240f4305f9c1a8d48b70b08c8d96a49011f50900541e857286ec146004aaa905309d0d4ea445e4fc82a4f112280874e2eefa732c755dd45891bf4ed","file":"src/lib/contact-behavior/contact-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-contact-behavior","styleUrls":["./contact-behavior.component.scss"],"styles":[],"templateUrl":["./contact-behavior.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"description","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ContactAcknowledgement)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Information modal message to the user</p>\\n","line":29,"rawdescription":"\\nInformation modal message to the user","modifierKind":[148]},{"name":"postMessageTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<void>","indexKey":"","optional":false,"description":"<p>A template to post a message</p>\\n","line":20,"rawdescription":"\\nA template to post a message","decorators":[{"name":"ViewChild","stringifiedArguments":"\'postMessage\'"}],"modifierKind":[170,148]},{"name":"productLogoUrl","defaultValue":"selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":23,"rawdescription":"\\nInput for product logo URL to displayed on the left side.","modifierKind":[148]},{"name":"productTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ProductTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for product title to displayed on the left side.</p>\\n","line":26,"rawdescription":"\\nInput for product title to displayed on the left side.","modifierKind":[148]},{"name":"sendMessage","defaultValue":"dispatch(ContactActions.SendMessage)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>A dispatcher function to send message entered by user</p>\\n","line":32,"rawdescription":"\\nA dispatcher function to send message entered by user","modifierKind":[148]}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":54,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which closes the \'Contact us\' dialog and the acknowledgement dialog.","description":"<p>A function which closes the &#39;Contact us&#39; dialog and the acknowledgement dialog.</p>\\n"},{"name":"submit","args":[{"name":"message","type":"ContactData","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box.","description":"<p>A function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box.</p>\\n","jsdoctags":[{"name":"message","type":"ContactData","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatDialogModule","type":"module"},{"name":"ContactModalComponent","type":"component"},{"name":"InfoModalComponent","type":"component"}],"description":"<p>A Component for contact behavior which sends the message entered by the user and shows an acknowledgement</p>\\n","rawdescription":"\\nA Component for contact behavior which sends the message entered by the user and shows an acknowledgement","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject, TemplateRef, ViewChild } from \'@angular/core\';\\nimport { MatDialog, MatDialogModule, MatDialogRef } from \'@angular/material/dialog\';\\nimport { dispatch, selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport { ContactData, ContactModalComponent, InfoModalComponent } from \'@hra-ui/components/molecules\';\\nimport { ResourceIds as Ids, ContactActions } from \'@hra-ui/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/** A Component for contact behavior which sends the message entered by the user and shows an acknowledgement */\\n@Component({\\n  selector: \'ftu-contact-behavior\',\\n  imports: [CommonModule, MatDialogModule, ContactModalComponent, InfoModalComponent],\\n  templateUrl: \'./contact-behavior.component.html\',\\n  styleUrls: [\'./contact-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactBehaviorComponent {\\n  /** A template to post a message */\\n  @ViewChild(\'postMessage\') readonly postMessageTemplate!: TemplateRef<void>;\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\\n\\n  /** Input for product title to displayed on the left side. */\\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\\n\\n  /** Information modal message to the user */\\n  readonly description = selectQuerySnapshot(RR.anyText, Ids.ContactAcknowledgement);\\n\\n  /** A dispatcher function to send message entered by user */\\n  readonly sendMessage = dispatch(ContactActions.SendMessage);\\n\\n  /** A dialog box which shows user an acknowledgement after clicking on submit */\\n  private readonly dialog = inject(MatDialog);\\n\\n  /** A mat form field dialog which accepts the email, subject, and message of user and validates it */\\n  private readonly selfRef = inject(MatDialogRef, { optional: true });\\n\\n  /** Dialog box which references the acknowledgement dialog box */\\n  private postRef?: MatDialogRef<void>;\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** A function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box. */\\n  submit(message: ContactData): void {\\n    this.sendMessage(message);\\n    this.selfRef?.close();\\n    this.postRef = this.dialog.open(this.postMessageTemplate);\\n  }\\n\\n  /** A function which closes the \'Contact us\' dialog and the acknowledgement dialog.  */\\n  close(): void {\\n    if (this.postRef) {\\n      this.postRef.close();\\n      this.ga.event(\'acknowedgement_close\', \'modal\');\\n    }\\n    if (this.selfRef) {\\n      this.selfRef.close();\\n      this.ga.event(\'contact_close\', \'modal\');\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .contact-modal {\\n    width: 41rem;\\n    height: 40rem;\\n  }\\n\\n  .info-modal {\\n    width: 35rem;\\n    height: 11.8rem;\\n  }\\n\\n  @media screen and (max-height: 20.5rem) {\\n    .contact-modal {\\n      height: calc(100vh - 2rem);\\n    }\\n  }\\n}\\n","styleUrl":"./contact-behavior.component.scss"}],"stylesData":"","extends":[],"templateData":"<hra-contact-modal\\n  class=\\"contact-modal\\"\\n  [productLogoUrl]=\\"productLogoUrl()\\"\\n  [productTitle]=\\"productTitle()\\"\\n  (submitClick)=\\"submit($event)\\"\\n  (closeClick)=\\"close()\\"\\n>\\n</hra-contact-modal>\\n\\n<ng-template #postMessage>\\n  <hra-info-modal\\n    class=\\"info-modal\\"\\n    [productLogoUrl]=\\"productLogoUrl()\\"\\n    [productTitle]=\\"productTitle()\\"\\n    [description]=\\"description()\\"\\n    (closeClick)=\\"close()\\"\\n  >\\n  </hra-info-modal>\\n</ng-template>\\n"},{"name":"FooterBehaviorComponent","id":"component-FooterBehaviorComponent-d8c500474c354b0250dc3728c26e98d2605beb57763a74f5558eba94163e733313830c08917b9becdf7567042dabcf243b127ed1056ce95cceb2ac713f73e4bd","file":"src/lib/footer-behavior/footer-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-footer-behavior","styleUrls":["./footer-behavior.component.scss"],"styles":[],"templateUrl":["./footer-behavior.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"aboutLink","defaultValue":"LinkIds.About","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for about link for user click action.</p>\\n","line":36,"rawdescription":"\\nInput for about link for user click action.","modifierKind":[148]},{"name":"download","defaultValue":"dispatch(DownloadActions.Download)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>A dispatcher function to download file in specified format</p>\\n","line":42,"rawdescription":"\\nA dispatcher function to download file in specified format","modifierKind":[148]},{"name":"downloadFormats","defaultValue":"selectSnapshot(DownloadSelectors.formats)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Selects a snapshot of the current value of the available download formats</p>\\n","line":27,"rawdescription":"\\nSelects a snapshot of the current value of the available download formats","modifierKind":[148]},{"name":"embed","defaultValue":"LinkIds.Embed","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Embed link routing after clicking on Embed</p>\\n","line":39,"rawdescription":"\\nEmbed link routing after clicking on Embed","modifierKind":[148]},{"name":"hraPortal","defaultValue":"LinkIds.Portal","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Hra portal link routing after clicking on HRA Portal</p>\\n","line":30,"rawdescription":"\\nHra portal link routing after clicking on HRA Portal","modifierKind":[148]},{"name":"illustrationMetadata","defaultValue":"LinkIds.Illustration","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Metadata page link routing after clicking on Illustration</p>\\n","line":33,"rawdescription":"\\nMetadata page link routing after clicking on Illustration","modifierKind":[148]},{"name":"productLogoUrl","defaultValue":"selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":21,"rawdescription":"\\nInput for product logo URL to displayed on the left side.","modifierKind":[148]},{"name":"productTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ProductTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for product title to displayed on the left side.</p>\\n","line":24,"rawdescription":"\\nInput for product title to displayed on the left side.","modifierKind":[148]},{"name":"size","defaultValue":"selectSnapshot(ScreenModeSelectors.size)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Selects the current value of the available ScreenMode Size</p>\\n","line":44,"rawdescription":"\\nSelects the current value of the available ScreenMode Size","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatDialogModule","type":"module"},{"name":"FooterComponent","type":"component"},{"name":"ContactBehaviorComponent","type":"component"}],"description":"<p>A component for footer behavior which provides functionality for various buttons in footer</p>\\n","rawdescription":"\\nA component for footer behavior which provides functionality for various buttons in footer","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { MatDialogModule } from \'@angular/material/dialog\';\\nimport { dispatch, selectQuerySnapshot, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport { FooterComponent } from \'@hra-ui/components/molecules\';\\nimport { DownloadActions, DownloadSelectors, ResourceIds as Ids, LinkIds, ScreenModeSelectors } from \'@hra-ui/state\';\\n\\nimport { ContactBehaviorComponent } from \'../contact-behavior/contact-behavior.component\';\\n\\n/** A component for footer behavior which provides functionality for various buttons in footer */\\n@Component({\\n  selector: \'ftu-footer-behavior\',\\n  imports: [CommonModule, MatDialogModule, FooterComponent, ContactBehaviorComponent],\\n  templateUrl: \'./footer-behavior.component.html\',\\n  styleUrls: [\'./footer-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterBehaviorComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\\n\\n  /** Input for product title to displayed on the left side. */\\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\\n\\n  /** Selects a snapshot of the current value of the available download formats */\\n  readonly downloadFormats = selectSnapshot(DownloadSelectors.formats);\\n\\n  /** Hra portal link routing after clicking on HRA Portal */\\n  readonly hraPortal = LinkIds.Portal;\\n\\n  /** Metadata page link routing after clicking on Illustration */\\n  readonly illustrationMetadata = LinkIds.Illustration;\\n\\n  /** Input for about link for user click action. */\\n  readonly aboutLink = LinkIds.About;\\n\\n  /** Embed link routing after clicking on Embed */\\n  readonly embed = LinkIds.Embed;\\n\\n  /** A dispatcher function to download file in specified format */\\n  readonly download = dispatch(DownloadActions.Download);\\n  /** Selects the current value of the available ScreenMode Size */\\n  readonly size = selectSnapshot(ScreenModeSelectors.size);\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  overflow: hidden;\\n}\\n","styleUrl":"./footer-behavior.component.scss"}],"stylesData":"","extends":[],"templateData":"<hra-footer\\n  [productLogoUrl]=\\"productLogoUrl()\\"\\n  [productTitle]=\\"productTitle()\\"\\n  [illustrationMetadata]=\\"illustrationMetadata\\"\\n  [embed]=\\"embed\\"\\n  [downloadFormats]=\\"downloadFormats()\\"\\n  (download)=\\"download($event.id)\\"\\n  [size]=\\"size()\\"\\n  [aboutLink]=\\"aboutLink\\"\\n>\\n</hra-footer>\\n"},{"name":"HeaderBehaviorComponent","id":"component-HeaderBehaviorComponent-eeaaf12c4d6e328ba58245417592b06ae5875e7ec660ceb05ae4496c476f7a1d505045177788469b37bf0927ed5f38a228f167ff9af042548f6f935dd1e366cc","file":"src/lib/header-behavior/header-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-header-behavior","styleUrls":["./header-behavior.component.scss"],"styles":[],"templateUrl":["./header-behavior.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"aboutLink","defaultValue":"LinkIds.About","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for about link for user click action.</p>\\n","line":43,"rawdescription":"\\n\\nInput for about link for user click action.\\n","modifierKind":[148]},{"name":"appTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.AppTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for app title to show on the left side.</p>\\n","line":33,"rawdescription":"\\n\\nInput for app title to show on the left side.\\n","modifierKind":[148]},{"name":"productLogoUrl","defaultValue":"selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":23,"rawdescription":"\\n\\nInput for product logo URL to displayed on the left side.\\n","modifierKind":[148]},{"name":"productTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ProductTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for product title to displayed on the left side.</p>\\n","line":28,"rawdescription":"\\n\\nInput for product title to displayed on the left side.\\n","modifierKind":[148]},{"name":"productTitleLink","defaultValue":"LinkIds.ProductTitle","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for product title link for user click action</p>\\n","line":38,"rawdescription":"\\n\\nInput for product title link for user click action\\n","modifierKind":[148]}],"methodsClass":[{"name":"contact","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":52,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which opens the contact modal dialog box","description":"<p>A function which opens the contact modal dialog box</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"HeaderComponent","type":"component"}],"description":"<p>Component for Header Behavior</p>\\n","rawdescription":"\\nComponent for Header Behavior","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { MatDialog, MatDialogConfig } from \'@angular/material/dialog\';\\nimport { selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport { HeaderComponent } from \'@hra-ui/components/molecules\';\\nimport { ResourceIds as Ids, LinkIds } from \'@hra-ui/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\nimport { ContactBehaviorComponent } from \'../contact-behavior/contact-behavior.component\';\\n\\n/** Component for Header Behavior */\\n@Component({\\n  selector: \'ftu-header-behavior\',\\n  imports: [CommonModule, HeaderComponent],\\n  templateUrl: \'./header-behavior.component.html\',\\n  styleUrls: [\'./header-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HeaderBehaviorComponent {\\n  /**\\n   * Input for product logo URL to displayed on the left side.\\n   */\\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\\n\\n  /**\\n   * Input for product title to displayed on the left side.\\n   */\\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\\n\\n  /**\\n   * Input for app title to show on the left side.\\n   */\\n  readonly appTitle = selectQuerySnapshot(RR.anyText, Ids.AppTitle);\\n\\n  /**\\n   * Input for product title link for user click action\\n   */\\n  readonly productTitleLink = LinkIds.ProductTitle;\\n\\n  /**\\n   * Input for about link for user click action.\\n   */\\n  readonly aboutLink = LinkIds.About;\\n\\n  /** A dialog box which shows contact modal after clicking on contact */\\n  private readonly dialog = inject(MatDialog);\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** A function which opens the contact modal dialog box */\\n  contact(): void {\\n    const dialogConfig = new MatDialogConfig();\\n    dialogConfig.disableClose = true;\\n    this.dialog.open(ContactBehaviorComponent, dialogConfig);\\n    this.ga.event(\'contact_open\', \'modal\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  position: fixed;\\n}\\n","styleUrl":"./header-behavior.component.scss"}],"stylesData":"","extends":[],"templateData":"<hra-header\\n  [productLogoUrl]=\\"productLogoUrl()\\"\\n  [productTitle]=\\"productTitle()\\"\\n  [appTitle]=\\"appTitle()\\"\\n  [productTitleLink]=\\"productTitleLink\\"\\n  [aboutLink]=\\"aboutLink\\"\\n  (contactClick)=\\"contact()\\"\\n>\\n</hra-header>\\n"},{"name":"HraLandingPageIntroWcBehaviourComponent","id":"component-HraLandingPageIntroWcBehaviourComponent-68b9d8cd667b427ebef6b83b05b8cc64c18899e5b144c2d5bf2ef1b91aae9b098f738687da1b6703eadb4c4abdf4013cf33aee7db8dc5a700f079bc5703ee17c","file":"src/lib/hra-landing-page-intro-wc-behaviour/hra-landing-page-intro-wc-behaviour.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-wc-intro","styleUrls":["./hra-landing-page-intro-wc-behaviour.component.scss"],"styles":[],"templateUrl":["./hra-landing-page-intro-wc-behaviour.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"landingPageIntroDescription","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page intro description</p>\\n","line":20,"rawdescription":"\\nselect snapshot for landing page intro description","modifierKind":[148]},{"name":"landingPageIntroPartners","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page intro partners</p>\\n","line":24,"rawdescription":"\\nselect snapshot for landing page intro partners","modifierKind":[148]},{"name":"landingPageIntroReadMore","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPageIntroReadMore)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page intro partners</p>\\n","line":22,"rawdescription":"\\nselect snapshot for landing page intro partners","modifierKind":[148]},{"name":"landingPageIntroTitle","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for Landing Page title</p>\\n","line":18,"rawdescription":"\\nselect snapshot for Landing Page title","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"HraLandingPageIntroWcComponent","type":"component"}],"description":"<p>Component for LandingPage Intro Behaviour: Web component</p>\\n","rawdescription":"\\nComponent for LandingPage Intro Behaviour: Web component","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { HraLandingPageIntroWcComponent } from \'@hra-ui/components/molecules\';\\nimport { ResourceRegistrySelectors as RRS } from \'@hra-ui/cdk/state\';\\nimport { selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceIds as RIds } from \'@hra-ui/state\';\\n\\n/** Component for LandingPage Intro Behaviour: Web component */\\n@Component({\\n  selector: \'ftu-wc-intro\',\\n  imports: [CommonModule, HraLandingPageIntroWcComponent],\\n  templateUrl: \'./hra-landing-page-intro-wc-behaviour.component.html\',\\n  styleUrls: [\'./hra-landing-page-intro-wc-behaviour.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HraLandingPageIntroWcBehaviourComponent {\\n  /** select snapshot for Landing Page title */\\n  readonly landingPageIntroTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle);\\n  /** select snapshot for landing page intro description */\\n  readonly landingPageIntroDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription);\\n  /** select snapshot for landing page intro partners */\\n  readonly landingPageIntroReadMore = selectQuerySnapshot(RRS.markdown, RIds.LandingPageIntroReadMore);\\n  /** select snapshot for landing page intro partners */\\n  readonly landingPageIntroPartners = selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners);\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n\\n  .intro {\\n    border: 1px solid rgba(vars.$light-dividers);\\n    width: 100%;\\n  }\\n}\\n","styleUrl":"./hra-landing-page-intro-wc-behaviour.component.scss"}],"stylesData":"","extends":[],"templateData":"<hra-ui-hra-landing-page-intro-wc\\n  class=\\"intro\\"\\n  [description]=\\"landingPageIntroDescription()\\"\\n  [partners]=\\"landingPageIntroPartners()\\"\\n  [readMore]=\\"landingPageIntroReadMore()\\"\\n  [title]=\\"landingPageIntroTitle()\\"\\n></hra-ui-hra-landing-page-intro-wc>\\n"},{"name":"LandingPageContentComponent","id":"component-LandingPageContentComponent-20cf3e7e003939e49779bb6a6b0299fc59e314e0697ef7d59a071ebe899c845b3e20c09894168a36f76ab286d677055b11cd16334e6a7bfca2ade80a6855db1e","file":"src/lib/landing-page-content/landing-page-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-landing-page-content","styleUrls":["./landing-page-content.component.scss"],"styles":[],"templateUrl":["./landing-page-content.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"baseHref","defaultValue":"selectSnapshot(BaseHrefSelectors.baseHref)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Base href</p>\\n","line":36,"rawdescription":"\\nBase href","modifierKind":[148]},{"name":"intersectableEls","deprecated":false,"deprecationMessage":"","type":"QueryList<ElementRef>","indexKey":"","optional":false,"description":"<p>array of element refs for intersectables</p>\\n","line":33,"rawdescription":"\\narray of element refs for intersectables","decorators":[{"name":"ViewChildren","stringifiedArguments":"\'intersectable\', {read: ElementRef}"}],"modifierKind":[170,148]},{"name":"landingPageDepthDescription","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPageDepthDescription)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page depth description</p>\\n","line":56,"rawdescription":"\\nselect snapshot for landing page depth description","modifierKind":[148]},{"name":"landingPageDepthImg","defaultValue":"selectQuerySnapshot(RRS.url, RIds.LandingPageDepthImg)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page depth img</p>\\n","line":60,"rawdescription":"\\nselect snapshot for landing page depth img","modifierKind":[148]},{"name":"landingPageDepthMoreText","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthMoreText)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot forlanding page depth more text</p>\\n","line":58,"rawdescription":"\\nselect snapshot forlanding page depth more text","modifierKind":[148]},{"name":"landingPageDepthTitle","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page depth title</p>\\n","line":54,"rawdescription":"\\nselect snapshot for landing page depth title","modifierKind":[148]},{"name":"landingPageIntroDescription","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page intro description</p>\\n","line":40,"rawdescription":"\\nselect snapshot for landing page intro description","modifierKind":[148]},{"name":"landingPageIntroImg","defaultValue":"selectQuerySnapshot(RRS.url, RIds.LandingPageIntroImg)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page intro img</p>\\n","line":46,"rawdescription":"\\nselect snapshot for landing page intro img","modifierKind":[148]},{"name":"landingPageIntroMoreText","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageIntroMoreText)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page intro more text</p>\\n","line":44,"rawdescription":"\\nselect snapshot for landing page intro more text","modifierKind":[148]},{"name":"landingPageIntroPartners","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for landing page intro partners</p>\\n","line":42,"rawdescription":"\\nselect snapshot for landing page intro partners","modifierKind":[148]},{"name":"landingPageIntroTitle","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for Landing Page title</p>\\n","line":38,"rawdescription":"\\nselect snapshot for Landing Page title","modifierKind":[148]},{"name":"LinkIds","defaultValue":"LinkIds","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Expose links for use it template</p>\\n","line":63,"rawdescription":"\\nExpose links for use it template","modifierKind":[148]},{"name":"metrics","defaultValue":"selectQuerySnapshot(RRS.field, RIds.Metrics, RTypes.Metrics, \'metrics\' as const, [])<MetricItem[]>","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for metrics</p>\\n","line":48,"rawdescription":"\\nselect snapshot for metrics","modifierKind":[148]},{"name":"metricsLogo","defaultValue":"selectQuerySnapshot(RRS.url, RIds.MetricsLogo)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for metrics logo</p>\\n","line":52,"rawdescription":"\\nselect snapshot for metrics logo","modifierKind":[148]},{"name":"metricsTitle","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.MetricsTitle)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>select snapshot for metrics title</p>\\n","line":50,"rawdescription":"\\nselect snapshot for metrics title","modifierKind":[148]}],"methodsClass":[{"name":"handleIntersection","args":[{"name":"entries","type":"IntersectionObserverEntry[]","deprecated":false,"deprecationMessage":""},{"name":"observer","type":"IntersectionObserver","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":81,"deprecated":false,"deprecationMessage":"","rawdescription":"\\ncallback function for intersection observer","description":"<p>callback function for intersection observer</p>\\n","jsdoctags":[{"name":"entries","type":"IntersectionObserverEntry[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"observer","type":"IntersectionObserver","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"LandingPageIntroComponent","type":"component"},{"name":"MetricsComponent","type":"component"},{"name":"LandingPageInDepthComponent","type":"component"}],"description":"<p>Component for LandingPageContent Behavior</p>\\n","rawdescription":"\\nComponent for LandingPageContent Behavior","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport {\\n  AfterViewInit,\\n  ChangeDetectionStrategy,\\n  Component,\\n  ElementRef,\\n  inject,\\n  QueryList,\\n  Renderer2,\\n  ViewChildren,\\n} from \'@angular/core\';\\nimport { injectDestroy$, selectQuerySnapshot, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { BaseHrefSelectors, ResourceRegistrySelectors as RRS } from \'@hra-ui/cdk/state\';\\nimport {\\n  LandingPageInDepthComponent,\\n  LandingPageIntroComponent,\\n  MetricItem,\\n  MetricsComponent,\\n} from \'@hra-ui/components/molecules\';\\nimport { LinkIds, ResourceIds as RIds, ResourceTypes as RTypes } from \'@hra-ui/state\';\\n\\n/** Component for LandingPageContent Behavior */\\n@Component({\\n  selector: \'ftu-landing-page-content\',\\n  imports: [CommonModule, LandingPageIntroComponent, MetricsComponent, LandingPageInDepthComponent],\\n  templateUrl: \'./landing-page-content.component.html\',\\n  styleUrls: [\'./landing-page-content.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageContentComponent implements AfterViewInit {\\n  /** array of element refs for intersectables */\\n  @ViewChildren(\'intersectable\', { read: ElementRef })\\n  readonly intersectableEls!: QueryList<ElementRef>;\\n\\n  /** Base href */\\n  readonly baseHref = selectSnapshot(BaseHrefSelectors.baseHref);\\n  /** select snapshot for Landing Page title */\\n  readonly landingPageIntroTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle);\\n  /** select snapshot for landing page intro description */\\n  readonly landingPageIntroDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription);\\n  /** select snapshot for landing page intro partners */\\n  readonly landingPageIntroPartners = selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners);\\n  /** select snapshot for landing page intro more text */\\n  readonly landingPageIntroMoreText = selectQuerySnapshot(RRS.anyText, RIds.LandingPageIntroMoreText);\\n  /** select snapshot for landing page intro img */\\n  readonly landingPageIntroImg = selectQuerySnapshot(RRS.url, RIds.LandingPageIntroImg);\\n  /** select snapshot for metrics */\\n  readonly metrics = selectQuerySnapshot(RRS.field, RIds.Metrics, RTypes.Metrics, \'metrics\' as const, [])<MetricItem[]>;\\n  /** select snapshot for metrics title */\\n  readonly metricsTitle = selectQuerySnapshot(RRS.anyText, RIds.MetricsTitle);\\n  /** select snapshot for metrics logo */\\n  readonly metricsLogo = selectQuerySnapshot(RRS.url, RIds.MetricsLogo);\\n  /** select snapshot for landing page depth title */\\n  readonly landingPageDepthTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthTitle);\\n  /** select snapshot for landing page depth description */\\n  readonly landingPageDepthDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDepthDescription);\\n  /** select snapshot forlanding page depth more text */\\n  readonly landingPageDepthMoreText = selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthMoreText);\\n  /** select snapshot for landing page depth img */\\n  readonly landingPageDepthImg = selectQuerySnapshot(RRS.url, RIds.LandingPageDepthImg);\\n\\n  /** Expose links for use it template */\\n  readonly LinkIds = LinkIds;\\n\\n  /** Renderer to add class for animation */\\n  private readonly renderer = inject(Renderer2);\\n  /** destroys observer */\\n  private readonly destroy$ = injectDestroy$();\\n\\n  /** creates an observer after view init */\\n  ngAfterViewInit(): void {\\n    const observer = new IntersectionObserver(this.handleIntersection.bind(this), {\\n      threshold: 0.18,\\n    });\\n\\n    this.intersectableEls.forEach((el) => observer.observe(el.nativeElement));\\n    this.destroy$.subscribe(() => observer.disconnect());\\n  }\\n\\n  /** callback function for intersection observer */\\n  handleIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void {\\n    for (const { isIntersecting, target } of entries) {\\n      if (isIntersecting) {\\n        this.renderer.addClass(target, \'visible\');\\n        observer.unobserve(target);\\n      }\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  overflow-x: hidden;\\n\\n  .intro {\\n    margin: 3.5rem 2rem;\\n  }\\n\\n  .metrics {\\n    opacity: 0;\\n\\n    &.visible {\\n      animation: fadeIn 2s ease-in forwards;\\n    }\\n  }\\n\\n  .in-depth {\\n    opacity: 0;\\n\\n    &.visible {\\n      overflow: hidden;\\n      animation: slideIn 2s ease-in-out forwards;\\n    }\\n  }\\n}\\n\\n@keyframes fadeIn {\\n  0% {\\n    opacity: 0;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n@keyframes slideIn {\\n  0% {\\n    transform: translateX(200%);\\n    opacity: 1;\\n  }\\n\\n  100% {\\n    transform: translateX(0);\\n    opacity: 1;\\n  }\\n}\\n","styleUrl":"./landing-page-content.component.scss"}],"stylesData":"","extends":[],"implements":["AfterViewInit"],"templateData":"<hra-landing-page-intro\\n  class=\\"intro\\"\\n  [title]=\\"landingPageIntroTitle()\\"\\n  [img]=\\"landingPageIntroImg()\\"\\n  [partners]=\\"landingPageIntroPartners()\\"\\n  [description]=\\"landingPageIntroDescription()\\"\\n  [moreText]=\\"landingPageIntroMoreText()\\"\\n  [moreLink]=\\"LinkIds.ExploreFTU\\"\\n>\\n</hra-landing-page-intro>\\n<hra-metrics\\n  class=\\"metrics\\"\\n  [title]=\\"metricsTitle()\\"\\n  [metrics]=\\"metrics()\\"\\n  [logo]=\\"metricsLogo()\\"\\n  [baseHref]=\\"baseHref()\\"\\n  #intersectable\\n>\\n</hra-metrics>\\n<hra-landing-page-in-depth\\n  class=\\"in-depth\\"\\n  [title]=\\"landingPageDepthTitle()\\"\\n  [description]=\\"landingPageDepthDescription()\\"\\n  [moreText]=\\"landingPageDepthMoreText()\\"\\n  [img]=\\"landingPageDepthImg()\\"\\n  [moreLink]=\\"LinkIds.LandingPageReadMore\\"\\n  #intersectable\\n>\\n</hra-landing-page-in-depth>\\n"},{"name":"MedicalIllustrationBehaviorComponent","id":"component-MedicalIllustrationBehaviorComponent-3fa9009f9a8b3bd6194dcfeda7ba257fe434f482cde1449b5c7b9ebb9e6e83c51b9b63f7d3284cf2ca6552493ba61772cf0ae6d21f6b0fd0116222754208bb96","file":"src/lib/medical-illustration-behavior/medical-illustration-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-medical-illustration-behavior","styleUrls":["./medical-illustration-behavior.component.scss"],"styles":[],"templateUrl":["./medical-illustration-behavior.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"currentUrl","defaultValue":"selectSnapshot(IllustratorSelectors.url)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current illustration url</p>\\n","line":22,"rawdescription":"\\n\\nCurrent illustration url\\n","modifierKind":[148]},{"name":"highlightId","defaultValue":"selectSnapshot(IllustratorSelectors.highlightedCell)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Curent highlighted cell id</p>\\n","line":32,"rawdescription":"\\n\\nCurent highlighted cell id\\n","modifierKind":[148]},{"name":"iri","defaultValue":"selectSnapshot(ActiveFtuSelectors.iri)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Iri  of medical illustration behavior component</p>\\n","line":37,"rawdescription":"\\n\\nIri  of medical illustration behavior component\\n","modifierKind":[148]},{"name":"mapping","defaultValue":"selectSnapshot(IllustratorSelectors.mapping)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current mapping file</p>\\n","line":27,"rawdescription":"\\n\\nCurrent mapping file\\n","modifierKind":[148]},{"name":"tissues","defaultValue":"selectSnapshot(TissueLibrarySelectors.tissues)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Get all tissues</p>\\n","line":42,"rawdescription":"\\n\\nGet all tissues\\n","modifierKind":[148]},{"name":"updateNodeOnClicked","defaultValue":"dispatch(IllustratorActions.SetClicked)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Updates the active node on node click</p>\\n","line":61,"rawdescription":"\\n\\nUpdates the active node on node click\\n","modifierKind":[148]},{"name":"updateNodeOnHover","defaultValue":"dispatch(IllustratorActions.SetHover)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Updates the active node on node hover</p>\\n","line":56,"rawdescription":"\\n\\nUpdates the active node on node hover\\n","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"InteractiveSvgComponent","type":"component"},{"name":"LabelBoxComponent","type":"component"}],"description":"<p>Behavior component for medical illustration component</p>\\n","rawdescription":"\\n\\nBehavior component for medical illustration component\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { dispatch, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { LabelBoxComponent } from \'@hra-ui/components/atoms\';\\nimport { InteractiveSvgComponent } from \'@hra-ui/components/molecules\';\\nimport { ActiveFtuSelectors, IllustratorActions, IllustratorSelectors, TissueLibrarySelectors } from \'@hra-ui/state\';\\n\\n/**\\n * Behavior component for medical illustration component\\n */\\n@Component({\\n  selector: \'ftu-medical-illustration-behavior\',\\n  imports: [CommonModule, InteractiveSvgComponent, LabelBoxComponent],\\n  templateUrl: \'./medical-illustration-behavior.component.html\',\\n  styleUrls: [\'./medical-illustration-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MedicalIllustrationBehaviorComponent {\\n  /**\\n   * Current illustration url\\n   */\\n  readonly currentUrl = selectSnapshot(IllustratorSelectors.url);\\n\\n  /**\\n   * Current mapping file\\n   */\\n  readonly mapping = selectSnapshot(IllustratorSelectors.mapping);\\n\\n  /**\\n   * Curent highlighted cell id\\n   */\\n  readonly highlightId = selectSnapshot(IllustratorSelectors.highlightedCell);\\n\\n  /**\\n   * Iri  of medical illustration behavior component\\n   */\\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\\n\\n  /**\\n   * Get all tissues\\n   */\\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\\n\\n  /**\\n   * Gets tissue title from the list of tissues\\n   */\\n  get tissueTitle(): string {\\n    const iri = this.iri();\\n    const tissues = this.tissues();\\n    return iri && tissues ? tissues[iri].label : \'\';\\n  }\\n\\n  /**\\n   * Updates the active node on node hover\\n   */\\n  readonly updateNodeOnHover = dispatch(IllustratorActions.SetHover);\\n\\n  /**\\n   * Updates the active node on node click\\n   */\\n  readonly updateNodeOnClicked = dispatch(IllustratorActions.SetClicked);\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  flex-grow: 1;\\n\\n  hra-label-box {\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n    width: 100%;\\n    height: 2.5rem;\\n    font-size: 15px;\\n  }\\n\\n  @media (min-height: 49.5rem) {\\n    hra-label-box {\\n      font-size: 15px;\\n      height: 3rem;\\n    }\\n  }\\n\\n  @media (min-height: 60.75rem) {\\n    hra-label-box {\\n      font-size: 1.25rem;\\n    }\\n  }\\n}\\n","styleUrl":"./medical-illustration-behavior.component.scss"}],"stylesData":"","extends":[],"accessors":{"tissueTitle":{"name":"tissueTitle","getSignature":{"name":"tissueTitle","type":"string","returnType":"string","line":47,"rawdescription":"\\n\\nGets tissue title from the list of tissues\\n","description":"<p>Gets tissue title from the list of tissues</p>\\n"}}},"templateData":"<hra-label-box>{{ tissueTitle }}</hra-label-box>\\n<hra-interactive-svg\\n  [url]=\\"currentUrl()\\"\\n  [mapping]=\\"mapping()\\"\\n  [highlightId]=\\"highlightId()\\"\\n  (nodeHover)=\\"updateNodeOnHover($event)\\"\\n  (nodeClick)=\\"updateNodeOnClicked($event)\\"\\n>\\n</hra-interactive-svg>\\n"},{"name":"ScreenNoticeBehaviorComponent","id":"component-ScreenNoticeBehaviorComponent-14e97ac8afe2c956b3d6fa71baad59c79b4f032e4e76f310164417ec522b65c484831d81e686fdf7902aeefb193cf2918badfa7f9f3791b0f70893ac3e8aedbe","file":"src/lib/screen-notice-behavior/screen-notice-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-ui-screen-notice-behavior","styleUrls":["./screen-notice-behavior.component.scss"],"styles":[],"templateUrl":["./screen-notice-behavior.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"content","defaultValue":"selectQuerySnapshot(RR.anyText, ResourceIds.ScreenSizeNoticeContent)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Content  of screen notice behavior component</p>\\n","line":20,"rawdescription":"\\nContent  of screen notice behavior component","modifierKind":[148]},{"name":"portal","defaultValue":"LinkIds.Portal","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Hra portal link routing after clicking on HRA Portal</p>\\n","line":23,"rawdescription":"\\nHra portal link routing after clicking on HRA Portal","modifierKind":[148]}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which closes the screen size notice dialog box","description":"<p>A function which closes the screen size notice dialog box</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"ScreenSizeNoticeComponent","type":"component"}],"description":"<p>A component for screen size notice behavior which provides the content to be displayed and provides functionality\\nfor the buttons on the notice modal</p>\\n","rawdescription":"\\nA component for screen size notice behavior which provides the content to be displayed and provides functionality\\nfor the buttons on the notice modal","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { dispatch, selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR, StorageActions, StorageId } from \'@hra-ui/cdk/state\';\\nimport { ResourceIds, LinkIds } from \'@hra-ui/state\';\\nimport { ScreenSizeNoticeComponent } from \'@hra-ui/components/molecules\';\\nimport { MatDialogRef } from \'@angular/material/dialog\';\\n\\n/** A component for screen size notice behavior which provides the content to be displayed and provides functionality\\n * for the buttons on the notice modal */\\n@Component({\\n  selector: \'ftu-ui-screen-notice-behavior\',\\n  imports: [CommonModule, ScreenSizeNoticeComponent],\\n  templateUrl: \'./screen-notice-behavior.component.html\',\\n  styleUrls: [\'./screen-notice-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScreenNoticeBehaviorComponent {\\n  /** Content  of screen notice behavior component*/\\n  readonly content = selectQuerySnapshot(RR.anyText, ResourceIds.ScreenSizeNoticeContent);\\n\\n  /** Hra portal link routing after clicking on HRA Portal*/\\n  readonly portal = LinkIds.Portal;\\n\\n  /** Reference for the screen size notice dialog box*/\\n  private readonly ref = inject(MatDialogRef, { optional: true });\\n\\n  /** A dispatcher function that sets the Local Storage as \'shown\'*/\\n  private readonly setScreenNoticeShown = dispatch(StorageActions.Set, StorageId.Local, \'screen-size-notice\', \'shown\');\\n\\n  /** A function which closes the screen size notice dialog box*/\\n  close(): void {\\n    this.setScreenNoticeShown();\\n    this.ref?.close();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n}\\n","styleUrl":"./screen-notice-behavior.component.scss"}],"stylesData":"","extends":[],"templateData":"<hra-screen-size-notice [content]=\\"content()\\" [portal]=\\"portal\\" (proceedClick)=\\"close()\\"> </hra-screen-size-notice>\\n"},{"name":"TissueLibraryBehaviorComponent","id":"component-TissueLibraryBehaviorComponent-e1118ef49a639ca159419d4b9d97db954a3e7a7c7c30766d85678be487f797f5cac5eeefb4047407649b754de258cb69ba5ae670558e49ffe0c8aabc7cc81747","file":"src/lib/tissue-library-behavior/tissue-library-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-tissue-library-behavior","styleUrls":["./tissue-library-behavior.component.scss"],"styles":[],"templateUrl":["./tissue-library-behavior.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"list","deprecated":false,"deprecationMessage":"","type":"TissueTreeListComponent<never | never>","indexKey":"","optional":true,"description":"<p>Reference to the TissueTreeListComponent.</p>\\n","line":25,"rawdescription":"\\n\\nReference to the TissueTreeListComponent.\\n","decorators":[{"name":"ViewChild","stringifiedArguments":"\'list\', {static: true}"}],"modifierKind":[170,148]},{"name":"navigate","defaultValue":"dispatch(LinkRegistryActions.Navigate)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Navigates to a tissue page</p>\\n","line":40,"rawdescription":"\\n\\nNavigates to a tissue page\\n"},{"name":"selected","deprecated":false,"deprecationMessage":"","type":"Tissue","indexKey":"","optional":true,"description":"<p>Selected  of tissue library behavior component</p>\\n","line":35,"rawdescription":"\\n\\nSelected  of tissue library behavior component\\n"},{"name":"tissues","defaultValue":"selectSnapshot(TissueLibrarySelectors.tissues)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for tissues data</p>\\n","line":30,"rawdescription":"\\n\\nInput for tissues data\\n","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"LabelBoxComponent","type":"component"},{"name":"TissueTreeListComponent","type":"component"}],"description":"<p>Component for Tissue Library Behavior</p>\\n","rawdescription":"\\n\\nComponent for Tissue Library Behavior\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, ViewChild } from \'@angular/core\';\\nimport { dispatch, select$, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { LinkRegistryActions } from \'@hra-ui/cdk/state\';\\nimport { LabelBoxComponent } from \'@hra-ui/components/atoms\';\\nimport { TissueTreeListComponent } from \'@hra-ui/components/molecules\';\\nimport { Tissue } from \'@hra-ui/services\';\\nimport { ActiveFtuSelectors, TissueLibrarySelectors } from \'@hra-ui/state\';\\n\\n/**\\n * Component for Tissue Library Behavior\\n */\\n@Component({\\n  selector: \'ftu-tissue-library-behavior\',\\n  imports: [CommonModule, LabelBoxComponent, TissueTreeListComponent],\\n  templateUrl: \'./tissue-library-behavior.component.html\',\\n  styleUrls: [\'./tissue-library-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueLibraryBehaviorComponent {\\n  /**\\n   * Reference to the TissueTreeListComponent.\\n   */\\n  @ViewChild(\'list\', { static: true })\\n  readonly list?: TissueTreeListComponent<never, never>;\\n\\n  /**\\n   * Input for tissues data\\n   */\\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\\n\\n  /**\\n   * Selected  of tissue library behavior component\\n   */\\n  selected?: Tissue;\\n\\n  /**\\n   * Navigates to a tissue page\\n   */\\n  navigate = dispatch(LinkRegistryActions.Navigate);\\n\\n  /**\\n   * Sets the TissueItem instance as undefined if the url is undefined\\n   */\\n  constructor() {\\n    /** Get iris from the observable else reset selection if iri is undefined */\\n    select$(ActiveFtuSelectors.iri).subscribe((iri) => {\\n      this.selected = iri && this.tissues() && this.tissues()[iri];\\n      if (iri === undefined) {\\n        this.list?.resetSelection();\\n      }\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  flex-direction: column;\\n\\n  hra-label-box {\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n    width: 100%;\\n    height: 2.5rem;\\n    font-size: 15px;\\n  }\\n\\n  @media (min-height: 49.5rem) {\\n    hra-label-box {\\n      font-size: 15px;\\n      height: 3rem;\\n    }\\n  }\\n\\n  @media (min-height: 60.75rem) {\\n    hra-label-box {\\n      font-size: 1.25rem;\\n    }\\n  }\\n}\\n","styleUrl":"./tissue-library-behavior.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Sets the TissueItem instance as undefined if the url is undefined</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":40,"rawdescription":"\\n\\nSets the TissueItem instance as undefined if the url is undefined\\n"},"extends":[],"templateData":"<hra-label-box>FTU Library</hra-label-box>\\n<hra-tissue-tree-list\\n  class=\\"tissue-tree\\"\\n  [nodes]=\\"tissues()\\"\\n  (navigate)=\\"navigate($event.link, { queryParams: { id: $event.id } })\\"\\n  [(selected)]=\\"selected\\"\\n  #list\\n>\\n</hra-tissue-tree-list>\\n"}],"modules":[],"miscellaneous":{"variables":[{"name":"EMPTY_TISSUE_INFO","ctype":"miscellaneous","subtype":"variable","file":"src/lib/biomarker-details/biomarker-details.component.ts","deprecated":false,"deprecationMessage":"","type":"TissueInfo","defaultValue":"{\\n  id: \'\',\\n  label: \'\',\\n}","rawdescription":"PlaceHolder for Empty Tissue Info","description":"<p>PlaceHolder for Empty Tissue Info</p>\\n"},{"name":"EMPTY_TISSUE_INFO","ctype":"miscellaneous","subtype":"variable","file":"src/lib/biomarker-details-wc/biomarker-details-wc.component.ts","deprecated":false,"deprecationMessage":"","type":"TissueInfo","defaultValue":"{\\n  id: \'\',\\n  label: \'\',\\n}","rawdescription":"PlaceHolder for Empty Tissue Info","description":"<p>PlaceHolder for Empty Tissue Info</p>\\n"}],"functions":[],"typealiases":[],"enumerations":[],"groupedVariables":{"src/lib/biomarker-details/biomarker-details.component.ts":[{"name":"EMPTY_TISSUE_INFO","ctype":"miscellaneous","subtype":"variable","file":"src/lib/biomarker-details/biomarker-details.component.ts","deprecated":false,"deprecationMessage":"","type":"TissueInfo","defaultValue":"{\\n  id: \'\',\\n  label: \'\',\\n}","rawdescription":"PlaceHolder for Empty Tissue Info","description":"<p>PlaceHolder for Empty Tissue Info</p>\\n"}],"src/lib/biomarker-details-wc/biomarker-details-wc.component.ts":[{"name":"EMPTY_TISSUE_INFO","ctype":"miscellaneous","subtype":"variable","file":"src/lib/biomarker-details-wc/biomarker-details-wc.component.ts","deprecated":false,"deprecationMessage":"","type":"TissueInfo","defaultValue":"{\\n  id: \'\',\\n  label: \'\',\\n}","rawdescription":"PlaceHolder for Empty Tissue Info","description":"<p>PlaceHolder for Empty Tissue Info</p>\\n"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{}}}')},"./dist/compodoc/components-molecules/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"ContactData","id":"interface-ContactData-a06e7b9d6090af69d4e955b4d696dcbb5c6fc10789395a14d1c43a2fe9462289f4618ee0f3d69e38da941de0f1f4b1da5652596b5f7597a9979d50a323bd4dc3","file":"src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from \'@hra-ui/components/atoms\';\\nimport { produce } from \'immer\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\\n */\\nexport interface ContactData {\\n  /**  The email address of the person submitting the form. */\\n  email: string;\\n  /** The subject line of the message being sent. */\\n  subject: string;\\n  /** The body of the message being sent. */\\n  message: string;\\n}\\n\\n/** Initial empty contact data */\\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n};\\n\\n/**\\n * Contact modal component.\\n */\\n@Component({\\n  selector: \'hra-contact-modal\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    EmailInputComponent,\\n    MarkdownModule,\\n    RequiredTextboxComponent,\\n    RequiredInputComponent,\\n  ],\\n  templateUrl: \'./contact-modal.component.html\',\\n  styleUrls: [\'./contact-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactModalComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Emits when the submit button is clicked and all the values are appropriate. */\\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\\n\\n  /** Emits when the cancel button or close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n\\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\\n  get disableSubmit(): boolean {\\n    return Object.values(this.contactData).some((value) => value === undefined);\\n  }\\n\\n  /** Asigns the undefined initially to all the input fields. */\\n  contactData = EMPTY_CONTACT_DATA;\\n\\n  /** Default email address */\\n  readonly defaultMail = \'infoccf@iu.edu\';\\n\\n  /** Updates the contact data object with a new value for a given key. */\\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\\n    this.contactData = produce(this.contactData, (draft) => {\\n      draft[key] = value;\\n    });\\n  }\\n\\n  /** It emits the updated value of contact data */\\n  submit(): void {\\n    this.submitClick.emit(this.contactData as ContactData);\\n  }\\n}\\n","properties":[{"name":"email","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>The email address of the person submitting the form.</p>\\n","line":14,"rawdescription":"\\nThe email address of the person submitting the form."},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>The body of the message being sent.</p>\\n","line":18,"rawdescription":"\\nThe body of the message being sent."},{"name":"subject","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>The subject line of the message being sent.</p>\\n","line":16,"rawdescription":"\\nThe subject line of the message being sent."}],"indexSignatures":[],"kind":171,"description":"<p>An interface representing contact data information which will be emitted if all the fields are in correct format.</p>\\n","rawdescription":"\\n\\nAn interface representing contact data information which will be emitted if all the fields are in correct format.\\n","methods":[],"extends":[]},{"name":"DataItem","id":"interface-DataItem-c9055aff91afa3006a565f77a59d0bb3d0b0ae6234158ca31fd858b678a4c8ba8e73772241ae414572f0acfba7c2c934af443f6efc50a96fe368c415b5d850a8","file":"src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>A string property that represents the label</p>\\n","line":8,"rawdescription":"\\nA string property that represents the label"},{"name":"value","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>A string property that represents the value</p>\\n","line":10,"rawdescription":"\\nA string property that represents the value"}],"indexSignatures":[],"kind":171,"description":"<p>An item which defines a string label and a string value</p>\\n","rawdescription":"\\nAn item which defines a string label and a string value","methods":[],"extends":[]},{"name":"DataNode","id":"interface-DataNode-698c4028b70586e8c701916f4595617aee3585b23f29b41e6f4728c6bfc7e45726e4384b150dc5573692936f8ee30fec72f981132bf623940ac8fd24b633a2f2","file":"src/lib/tissue-tree-list/tissue-tree-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  HostListener,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * Navigates to an illustration page\\n   */\\n  @Output() navigate = new EventEmitter();\\n\\n  /**\\n   * Whether keyboard navigation is enabled\\n   */\\n  enableNav = true;\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n      this.control.expandAll();\\n    }\\n    if (\'selected\' in changes) {\\n      if (!this.selected) {\\n        this.control.expandAll();\\n      }\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      const node = this.control.dataNodes.find((n) => n.data === changes[\'selected\'].currentValue);\\n      if (!node?.expandable) {\\n        this.expandPath(path);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n\\n  /**\\n   * Keyboard navigation for tissue tree list\\n   * @param event Keyboard event\\n   */\\n  @HostListener(\'document:keydown\', [\'$event\'])\\n  onKeyDown(event: KeyboardEvent): void {\\n    if (!this.enableNav) {\\n      return;\\n    }\\n    if (this.control) {\\n      const nodes = this.control.dataNodes;\\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\\n\\n      const currentNode = nodes[selectedIndex];\\n      if (currentNode && currentNode.expandable) {\\n        const expandableNodes = nodes.filter((node) => node.expandable);\\n        const index = expandableNodes.indexOf(currentNode);\\n        if (event.key === \'ArrowLeft\') {\\n          this.control.collapse(currentNode);\\n        } else if (event.key === \'ArrowRight\') {\\n          this.control.expand(currentNode);\\n        } else if (\\n          event.key === \'ArrowDown\' &&\\n          index + 1 < expandableNodes.length &&\\n          !this.control.isExpanded(currentNode)\\n        ) {\\n          this.selectNode(expandableNodes[index + 1].data);\\n          return;\\n        } else if (event.key === \'ArrowUp\' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\\n          this.selectNode(expandableNodes[index - 1].data);\\n          return;\\n        }\\n      }\\n      if (event.key === \'ArrowDown\' && selectedIndex + 1 < nodes.length) {\\n        this.selectNode(nodes[selectedIndex + 1].data);\\n      }\\n      if (event.key === \'ArrowUp\' && selectedIndex - 1 >= 0) {\\n        this.selectNode(nodes[selectedIndex - 1].data);\\n      }\\n      if (event.key === \'Enter\' && !currentNode.expandable) {\\n        this.navigate.emit(currentNode.data);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Disable keyboard nav on click\\n   */\\n  @HostListener(\'document:click\')\\n  handlePageClick(): void {\\n    this.enableNav = false;\\n  }\\n\\n  /**\\n   * Enables keyboard nav only if the tissue tree list is clicked\\n   * @param event Click event\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  handleListClick(event: MouseEvent): void {\\n    event.stopPropagation();\\n    this.enableNav = true;\\n  }\\n}\\n","properties":[{"name":"children","deprecated":false,"deprecationMessage":"","type":"K[]","indexKey":"","optional":true,"description":"<p>Nested nodes</p>\\n","line":30,"rawdescription":"\\nNested nodes"},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Id to pass as a query parameter on navigation</p>\\n","line":26,"rawdescription":"\\nId to pass as a query parameter on navigation"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>User readable label</p>\\n","line":24,"rawdescription":"\\nUser readable label"},{"name":"link","deprecated":false,"deprecationMessage":"","type":"LinkId","indexKey":"","optional":true,"description":"<p>Link to navigate to on node click</p>\\n","line":28,"rawdescription":"\\nLink to navigate to on node click"}],"indexSignatures":[],"kind":171,"description":"<p>Base node type</p>\\n","rawdescription":"\\nBase node type","methods":[],"extends":[]},{"name":"DownloadFormat","id":"interface-DownloadFormat-cca80f9c5541ff2d35f2b4f91e8b734849925ac87d24c426c01922b55b6d2c2185199337bc91dbadc284184b92289821eaafc66b70b5a1307d1fac6fd15c44c4","file":"src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatListModule } from \'@angular/material/list\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/**\\n * Base type for different download format options.\\n */\\nexport interface DownloadFormat {\\n  /**\\n   * User readable format label\\n   */\\n  label: string;\\n}\\n\\n/**\\n * Positioning value for the download list popup\\n */\\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n];\\n\\n/**\\n * Component for footer that displays its content at the bottom of the page with different action buttons.\\n */\\n@Component({\\n  selector: \'hra-footer\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\\n  templateUrl: \'./footer.component.html\',\\n  styleUrls: [\'./footer.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\\n  /** Host binding of footer component */\\n  @HostBinding(\'class\')\\n  @Input()\\n  size: \'small\' | \'large\' = \'large\';\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Input for Illustration metadata page link in HRA Portal */\\n  @Input() illustrationMetadata = EMPTY_LINK;\\n\\n  /** Input for embed link in HRA Portal */\\n  @Input() embed = EMPTY_LINK;\\n\\n  /** Different download formats options displayed to the user */\\n  @Input() downloadFormats: T[] = [];\\n\\n  /** Input for about link */\\n  @Input() aboutLink = EMPTY_LINK;\\n\\n  /** Emits the selected download format */\\n  @Output() readonly download = new EventEmitter<T>();\\n\\n  /** Download list popup overlay positioning */\\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\\n\\n  /** Gets whether the footer required is small */\\n  get isSmall(): boolean {\\n    return this.size === \'small\';\\n  }\\n\\n  /** Whether the download list panel is open */\\n  downloadListOpen = false;\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /**\\n   * Logs event when about button clicked\\n   */\\n  aboutClicked(): void {\\n    this.ga.event(\'about_icon_click\', \'link_click\');\\n  }\\n\\n  /**\\n   * Ignore if button is clicked, otherwise close the download list panel\\n   * @param event Mouse event\\n   */\\n  handleOutsideClick(event: MouseEvent): void {\\n    const target = event.target as HTMLElement;\\n    if ([\'download\', \'download\\\\nDownload\'].includes(target.innerText)) {\\n      return;\\n    } else {\\n      this.downloadListOpen = false;\\n    }\\n  }\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>User readable format label</p>\\n","line":18,"rawdescription":"\\n\\nUser readable format label\\n"}],"indexSignatures":[],"kind":171,"description":"<p>Base type for different download format options.</p>\\n","rawdescription":"\\n\\nBase type for different download format options.\\n","methods":[],"extends":[]},{"name":"InternalNode","id":"interface-InternalNode-698c4028b70586e8c701916f4595617aee3585b23f29b41e6f4728c6bfc7e45726e4384b150dc5573692936f8ee30fec72f981132bf623940ac8fd24b633a2f2","file":"src/lib/tissue-tree-list/tissue-tree-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  HostListener,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * Navigates to an illustration page\\n   */\\n  @Output() navigate = new EventEmitter();\\n\\n  /**\\n   * Whether keyboard navigation is enabled\\n   */\\n  enableNav = true;\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n      this.control.expandAll();\\n    }\\n    if (\'selected\' in changes) {\\n      if (!this.selected) {\\n        this.control.expandAll();\\n      }\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      const node = this.control.dataNodes.find((n) => n.data === changes[\'selected\'].currentValue);\\n      if (!node?.expandable) {\\n        this.expandPath(path);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n\\n  /**\\n   * Keyboard navigation for tissue tree list\\n   * @param event Keyboard event\\n   */\\n  @HostListener(\'document:keydown\', [\'$event\'])\\n  onKeyDown(event: KeyboardEvent): void {\\n    if (!this.enableNav) {\\n      return;\\n    }\\n    if (this.control) {\\n      const nodes = this.control.dataNodes;\\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\\n\\n      const currentNode = nodes[selectedIndex];\\n      if (currentNode && currentNode.expandable) {\\n        const expandableNodes = nodes.filter((node) => node.expandable);\\n        const index = expandableNodes.indexOf(currentNode);\\n        if (event.key === \'ArrowLeft\') {\\n          this.control.collapse(currentNode);\\n        } else if (event.key === \'ArrowRight\') {\\n          this.control.expand(currentNode);\\n        } else if (\\n          event.key === \'ArrowDown\' &&\\n          index + 1 < expandableNodes.length &&\\n          !this.control.isExpanded(currentNode)\\n        ) {\\n          this.selectNode(expandableNodes[index + 1].data);\\n          return;\\n        } else if (event.key === \'ArrowUp\' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\\n          this.selectNode(expandableNodes[index - 1].data);\\n          return;\\n        }\\n      }\\n      if (event.key === \'ArrowDown\' && selectedIndex + 1 < nodes.length) {\\n        this.selectNode(nodes[selectedIndex + 1].data);\\n      }\\n      if (event.key === \'ArrowUp\' && selectedIndex - 1 >= 0) {\\n        this.selectNode(nodes[selectedIndex - 1].data);\\n      }\\n      if (event.key === \'Enter\' && !currentNode.expandable) {\\n        this.navigate.emit(currentNode.data);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Disable keyboard nav on click\\n   */\\n  @HostListener(\'document:click\')\\n  handlePageClick(): void {\\n    this.enableNav = false;\\n  }\\n\\n  /**\\n   * Enables keyboard nav only if the tissue tree list is clicked\\n   * @param event Click event\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  handleListClick(event: MouseEvent): void {\\n    event.stopPropagation();\\n    this.enableNav = true;\\n  }\\n}\\n","properties":[{"name":"data","deprecated":false,"deprecationMessage":"","type":"T","indexKey":"","optional":false,"description":"<p>Associated user node data</p>\\n","line":44,"rawdescription":"\\nAssociated user node data"},{"name":"expandable","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>Whether the node can be expanded to display child nodes</p>\\n","line":40,"rawdescription":"\\nWhether the node can be expanded to display child nodes"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Displayed label</p>\\n","line":38,"rawdescription":"\\nDisplayed label"},{"name":"level","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Depth of node in the tree</p>\\n","line":42,"rawdescription":"\\nDepth of node in the tree"}],"indexSignatures":[],"kind":171,"description":"<p>Internal interface for flat tissue data hierarchy</p>\\n","rawdescription":"\\n\\nInternal interface for flat tissue data hierarchy\\n","methods":[],"extends":[]},{"name":"MetricItem","id":"interface-MetricItem-d877d63626a0b1b5cd855f7aa7f9f09758ae9e6469a07ba7b48860ca5387606caa9ae0c2e9b44170d4419c78a5035af5762a8116e10efa82ee0fe3a56f5d97db","file":"src/lib/metrics/metrics.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n  An interface representing a single metric with an icon, value and description.\\n */\\nexport interface MetricItem {\\n  /** Represents the icon associated with the metric. */\\n  icon: string;\\n  /** Describes the numberical value of the metric. */\\n  value: string;\\n  /** Describes the type of metric. */\\n  description: string;\\n}\\n/**\\n * Describes the metrics for the HuBMAP project.\\n */\\n@Component({\\n  selector: \'hra-metrics\',\\n  imports: [CommonModule],\\n  templateUrl: \'./metrics.component.html\',\\n  styleUrls: [\'./metrics.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MetricsComponent {\\n  /** Main title of metrics component. */\\n  @Input() title = \'\';\\n\\n  /** Logo of metrics component. */\\n  @Input() logo = \'\';\\n\\n  /** List of metrics that will be shown to the user. */\\n  @Input() metrics: MetricItem[] = [];\\n\\n  /** Base url */\\n  @Input() baseHref = \'\';\\n}\\n","properties":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Describes the type of metric.</p>\\n","line":13,"rawdescription":"\\nDescribes the type of metric."},{"name":"icon","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Represents the icon associated with the metric.</p>\\n","line":9,"rawdescription":"\\nRepresents the icon associated with the metric."},{"name":"value","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Describes the numberical value of the metric.</p>\\n","line":11,"rawdescription":"\\nDescribes the numberical value of the metric."}],"indexSignatures":[],"kind":171,"description":"<p>An interface representing a single metric with an icon, value and description.</p>\\n","rawdescription":"\\n\\nAn interface representing a single metric with an icon, value and description.\\n","methods":[],"extends":[]},{"name":"NodeMapEntry","id":"interface-NodeMapEntry-68516f69f2ca0106772f98166ac1443c75d9e261757bbeccf8d61ef8169d5402c9a2eb17d73d22d427f494237777dbf15059b3bef3f51bdaae4cdd0e47c144d0","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  SimpleChanges,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { TooltipComponent } from \'@hra-ui/components/atoms\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node id in svg */\\n  id: string;\\n  /** Node group id */\\n  groupId: string;\\n  /** Ontology id of cell type */\\n  ontologyId: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.ShadowDom,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Highlighted ontology id */\\n  @Input() highlightId?: string;\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\\n\\n  /** Emits node id when clicked */\\n  @Output() readonly nodeClick = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /** Crosswalk element of svg */\\n  private crosswalkEl?: Element;\\n\\n  /** List of highlighted svg elements */\\n  private highlightedElements: Element[] = [];\\n\\n  /**\\n   * Updates the highlighting based on current highlight id\\n   * @param changes\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'highlightId\' in changes) {\\n      this.resetHighlight();\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Highlights cells that match highlightId\\n   */\\n  private setHighlight() {\\n    const { mapping, highlightId, crosswalkEl } = this;\\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\\n    if (!entry || !crosswalkEl) {\\n      return;\\n    }\\n\\n    const encodedId = this.encodeId(entry.id);\\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\\n    if (!element) {\\n      return;\\n    }\\n\\n    const gElement = element.nodeName === \'g\' ? element : (element.parentElement as Element);\\n    const id = gElement.id;\\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\\n    this.highlightedElements = Array.from(elements);\\n    elements.forEach((el) => el.classList.add(\'click-active\'));\\n  }\\n\\n  /**\\n   * Resets all highlighted elements in the svg\\n   */\\n  private resetHighlight(): void {\\n    for (const el of this.highlightedElements) {\\n      el.classList.remove(\'click-active\');\\n    }\\n    this.highlightedElements = [];\\n  }\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    this.crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\') ?? undefined;\\n    if (this.crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, this.crosswalkEl);\\n      this.attachCrosswalkHover(this.crosswalkEl);\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe((event) => this.onCrosswalkHover(event));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\\n    this.attachEvent(el, \'click\').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    if (event) {\\n      const node = this.getNode(event);\\n      if (node) {\\n        this.nodeHoverData$.next({\\n          node: node.label,\\n          origin: {\\n            x: event.clientX,\\n            y: event.clientY,\\n          },\\n        });\\n        this.nodeHover.emit(node); //emits node entry\\n      }\\n    } else {\\n      this.nodeHoverData$.next(undefined);\\n      this.nodeHover.emit();\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const cellMatch = this.mapping.find(\\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\\n      );\\n      if (cellMatch) {\\n        return cellMatch;\\n      } else {\\n        const groupMatch = this.mapping.find(\\n          (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\\n        );\\n        if (groupMatch) {\\n          return groupMatch;\\n        }\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Turns normal string into decoded SVG id\\n   * @param id id\\n   * @returns Encoded id\\n   */\\n  private encodeId(id: string): string {\\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\\n    return id.replace(/[^a-z0-9-]/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","properties":[{"name":"groupId","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node group id</p>\\n","line":71,"rawdescription":"\\nNode group id"},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node id in svg</p>\\n","line":69,"rawdescription":"\\nNode id in svg"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node label</p>\\n","line":67,"rawdescription":"\\nNode label"},{"name":"ontologyId","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Ontology id of cell type</p>\\n","line":73,"rawdescription":"\\nOntology id of cell type"}],"indexSignatures":[],"kind":171,"description":"<p>Interface for node entries</p>\\n","rawdescription":"\\nInterface for node entries","methods":[],"extends":[]},{"name":"NodeTooltipData","id":"interface-NodeTooltipData-68516f69f2ca0106772f98166ac1443c75d9e261757bbeccf8d61ef8169d5402c9a2eb17d73d22d427f494237777dbf15059b3bef3f51bdaae4cdd0e47c144d0","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  SimpleChanges,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { TooltipComponent } from \'@hra-ui/components/atoms\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node id in svg */\\n  id: string;\\n  /** Node group id */\\n  groupId: string;\\n  /** Ontology id of cell type */\\n  ontologyId: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.ShadowDom,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Highlighted ontology id */\\n  @Input() highlightId?: string;\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\\n\\n  /** Emits node id when clicked */\\n  @Output() readonly nodeClick = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /** Crosswalk element of svg */\\n  private crosswalkEl?: Element;\\n\\n  /** List of highlighted svg elements */\\n  private highlightedElements: Element[] = [];\\n\\n  /**\\n   * Updates the highlighting based on current highlight id\\n   * @param changes\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'highlightId\' in changes) {\\n      this.resetHighlight();\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Highlights cells that match highlightId\\n   */\\n  private setHighlight() {\\n    const { mapping, highlightId, crosswalkEl } = this;\\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\\n    if (!entry || !crosswalkEl) {\\n      return;\\n    }\\n\\n    const encodedId = this.encodeId(entry.id);\\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\\n    if (!element) {\\n      return;\\n    }\\n\\n    const gElement = element.nodeName === \'g\' ? element : (element.parentElement as Element);\\n    const id = gElement.id;\\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\\n    this.highlightedElements = Array.from(elements);\\n    elements.forEach((el) => el.classList.add(\'click-active\'));\\n  }\\n\\n  /**\\n   * Resets all highlighted elements in the svg\\n   */\\n  private resetHighlight(): void {\\n    for (const el of this.highlightedElements) {\\n      el.classList.remove(\'click-active\');\\n    }\\n    this.highlightedElements = [];\\n  }\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    this.crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\') ?? undefined;\\n    if (this.crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, this.crosswalkEl);\\n      this.attachCrosswalkHover(this.crosswalkEl);\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe((event) => this.onCrosswalkHover(event));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\\n    this.attachEvent(el, \'click\').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    if (event) {\\n      const node = this.getNode(event);\\n      if (node) {\\n        this.nodeHoverData$.next({\\n          node: node.label,\\n          origin: {\\n            x: event.clientX,\\n            y: event.clientY,\\n          },\\n        });\\n        this.nodeHover.emit(node); //emits node entry\\n      }\\n    } else {\\n      this.nodeHoverData$.next(undefined);\\n      this.nodeHover.emit();\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const cellMatch = this.mapping.find(\\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\\n      );\\n      if (cellMatch) {\\n        return cellMatch;\\n      } else {\\n        const groupMatch = this.mapping.find(\\n          (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\\n        );\\n        if (groupMatch) {\\n          return groupMatch;\\n        }\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Turns normal string into decoded SVG id\\n   * @param id id\\n   * @returns Encoded id\\n   */\\n  private encodeId(id: string): string {\\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\\n    return id.replace(/[^a-z0-9-]/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","properties":[{"name":"node","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Node name</p>\\n","line":59,"rawdescription":"\\nNode name"},{"name":"origin","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"<p>Center point of hovered node in screen coordinates</p>\\n","line":61,"rawdescription":"\\nCenter point of hovered node in screen coordinates"}],"indexSignatures":[],"kind":171,"description":"<p>Node tooltip data</p>\\n","rawdescription":"\\nNode tooltip data","methods":[],"extends":[]},{"name":"SectionItem","id":"interface-SectionItem-c9055aff91afa3006a565f77a59d0bb3d0b0ae6234158ca31fd858b678a4c8ba8e73772241ae414572f0acfba7c2c934af443f6efc50a96fe368c415b5d850a8","file":"src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","properties":[{"name":"data","deprecated":false,"deprecationMessage":"","type":"DataItem","indexKey":"","optional":false,"description":"<p>A DateItem property that represents a section and its data</p>\\n","line":18,"rawdescription":"\\nA DateItem property that represents a section and its data"},{"name":"isLastItem","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"<p>A boolean property that represents the last item of a section</p>\\n","line":20,"rawdescription":"\\nA boolean property that represents the last item of a section"},{"name":"section","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>A number property that represents the section number</p>\\n","line":16,"rawdescription":"\\nA number property that represents the section number"}],"indexSignatures":[],"kind":171,"description":"<p>An item which represents a section with a data item and an indicator for the last item in the section</p>\\n","rawdescription":"\\nAn item which represents a section with a data item and an indicator for the last item in the section","methods":[],"extends":[]},{"name":"SourceListItem","id":"interface-SourceListItem-3f56281b3b2ba13bbb5c2b3896e7661ecb6baf009396cc0d9bf528b27260fe5ca67e778f87ea15a75a8f3780e63190d925f72bd25199f65b464b313b2da3ffa5","file":"src/lib/source-list/source-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { SelectionModel } from \'@angular/cdk/collections\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatCheckboxModule } from \'@angular/material/checkbox\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatSort, MatSortModule } from \'@angular/material/sort\';\\nimport { MatTableDataSource, MatTableModule } from \'@angular/material/table\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { EmptyBiomarkerComponent, LabelBoxComponent } from \'@hra-ui/components/atoms\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\\nexport interface SourceListItem {\\n  /** List of authors for the source */\\n  authors: string[];\\n  /** Year dataset was released */\\n  year: number;\\n  /** Title of the dataset in the SourceList */\\n  title: string;\\n  /** DOI of dataset */\\n  doi: string;\\n  /** Label of the dataset in the SourceList */\\n  label: string;\\n  /** Link to the dataset in the SourceList */\\n  link: string;\\n}\\n\\n/** This component shows list of sources with title and links to the datasets */\\n@Component({\\n  selector: \'hra-source-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTableModule,\\n    MatIconModule,\\n    MatSortModule,\\n    LabelBoxComponent,\\n    EmptyBiomarkerComponent,\\n    MatCheckboxModule,\\n    HoverDirective,\\n  ],\\n  templateUrl: \'./source-list.component.html\',\\n  styleUrls: [\'./source-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SourceListComponent<T extends SourceListItem> implements OnChanges {\\n  /** List of sources with titles and links displayed to the user */\\n  @Input() sources: T[] = [];\\n\\n  /** Text that appears in the empty biomarker collaborate button */\\n  @Input() collaborateText = \'\';\\n\\n  /** Text that appears in the empty biomarker message */\\n  @Input() message = \'\';\\n\\n  /** Whether to show the biomarker table */\\n  showTable = true;\\n\\n  /** Current source selection */\\n  selection = new SelectionModel<T>(true, []);\\n\\n  /** Data source for table */\\n  dataSource = new MatTableDataSource<T>();\\n\\n  /** Columns to display in the sources list */\\n  displayedColumns: string[] = [\'select\', \'authors\', \'year\', \'title\', \'link\'];\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly collaborateClick = new EventEmitter<void>();\\n\\n  /** Emits when source selection changed */\\n  @Output() readonly selectionChanged = new EventEmitter<T[]>();\\n\\n  /** Sorter for sources list */\\n  @ViewChild(MatSort) set sort(sorter: MatSort) {\\n    this.dataSource.sort = sorter || null;\\n  }\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** On sources change, resets selection and selects all sources */\\n  ngOnChanges(changes: SimpleChanges) {\\n    if (\'sources\' in changes) {\\n      this.selection.clear();\\n      this.dataSource.data = this.sources;\\n      this.toggleAllRows();\\n    }\\n  }\\n\\n  /**\\n   * It changes the value of showTable to false if value it true\\n   * and vice versa\\n   */\\n  toggleTable(): void {\\n    this.showTable = !this.showTable;\\n    this.ga.event(\'source_table_toggle\', this.showTable.toString());\\n  }\\n\\n  /**\\n   * Logs source link click\\n   * @param item Source list item\\n   */\\n  sourceLinkClicked(item: SourceListItem): void {\\n    this.ga.event(\'source_link_clicked\', \'link_click\', item.link);\\n  }\\n\\n  /** Whether the number of selected elements matches the total number of rows. */\\n  isAllSelected() {\\n    const numSelected = this.selection.selected.length;\\n    const numRows = this.dataSource.data.length;\\n    return numSelected === numRows;\\n  }\\n\\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\\n  toggleAllRows() {\\n    if (this.isAllSelected()) {\\n      this.selection.clear();\\n      this.selectionChanged.emit(this.selection.selected);\\n      return;\\n    }\\n\\n    this.dataSource.data.forEach((row) => this.selection.select(row));\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n\\n  /** Toggles selection status of a row */\\n  toggleRow(row: T) {\\n    this.selection.toggle(row);\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n}\\n","properties":[{"name":"authors","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":false,"description":"<p>List of authors for the source</p>\\n","line":26,"rawdescription":"\\nList of authors for the source"},{"name":"doi","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>DOI of dataset</p>\\n","line":32,"rawdescription":"\\nDOI of dataset"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Label of the dataset in the SourceList</p>\\n","line":34,"rawdescription":"\\nLabel of the dataset in the SourceList"},{"name":"link","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Link to the dataset in the SourceList</p>\\n","line":36,"rawdescription":"\\nLink to the dataset in the SourceList"},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Title of the dataset in the SourceList</p>\\n","line":30,"rawdescription":"\\nTitle of the dataset in the SourceList"},{"name":"year","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Year dataset was released</p>\\n","line":28,"rawdescription":"\\nYear dataset was released"}],"indexSignatures":[],"kind":171,"description":"<p>SourceListItem interface contains title and link to the dataset for the SourceList</p>\\n","rawdescription":"\\nSourceListItem interface contains title and link to the dataset for the SourceList","methods":[],"extends":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"BiomarkerTableDataCardComponent","id":"component-BiomarkerTableDataCardComponent-c9055aff91afa3006a565f77a59d0bb3d0b0ae6234158ca31fd858b678a4c8ba8e73772241ae414572f0acfba7c2c934af443f6efc50a96fe368c415b5d850a8","file":"src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table-data-card","styleUrls":["./biomarker-table-data-card.component.scss"],"styles":[],"templateUrl":["./biomarker-table-data-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"data","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nNested list of DataItems for each section which is displayed to the user","description":"<p>Nested list of DataItems for each section which is displayed to the user</p>\\n","line":33,"type":"DataItem[][]","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"sectionItems","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"SectionItem[]","indexKey":"","optional":false,"description":"<p>Converted nested array of DataItem into Flat array of SectionItem</p>\\n","line":36,"rawdescription":"\\nConverted nested array of DataItem into Flat array of SectionItem"}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatTableModule","type":"module"}],"description":"<p>This component displays a table with sections, where each section contains a list of items with a label and a value.</p>\\n","rawdescription":"\\nThis component displays a table with sections, where each section contains a list of items with a label and a value.","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n  font-family: Metropolis;\\n\\n  .mat-mdc-cell {\\n    padding: 0.25rem 0rem;\\n  }\\n\\n  .mat-mdc-row {\\n    height: fit-content;\\n  }\\n\\n  .no-border {\\n    border: none;\\n  }\\n\\n  .label {\\n    color: rgba(vars.$primary);\\n    padding-right: 3rem;\\n    font-weight: 500;\\n  }\\n\\n  .value {\\n    color: rgba(vars.$primary-400);\\n    font-weight: 400;\\n  }\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n}\\n","styleUrl":"./biomarker-table-data-card.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges"],"templateData":"<div class=\\"no-data\\" *ngIf=\\"sectionItems.length === 0\\">No data</div>\\n<table mat-table *ngIf=\\"sectionItems.length > 0\\" [dataSource]=\\"sectionItems\\">\\n  <caption class=\\"sr-only\\">\\n    Biomarker Table Data Card\\n  </caption>\\n\\n  \x3c!-- Label Column --\x3e\\n  <ng-container matColumnDef=\\"label\\">\\n    <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Label</th>\\n    <td class=\\"label\\" mat-cell *matCellDef=\\"let element\\" [class.no-border]=\\"!element.isLastItem\\">\\n      {{ element.data.label }}\\n    </td>\\n  </ng-container>\\n\\n  \x3c!-- Value Column --\x3e\\n  <ng-container matColumnDef=\\"value\\">\\n    <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Value</th>\\n    <td class=\\"value\\" mat-cell *matCellDef=\\"let element\\" [class.no-border]=\\"!element.isLastItem\\">\\n      {{ element.data.value }}\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-row *matRowDef=\\"let row; columns: [\'label\', \'value\']\\"></tr>\\n</table>\\n"},{"name":"BiomarkerTableDataIconComponent","id":"component-BiomarkerTableDataIconComponent-0225093f43fb8787523fb046a1f49b1734c4df30a8f9cfcf1c3b6e2e6b48ea54ddb78db16c2998b10381370a41c7e3b745c0ef289f07672aa75e3932caa36a87","file":"src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table-data-icon","styleUrls":["./biomarker-table-data-icon.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRepresents the color of the icon","description":"<p>Represents the color of the icon</p>\\n","line":16,"type":"string","decorators":[]},{"name":"size","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRepresents the size of the icon","description":"<p>Represents the size of the icon</p>\\n","line":19,"type":"number","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Describes the data icon for the table</p>\\n","rawdescription":"\\n\\nDescribes the data icon for the table\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, HostBinding, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Describes the data icon for the table\\n */\\n@Component({\\n  selector: \'hra-biomarker-table-data-icon\',\\n  imports: [CommonModule],\\n  template: \'\',\\n  styleUrls: [\'./biomarker-table-data-icon.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataIconComponent {\\n  /** Represents the color of the icon */\\n  @HostBinding(\'style.background-color\') @Input() color = \'\';\\n\\n  /** Represents the size of the icon  */\\n  @HostBinding(\'style.--radius.rem\') @Input() size = 0;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  border-radius: 50%;\\n  --radius: 0.625rem;\\n  width: var(--radius);\\n  height: var(--radius);\\n}\\n","styleUrl":"./biomarker-table-data-icon.component.scss"}],"stylesData":"","extends":[]},{"name":"ContactModalComponent","id":"component-ContactModalComponent-a06e7b9d6090af69d4e955b4d696dcbb5c6fc10789395a14d1c43a2fe9462289f4618ee0f3d69e38da941de0f1f4b1da5652596b5f7597a9979d50a323bd4dc3","file":"src/lib/contact-modal/contact-modal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-contact-modal","styleUrls":["./contact-modal.component.scss"],"styles":[],"templateUrl":["./contact-modal.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product logo URL to displayed on the left side.","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":48,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product title to displayed on the left side.","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":51,"type":"string","decorators":[]}],"outputsClass":[{"name":"closeClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the cancel button or close icon is clicked","description":"<p>Emits when the cancel button or close icon is clicked</p>\\n","line":57,"type":"EventEmitter"},{"name":"submitClick","defaultValue":"new EventEmitter<ContactData>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the submit button is clicked and all the values are appropriate.","description":"<p>Emits when the submit button is clicked and all the values are appropriate.</p>\\n","line":54,"type":"EventEmitter"}],"propertiesClass":[{"name":"contactData","defaultValue":"EMPTY_CONTACT_DATA","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Asigns the undefined initially to all the input fields.</p>\\n","line":65,"rawdescription":"\\nAsigns the undefined initially to all the input fields."},{"name":"defaultMail","defaultValue":"\'infoccf@iu.edu\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Default email address</p>\\n","line":68,"rawdescription":"\\nDefault email address","modifierKind":[148]}],"methodsClass":[{"name":"submit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nIt emits the updated value of contact data","description":"<p>It emits the updated value of contact data</p>\\n"},{"name":"updateData","args":[{"name":"key","type":"K","deprecated":false,"deprecationMessage":""},{"name":"value","type":"ContactData","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":["K"],"line":71,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nUpdates the contact data object with a new value for a given key.","description":"<p>Updates the contact data object with a new value for a given key.</p>\\n","jsdoctags":[{"name":"key","type":"K","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"value","type":"ContactData","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"EmailInputComponent","type":"component"},{"name":"MarkdownModule","type":"module"},{"name":"RequiredTextboxComponent","type":"component"},{"name":"RequiredInputComponent","type":"component"}],"description":"<p>Contact modal component.</p>\\n","rawdescription":"\\n\\nContact modal component.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from \'@hra-ui/components/atoms\';\\nimport { produce } from \'immer\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\\n */\\nexport interface ContactData {\\n  /**  The email address of the person submitting the form. */\\n  email: string;\\n  /** The subject line of the message being sent. */\\n  subject: string;\\n  /** The body of the message being sent. */\\n  message: string;\\n}\\n\\n/** Initial empty contact data */\\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n};\\n\\n/**\\n * Contact modal component.\\n */\\n@Component({\\n  selector: \'hra-contact-modal\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    EmailInputComponent,\\n    MarkdownModule,\\n    RequiredTextboxComponent,\\n    RequiredInputComponent,\\n  ],\\n  templateUrl: \'./contact-modal.component.html\',\\n  styleUrls: [\'./contact-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactModalComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Emits when the submit button is clicked and all the values are appropriate. */\\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\\n\\n  /** Emits when the cancel button or close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n\\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\\n  get disableSubmit(): boolean {\\n    return Object.values(this.contactData).some((value) => value === undefined);\\n  }\\n\\n  /** Asigns the undefined initially to all the input fields. */\\n  contactData = EMPTY_CONTACT_DATA;\\n\\n  /** Default email address */\\n  readonly defaultMail = \'infoccf@iu.edu\';\\n\\n  /** Updates the contact data object with a new value for a given key. */\\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\\n    this.contactData = produce(this.contactData, (draft) => {\\n      draft[key] = value;\\n    });\\n  }\\n\\n  /** It emits the updated value of contact data */\\n  submit(): void {\\n    this.submitClick.emit(this.contactData as ContactData);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  position: relative;\\n  padding-top: 2rem;\\n  margin-right: 1.5rem;\\n  margin-left: 1.5rem;\\n\\n  .product-logo {\\n    display: flex;\\n    align-items: center;\\n\\n    .product-logo-image {\\n      margin-right: 1rem;\\n    }\\n\\n    .product-title {\\n      color: #990000;\\n      margin: 0;\\n      font-weight: 600;\\n    }\\n  }\\n\\n  .close {\\n    position: absolute;\\n    top: 1.5rem;\\n    right: 0rem;\\n  }\\n\\n  .submit {\\n    margin-right: 1.5rem;\\n  }\\n\\n  .submit,\\n  .cancel {\\n    width: 7.5rem;\\n  }\\n\\n  .email {\\n    margin-top: 1.25rem;\\n  }\\n\\n  .message-field {\\n    margin-top: 1rem;\\n  }\\n\\n  .subject-field {\\n    margin-top: 1rem;\\n  }\\n\\n  .desc {\\n    margin-top: 1.5rem;\\n  }\\n}\\n","styleUrl":"./contact-modal.component.scss"}],"stylesData":"","extends":[],"accessors":{"disableSubmit":{"name":"disableSubmit","getSignature":{"name":"disableSubmit","type":"boolean","returnType":"boolean","line":60,"rawdescription":"\\nA function to disable the submit button. If all the values are in approproiate format, then it will be enabled.","description":"<p>A function to disable the submit button. If all the values are in approproiate format, then it will be enabled.</p>\\n"}}},"templateData":"<a class=\\"product-logo\\">\\n  <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n  <h2 class=\\"product-title\\">{{ productTitle }}</h2>\\n</a>\\n\\n<button class=\\"close\\" mat-icon-button (click)=\\"closeClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n\\n<hra-email-input\\n  class=\\"email\\"\\n  placeholder=\\"Example@domain.com\\"\\n  (emailChange)=\\"updateData(\'email\', $event)\\"\\n  [defaultMail]=\\"defaultMail\\"\\n>\\n</hra-email-input>\\n\\n<hra-required-input label=\\"Subject\\" (inputChange)=\\"updateData(\'subject\', $event)\\" class=\\"subject-field\\">\\n</hra-required-input>\\n\\n<hra-required-textbox\\n  class=\\"message-field\\"\\n  label=\\"Message\\"\\n  placeholder=\\"Enter your message here\\"\\n  (messageChange)=\\"updateData(\'message\', $event)\\"\\n>\\n</hra-required-textbox>\\n\\n<markdown class=\\"desc\\" data=\\"Please allow two business days for a response to each inquiry.\\"></markdown>\\n\\n<button mat-flat-button class=\\"submit\\" color=\\"primary\\" [disabled]=\\"disableSubmit\\" (click)=\\"submit()\\">Submit</button>\\n<button mat-stroked-button class=\\"cancel\\" color=\\"accent\\" (click)=\\"closeClick.emit()\\">Cancel</button>\\n"},{"name":"FooterComponent","id":"component-FooterComponent-cca80f9c5541ff2d35f2b4f91e8b734849925ac87d24c426c01922b55b6d2c2185199337bc91dbadc284184b92289821eaafc66b70b5a1307d1fac6fd15c44c4","file":"src/lib/footer/footer.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-footer","styleUrls":["./footer.component.scss"],"styles":[],"templateUrl":["./footer.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"aboutLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for about link","description":"<p>Input for about link</p>\\n","line":74,"type":"any","decorators":[]},{"name":"downloadFormats","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDifferent download formats options displayed to the user","description":"<p>Different download formats options displayed to the user</p>\\n","line":71,"type":"T[]","decorators":[]},{"name":"embed","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for embed link in HRA Portal","description":"<p>Input for embed link in HRA Portal</p>\\n","line":68,"type":"any","decorators":[]},{"name":"illustrationMetadata","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for Illustration metadata page link in HRA Portal","description":"<p>Input for Illustration metadata page link in HRA Portal</p>\\n","line":65,"type":"any","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product logo URL to displayed on the left side.","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":59,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product title to displayed on the left side.","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":62,"type":"string","decorators":[]},{"name":"size","defaultValue":"\'large\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nHost binding of footer component","description":"<p>Host binding of footer component</p>\\n","line":56,"type":"\\"small\\" | \\"large\\"","decorators":[]}],"outputsClass":[{"name":"contactClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the contact button is clicked","description":"<p>Emits when the contact button is clicked</p>\\n","line":91,"type":"EventEmitter"},{"name":"download","defaultValue":"new EventEmitter<T>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits the selected download format","description":"<p>Emits the selected download format</p>\\n","line":77,"type":"EventEmitter"}],"propertiesClass":[{"name":"downloadListOpen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the download list panel is open</p>\\n","line":88,"rawdescription":"\\nWhether the download list panel is open"},{"name":"DOWNLOADS_LIST_POSITION","defaultValue":"DOWNLOADS_LIST_POSITION","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Download list popup overlay positioning</p>\\n","line":80,"rawdescription":"\\nDownload list popup overlay positioning","modifierKind":[148]}],"methodsClass":[{"name":"aboutClicked","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":99,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs event when about button clicked\\n","description":"<p>Logs event when about button clicked</p>\\n"},{"name":"handleOutsideClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":107,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIgnore if button is clicked, otherwise close the download list panel\\n","description":"<p>Ignore if button is clicked, otherwise close the download list panel</p>\\n","jsdoctags":[{"name":{"pos":3092,"end":3097,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":3086,"end":3091,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Mouse event</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"OverlayModule","type":"module"},{"name":"MatListModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Component for footer that displays its content at the bottom of the page with different action buttons.</p>\\n","rawdescription":"\\n\\nComponent for footer that displays its content at the bottom of the page with different action buttons.\\n","type":"component","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatListModule } from \'@angular/material/list\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk/state\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/**\\n * Base type for different download format options.\\n */\\nexport interface DownloadFormat {\\n  /**\\n   * User readable format label\\n   */\\n  label: string;\\n}\\n\\n/**\\n * Positioning value for the download list popup\\n */\\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n];\\n\\n/**\\n * Component for footer that displays its content at the bottom of the page with different action buttons.\\n */\\n@Component({\\n  selector: \'hra-footer\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\\n  templateUrl: \'./footer.component.html\',\\n  styleUrls: [\'./footer.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\\n  /** Host binding of footer component */\\n  @HostBinding(\'class\')\\n  @Input()\\n  size: \'small\' | \'large\' = \'large\';\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Input for Illustration metadata page link in HRA Portal */\\n  @Input() illustrationMetadata = EMPTY_LINK;\\n\\n  /** Input for embed link in HRA Portal */\\n  @Input() embed = EMPTY_LINK;\\n\\n  /** Different download formats options displayed to the user */\\n  @Input() downloadFormats: T[] = [];\\n\\n  /** Input for about link */\\n  @Input() aboutLink = EMPTY_LINK;\\n\\n  /** Emits the selected download format */\\n  @Output() readonly download = new EventEmitter<T>();\\n\\n  /** Download list popup overlay positioning */\\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\\n\\n  /** Gets whether the footer required is small */\\n  get isSmall(): boolean {\\n    return this.size === \'small\';\\n  }\\n\\n  /** Whether the download list panel is open */\\n  downloadListOpen = false;\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /**\\n   * Logs event when about button clicked\\n   */\\n  aboutClicked(): void {\\n    this.ga.event(\'about_icon_click\', \'link_click\');\\n  }\\n\\n  /**\\n   * Ignore if button is clicked, otherwise close the download list panel\\n   * @param event Mouse event\\n   */\\n  handleOutsideClick(event: MouseEvent): void {\\n    const target = event.target as HTMLElement;\\n    if ([\'download\', \'download\\\\nDownload\'].includes(target.innerText)) {\\n      return;\\n    } else {\\n      this.downloadListOpen = false;\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  padding: 2rem;\\n  border-top: 1px solid rgba(vars.$light-dividers);\\n  align-items: center;\\n  background: rgba(vars.$primary-lighter);\\n  gap: 2rem;\\n  height: 100%;\\n  width: 100%;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n\\n  .controls {\\n    display: flex;\\n    justify-content: flex-end;\\n  }\\n  .filler {\\n    display: none;\\n  }\\n\\n  .product-title {\\n    color: #990000;\\n    margin-right: 0rem;\\n  }\\n\\n  a {\\n    cursor: pointer;\\n    display: flex;\\n  }\\n\\n  .product-logo-image {\\n    height: 1.2rem;\\n    margin-right: 1rem;\\n  }\\n\\n  button {\\n    background: rgba(vars.$light-dividers);\\n    height: 1.75rem;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    padding: 0;\\n    min-width: 10rem;\\n    color: rgba(vars.$primary);\\n\\n    mat-icon,\\n    span {\\n      height: 1rem;\\n      width: 1rem;\\n      font-size: 1rem;\\n      margin-right: 0.25rem;\\n    }\\n  }\\n}\\n\\n::ng-deep {\\n  .download-options-panel {\\n    box-shadow: 0.1rem 0.1rem 0.4rem 0.2rem #dad7d7;\\n    background-color: #ffffff;\\n  }\\n}\\n::ng-deep .download,\\n::ng-deep .data-download {\\n  .mdc-button__label {\\n    display: flex;\\n    align-items: center;\\n  }\\n}\\n","styleUrl":"./footer.component.scss"}],"stylesData":"","extends":[],"accessors":{"isSmall":{"name":"isSmall","getSignature":{"name":"isSmall","type":"boolean","returnType":"boolean","line":83,"rawdescription":"\\nGets whether the footer required is small","description":"<p>Gets whether the footer required is small</p>\\n"}}},"templateData":"<div *ngIf=\\"isSmall\\">\\n  <a class=\\"product-logo-link\\">\\n    <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n    <div class=\\"product-title\\">{{ productTitle }}</div>\\n  </a>\\n</div>\\n<div class=\\"filler\\" *ngIf=\\"isSmall\\"></div>\\n\\n<button class=\\"button\\" mat-button [hraLink]=\\"embed\\" disableRipple>\\n  <mat-icon>code</mat-icon>\\n  Embed Illustration\\n</button>\\n\\n<button\\n  class=\\"button download\\"\\n  mat-button\\n  (click)=\\"downloadListOpen = !downloadListOpen\\"\\n  type=\\"button\\"\\n  cdkOverlayOrigin\\n  #anchor=\\"cdkOverlayOrigin\\"\\n  disableRipple\\n>\\n  <span class=\\"material-symbols-outlined\\"> download </span>\\n  Download Illustration\\n</button>\\n\\n<button class=\\"button illustration-metadata\\" mat-button [hraLink]=\\"illustrationMetadata\\" disableRipple>\\n  <mat-icon>info_outlined</mat-icon>\\n  Illustration Metadata\\n</button>\\n\\n\x3c!-- <button class=\\"button data-download\\" *ngIf=\\"!isSmall\\" mat-button disableRipple>\\n  <span class=\\"material-symbols-outlined\\"> download </span>\\n  Download Data\\n</button> --\x3e\\n\\n<button class=\\"button contact\\" *ngIf=\\"isSmall\\" mat-button (mouseup)=\\"contactClick.emit()\\" disableRipple>\\n  <mat-icon>mail_outlined</mat-icon>\\n  Contact\\n</button>\\n\\n<button class=\\"button ftu-explorer\\" *ngIf=\\"isSmall\\" mat-button [hraLink]=\\"aboutLink\\" disableRipple>\\n  <mat-icon>open_in_new</mat-icon>\\n  HRA Portal\\n</button>\\n\\n<div class=\\"filler\\" *ngIf=\\"!isSmall\\"></div>\\n\\n<ng-template\\n  cdkConnectedOverlay\\n  [cdkConnectedOverlayOrigin]=\\"anchor\\"\\n  [cdkConnectedOverlayOpen]=\\"downloadListOpen\\"\\n  [cdkConnectedOverlayPositions]=\\"DOWNLOADS_LIST_POSITION\\"\\n  [cdkConnectedOverlayOffsetX]=\\"0\\"\\n  cdkConnectedOverlayHasBackdrop=\\"false\\"\\n  cdkConnectedOverlayPush=\\"false\\"\\n  cdkConnectedOverlayPanelClass=\\"download-options-panel\\"\\n  (overlayOutsideClick)=\\"handleOutsideClick($event)\\"\\n>\\n  <mat-action-list>\\n    <button\\n      mat-list-item\\n      *ngFor=\\"let format of downloadFormats\\"\\n      (click)=\\"downloadListOpen = false; download.emit(format)\\"\\n    >\\n      {{ format.label }}\\n    </button>\\n  </mat-action-list>\\n</ng-template>\\n"},{"name":"FullscreenContainerComponent","id":"component-FullscreenContainerComponent-68f90299b5a74956fd0797d6dd9814a081133d4bb75fc09ac3e05c5d3728161722a3f2687d177d3740bd62fb856a2830c315e5002fbcfc6561e873e161d993a2","file":"src/lib/fullscreen/fullscreen-container.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-container","styleUrls":[],"styles":["\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"fullscreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA boolean input property that controls the fullscreen mode","description":"<p>A boolean input property that controls the fullscreen mode</p>\\n","line":37,"type":"boolean","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"content","deprecated":false,"deprecationMessage":"","type":"QueryList<FullscreenContentComponent>","indexKey":"","optional":true,"description":"<p>A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component&#39;s content area</p>\\n","line":34,"rawdescription":"\\nA property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component\'s content area","decorators":[{"name":"ContentChildren","stringifiedArguments":"FullscreenContentComponent"}],"modifierKind":[170,148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"FullscreenContentComponent","type":"component"}],"description":"<p>A component that wraps any child components of type FullscreenContentComponent and\\nsets their isFullScreen property to true or false based on its own fullscreen input property</p>\\n","rawdescription":"\\nA component that wraps any child components of type FullscreenContentComponent and\\nsets their isFullScreen property to true or false based on its own fullscreen input property\\n","type":"component","sourceCode":"import {\\n  AfterContentInit,\\n  ChangeDetectionStrategy,\\n  Component,\\n  ContentChildren,\\n  Input,\\n  OnChanges,\\n  QueryList,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { FullscreenContentComponent } from \'./fullscreen-content.component\';\\n\\n/** A component that wraps any child components of type FullscreenContentComponent and\\n * sets their isFullScreen property to true or false based on its own fullscreen input property\\n */\\n@Component({\\n  selector: \'hra-fullscreen-container\',\\n  imports: [CommonModule, FullscreenContentComponent],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [\\n    `\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    `,\\n  ],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenContainerComponent implements AfterContentInit, OnChanges {\\n  /** A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component\'s content area */\\n  @ContentChildren(FullscreenContentComponent)\\n  readonly content?: QueryList<FullscreenContentComponent>;\\n\\n  /** A boolean input property that controls the fullscreen mode */\\n  @Input() fullscreen = false;\\n\\n  /** It calls the updateFullscreenMode method to set the isFullScreen property of the child\\n   * FullscreenContentComponent instances based on the value of the fullscreen input property\\n   */\\n  ngAfterContentInit(): void {\\n    this.updateFullscreenMode();\\n  }\\n\\n  /** It checks if the fullscreen input property has changed, and calls the updateFullscreenMode method if it has */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'fullscreen\' in changes) {\\n      this.updateFullscreenMode();\\n    }\\n  }\\n\\n  /** A private method that sets the isFullScreen property of each child FullscreenContentComponent based on the value of the fullscreen  */\\n  private updateFullscreenMode(): void {\\n    this.content?.forEach((content) => {\\n      content.isFullScreen = this.fullscreen;\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    \\n","extends":[],"implements":["AfterContentInit","OnChanges"]},{"name":"FullscreenContentComponent","id":"component-FullscreenContentComponent-39c8af58e140b74975c0fddc8a85682c02246502aae3088af1b0a412d0b6e068a04f176ac062f424ce4b16466e2261cc480bfcf1be752443c7dea296c8d1ee71","file":"src/lib/fullscreen/fullscreen-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-content","styleUrls":["./fullscreen-content.component.scss"],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"isFullScreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":39,"rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","decorators":[{"name":"HostBinding","stringifiedArguments":"\'class.fullscreen-on\'"},{"name":"HostBinding","stringifiedArguments":"\'@animateResize\'"}],"modifierKind":[170,170]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"@animateResize","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":39,"type":"boolean","decorators":[]},{"name":"class.fullscreen-on","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":39,"type":"boolean","decorators":[]}],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>A component that displays its content in fullscreen mode when its isFullScreen property is set to true</p>\\n","rawdescription":"\\nA component that displays its content in fullscreen mode when its isFullScreen property is set to true","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { animate, state, style, transition, trigger } from \'@angular/animations\';\\n\\n/** A component that displays its content in fullscreen mode when its isFullScreen property is set to true */\\n@Component({\\n  selector: \'hra-fullscreen-content\',\\n  imports: [CommonModule],\\n  animations: [\\n    trigger(\'animateResize\', [\\n      state(\\n        \'true\',\\n        style({\\n          width: \'100%\',\\n          position: \'absolute\',\\n          right: \'0\',\\n        }),\\n      ),\\n      state(\\n        \'false\',\\n        style({\\n          width: \'46.3125rem\',\\n          position: \'absolute\',\\n          right: \'0\',\\n        }),\\n      ),\\n      transition(\'true <=> false\', [animate(\'0.5s ease\')]),\\n    ]),\\n  ],\\n  template: \'<ng-content></ng-content>\',\\n  styleUrls: [\'./fullscreen-content.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenContentComponent {\\n  /** This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true */\\n  @HostBinding(\'class.fullscreen-on\')\\n  /** This binds the isFullScreen property to the @animateResize when isFullScreen is true */\\n  @HostBinding(\'@animateResize\')\\n  isFullScreen = false;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  overflow-y: hidden;\\n  background: white;\\n}\\n","styleUrl":"./fullscreen-content.component.scss"}],"stylesData":"","extends":[]},{"name":"HeaderComponent","id":"component-HeaderComponent-067f1b7a720ac733b080b6fa6622157f23840366190590a2e91995a4e743deb0a9e26c301bb7e5a11d31ebca2fc1a31b31c1df859b516f3ae2019a082864ddbf","file":"src/lib/header/header.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-header","styleUrls":["./header.component.scss"],"styles":[],"templateUrl":["./header.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"aboutLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for about link","description":"<p>Input for about link</p>\\n","line":40,"type":"any","decorators":[]},{"name":"appTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for app title to show on the left side.\\n","description":"<p>Input for app title to show on the left side.</p>\\n","line":34,"type":"string","decorators":[]},{"name":"hraPortal","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for HRA Portal link","description":"<p>Input for HRA Portal link</p>\\n","line":43,"type":"any","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for product logo URL to displayed on the left side.\\n","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":24,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for product title to displayed on the left side.\\n","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":29,"type":"string","decorators":[]},{"name":"productTitleLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for Product Title link","description":"<p>Input for Product Title link</p>\\n","line":37,"type":"any","decorators":[]}],"outputsClass":[{"name":"contactClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the contact button is clicked","description":"<p>Emits when the contact button is clicked</p>\\n","line":46,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[{"name":"aboutClicked","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":54,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs event when about button clicked\\n","description":"<p>Logs event when about button clicked</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatRippleModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Header component, displays on top of every page.</p>\\n","rawdescription":"\\n\\nHeader component, displays on top of every page.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/**\\n * Header component, displays on top of every page.\\n */\\n@Component({\\n  selector: \'hra-header\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatRippleModule, LinkDirective],\\n  templateUrl: \'./header.component.html\',\\n  styleUrls: [\'./header.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HeaderComponent {\\n  /**\\n   * Input for product logo URL to displayed on the left side.\\n   */\\n  @Input() productLogoUrl = \'\';\\n\\n  /**\\n   * Input for product title to displayed on the left side.\\n   */\\n  @Input() productTitle = \'\';\\n\\n  /**\\n   * Input for app title to show on the left side.\\n   */\\n  @Input() appTitle = \'\';\\n\\n  /** Input for Product Title link */\\n  @Input() productTitleLink = EMPTY_LINK;\\n\\n  /** Input for about link */\\n  @Input() aboutLink = EMPTY_LINK;\\n\\n  /** Input for HRA Portal link */\\n  @Input() hraPortal = EMPTY_LINK;\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /**\\n   * Logs event when about button clicked\\n   */\\n  aboutClicked(): void {\\n    this.ga.event(\'about_icon_click\', \'link_click\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  align-items: center;\\n  height: 4rem;\\n  padding: 0 2rem;\\n\\n  @include utils.define-flex-filler();\\n\\n  h1 {\\n    // Reset margins for h1 elements\\n    margin: 0;\\n  }\\n\\n  .product {\\n    display: flex;\\n    align-items: center;\\n    text-decoration: none;\\n    // Style the ripple animation\\n    padding: 0 1rem;\\n    border-radius: 0.25rem;\\n\\n    &:hover {\\n      cursor: pointer;\\n    }\\n\\n    .text {\\n      margin-left: 1rem;\\n      font-weight: 600;\\n      color: vars.$accent-rgb;\\n    }\\n  }\\n\\n  .app {\\n    margin-left: 0.5rem;\\n  }\\n\\n  .button {\\n    background: rgba(vars.$light-dividers);\\n    height: 1.75rem;\\n    font-size: 0.75rem;\\n    font-weight: 500;\\n    padding: 0;\\n    width: 7.5rem;\\n    color: rgba(vars.$primary);\\n\\n    mat-icon {\\n      height: 1rem;\\n      width: 1rem;\\n      font-size: 1rem;\\n    }\\n  }\\n\\n  .explorer {\\n    .about {\\n      display: flex;\\n      height: 100%;\\n      text-decoration: none;\\n      align-items: center;\\n      color: rgba(vars.$primary);\\n      gap: 0.25rem;\\n    }\\n  }\\n\\n  .contact {\\n    margin-left: 1rem;\\n  }\\n\\n  @media (max-width: 30rem) {\\n    height: 4.5rem;\\n\\n    .product .text,\\n    .about .text {\\n      @include utils.sr-only();\\n    }\\n\\n    .product {\\n      height: 2.5rem;\\n      padding: 0 0.25rem;\\n\\n      .logo {\\n        width: 1.5rem;\\n        height: 1.5rem;\\n      }\\n    }\\n\\n    .app {\\n      font-size: 1rem;\\n      line-height: 1.5rem;\\n    }\\n\\n    .about {\\n      min-width: 2.5rem;\\n      width: 2.5rem;\\n      height: 2.5rem;\\n      padding: 0;\\n\\n      .icon {\\n        margin: 0;\\n      }\\n    }\\n  }\\n\\n  @media (max-width: 20rem) {\\n    padding: 0;\\n  }\\n\\n  @media (max-width: 22.5rem) {\\n    padding: 0 1rem;\\n  }\\n\\n  @media (min-height: 49.5rem) {\\n    height: 4.5rem;\\n  }\\n}\\n","styleUrl":"./header.component.scss"}],"stylesData":"","extends":[],"templateData":"<a class=\\"product\\" matRipple [hraLink]=\\"productTitleLink\\">\\n  <img class=\\"logo image\\" [src]=\\"productLogoUrl\\" alt=\\"Product Logo\\" aria-hidden=\\"true\\" />\\n  <h1 class=\\"text\\">{{ productTitle }}</h1>\\n</a>\\n<h1 class=\\"app text\\">{{ appTitle }}</h1>\\n\\n<div class=\\"filler\\"></div>\\n\\n<button class=\\"button explorer\\" mat-button (click)=\\"aboutClicked()\\" disableRipple>\\n  <a class=\\"about\\" [hraLink]=\\"aboutLink\\">\\n    <mat-icon class=\\"icon\\">info_outlined</mat-icon>\\n    <span class=\\"text\\">FTU Explorer</span>\\n  </a>\\n</button>\\n\\n\x3c!-- <button class=\\"button contact\\" mat-button (mouseup)=\\"contactClick.emit()\\" disableRipple>\\n  <mat-icon>mail_outlined</mat-icon>\\n  Contact\\n</button> --\x3e\\n"},{"name":"HraLandingPageIntroWcComponent","id":"component-HraLandingPageIntroWcComponent-5ed3baf6be8747b042c0edb03c646e246310bbb6ea02c9efb320827cf1bc26048fe90d63cc787c7fc0c5021b49d1222a3acfda6c433f47f1d31eae88297763db","file":"src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-ui-hra-landing-page-intro-wc","styleUrls":["./hra-landing-page-intro-wc.component.scss"],"styles":[],"templateUrl":["./hra-landing-page-intro-wc.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for FTU Explorer","description":"<p>Description for FTU Explorer</p>\\n","line":18,"type":"string","decorators":[]},{"name":"partners","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThank you message to partners","description":"<p>Thank you message to partners</p>\\n","line":21,"type":"string","decorators":[]},{"name":"readMore","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro Image file url","description":"<p>Intro Image file url</p>\\n","line":24,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro title for FTU Explorer","description":"<p>Intro title for FTU Explorer</p>\\n","line":15,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"}],"description":"<p>Component for LandingPage Intro - Web coomponent</p>\\n","rawdescription":"\\nComponent for LandingPage Intro - Web coomponent","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Component for LandingPage Intro - Web coomponent */\\n@Component({\\n  selector: \'hra-ui-hra-landing-page-intro-wc\',\\n  imports: [CommonModule, MarkdownModule],\\n  templateUrl: \'./hra-landing-page-intro-wc.component.html\',\\n  styleUrls: [\'./hra-landing-page-intro-wc.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HraLandingPageIntroWcComponent {\\n  /** Intro title for FTU Explorer */\\n  @Input() title = \'\';\\n\\n  /** Description for FTU Explorer */\\n  @Input() description = \'\';\\n\\n  /** Thank you message to partners */\\n  @Input() partners = \'\';\\n\\n  /** Intro Image file url */\\n  @Input() readMore = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  gap: 0.5rem;\\n  padding: 1.5rem 2rem 1.5rem 2rem;\\n  display: flex;\\n  flex-wrap: wrap;\\n\\n  .title {\\n    width: 100%;\\n    font-size: 1.5rem;\\n    font-weight: 400;\\n    line-height: 1.5rem;\\n    letter-spacing: 0em;\\n    text-align: left;\\n  }\\n\\n  .description .partners .readMore {\\n    font-size: 1rem;\\n    font-weight: 400;\\n    line-height: 1.5rem;\\n    letter-spacing: 0em;\\n    text-align: left;\\n  }\\n  ::ng-deep a {\\n    color: vars.$primary-rgb;\\n    font-weight: 700;\\n  }\\n  ::ng-deep p {\\n    margin: 0;\\n  }\\n}\\n","styleUrl":"./hra-landing-page-intro-wc.component.scss"}],"stylesData":"","extends":[],"templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n\\n<markdown class=\\"readMore\\" [data]=\\"readMore\\"></markdown>\\n\\n<markdown class=\\"partners\\" [data]=\\"partners\\"></markdown>\\n"},{"name":"InfoModalComponent","id":"component-InfoModalComponent-1d3a8c223b5084da9139be6c8f9bbea002e468fc7a1c020295f1fb8c6ee9e2b5b57c3dd16f88b15a54427548f685b5a6f838700d16c537642c856d9c4a7d67e9","file":"src/lib/info-modal/info-modal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-info-modal","styleUrls":["./info-modal.component.scss"],"styles":[],"templateUrl":["./info-modal.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInformation modal message to the user","description":"<p>Information modal message to the user</p>\\n","line":23,"type":"string","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nProduct logo shown to the user","description":"<p>Product logo shown to the user</p>\\n","line":20,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nProduct title shown to the user","description":"<p>Product title shown to the user</p>\\n","line":17,"type":"string","decorators":[]}],"outputsClass":[{"name":"closeClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the close icon is clicked","description":"<p>Emits when the close icon is clicked</p>\\n","line":26,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MarkdownModule","type":"module"}],"description":"<p>Displays an information modal to the user with the product title and logo and description</p>\\n","rawdescription":"\\nDisplays an information modal to the user with the product title and logo and description","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Displays an information modal to the user with the product title and logo and description */\\n@Component({\\n  selector: \'hra-info-modal\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule],\\n  templateUrl: \'./info-modal.component.html\',\\n  styleUrls: [\'./info-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class InfoModalComponent {\\n  /** Product title shown to the user */\\n  @Input() productTitle = \'\';\\n\\n  /** Product logo shown to the user */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Information modal message to the user */\\n  @Input() description = \'\';\\n\\n  /** Emits when the close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  position: relative;\\n  padding: 2rem 2rem 1.25rem 2rem;\\n\\n  .close {\\n    position: absolute;\\n    top: 1.5rem;\\n    right: 1.5rem;\\n  }\\n\\n  .title {\\n    display: flex;\\n    align-items: center;\\n\\n    .product-logo-image {\\n      height: 2.75rem;\\n      margin-right: 1rem;\\n    }\\n\\n    .product-title {\\n      margin: 0;\\n      color: #990000;\\n    }\\n  }\\n\\n  .description {\\n    display: block;\\n    margin-top: 1rem;\\n  }\\n}\\n","styleUrl":"./info-modal.component.scss"}],"stylesData":"","extends":[],"templateData":"<a class=\\"title\\">\\n  <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n  <h2 class=\\"product-title\\">{{ productTitle }}</h2>\\n</a>\\n\\n<button mat-icon-button class=\\"close\\" (click)=\\"closeClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n"},{"name":"InteractiveSvgComponent","id":"component-InteractiveSvgComponent-68516f69f2ca0106772f98166ac1443c75d9e261757bbeccf8d61ef8169d5402c9a2eb17d73d22d427f494237777dbf15059b3bef3f51bdaae4cdd0e47c144d0","file":"src/lib/interactive-svg/interactive-svg.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.ShadowDom"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-interactive-svg","styleUrls":["./interactive-svg.component.scss"],"styles":[],"templateUrl":["./interactive-svg.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"highlightId","deprecated":false,"deprecationMessage":"","rawdescription":"\\nHighlighted ontology id","description":"<p>Highlighted ontology id</p>\\n","line":95,"type":"string","decorators":[]},{"name":"mapping","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMapping info","description":"<p>Mapping info</p>\\n","line":92,"type":"T[]","decorators":[]},{"name":"url","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSVG url","description":"<p>SVG url</p>\\n","line":89,"type":"string","decorators":[]}],"outputsClass":[{"name":"nodeClick","defaultValue":"new EventEmitter<T>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits node id when clicked","description":"<p>Emits node id when clicked</p>\\n","line":101,"type":"EventEmitter"},{"name":"nodeHover","defaultValue":"new EventEmitter<T | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits node id when hovered","description":"<p>Emits node id when hovered</p>\\n","line":98,"type":"EventEmitter"}],"propertiesClass":[{"name":"NEVER_EVAL_SCRIPTS","defaultValue":"SVGScriptEvalMode.NEVER","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>SVG script eval mode</p>\\n","line":104,"rawdescription":"\\nSVG script eval mode","modifierKind":[148]},{"name":"nodeHoverData$","defaultValue":"new BehaviorSubject<NodeTooltipData | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Observable of node hover data or undefined when there is no active hover</p>\\n","line":110,"rawdescription":"\\nObservable of node hover data or undefined when there is no active hover","modifierKind":[148]},{"name":"nodeHoverDelayedData$","defaultValue":"this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)))","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Observable of node hover with a timer</p>\\n","line":113,"rawdescription":"\\nObservable of node hover with a timer","modifierKind":[148]},{"name":"TOOLTIP_POSITIONS","defaultValue":"TOOLTIP_POSITIONS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Tooltip position settings</p>\\n","line":107,"rawdescription":"\\nTooltip position settings","modifierKind":[148]}],"methodsClass":[{"name":"formatNodeName","args":[{"name":"name","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":198,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRemoves underscores from id\\n","description":"<p>Removes underscores from id</p>\\n","jsdoctags":[{"name":{"pos":5119,"end":5123,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"name"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":5113,"end":5118,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Node name</p>\\n"},{"tagName":{"pos":5140,"end":5147,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>node name without underscores</p>\\n"}]},{"name":"setSvgElement","args":[{"name":"el","type":"SVGElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":182,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSets SVG element\\n","description":"<p>Sets SVG element</p>\\n","jsdoctags":[{"name":{"pos":4694,"end":4696,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"el"},"type":"SVGElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":4688,"end":4693,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>SVG element</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"InlineSVGModule","type":"module"},{"name":"OverlayModule","type":"module"},{"name":"TooltipComponent","type":"component"}],"description":"<p>Interactive SVG component</p>\\n","rawdescription":"\\n\\nInteractive SVG component\\n","type":"component","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  SimpleChanges,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { TooltipComponent } from \'@hra-ui/components/atoms\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node id in svg */\\n  id: string;\\n  /** Node group id */\\n  groupId: string;\\n  /** Ontology id of cell type */\\n  ontologyId: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.ShadowDom,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Highlighted ontology id */\\n  @Input() highlightId?: string;\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\\n\\n  /** Emits node id when clicked */\\n  @Output() readonly nodeClick = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /** Crosswalk element of svg */\\n  private crosswalkEl?: Element;\\n\\n  /** List of highlighted svg elements */\\n  private highlightedElements: Element[] = [];\\n\\n  /**\\n   * Updates the highlighting based on current highlight id\\n   * @param changes\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'highlightId\' in changes) {\\n      this.resetHighlight();\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Highlights cells that match highlightId\\n   */\\n  private setHighlight() {\\n    const { mapping, highlightId, crosswalkEl } = this;\\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\\n    if (!entry || !crosswalkEl) {\\n      return;\\n    }\\n\\n    const encodedId = this.encodeId(entry.id);\\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\\n    if (!element) {\\n      return;\\n    }\\n\\n    const gElement = element.nodeName === \'g\' ? element : (element.parentElement as Element);\\n    const id = gElement.id;\\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\\n    this.highlightedElements = Array.from(elements);\\n    elements.forEach((el) => el.classList.add(\'click-active\'));\\n  }\\n\\n  /**\\n   * Resets all highlighted elements in the svg\\n   */\\n  private resetHighlight(): void {\\n    for (const el of this.highlightedElements) {\\n      el.classList.remove(\'click-active\');\\n    }\\n    this.highlightedElements = [];\\n  }\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    this.crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\') ?? undefined;\\n    if (this.crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, this.crosswalkEl);\\n      this.attachCrosswalkHover(this.crosswalkEl);\\n      this.setHighlight();\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe((event) => this.onCrosswalkHover(event));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\\n    this.attachEvent(el, \'click\').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    if (event) {\\n      const node = this.getNode(event);\\n      if (node) {\\n        this.nodeHoverData$.next({\\n          node: node.label,\\n          origin: {\\n            x: event.clientX,\\n            y: event.clientY,\\n          },\\n        });\\n        this.nodeHover.emit(node); //emits node entry\\n      }\\n    } else {\\n      this.nodeHoverData$.next(undefined);\\n      this.nodeHover.emit();\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const cellMatch = this.mapping.find(\\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\\n      );\\n      if (cellMatch) {\\n        return cellMatch;\\n      } else {\\n        const groupMatch = this.mapping.find(\\n          (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\\n        );\\n        if (groupMatch) {\\n          return groupMatch;\\n        }\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Turns normal string into decoded SVG id\\n   * @param id id\\n   * @returns Encoded id\\n   */\\n  private encodeId(id: string): string {\\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\\n    return id.replace(/[^a-z0-9-]/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".svg {\\n  height: 100%;\\n  width: 100%;\\n  max-width: 100%;\\n  max-height: 100%;\\n}\\n\\nsvg {\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n#Crosswalk {\\n  :is(path, polygon, polyline),\\n  .hover-active & .inset-group:hover :is(path, polygon, polyline) {\\n    fill: transparent;\\n    stroke: transparent;\\n  }\\n\\n  .hover-active & g:hover :is(path, polygon, polyline),\\n  .hover-active & .inset-group > g:hover :is(path, polygon, polyline),\\n  .click-active {\\n    fill: hsl(0deg 100% 50%);\\n    mix-blend-mode: saturation;\\n  }\\n}\\n\\n::-webkit-scrollbar {\\n  width: 0.5rem;\\n  height: 0.5rem;\\n}\\n\\n::-webkit-scrollbar-track {\\n  background: #f8f9fa;\\n  border: 0.063rem solid #d3d3d3;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n  background: #a0abb4;\\n  border-radius: 0.5rem;\\n}\\n","styleUrl":"./interactive-svg.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges","OnDestroy"],"templateData":"<div\\n  *ngIf=\\"url\\"\\n  class=\\"svg\\"\\n  [class.hover-active]=\\"nodeHoverData$ | async\\"\\n  [inlineSVG]=\\"url\\"\\n  [evalScripts]=\\"NEVER_EVAL_SCRIPTS\\"\\n  (onSVGInserted)=\\"setSvgElement($event)\\"\\n></div>\\n\\n<ng-container *ngIf=\\"nodeHoverDelayedData$ | async as hover\\">\\n  <ng-template\\n    cdkConnectedOverlay\\n    cdkConnectedOverlayPanelClass=\\"hra-interactive-svg-tooltip-panel\\"\\n    [cdkConnectedOverlayOrigin]=\\"hover.origin\\"\\n    [cdkConnectedOverlayPositions]=\\"TOOLTIP_POSITIONS\\"\\n    [cdkConnectedOverlayViewportMargin]=\\"16\\"\\n    [cdkConnectedOverlayOpen]=\\"true\\"\\n  >\\n    <hra-ui-tooltip [text]=\\"formatNodeName(hover.node)\\"></hra-ui-tooltip>\\n  </ng-template>\\n</ng-container>\\n"},{"name":"LandingPageInDepthComponent","id":"component-LandingPageInDepthComponent-19cb2e87ce03eb318eb1c32f280fcf34aea8bc37730c27bbcdee73c436cab1e943f70d71b222afbfc054359f08d1cf24b67e7afc34ae5897a37a35f91ec46d78","file":"src/lib/landing-page-in-depth/landing-page-in-depth.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-landing-page-in-depth","styleUrls":["./landing-page-in-depth.component.scss"],"styles":[],"templateUrl":["./landing-page-in-depth.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage description shown to the user","description":"<p>Image description shown to the user</p>\\n","line":23,"type":"string","decorators":[]},{"name":"img","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage shown to the user","description":"<p>Image shown to the user</p>\\n","line":26,"type":"string","decorators":[]},{"name":"moreLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLink to navigate to on more button click","description":"<p>Link to navigate to on more button click</p>\\n","line":32,"type":"any","decorators":[]},{"name":"moreText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText for more button","description":"<p>Text for more button</p>\\n","line":29,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage title shown to the user","description":"<p>Image title shown to the user</p>\\n","line":20,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Displays the image and also corresponding title and text along with a button to read more</p>\\n","rawdescription":"\\n\\nDisplays the image and also corresponding title and text along with a button to read more\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n * Displays the image and also corresponding title and text along with a button to read more\\n */\\n@Component({\\n  selector: \'hra-landing-page-in-depth\',\\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\\n  templateUrl: \'./landing-page-in-depth.component.html\',\\n  styleUrls: [\'./landing-page-in-depth.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageInDepthComponent {\\n  /**  Image title shown to the user */\\n  @Input() title = \'\';\\n\\n  /** Image description shown to the user */\\n  @Input() description = \'\';\\n\\n  /** Image shown to the user */\\n  @Input() img = \'\';\\n\\n  /** Text for more button */\\n  @Input() moreText = \'\';\\n\\n  /** Link to navigate to on more button click */\\n  @Input() moreLink = EMPTY_LINK;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 2fr 3fr;\\n  grid-template-rows: 0fr 0fr 1fr;\\n  column-gap: 4rem;\\n  row-gap: 2rem;\\n  padding: 3.5rem 6rem;\\n  max-height: 30rem;\\n\\n  .image {\\n    grid-column: 1;\\n    grid-row: 1 / span 3;\\n    width: 100%;\\n    height: 100%;\\n    align-self: center;\\n    border-radius: 1rem;\\n    box-shadow: 0.06rem 0.13rem 1rem 0.13rem #00000029;\\n  }\\n\\n  .title {\\n    font-size: 2rem;\\n    line-height: 2.5rem;\\n    margin: 0;\\n  }\\n\\n  .description {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n\\n    ::ng-deep p {\\n      margin: 0;\\n    }\\n\\n    ::ng-deep a {\\n      color: vars.$primary-rgb;\\n      font-weight: 700;\\n    }\\n  }\\n\\n  .more-button {\\n    width: fit-content;\\n    height: 3rem;\\n  }\\n\\n  @media (max-width: 1400px) {\\n    grid-template-columns: 1.8fr 1fr;\\n    grid-template-rows: auto auto 3rem;\\n    column-gap: 2rem;\\n    padding: 3.5rem 2rem;\\n    max-height: unset;\\n\\n    .title {\\n      font-size: 1.5rem;\\n      line-height: normal;\\n    }\\n  }\\n\\n  @media (max-width: 1280px) {\\n    grid-template-columns: unset;\\n    text-align: center;\\n\\n    .image {\\n      max-height: 22rem;\\n      width: auto;\\n    }\\n\\n    .image,\\n    .more-button {\\n      place-self: center;\\n    }\\n  }\\n}\\n","styleUrl":"./landing-page-in-depth.component.scss"}],"stylesData":"","extends":[],"templateData":"<img class=\\"image\\" [src]=\\"img\\" alt=\\"\\" />\\n<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n<button mat-flat-button class=\\"more-button\\" color=\\"primary\\" [hraLink]=\\"moreLink\\">\\n  {{ moreText }}\\n</button>\\n"},{"name":"LandingPageIntroComponent","id":"component-LandingPageIntroComponent-f098636dd31298c7afc11e8d1c5c66c6babed02fe8e9b713eac814d83edc629fca8eb62b5ae1f03c7b4e2270d9b8da772b20b6ab6be32924373e68da793ec96f","file":"src/lib/landing-page-intro/landing-page-intro.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-landing-page-intro","styleUrls":["./landing-page-intro.component.scss"],"styles":[],"templateUrl":["./landing-page-intro.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for FTU Explorer","description":"<p>Description for FTU Explorer</p>\\n","line":21,"type":"string","decorators":[]},{"name":"img","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro Image file url","description":"<p>Intro Image file url</p>\\n","line":27,"type":"string","decorators":[]},{"name":"moreLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLink to navigate to on more button click","description":"<p>Link to navigate to on more button click</p>\\n","line":33,"type":"any","decorators":[]},{"name":"moreText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText for more button","description":"<p>Text for more button</p>\\n","line":30,"type":"string","decorators":[]},{"name":"partners","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThank you message to partners","description":"<p>Thank you message to partners</p>\\n","line":24,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro title for FTU Explorer","description":"<p>Intro title for FTU Explorer</p>\\n","line":18,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MarkdownModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Component for LandingPage Intro</p>\\n","rawdescription":"\\nComponent for LandingPage Intro","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Component for LandingPage Intro */\\n@Component({\\n  selector: \'hra-landing-page-intro\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule, LinkDirective],\\n  templateUrl: \'./landing-page-intro.component.html\',\\n  styleUrls: [\'./landing-page-intro.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageIntroComponent {\\n  /** Intro title for FTU Explorer */\\n  @Input() title = \'\';\\n\\n  /** Description for FTU Explorer */\\n  @Input() description = \'\';\\n\\n  /** Thank you message to partners */\\n  @Input() partners = \'\';\\n\\n  /** Intro Image file url */\\n  @Input() img = \'\';\\n\\n  /** Text for more button */\\n  @Input() moreText = \'\';\\n\\n  /** Link to navigate to on more button click */\\n  @Input() moreLink = EMPTY_LINK;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 3fr 2fr;\\n  grid-template-rows: auto auto 3rem 1fr;\\n  align-items: start;\\n  column-gap: 2rem;\\n  row-gap: 2rem;\\n\\n  .title {\\n    font-size: 3rem;\\n    line-height: 4rem;\\n    margin: 0;\\n  }\\n\\n  .more-button {\\n    width: fit-content;\\n    height: 3rem;\\n  }\\n\\n  .image {\\n    grid-column: 2;\\n    grid-row: 1 / span 4;\\n    place-self: center;\\n    width: 100%;\\n    min-height: 23rem;\\n    max-height: 27rem;\\n  }\\n\\n  .description,\\n  .partners {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n\\n    ::ng-deep p {\\n      margin: 0;\\n    }\\n\\n    ::ng-deep a {\\n      color: vars.$primary-rgb;\\n      font-weight: 700;\\n    }\\n  }\\n\\n  mat-icon {\\n    font-size: 1.5rem;\\n    height: fit-content;\\n    width: fit-content;\\n    padding-right: 0.5rem;\\n    margin-left: 0.25rem !important;\\n  }\\n\\n  .red-theme {\\n    background-color: #990000;\\n    border-color: #990000;\\n    &:hover {\\n      background-color: #800000;\\n      border-color: #800000;\\n\\n      mat-icon {\\n        transform: translateX(30%);\\n        transition: 0.5s;\\n      }\\n    }\\n\\n    &:active,\\n    &:focus {\\n      background-color: #990000;\\n      border-color: #990000;\\n\\n      ::ng-deep .mat-mdc-focus-indicator {\\n        background-color: #990000 !important;\\n        border-color: #990000;\\n      }\\n    }\\n\\n    &:active {\\n      background-color: #ffffff;\\n      color: #990000;\\n\\n      ::ng-deep .mat-mdc-focus-indicator {\\n        background-color: #ffffff !important;\\n        border: 2px solid;\\n      }\\n    }\\n\\n    &:disabled {\\n      background-color: #ffd6db;\\n      border: 1px solid #ffd6db;\\n    }\\n  }\\n\\n  @media (max-width: 1400px) {\\n    .title {\\n      font-size: 2rem;\\n      line-height: normal;\\n    }\\n  }\\n\\n  @media (max-width: 1280px) {\\n    grid-template-columns: unset;\\n\\n    .image {\\n      grid-column: 1;\\n      grid-row: 5 / span 1;\\n    }\\n  }\\n}\\n","styleUrl":"./landing-page-intro.component.scss"}],"stylesData":"","extends":[],"templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n\\n<button mat-flat-button class=\\"more-button red-theme\\" color=\\"primary\\" [hraLink]=\\"moreLink\\">\\n  {{ moreText }}\\n  <mat-icon iconPositionEnd>arrow_forward</mat-icon>\\n</button>\\n<markdown class=\\"partners\\" [data]=\\"partners\\"></markdown>\\n\\n<img class=\\"image\\" [src]=\\"img\\" alt=\\"alt\\" />\\n"},{"name":"MetricsComponent","id":"component-MetricsComponent-d877d63626a0b1b5cd855f7aa7f9f09758ae9e6469a07ba7b48860ca5387606caa9ae0c2e9b44170d4419c78a5035af5762a8116e10efa82ee0fe3a56f5d97db","file":"src/lib/metrics/metrics.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-metrics","styleUrls":["./metrics.component.scss"],"styles":[],"templateUrl":["./metrics.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"baseHref","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nBase url","description":"<p>Base url</p>\\n","line":36,"type":"string","decorators":[]},{"name":"logo","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLogo of metrics component.","description":"<p>Logo of metrics component.</p>\\n","line":30,"type":"string","decorators":[]},{"name":"metrics","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nList of metrics that will be shown to the user.","description":"<p>List of metrics that will be shown to the user.</p>\\n","line":33,"type":"MetricItem[]","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMain title of metrics component.","description":"<p>Main title of metrics component.</p>\\n","line":27,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Describes the metrics for the HuBMAP project.</p>\\n","rawdescription":"\\n\\nDescribes the metrics for the HuBMAP project.\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n  An interface representing a single metric with an icon, value and description.\\n */\\nexport interface MetricItem {\\n  /** Represents the icon associated with the metric. */\\n  icon: string;\\n  /** Describes the numberical value of the metric. */\\n  value: string;\\n  /** Describes the type of metric. */\\n  description: string;\\n}\\n/**\\n * Describes the metrics for the HuBMAP project.\\n */\\n@Component({\\n  selector: \'hra-metrics\',\\n  imports: [CommonModule],\\n  templateUrl: \'./metrics.component.html\',\\n  styleUrls: [\'./metrics.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MetricsComponent {\\n  /** Main title of metrics component. */\\n  @Input() title = \'\';\\n\\n  /** Logo of metrics component. */\\n  @Input() logo = \'\';\\n\\n  /** List of metrics that will be shown to the user. */\\n  @Input() metrics: MetricItem[] = [];\\n\\n  /** Base url */\\n  @Input() baseHref = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  padding: 2rem 0 0 0;\\n  background: #f8f9fa;\\n  gap: 0.5rem;\\n\\n  .logo {\\n    height: 2.75rem;\\n  }\\n\\n  .header-title {\\n    font-size: 2rem;\\n    line-height: 2.5rem;\\n    text-align: center;\\n  }\\n\\n  .metrics {\\n    display: flex;\\n    flex-direction: row;\\n    width: 100%;\\n    gap: 3%;\\n    padding: 2rem 1.75rem;\\n\\n    .metric {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      min-width: calc(100% / 7);\\n      height: 14.75rem;\\n      padding-top: 2rem;\\n      padding-bottom: 2rem;\\n\\n      .logo {\\n        margin-bottom: 2rem;\\n      }\\n\\n      .value {\\n        font-size: 3rem;\\n        line-height: 4rem;\\n        margin-bottom: 0.25rem;\\n      }\\n\\n      .description {\\n        font-size: 1rem;\\n        text-align: center;\\n      }\\n    }\\n  }\\n\\n  @media (max-width: 1400px) {\\n    .metrics {\\n      flex-wrap: wrap;\\n\\n      .metric {\\n        width: 31%;\\n      }\\n    }\\n  }\\n}\\n","styleUrl":"./metrics.component.scss"}],"stylesData":"","extends":[],"templateData":"<img class=\\"logo\\" [src]=\\"logo\\" alt=\\"\\" />\\n<span class=\\"header-title\\">{{ title }}</span>\\n\\n<div class=\\"metrics\\">\\n  <div class=\\"metric\\" *ngFor=\\"let item of metrics\\">\\n    <img class=\\"logo\\" [src]=\\"baseHref + item.icon\\" alt=\\"\\" />\\n    <span class=\\"value\\"> {{ item.value }} </span>\\n    <span class=\\"description\\"> {{ item.description }} </span>\\n  </div>\\n</div>\\n"},{"name":"ScreenSizeNoticeComponent","id":"component-ScreenSizeNoticeComponent-ebc9b4df72a66eb4b841157b9c7f3f97844b8b37fd92445f3d376be8dc3965d8465a0ba1e9dbff708a5f324337c37f8355c61f09de6904a4684aa83ee8894b98","file":"src/lib/screen-size-notice/screen-size-notice.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-screen-size-notice","styleUrls":["./screen-size-notice.component.scss"],"styles":[],"templateUrl":["./screen-size-notice.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"content","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for passing screen size notice content\\n","description":"<p>Input for passing screen size notice content</p>\\n","line":22,"type":"string","decorators":[]},{"name":"portal","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  of screen size notice component\\n","description":"<p>Input  of screen size notice component</p>\\n","line":27,"type":"any","decorators":[]}],"outputsClass":[{"name":"proceedClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the proceed button is clicked","description":"<p>Emits when the proceed button is clicked</p>\\n","line":30,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>The screen size notice component displays a notice for the users specifying the required screen size</p>\\n","rawdescription":"\\n\\nThe screen size notice component displays a notice for the users specifying the required screen size\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\n\\n/**\\n * The screen size notice component displays a notice for the users specifying the required screen size\\n */\\n@Component({\\n  selector: \'hra-screen-size-notice\',\\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\\n  templateUrl: \'./screen-size-notice.component.html\',\\n  styleUrls: [\'./screen-size-notice.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScreenSizeNoticeComponent {\\n  /**\\n   * Input for passing screen size notice content\\n   */\\n  @Input() content = \'\';\\n\\n  /**\\n   * Input  of screen size notice component\\n   */\\n  @Input() portal = EMPTY_LINK;\\n\\n  /** Emits when the proceed button is clicked */\\n  @Output() readonly proceedClick = new EventEmitter<void>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: none;\\n  position: relative;\\n  border-radius: 0.5rem;\\n  padding: 1.5rem;\\n  flex-direction: column;\\n  max-width: 30rem;\\n\\n  .header-close {\\n    position: absolute;\\n    top: 1.125rem;\\n    right: 1rem;\\n  }\\n\\n  h3 {\\n    margin: 0;\\n    height: 2.5rem;\\n    line-height: 2.5rem;\\n  }\\n\\n  button {\\n    height: 3rem;\\n    padding: 0.75rem 0;\\n    letter-spacing: 0.5px;\\n  }\\n\\n  .btn-stroked {\\n    margin-bottom: 1rem;\\n  }\\n\\n  .content {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n    letter-spacing: 0.5px;\\n  }\\n\\n  @media (max-width: 1279px) {\\n    display: flex;\\n  }\\n}\\n","styleUrl":"./screen-size-notice.component.scss"}],"stylesData":"","extends":[],"templateData":"<h3>Screen Size Notice</h3>\\n<button mat-icon-button class=\\"header-close\\" (click)=\\"proceedClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n<markdown [data]=\\"content\\" class=\\"content\\"></markdown>\\n<button mat-stroked-button color=\\"accent\\" class=\\"btn-stroked\\" (click)=\\"proceedClick.emit()\\">\\n  Proceed to FTU Explorer\\n</button>\\n<button mat-flat-button color=\\"primary\\" class=\\"btn-flat\\" [hraLink]=\\"portal\\">Human Reference Atlas Portal</button>\\n"},{"name":"SourceListComponent","id":"component-SourceListComponent-3f56281b3b2ba13bbb5c2b3896e7661ecb6baf009396cc0d9bf528b27260fe5ca67e778f87ea15a75a8f3780e63190d925f72bd25199f65b464b313b2da3ffa5","file":"src/lib/source-list/source-list.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-source-list","styleUrls":["./source-list.component.scss"],"styles":[],"templateUrl":["./source-list.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"collaborateText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText that appears in the empty biomarker collaborate button","description":"<p>Text that appears in the empty biomarker collaborate button</p>\\n","line":62,"type":"string","decorators":[]},{"name":"message","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText that appears in the empty biomarker message","description":"<p>Text that appears in the empty biomarker message</p>\\n","line":65,"type":"string","decorators":[]},{"name":"sources","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nList of sources with titles and links displayed to the user","description":"<p>List of sources with titles and links displayed to the user</p>\\n","line":59,"type":"T[]","decorators":[]}],"outputsClass":[{"name":"collaborateClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the contact button is clicked","description":"<p>Emits when the contact button is clicked</p>\\n","line":80,"type":"EventEmitter"},{"name":"selectionChanged","defaultValue":"new EventEmitter<T[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when source selection changed","description":"<p>Emits when source selection changed</p>\\n","line":83,"type":"EventEmitter"}],"propertiesClass":[{"name":"dataSource","defaultValue":"new MatTableDataSource<T>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Data source for table</p>\\n","line":74,"rawdescription":"\\nData source for table"},{"name":"displayedColumns","defaultValue":"[\'select\', \'authors\', \'year\', \'title\', \'link\']","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":false,"description":"<p>Columns to display in the sources list</p>\\n","line":77,"rawdescription":"\\nColumns to display in the sources list"},{"name":"selection","defaultValue":"new SelectionModel<T>(true, [])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current source selection</p>\\n","line":71,"rawdescription":"\\nCurrent source selection"},{"name":"showTable","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether to show the biomarker table</p>\\n","line":68,"rawdescription":"\\nWhether to show the biomarker table"}],"methodsClass":[{"name":"isAllSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":120,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nWhether the number of selected elements matches the total number of rows.","description":"<p>Whether the number of selected elements matches the total number of rows.</p>\\n"},{"name":"sourceLinkClicked","args":[{"name":"item","type":"SourceListItem","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":115,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLogs source link click\\n","description":"<p>Logs source link click</p>\\n","jsdoctags":[{"name":{"pos":3453,"end":3457,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"item"},"type":"SourceListItem","deprecated":false,"deprecationMessage":"","tagName":{"pos":3447,"end":3452,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Source list item</p>\\n"}]},{"name":"toggleAllRows","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":127,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nSelects all rows if they are not all selected; otherwise clear selection.","description":"<p>Selects all rows if they are not all selected; otherwise clear selection.</p>\\n"},{"name":"toggleRow","args":[{"name":"row","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":139,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nToggles selection status of a row","description":"<p>Toggles selection status of a row</p>\\n","jsdoctags":[{"name":"row","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"toggleTable","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":106,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt changes the value of showTable to false if value it true\\nand vice versa\\n","description":"<p>It changes the value of showTable to false if value it true\\nand vice versa</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatTableModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatSortModule","type":"module"},{"name":"LabelBoxComponent","type":"component"},{"name":"EmptyBiomarkerComponent","type":"component"},{"name":"MatCheckboxModule","type":"module"},{"name":"HoverDirective","type":"directive"}],"description":"<p>This component shows list of sources with title and links to the datasets</p>\\n","rawdescription":"\\nThis component shows list of sources with title and links to the datasets","type":"component","sourceCode":"import { SelectionModel } from \'@angular/cdk/collections\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatCheckboxModule } from \'@angular/material/checkbox\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatSort, MatSortModule } from \'@angular/material/sort\';\\nimport { MatTableDataSource, MatTableModule } from \'@angular/material/table\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { EmptyBiomarkerComponent, LabelBoxComponent } from \'@hra-ui/components/atoms\';\\nimport { GoogleAnalyticsService } from \'ngx-google-analytics\';\\n\\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\\nexport interface SourceListItem {\\n  /** List of authors for the source */\\n  authors: string[];\\n  /** Year dataset was released */\\n  year: number;\\n  /** Title of the dataset in the SourceList */\\n  title: string;\\n  /** DOI of dataset */\\n  doi: string;\\n  /** Label of the dataset in the SourceList */\\n  label: string;\\n  /** Link to the dataset in the SourceList */\\n  link: string;\\n}\\n\\n/** This component shows list of sources with title and links to the datasets */\\n@Component({\\n  selector: \'hra-source-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTableModule,\\n    MatIconModule,\\n    MatSortModule,\\n    LabelBoxComponent,\\n    EmptyBiomarkerComponent,\\n    MatCheckboxModule,\\n    HoverDirective,\\n  ],\\n  templateUrl: \'./source-list.component.html\',\\n  styleUrls: [\'./source-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SourceListComponent<T extends SourceListItem> implements OnChanges {\\n  /** List of sources with titles and links displayed to the user */\\n  @Input() sources: T[] = [];\\n\\n  /** Text that appears in the empty biomarker collaborate button */\\n  @Input() collaborateText = \'\';\\n\\n  /** Text that appears in the empty biomarker message */\\n  @Input() message = \'\';\\n\\n  /** Whether to show the biomarker table */\\n  showTable = true;\\n\\n  /** Current source selection */\\n  selection = new SelectionModel<T>(true, []);\\n\\n  /** Data source for table */\\n  dataSource = new MatTableDataSource<T>();\\n\\n  /** Columns to display in the sources list */\\n  displayedColumns: string[] = [\'select\', \'authors\', \'year\', \'title\', \'link\'];\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly collaborateClick = new EventEmitter<void>();\\n\\n  /** Emits when source selection changed */\\n  @Output() readonly selectionChanged = new EventEmitter<T[]>();\\n\\n  /** Sorter for sources list */\\n  @ViewChild(MatSort) set sort(sorter: MatSort) {\\n    this.dataSource.sort = sorter || null;\\n  }\\n\\n  /** Google analytics tracking service */\\n  private readonly ga = inject(GoogleAnalyticsService);\\n\\n  /** On sources change, resets selection and selects all sources */\\n  ngOnChanges(changes: SimpleChanges) {\\n    if (\'sources\' in changes) {\\n      this.selection.clear();\\n      this.dataSource.data = this.sources;\\n      this.toggleAllRows();\\n    }\\n  }\\n\\n  /**\\n   * It changes the value of showTable to false if value it true\\n   * and vice versa\\n   */\\n  toggleTable(): void {\\n    this.showTable = !this.showTable;\\n    this.ga.event(\'source_table_toggle\', this.showTable.toString());\\n  }\\n\\n  /**\\n   * Logs source link click\\n   * @param item Source list item\\n   */\\n  sourceLinkClicked(item: SourceListItem): void {\\n    this.ga.event(\'source_link_clicked\', \'link_click\', item.link);\\n  }\\n\\n  /** Whether the number of selected elements matches the total number of rows. */\\n  isAllSelected() {\\n    const numSelected = this.selection.selected.length;\\n    const numRows = this.dataSource.data.length;\\n    return numSelected === numRows;\\n  }\\n\\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\\n  toggleAllRows() {\\n    if (this.isAllSelected()) {\\n      this.selection.clear();\\n      this.selectionChanged.emit(this.selection.selected);\\n      return;\\n    }\\n\\n    this.dataSource.data.forEach((row) => this.selection.select(row));\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n\\n  /** Toggles selection status of a row */\\n  toggleRow(row: T) {\\n    this.selection.toggle(row);\\n    this.selectionChanged.emit(this.selection.selected);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n  height: 100%;\\n\\n  @media (min-height: 60.75rem) {\\n    .toggle {\\n      height: 3rem !important;\\n    }\\n\\n    ::ng-deep thead > tr {\\n      height: 3rem !important;\\n    }\\n  }\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n\\n  hra-label-box {\\n    font-size: 0.875rem;\\n    padding-left: 1.5rem;\\n  }\\n\\n  .toggle {\\n    display: flex;\\n    align-items: center;\\n    height: 2.5rem;\\n    grid-area: source-list-header;\\n    border-top: 1px solid rgba(vars.$light-dividers);\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  .table-content {\\n    max-height: 236px;\\n    overflow: auto;\\n\\n    &.hidden {\\n      display: none;\\n    }\\n\\n    .mat-column-select {\\n      width: 1rem;\\n      padding-right: 0;\\n    }\\n\\n    .mat-column-authors,\\n    .mat-column-title,\\n    .mat-column-doi,\\n    .mat-column-link {\\n      max-width: 7rem;\\n    }\\n\\n    .mat-column-year {\\n      max-width: 3.5rem;\\n    }\\n\\n    .mat-column-link {\\n      padding-right: 3rem;\\n      text-overflow: unset !important;\\n    }\\n\\n    ::ng-deep thead {\\n      .mat-sort-header-stem,\\n      .mat-sort-header-indicator {\\n        opacity: 0 !important;\\n      }\\n\\n      .mat-sort-header-arrow {\\n        background-image: url(\'../../assets/icons/arrow-upward.svg\');\\n        background-size: contain;\\n        height: 1rem;\\n        width: 1rem;\\n      }\\n\\n      [aria-sort=\'descending\'] {\\n        .mat-sort-header-arrow {\\n          background-image: url(\'../../assets/icons/arrow-down.svg\');\\n        }\\n      }\\n\\n      [aria-sort=\'none\'] {\\n        .mat-sort-header-arrow {\\n          background-image: url(\'../../assets/icons/arrow-upward.svg\');\\n          transition: 0.5s;\\n        }\\n      }\\n\\n      tr {\\n        color: rgba(vars.$primary-darker);\\n        background: rgba(vars.$primary-lighter);\\n        height: 2.5rem;\\n      }\\n    }\\n\\n    ::ng-deep tbody {\\n      .mat-column-doi,\\n      .mat-column-link {\\n        color: rgba(vars.$accent);\\n        font-weight: 500;\\n      }\\n    }\\n\\n    .mat-mdc-cell,\\n    .mat-mdc-header-cell {\\n      text-overflow: ellipsis;\\n      white-space: nowrap;\\n    }\\n\\n    .mat-mdc-header-cell {\\n      border-bottom-color: rgba(vars.$light-dividers);\\n    }\\n\\n    .mat-mdc-cell {\\n      border-bottom: none;\\n    }\\n\\n    tr {\\n      color: rgba(vars.$primary);\\n      font-size: 0.75rem;\\n      height: 2.25rem;\\n\\n      .mat-column-link {\\n        cursor: pointer;\\n      }\\n    }\\n\\n    .source-link {\\n      --mdc-filled-button-label-text-tracking: 0.0178571429em;\\n      font-size: 0.75rem;\\n      font-weight: 500;\\n      padding: 0;\\n      justify-content: left;\\n      color: #b20a2f;\\n      text-decoration: none;\\n      border: 0.25rem solid transparent;\\n\\n      &:hover {\\n        color: #8e0825;\\n      }\\n\\n      &:active {\\n        color: #6a061c;\\n      }\\n\\n      &:focus {\\n        color: #201e3d;\\n        border-color: #e00d3a;\\n      }\\n\\n      ::ng-deep .mdc-button__ripple::before {\\n        background-color: transparent;\\n      }\\n\\n      ::ng-deep .mdc-button__label {\\n        text-overflow: ellipsis;\\n        white-space: nowrap;\\n        max-width: 9rem;\\n        overflow: hidden;\\n      }\\n    }\\n  }\\n\\n  ::ng-deep mat-checkbox {\\n    .mdc-form-field {\\n      height: 2.25rem;\\n\\n      .mdc-checkbox {\\n        padding: 9px;\\n      }\\n    }\\n    --mdc-checkbox-selected-checkmark-color: rgba(vars.$primary) !important;\\n\\n    .mdc-checkbox__background {\\n      background-color: transparent !important;\\n      border-color: rgba(vars.$primary) !important;\\n      top: 9px;\\n      left: 9px;\\n    }\\n  }\\n\\n  .end {\\n    cursor: pointer;\\n  }\\n}\\n","styleUrl":"./source-list.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges"],"accessors":{"sort":{"name":"sort","setSignature":{"name":"sort","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"sorter","type":"MatSort","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":86,"rawdescription":"\\nSorter for sources list","description":"<p>Sorter for sources list</p>\\n","jsdoctags":[{"name":"sorter","type":"MatSort","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"templateData":"<hra-label-box class=\\"toggle\\" (click)=\\"toggleTable()\\">\\n  Source Data\\n  <mat-icon class=\\"end\\">\\n    {{ showTable ? \'keyboard_arrow_down\' : \'keyboard_arrow_up\' }}\\n  </mat-icon>\\n</hra-label-box>\\n\\n<div class=\\"table-content\\" [class.hidden]=\\"!showTable\\">\\n  <table\\n    *ngIf=\\"sources.length !== 0\\"\\n    mat-table\\n    [dataSource]=\\"dataSource\\"\\n    matSort\\n    matSortActive=\\"authors\\"\\n    matSortDirection=\\"asc\\"\\n  >\\n    <caption class=\\"sr-only\\">\\n      Source Data\\n    </caption>\\n\\n    \x3c!-- Checkbox Column --\x3e\\n    <ng-container matColumnDef=\\"select\\">\\n      <th mat-header-cell *matHeaderCellDef>\\n        <mat-checkbox\\n          (change)=\\"$event ? toggleAllRows() : null\\"\\n          [checked]=\\"selection.hasValue() && isAllSelected()\\"\\n          [indeterminate]=\\"selection.hasValue() && !isAllSelected()\\"\\n          [disableRipple]=\\"true\\"\\n        >\\n        </mat-checkbox>\\n      </th>\\n      <td mat-cell *matCellDef=\\"let row\\">\\n        <mat-checkbox\\n          (click)=\\"$event.stopPropagation()\\"\\n          (change)=\\"$event ? toggleRow(row) : null\\"\\n          [checked]=\\"selection.isSelected(row)\\"\\n          [disableRipple]=\\"true\\"\\n        >\\n        </mat-checkbox>\\n      </td>\\n    </ng-container>\\n\\n    \x3c!-- Authors Column --\x3e\\n    <ng-container matColumnDef=\\"authors\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Authors</th>\\n      <td mat-cell *matCellDef=\\"let row\\" [hraHover]=\\"dataHover\\" [hraHoverData]=\\"row.authors\\">\\n        {{ row.authors.join(\', \') }}\\n      </td>\\n    </ng-container>\\n\\n    \x3c!-- Year Column --\x3e\\n    <ng-container matColumnDef=\\"year\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Year</th>\\n      <td mat-cell *matCellDef=\\"let row\\">{{ row.year < 0 ? \'\' : row.year }}</td>\\n    </ng-container>\\n\\n    \x3c!-- Title Column --\x3e\\n    <ng-container matColumnDef=\\"title\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper Title</th>\\n      <td mat-cell *matCellDef=\\"let row\\" [hraHover]=\\"dataHover\\" [hraHoverData]=\\"row.title\\">{{ row.title }}</td>\\n    </ng-container>\\n\\n    \x3c!-- DOI Column --\x3e\\n    <ng-container matColumnDef=\\"link\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper DOI</th>\\n      <td\\n        mat-cell\\n        *matCellDef=\\"let row\\"\\n        [hraHover]=\\"dataHover\\"\\n        [hraHoverData]=\\"row.link\\"\\n        (click)=\\"sourceLinkClicked(row)\\"\\n      >\\n        <a\\n          class=\\"source-link\\"\\n          mat-flat-button\\n          [href]=\\"row.link\\"\\n          target=\\"_blank\\"\\n          rel=\\"noopener noreferrer\\"\\n          disableRipple\\n        >\\n          {{ row.link }}\\n        </a>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\"displayedColumns; sticky: true\\"></tr>\\n    <tr mat-row *matRowDef=\\"let row; columns: displayedColumns\\"></tr>\\n  </table>\\n  <hra-empty-biomarker\\n    *ngIf=\\"sources.length === 0\\"\\n    [collaborateText]=\\"collaborateText\\"\\n    [message]=\\"message\\"\\n    (collaborateClick)=\\"collaborateClick.emit()\\"\\n  ></hra-empty-biomarker>\\n</div>\\n\\n<ng-template #dataHover let-columnName>\\n  <div class=\\"biomarker-table-hover full-column-name\\" [class.empty]=\\"columnName.toString() === \'\'\\">\\n    {{ columnName }}\\n  </div>\\n</ng-template>\\n"},{"name":"TissueTreeListComponent","id":"component-TissueTreeListComponent-698c4028b70586e8c701916f4595617aee3585b23f29b41e6f4728c6bfc7e45726e4384b150dc5573692936f8ee30fec72f981132bf623940ac8fd24b633a2f2","file":"src/lib/tissue-tree-list/tissue-tree-list.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-tissue-tree-list","styleUrls":["./tissue-tree-list.component.scss"],"styles":[],"templateUrl":["./tissue-tree-list.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"nodes","defaultValue":"{} as Record<K, T>","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  of tissue tree list component\\n","description":"<p>Input  of tissue tree list component</p>\\n","line":69,"type":"Record<K | T>","decorators":[]},{"name":"selected","defaultValue":"undefined","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNode selected, to view the data associated with it\\n","description":"<p>Node selected, to view the data associated with it</p>\\n","line":74,"type":"T","decorators":[]}],"outputsClass":[{"name":"navigate","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNavigates to an illustration page\\n","description":"<p>Navigates to an illustration page</p>\\n","line":84,"type":"EventEmitter"},{"name":"selectedChange","defaultValue":"new EventEmitter<T | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOutput  of tissue tree list component\\n","description":"<p>Output  of tissue tree list component</p>\\n","line":79,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>tree controller, used to control the nodes in the tree</p>\\n","line":94,"rawdescription":"\\n\\ntree controller, used to control the nodes in the tree\\n","modifierKind":[148]},{"name":"dataSource","defaultValue":"new MatTreeFlatDataSource(this.control, this.flattener)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Data source of tissue tree list component, defines the data in mat-tree</p>\\n","line":117,"rawdescription":"\\n\\nData source of tissue tree list component, defines the data in mat-tree\\n","modifierKind":[148]},{"name":"enableNav","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether keyboard navigation is enabled</p>\\n","line":89,"rawdescription":"\\n\\nWhether keyboard navigation is enabled\\n"},{"name":"flattener","defaultValue":"new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  )","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Flattener of tissue tree list component, returns flat-data structure</p>\\n","line":102,"rawdescription":"\\n\\nFlattener of tissue tree list component, returns flat-data structure\\n","modifierKind":[148]}],"methodsClass":[{"name":"handleListClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":275,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEnables keyboard nav only if the tissue tree list is clicked\\n","description":"<p>Enables keyboard nav only if the tissue tree list is clicked</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":7658,"end":7663,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":7652,"end":7657,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Click event</p>\\n"}]},{"name":"handlePageClick","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":266,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDisable keyboard nav on click\\n","description":"<p>Disable keyboard nav on click</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:click\'"}],"modifierKind":[170]},{"name":"hasChild","args":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":""},{"name":"node","type":"InternalNode<K | T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":145,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ncheck if the current node has children\\n","description":"<p>check if the current node has children</p>\\n","jsdoctags":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":3835,"end":3839,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"node"},"type":"InternalNode<K | T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":3829,"end":3834,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>current selected node</p>\\n"},{"tagName":{"pos":3868,"end":3875,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>boolean, which means if node has children</p>\\n"}]},{"name":"onKeyDown","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":222,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nKeyboard navigation for tissue tree list\\n","description":"<p>Keyboard navigation for tissue tree list</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:keydown\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":5825,"end":5830,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":5819,"end":5824,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Keyboard event</p>\\n"}]},{"name":"resetSelection","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":163,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nResets selection and collapes all nodes of the tree.\\n","description":"<p>Resets selection and collapes all nodes of the tree.</p>\\n"},{"name":"selectNode","args":[{"name":"node","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":153,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt selects the node, which is clicked.\\n","description":"<p>It selects the node, which is clicked.</p>\\n","jsdoctags":[{"name":{"pos":4078,"end":4082,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"node"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":4072,"end":4077,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Tissue Tree Item, which is clicked</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEnables keyboard nav only if the tissue tree list is clicked\\n","description":"<p>Enables keyboard nav only if the tissue tree list is clicked</p>\\n","jsdoctags":[{"pos":7651,"end":7679,"kind":341,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":7652,"end":7657,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Click event</p>\\n","name":{"pos":7658,"end":7663,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"isNameFirst":true,"isBracketed":false}],"line":275},{"name":"document:click","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDisable keyboard nav on click\\n","description":"<p>Disable keyboard nav on click</p>\\n","line":266},{"name":"document:keydown","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nKeyboard navigation for tissue tree list\\n","description":"<p>Keyboard navigation for tissue tree list</p>\\n","jsdoctags":[{"pos":5818,"end":5849,"kind":341,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":5819,"end":5824,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Keyboard event</p>\\n","name":{"pos":5825,"end":5830,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"event"},"isNameFirst":true,"isBracketed":false}],"line":222}],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatTreeModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatExpansionModule","type":"module"},{"name":"MatRippleModule","type":"module"},{"name":"LinkDirective","type":"directive"}],"description":"<p>Tabular View for hubMap tissue side-bar</p>\\n","rawdescription":"\\n\\nTabular View for hubMap tissue side-bar\\n","type":"component","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  HostListener,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * Navigates to an illustration page\\n   */\\n  @Output() navigate = new EventEmitter();\\n\\n  /**\\n   * Whether keyboard navigation is enabled\\n   */\\n  enableNav = true;\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable,\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id]),\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n      this.control.expandAll();\\n    }\\n    if (\'selected\' in changes) {\\n      if (!this.selected) {\\n        this.control.expandAll();\\n      }\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      const node = this.control.dataNodes.find((n) => n.data === changes[\'selected\'].currentValue);\\n      if (!node?.expandable) {\\n        this.expandPath(path);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n\\n  /**\\n   * Keyboard navigation for tissue tree list\\n   * @param event Keyboard event\\n   */\\n  @HostListener(\'document:keydown\', [\'$event\'])\\n  onKeyDown(event: KeyboardEvent): void {\\n    if (!this.enableNav) {\\n      return;\\n    }\\n    if (this.control) {\\n      const nodes = this.control.dataNodes;\\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\\n\\n      const currentNode = nodes[selectedIndex];\\n      if (currentNode && currentNode.expandable) {\\n        const expandableNodes = nodes.filter((node) => node.expandable);\\n        const index = expandableNodes.indexOf(currentNode);\\n        if (event.key === \'ArrowLeft\') {\\n          this.control.collapse(currentNode);\\n        } else if (event.key === \'ArrowRight\') {\\n          this.control.expand(currentNode);\\n        } else if (\\n          event.key === \'ArrowDown\' &&\\n          index + 1 < expandableNodes.length &&\\n          !this.control.isExpanded(currentNode)\\n        ) {\\n          this.selectNode(expandableNodes[index + 1].data);\\n          return;\\n        } else if (event.key === \'ArrowUp\' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\\n          this.selectNode(expandableNodes[index - 1].data);\\n          return;\\n        }\\n      }\\n      if (event.key === \'ArrowDown\' && selectedIndex + 1 < nodes.length) {\\n        this.selectNode(nodes[selectedIndex + 1].data);\\n      }\\n      if (event.key === \'ArrowUp\' && selectedIndex - 1 >= 0) {\\n        this.selectNode(nodes[selectedIndex - 1].data);\\n      }\\n      if (event.key === \'Enter\' && !currentNode.expandable) {\\n        this.navigate.emit(currentNode.data);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Disable keyboard nav on click\\n   */\\n  @HostListener(\'document:click\')\\n  handlePageClick(): void {\\n    this.enableNav = false;\\n  }\\n\\n  /**\\n   * Enables keyboard nav only if the tissue tree list is clicked\\n   * @param event Click event\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  handleListClick(event: MouseEvent): void {\\n    event.stopPropagation();\\n    this.enableNav = true;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  overflow-y: auto;\\n\\n  .row {\\n    min-height: unset;\\n\\n    &.child {\\n      padding-left: 2rem !important;\\n\\n      @media (min-width: 90rem) {\\n        padding-left: 4rem !important;\\n      }\\n    }\\n\\n    &.selected {\\n      background-color: #fff3f0;\\n    }\\n\\n    .toggle {\\n      width: 2rem;\\n      height: 2rem;\\n      padding: 0.25rem;\\n    }\\n\\n    .label-container {\\n      display: flex;\\n      align-items: center;\\n      min-height: 2rem;\\n      border-radius: 0.25rem;\\n      width: 100%;\\n      font-weight: 500;\\n      font-size: 0.75rem;\\n\\n      .link {\\n        cursor: pointer;\\n        text-decoration: none;\\n        color: rgba(vars.$dark-primary-text);\\n        line-height: normal;\\n        width: 100%;\\n        height: 100%;\\n        align-items: center;\\n        display: flex;\\n      }\\n    }\\n\\n    &.selected .label-container .link {\\n      color: rgba(vars.$accent);\\n    }\\n\\n    &:focus-visible {\\n      outline: none;\\n    }\\n  }\\n}\\n","styleUrl":"./tissue-tree-list.component.scss"}],"stylesData":"","extends":[],"implements":["OnChanges"],"templateData":"<mat-tree [dataSource]=\\"dataSource\\" [treeControl]=\\"control\\" class=\\"tree\\">\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node; let level = level\\"\\n    [matTreeNodePadding]=\\"level\\"\\n    matTreeNodePaddingIndent=\\"64\\"\\n    [class.selected]=\\"node.data === selected\\"\\n    class=\\"row\\"\\n    [class.child]=\\"hasChild\\"\\n    tabIndex=\\"0\\"\\n  >\\n    <ng-container [ngTemplateOutlet]=\\"label\\" [ngTemplateOutletContext]=\\"node\\"> </ng-container>\\n  </mat-tree-node>\\n\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node; let level = level; when: hasChild\\"\\n    class=\\"row\\"\\n    [class.selected]=\\"node.data === selected\\"\\n    (mouseup)=\\"selectNode(node.data)\\"\\n  >\\n    <button mat-icon-button matTreeNodeToggle class=\\"toggle\\" [attr.aria-label]=\\"\'Toggle \' + node.label\\">\\n      <mat-icon>\\n        {{ control.isExpanded(node) ? \'keyboard_arrow_up\' : \'chevron_right\' }}\\n      </mat-icon>\\n    </button>\\n\\n    <ng-container [ngTemplateOutlet]=\\"label\\" [ngTemplateOutletContext]=\\"node\\"> </ng-container>\\n  </mat-tree-node>\\n</mat-tree>\\n\\n<ng-template let-label=\\"label\\" let-data=\\"data\\" #label>\\n  <div class=\\"label-container\\">\\n    <a\\n      *ngIf=\\"data.link; else noLink\\"\\n      [hraLink]=\\"data.link\\"\\n      [queryParams]=\\"{ id: data.id }\\"\\n      class=\\"link\\"\\n      (mouseup)=\\"selectNode(data)\\"\\n    >\\n      {{ label }}\\n    </a>\\n    <ng-template #noLink>\\n      <span>{{ label }}</span>\\n    </ng-template>\\n  </div>\\n</ng-template>\\n"},{"name":"TitleCardComponent","id":"component-TitleCardComponent-0a2974b2654b722a4713d86dc92bec29572f53a7c9be45dcfb238899cb2dde7218e5651a889589bc1f10c8f9a88d8b7399806ca74c64f64af5cf88eecb8f5650","file":"src/lib/title-card/title-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-title-card","styleUrls":["./title-card.component.scss"],"styles":[],"templateUrl":["./title-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for the title card shown to the user","description":"<p>Description for the title card shown to the user</p>\\n","line":18,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTitle for the title card shown to the user","description":"<p>Title for the title card shown to the user</p>\\n","line":15,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MarkdownModule","type":"module"}],"description":"<p>Displays title card to the user with title and description</p>\\n","rawdescription":"\\nDisplays title card to the user with title and description","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Displays title card to the user with title and description */\\n@Component({\\n  selector: \'hra-title-card\',\\n  imports: [CommonModule, MarkdownModule],\\n  templateUrl: \'./title-card.component.html\',\\n  styleUrls: [\'./title-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TitleCardComponent {\\n  /** Title for the title card shown to the user*/\\n  @Input() title = \'\';\\n\\n  /** Description for the title card shown to the user*/\\n  @Input() description = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .title {\\n    margin-bottom: 0.5rem;\\n  }\\n}\\n","styleUrl":"./title-card.component.scss"}],"stylesData":"","extends":[],"templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n"}],"modules":[],"miscellaneous":{"variables":[{"name":"DOWNLOADS_LIST_POSITION","ctype":"miscellaneous","subtype":"variable","file":"src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n]","rawdescription":"Positioning value for the download list popup","description":"<p>Positioning value for the download list popup</p>\\n"},{"name":"EMPTY_CONTACT_DATA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"Partial<ContactData>","defaultValue":"{\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n}","rawdescription":"Initial empty contact data","description":"<p>Initial empty contact data</p>\\n"},{"name":"HOVER_DELAY","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"200","rawdescription":"Delay before tooltip becomes visible","description":"<p>Delay before tooltip becomes visible</p>\\n"},{"name":"TOOLTIP_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n]","rawdescription":"Tooltip position settings","description":"<p>Tooltip position settings</p>\\n"}],"functions":[],"typealiases":[],"enumerations":[],"groupedVariables":{"src/lib/footer/footer.component.ts":[{"name":"DOWNLOADS_LIST_POSITION","ctype":"miscellaneous","subtype":"variable","file":"src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n]","rawdescription":"Positioning value for the download list popup","description":"<p>Positioning value for the download list popup</p>\\n"}],"src/lib/contact-modal/contact-modal.component.ts":[{"name":"EMPTY_CONTACT_DATA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"Partial<ContactData>","defaultValue":"{\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n}","rawdescription":"Initial empty contact data","description":"<p>Initial empty contact data</p>\\n"}],"src/lib/interactive-svg/interactive-svg.component.ts":[{"name":"HOVER_DELAY","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"200","rawdescription":"Delay before tooltip becomes visible","description":"<p>Delay before tooltip becomes visible</p>\\n"},{"name":"TOOLTIP_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n]","rawdescription":"Tooltip position settings","description":"<p>Tooltip position settings</p>\\n"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{}}}')},"./dist/compodoc/components-organisms/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"DataCell","id":"interface-DataCell-f6355244fa1d144ae8d44301c099f487c0efc16968b9c82187f1bca2b2ec4416184f2402ba1d165cc674d299f018f08ca9ba746564ef8d436a8e4773f422e950","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CdkVirtualScrollViewport, ScrollingModule } from \'@angular/cdk/scrolling\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef,\\n  Component,\\n  ElementRef,\\n  EventEmitter,\\n  HostListener,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnInit,\\n  Output,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { MatTableModule } from \'@angular/material/table\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { GradientPoint, SizeLegend } from \'@hra-ui/components/atoms\';\\nimport {\\n  BiomarkerTableDataCardComponent,\\n  BiomarkerTableDataIconComponent,\\n  DataItem,\\n  SourceListItem,\\n} from \'@hra-ui/components/molecules\';\\nimport { TableVirtualScrollDataSource, TableVirtualScrollModule } from \'ng-table-virtual-scroll\';\\nimport { ReplaySubject } from \'rxjs\';\\n\\n/**\\n * RGBTriblet of type RGB to store color\\n */\\ntype RGBTriplet = [number, number, number];\\n\\n/**\\n * An interface representing a single cell of the table.\\n */\\nexport interface DataCell {\\n  /** Represents the color of the icon */\\n  color: string;\\n  /** Represents the size of the icon */\\n  size: number;\\n  /** Represents the data for the data card */\\n  data: {\\n    /** Cell name */\\n    cell: string;\\n    /** Biomarker name */\\n    biomarker: string;\\n    /** Mean expression value */\\n    meanExpression: number;\\n    /** Dataset count */\\n    dataset_count?: number;\\n  };\\n}\\n\\n/**\\n * Details of the Tissue\\n */\\nexport interface TissueInfo {\\n  /** ID of the Tissue */\\n  id: string;\\n  /** Name of the Tissue */\\n  label: string;\\n}\\n\\n/** Describes the composition of a single row in the table */\\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\\n\\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\\n@Component({\\n  selector: \'hra-biomarker-table\',\\n  imports: [\\n    CommonModule,\\n    MatTableModule,\\n    BiomarkerTableDataIconComponent,\\n    HoverDirective,\\n    BiomarkerTableDataCardComponent,\\n    ScrollingModule,\\n    TableVirtualScrollModule,\\n  ],\\n  templateUrl: \'./biomarker-table.component.html\',\\n  styleUrls: [\'./biomarker-table.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableComponent<T extends DataCell> implements OnInit, OnChanges {\\n  /**\\n   * Input: TissueInfo carrying the details of the tissue open\\n   */\\n  @Input() tissueInfo: TissueInfo = {\\n    id: \'\',\\n    label: \'\',\\n  };\\n\\n  /** Columns for the table */\\n  @Input() columns: string[] = [];\\n\\n  /** Source list for biomarker table */\\n  @Input() dataSources: SourceListItem[] = [];\\n\\n  /** Rows of the table */\\n  @Input() data: DataRow<T>[] = [];\\n\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n\\n  /** Cell id which is hovered, used for highlighting */\\n  @Input() highlightedCellId = \'\';\\n\\n  /** List of cell ids in the illustration */\\n  @Input() illustrationIds: string[] = [];\\n\\n  /** Emits cell type label when row is hovered */\\n  @Output() readonly rowHover = new EventEmitter<string>();\\n\\n  /** Reference to virtual scroll viewport */\\n  @ViewChild(CdkVirtualScrollViewport, { static: true }) vscroll!: CdkVirtualScrollViewport;\\n\\n  /** Reference to biomarker table */\\n  @ViewChild(\'table\', { static: true, read: ElementRef }) table!: ElementRef;\\n\\n  /** Columns replaysubject */\\n  readonly columns$ = new ReplaySubject<string[]>(1);\\n\\n  /** Cell width (px) */\\n  private readonly cellWidth = 44;\\n  /** Extra columns to render outside the visible viewport */\\n  private readonly extraDisplayedColumnCount = 2;\\n\\n  /** Current horizontal viewport size */\\n  private horizontalViewportSize = 400;\\n  /** Current horizontal scroll offset */\\n  private horizontalScrollOffset = 0;\\n  /** Current displayed column count */\\n  private displayedColumnCount = 10;\\n  /** Current displayed column offset */\\n  private displayedColumnOffset = 0;\\n\\n  /** Gets the current width of the prefiller column */\\n  get preFillerWidth(): string {\\n    return `${this.cellWidth * this.displayedColumnOffset}px`;\\n  }\\n\\n  /** Gets the current width of the postfiller column */\\n  get postFillerWidth(): string {\\n    const count = this.columns.length - this.displayedColumnCount - this.displayedColumnOffset;\\n    return `${this.cellWidth * count}px`;\\n  }\\n\\n  /** Source for the table */\\n  readonly dataSource = new TableVirtualScrollDataSource<DataRow<T>>([]);\\n\\n  /** Change detection */\\n  private readonly cdr = inject(ChangeDetectorRef);\\n\\n  /**\\n   * Subscribes to scroll event on virtual scroll viewport and checks displayed columns\\n   */\\n  ngOnInit(): void {\\n    const scroll$ = this.vscroll.scrollable.elementScrolled();\\n    scroll$.subscribe(() => this.checkDisplayedColumns());\\n  }\\n\\n  /**\\n   * Sets the data source for the table on every change\\n   * Sorts the biomarker table on illustrationIds change\\n   * @param changes object consisting of change in the Input\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    this.checkDisplayedColumns(\'columns\' in changes);\\n    if (\'data\' in changes || \'illustrationIds\' in changes) {\\n      this.dataSource.data = this.sortTableData(this.data);\\n    }\\n  }\\n\\n  /**\\n   * Checks for column updates on mouse move\\n   */\\n  @HostListener(\'window:mousemove\', [\'$event\'])\\n  onMouseMove() {\\n    this.checkDisplayedColumns();\\n  }\\n\\n  /**\\n   * Returns index value\\n   */\\n  trackByIndex(index: number): number {\\n    return index;\\n  }\\n\\n  /**\\n   * Checks to see if columns should be updated\\n   */\\n  checkDisplayedColumns(forceUpdate = false): void {\\n    const scrollable = this.vscroll.scrollable;\\n    const size = scrollable.measureViewportSize(\'horizontal\');\\n    const offset = scrollable.measureScrollOffset(\'start\');\\n    let shouldUpdate = forceUpdate;\\n\\n    if (size !== this.horizontalViewportSize) {\\n      this.updateHorizontalViewportSize(size);\\n      shouldUpdate = true;\\n    }\\n    if (offset !== this.horizontalScrollOffset) {\\n      this.updateHorizontalViewportOffset(offset);\\n      shouldUpdate = true;\\n    }\\n\\n    if (shouldUpdate) {\\n      this.updateColumns();\\n    }\\n  }\\n\\n  /**\\n   * Updates horizontal viewport size and updates displayed column count\\n   */\\n  updateHorizontalViewportSize(size: number): void {\\n    this.horizontalViewportSize = size;\\n    this.displayedColumnCount =\\n      Math.ceil(this.horizontalViewportSize / this.cellWidth) + this.extraDisplayedColumnCount;\\n  }\\n\\n  /**\\n   * Updates horizontal viewport offset and updates displayed column offset\\n   */\\n  updateHorizontalViewportOffset(offset: number): void {\\n    this.horizontalScrollOffset = offset;\\n    this.displayedColumnOffset = Math.max(Math.floor(offset / this.cellWidth) - this.extraDisplayedColumnCount / 2, 0);\\n  }\\n\\n  /**\\n   * Updates table columns with prefiller and postfiller columns\\n   */\\n  updateColumns(): void {\\n    const { displayedColumnCount, displayedColumnOffset } = this;\\n    const columns = [\'type\', \'count\'];\\n    if (this.displayedColumnOffset > 0) {\\n      columns.push(\'preFiller\');\\n    }\\n\\n    const displayedColumns = this.columns.slice(displayedColumnOffset, displayedColumnOffset + displayedColumnCount);\\n    columns.push(...displayedColumns);\\n\\n    if (displayedColumnOffset + displayedColumnCount < this.columns.length) {\\n      columns.push(\'postFiller\');\\n    }\\n\\n    this.columns$.next(columns);\\n    this.cdr.detectChanges();\\n  }\\n\\n  /**\\n   * Sorts table by cell type alphabetically, then puts cells that are in the illustration on top\\n   */\\n  sortTableData(data: DataRow<T>[]): DataRow<T>[] {\\n    const illustrationIdsSet = new Set(this.illustrationIds);\\n    const inIllustration = new Map<DataRow<T>, boolean>();\\n    for (const row of data) {\\n      const id = this.getHoverId(row);\\n      inIllustration.set(row, illustrationIdsSet.has(id));\\n    }\\n\\n    return [...data].sort((row1, row2) => {\\n      const in1 = inIllustration.get(row1);\\n      const in2 = inIllustration.get(row2);\\n\\n      if (in1 && !in2) {\\n        return -1;\\n      } else if (!in1 && in2) {\\n        return 1;\\n      }\\n\\n      return row1[0].localeCompare(row2[0]);\\n    });\\n  }\\n\\n  /**\\n   * Returns true if id matches the cell id of the row\\n   * @param row Highlighted row\\n   */\\n  isHighlighted(row: DataRow<T>): boolean {\\n    return this.getHoverId(row) === this.highlightedCellId;\\n  }\\n\\n  /**\\n   * Gets hover id from row\\n   * @param data row data\\n   * @returns cell type id\\n   */\\n  getHoverId(data: DataRow<T>): string {\\n    const entry = data.slice(2).find((entry) => entry) as T;\\n    return entry?.data.cell;\\n  }\\n\\n  /** Lerp function to give value beween min and max value based on the given value\\n   *\\n   * @param value\\n   * @param min\\n   * @param max\\n   * @returns\\n   */\\n  lerp(value: number, min: number, max: number): number {\\n    return min * (1 - value) + max * value;\\n  }\\n\\n  /**\\n   * Converts HexCode to RGB\\n   * @param hex\\n   * @returns\\n   */\\n  hex2rgb(hex: string): RGBTriplet {\\n    const r = parseInt(hex.slice(1, 3), 16);\\n    const g = parseInt(hex.slice(3, 5), 16);\\n    const b = parseInt(hex.slice(5, 7), 16);\\n    return [r, g, b];\\n  }\\n\\n  /**\\n   * Gets Min and Max color grade based on the meanExpression value\\n   * @param meanExpression\\n   * @returns\\n   */\\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\\n    const index = this.gradient.findIndex((item, i, arr) => {\\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\\n    });\\n\\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\\n    const maxColor: RGBTriplet = this.hex2rgb(this.gradient[index + 1].color);\\n\\n    return { minColor, maxColor };\\n  }\\n\\n  /**\\n   * Gets Min and Max size grade based on the Percentage value\\n   * @param percentage\\n   * @returns\\n   */\\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\\n    const index = this.sizes.findIndex((item, i, arr) => {\\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\\n    });\\n    const minSize: number = this.sizes[index]?.radius;\\n    const maxSize: number = this.sizes[index + 1].radius;\\n    return { minSize, maxSize };\\n  }\\n\\n  /**\\n   * Calculates the color of this value on this gradient\\n   * @param value\\n   * @returns\\n   */\\n  getColor(value: number): string {\\n    const { minColor, maxColor } = this.getMinMaxColor(value * 100);\\n    return (\\n      \'#\' +\\n      minColor\\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\\n        .map((component) => {\\n          const hex = Math.round(component).toString(16);\\n          return hex.length == 1 ? \'0\' + hex : hex;\\n        })\\n        .join(\'\')\\n    );\\n  }\\n\\n  /**\\n   * gets Size of the Cell based on the percentage value\\n   * @param value\\n   * @returns\\n   */\\n  getSize(value: number): number {\\n    const { minSize, maxSize } = this.getMinMaxSize(value);\\n    return this.lerp(value, minSize, maxSize);\\n  }\\n\\n  /**\\n   * Processes the object for hover data for Table Cell\\n   * @param index index of the row of the datasource\\n   * @param row row of the datasource\\n   * @returns\\n   */\\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\\n    if (row[index] === undefined) {\\n      return [];\\n    }\\n\\n    const {\\n      tissueInfo: { id, label },\\n    } = this;\\n    const {\\n      data: { cell, biomarker, meanExpression, dataset_count },\\n    } = row[index] as T;\\n\\n    return [\\n      [\\n        { label: \'Functional Tissue Unit Name\', value: label },\\n        { label: \'Uberon ID\', value: id },\\n        { label: \'#Datasets\', value: `${dataset_count ?? 0}` },\\n      ],\\n      [\\n        { label: \'Cell Type Name\', value: row[0] },\\n        { label: \'CL ID\', value: cell },\\n        { label: \'Number of Cells\', value: `${row[1]}` },\\n      ],\\n      [\\n        { label: \'Gene Name\', value: this.columns[index - 2] },\\n        { label: \'HGNC ID\', value: biomarker },\\n        { label: \'Mean Expression Value\', value: meanExpression.toFixed(6) },\\n      ],\\n    ];\\n  }\\n\\n  /**\\n   * Sets and emits cell type id on row hover\\n   * @param hoverId cell type id\\n   */\\n  setHoverId(hoverId?: string): void {\\n    this.highlightedCellId = hoverId ?? \'\';\\n    this.rowHover.emit(hoverId);\\n  }\\n}\\n","properties":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Represents the color of the icon</p>\\n","line":40,"rawdescription":"\\nRepresents the color of the icon"},{"name":"data","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"<p>Represents the data for the data card</p>\\n","line":44,"rawdescription":"\\nRepresents the data for the data card"},{"name":"size","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Represents the size of the icon</p>\\n","line":42,"rawdescription":"\\nRepresents the size of the icon"}],"indexSignatures":[],"kind":171,"description":"<p>An interface representing a single cell of the table.</p>\\n","rawdescription":"\\n\\nAn interface representing a single cell of the table.\\n","methods":[],"extends":[]},{"name":"TissueInfo","id":"interface-TissueInfo-f6355244fa1d144ae8d44301c099f487c0efc16968b9c82187f1bca2b2ec4416184f2402ba1d165cc674d299f018f08ca9ba746564ef8d436a8e4773f422e950","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CdkVirtualScrollViewport, ScrollingModule } from \'@angular/cdk/scrolling\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef,\\n  Component,\\n  ElementRef,\\n  EventEmitter,\\n  HostListener,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnInit,\\n  Output,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { MatTableModule } from \'@angular/material/table\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { GradientPoint, SizeLegend } from \'@hra-ui/components/atoms\';\\nimport {\\n  BiomarkerTableDataCardComponent,\\n  BiomarkerTableDataIconComponent,\\n  DataItem,\\n  SourceListItem,\\n} from \'@hra-ui/components/molecules\';\\nimport { TableVirtualScrollDataSource, TableVirtualScrollModule } from \'ng-table-virtual-scroll\';\\nimport { ReplaySubject } from \'rxjs\';\\n\\n/**\\n * RGBTriblet of type RGB to store color\\n */\\ntype RGBTriplet = [number, number, number];\\n\\n/**\\n * An interface representing a single cell of the table.\\n */\\nexport interface DataCell {\\n  /** Represents the color of the icon */\\n  color: string;\\n  /** Represents the size of the icon */\\n  size: number;\\n  /** Represents the data for the data card */\\n  data: {\\n    /** Cell name */\\n    cell: string;\\n    /** Biomarker name */\\n    biomarker: string;\\n    /** Mean expression value */\\n    meanExpression: number;\\n    /** Dataset count */\\n    dataset_count?: number;\\n  };\\n}\\n\\n/**\\n * Details of the Tissue\\n */\\nexport interface TissueInfo {\\n  /** ID of the Tissue */\\n  id: string;\\n  /** Name of the Tissue */\\n  label: string;\\n}\\n\\n/** Describes the composition of a single row in the table */\\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\\n\\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\\n@Component({\\n  selector: \'hra-biomarker-table\',\\n  imports: [\\n    CommonModule,\\n    MatTableModule,\\n    BiomarkerTableDataIconComponent,\\n    HoverDirective,\\n    BiomarkerTableDataCardComponent,\\n    ScrollingModule,\\n    TableVirtualScrollModule,\\n  ],\\n  templateUrl: \'./biomarker-table.component.html\',\\n  styleUrls: [\'./biomarker-table.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableComponent<T extends DataCell> implements OnInit, OnChanges {\\n  /**\\n   * Input: TissueInfo carrying the details of the tissue open\\n   */\\n  @Input() tissueInfo: TissueInfo = {\\n    id: \'\',\\n    label: \'\',\\n  };\\n\\n  /** Columns for the table */\\n  @Input() columns: string[] = [];\\n\\n  /** Source list for biomarker table */\\n  @Input() dataSources: SourceListItem[] = [];\\n\\n  /** Rows of the table */\\n  @Input() data: DataRow<T>[] = [];\\n\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n\\n  /** Cell id which is hovered, used for highlighting */\\n  @Input() highlightedCellId = \'\';\\n\\n  /** List of cell ids in the illustration */\\n  @Input() illustrationIds: string[] = [];\\n\\n  /** Emits cell type label when row is hovered */\\n  @Output() readonly rowHover = new EventEmitter<string>();\\n\\n  /** Reference to virtual scroll viewport */\\n  @ViewChild(CdkVirtualScrollViewport, { static: true }) vscroll!: CdkVirtualScrollViewport;\\n\\n  /** Reference to biomarker table */\\n  @ViewChild(\'table\', { static: true, read: ElementRef }) table!: ElementRef;\\n\\n  /** Columns replaysubject */\\n  readonly columns$ = new ReplaySubject<string[]>(1);\\n\\n  /** Cell width (px) */\\n  private readonly cellWidth = 44;\\n  /** Extra columns to render outside the visible viewport */\\n  private readonly extraDisplayedColumnCount = 2;\\n\\n  /** Current horizontal viewport size */\\n  private horizontalViewportSize = 400;\\n  /** Current horizontal scroll offset */\\n  private horizontalScrollOffset = 0;\\n  /** Current displayed column count */\\n  private displayedColumnCount = 10;\\n  /** Current displayed column offset */\\n  private displayedColumnOffset = 0;\\n\\n  /** Gets the current width of the prefiller column */\\n  get preFillerWidth(): string {\\n    return `${this.cellWidth * this.displayedColumnOffset}px`;\\n  }\\n\\n  /** Gets the current width of the postfiller column */\\n  get postFillerWidth(): string {\\n    const count = this.columns.length - this.displayedColumnCount - this.displayedColumnOffset;\\n    return `${this.cellWidth * count}px`;\\n  }\\n\\n  /** Source for the table */\\n  readonly dataSource = new TableVirtualScrollDataSource<DataRow<T>>([]);\\n\\n  /** Change detection */\\n  private readonly cdr = inject(ChangeDetectorRef);\\n\\n  /**\\n   * Subscribes to scroll event on virtual scroll viewport and checks displayed columns\\n   */\\n  ngOnInit(): void {\\n    const scroll$ = this.vscroll.scrollable.elementScrolled();\\n    scroll$.subscribe(() => this.checkDisplayedColumns());\\n  }\\n\\n  /**\\n   * Sets the data source for the table on every change\\n   * Sorts the biomarker table on illustrationIds change\\n   * @param changes object consisting of change in the Input\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    this.checkDisplayedColumns(\'columns\' in changes);\\n    if (\'data\' in changes || \'illustrationIds\' in changes) {\\n      this.dataSource.data = this.sortTableData(this.data);\\n    }\\n  }\\n\\n  /**\\n   * Checks for column updates on mouse move\\n   */\\n  @HostListener(\'window:mousemove\', [\'$event\'])\\n  onMouseMove() {\\n    this.checkDisplayedColumns();\\n  }\\n\\n  /**\\n   * Returns index value\\n   */\\n  trackByIndex(index: number): number {\\n    return index;\\n  }\\n\\n  /**\\n   * Checks to see if columns should be updated\\n   */\\n  checkDisplayedColumns(forceUpdate = false): void {\\n    const scrollable = this.vscroll.scrollable;\\n    const size = scrollable.measureViewportSize(\'horizontal\');\\n    const offset = scrollable.measureScrollOffset(\'start\');\\n    let shouldUpdate = forceUpdate;\\n\\n    if (size !== this.horizontalViewportSize) {\\n      this.updateHorizontalViewportSize(size);\\n      shouldUpdate = true;\\n    }\\n    if (offset !== this.horizontalScrollOffset) {\\n      this.updateHorizontalViewportOffset(offset);\\n      shouldUpdate = true;\\n    }\\n\\n    if (shouldUpdate) {\\n      this.updateColumns();\\n    }\\n  }\\n\\n  /**\\n   * Updates horizontal viewport size and updates displayed column count\\n   */\\n  updateHorizontalViewportSize(size: number): void {\\n    this.horizontalViewportSize = size;\\n    this.displayedColumnCount =\\n      Math.ceil(this.horizontalViewportSize / this.cellWidth) + this.extraDisplayedColumnCount;\\n  }\\n\\n  /**\\n   * Updates horizontal viewport offset and updates displayed column offset\\n   */\\n  updateHorizontalViewportOffset(offset: number): void {\\n    this.horizontalScrollOffset = offset;\\n    this.displayedColumnOffset = Math.max(Math.floor(offset / this.cellWidth) - this.extraDisplayedColumnCount / 2, 0);\\n  }\\n\\n  /**\\n   * Updates table columns with prefiller and postfiller columns\\n   */\\n  updateColumns(): void {\\n    const { displayedColumnCount, displayedColumnOffset } = this;\\n    const columns = [\'type\', \'count\'];\\n    if (this.displayedColumnOffset > 0) {\\n      columns.push(\'preFiller\');\\n    }\\n\\n    const displayedColumns = this.columns.slice(displayedColumnOffset, displayedColumnOffset + displayedColumnCount);\\n    columns.push(...displayedColumns);\\n\\n    if (displayedColumnOffset + displayedColumnCount < this.columns.length) {\\n      columns.push(\'postFiller\');\\n    }\\n\\n    this.columns$.next(columns);\\n    this.cdr.detectChanges();\\n  }\\n\\n  /**\\n   * Sorts table by cell type alphabetically, then puts cells that are in the illustration on top\\n   */\\n  sortTableData(data: DataRow<T>[]): DataRow<T>[] {\\n    const illustrationIdsSet = new Set(this.illustrationIds);\\n    const inIllustration = new Map<DataRow<T>, boolean>();\\n    for (const row of data) {\\n      const id = this.getHoverId(row);\\n      inIllustration.set(row, illustrationIdsSet.has(id));\\n    }\\n\\n    return [...data].sort((row1, row2) => {\\n      const in1 = inIllustration.get(row1);\\n      const in2 = inIllustration.get(row2);\\n\\n      if (in1 && !in2) {\\n        return -1;\\n      } else if (!in1 && in2) {\\n        return 1;\\n      }\\n\\n      return row1[0].localeCompare(row2[0]);\\n    });\\n  }\\n\\n  /**\\n   * Returns true if id matches the cell id of the row\\n   * @param row Highlighted row\\n   */\\n  isHighlighted(row: DataRow<T>): boolean {\\n    return this.getHoverId(row) === this.highlightedCellId;\\n  }\\n\\n  /**\\n   * Gets hover id from row\\n   * @param data row data\\n   * @returns cell type id\\n   */\\n  getHoverId(data: DataRow<T>): string {\\n    const entry = data.slice(2).find((entry) => entry) as T;\\n    return entry?.data.cell;\\n  }\\n\\n  /** Lerp function to give value beween min and max value based on the given value\\n   *\\n   * @param value\\n   * @param min\\n   * @param max\\n   * @returns\\n   */\\n  lerp(value: number, min: number, max: number): number {\\n    return min * (1 - value) + max * value;\\n  }\\n\\n  /**\\n   * Converts HexCode to RGB\\n   * @param hex\\n   * @returns\\n   */\\n  hex2rgb(hex: string): RGBTriplet {\\n    const r = parseInt(hex.slice(1, 3), 16);\\n    const g = parseInt(hex.slice(3, 5), 16);\\n    const b = parseInt(hex.slice(5, 7), 16);\\n    return [r, g, b];\\n  }\\n\\n  /**\\n   * Gets Min and Max color grade based on the meanExpression value\\n   * @param meanExpression\\n   * @returns\\n   */\\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\\n    const index = this.gradient.findIndex((item, i, arr) => {\\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\\n    });\\n\\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\\n    const maxColor: RGBTriplet = this.hex2rgb(this.gradient[index + 1].color);\\n\\n    return { minColor, maxColor };\\n  }\\n\\n  /**\\n   * Gets Min and Max size grade based on the Percentage value\\n   * @param percentage\\n   * @returns\\n   */\\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\\n    const index = this.sizes.findIndex((item, i, arr) => {\\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\\n    });\\n    const minSize: number = this.sizes[index]?.radius;\\n    const maxSize: number = this.sizes[index + 1].radius;\\n    return { minSize, maxSize };\\n  }\\n\\n  /**\\n   * Calculates the color of this value on this gradient\\n   * @param value\\n   * @returns\\n   */\\n  getColor(value: number): string {\\n    const { minColor, maxColor } = this.getMinMaxColor(value * 100);\\n    return (\\n      \'#\' +\\n      minColor\\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\\n        .map((component) => {\\n          const hex = Math.round(component).toString(16);\\n          return hex.length == 1 ? \'0\' + hex : hex;\\n        })\\n        .join(\'\')\\n    );\\n  }\\n\\n  /**\\n   * gets Size of the Cell based on the percentage value\\n   * @param value\\n   * @returns\\n   */\\n  getSize(value: number): number {\\n    const { minSize, maxSize } = this.getMinMaxSize(value);\\n    return this.lerp(value, minSize, maxSize);\\n  }\\n\\n  /**\\n   * Processes the object for hover data for Table Cell\\n   * @param index index of the row of the datasource\\n   * @param row row of the datasource\\n   * @returns\\n   */\\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\\n    if (row[index] === undefined) {\\n      return [];\\n    }\\n\\n    const {\\n      tissueInfo: { id, label },\\n    } = this;\\n    const {\\n      data: { cell, biomarker, meanExpression, dataset_count },\\n    } = row[index] as T;\\n\\n    return [\\n      [\\n        { label: \'Functional Tissue Unit Name\', value: label },\\n        { label: \'Uberon ID\', value: id },\\n        { label: \'#Datasets\', value: `${dataset_count ?? 0}` },\\n      ],\\n      [\\n        { label: \'Cell Type Name\', value: row[0] },\\n        { label: \'CL ID\', value: cell },\\n        { label: \'Number of Cells\', value: `${row[1]}` },\\n      ],\\n      [\\n        { label: \'Gene Name\', value: this.columns[index - 2] },\\n        { label: \'HGNC ID\', value: biomarker },\\n        { label: \'Mean Expression Value\', value: meanExpression.toFixed(6) },\\n      ],\\n    ];\\n  }\\n\\n  /**\\n   * Sets and emits cell type id on row hover\\n   * @param hoverId cell type id\\n   */\\n  setHoverId(hoverId?: string): void {\\n    this.highlightedCellId = hoverId ?? \'\';\\n    this.rowHover.emit(hoverId);\\n  }\\n}\\n","properties":[{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>ID of the Tissue</p>\\n","line":61,"rawdescription":"\\nID of the Tissue"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Name of the Tissue</p>\\n","line":63,"rawdescription":"\\nName of the Tissue"}],"indexSignatures":[],"kind":171,"description":"<p>Details of the Tissue</p>\\n","rawdescription":"\\n\\nDetails of the Tissue\\n","methods":[],"extends":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"BiomarkerTableComponent","id":"component-BiomarkerTableComponent-f6355244fa1d144ae8d44301c099f487c0efc16968b9c82187f1bca2b2ec4416184f2402ba1d165cc674d299f018f08ca9ba746564ef8d436a8e4773f422e950","file":"src/lib/biomarker-table/biomarker-table.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table","styleUrls":["./biomarker-table.component.scss"],"styles":[],"templateUrl":["./biomarker-table.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"columns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nColumns for the table","description":"<p>Columns for the table</p>\\n","line":95,"type":"string[]","decorators":[]},{"name":"data","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRows of the table","description":"<p>Rows of the table</p>\\n","line":101,"type":"DataRow<T>[]","decorators":[]},{"name":"dataSources","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSource list for biomarker table","description":"<p>Source list for biomarker table</p>\\n","line":98,"type":"SourceListItem[]","decorators":[]},{"name":"gradient","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nGradient colors along with their stop points","description":"<p>Gradient colors along with their stop points</p>\\n","line":104,"type":"GradientPoint[]","decorators":[]},{"name":"highlightedCellId","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nCell id which is hovered, used for highlighting","description":"<p>Cell id which is hovered, used for highlighting</p>\\n","line":110,"type":"string","decorators":[]},{"name":"illustrationIds","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nList of cell ids in the illustration","description":"<p>List of cell ids in the illustration</p>\\n","line":113,"type":"string[]","decorators":[]},{"name":"sizes","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTaking input for the radius of the circle and the label to be displayed.","description":"<p>Taking input for the radius of the circle and the label to be displayed.</p>\\n","line":107,"type":"SizeLegend[]","decorators":[]},{"name":"tissueInfo","defaultValue":"{\\n    id: \'\',\\n    label: \'\',\\n  }","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput: TissueInfo carrying the details of the tissue open\\n","description":"<p>Input: TissueInfo carrying the details of the tissue open</p>\\n","line":89,"type":"TissueInfo","decorators":[]}],"outputsClass":[{"name":"rowHover","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits cell type label when row is hovered","description":"<p>Emits cell type label when row is hovered</p>\\n","line":116,"type":"EventEmitter"}],"propertiesClass":[{"name":"columns$","defaultValue":"new ReplaySubject<string[]>(1)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Columns replaysubject</p>\\n","line":125,"rawdescription":"\\nColumns replaysubject","modifierKind":[148]},{"name":"dataSource","defaultValue":"new TableVirtualScrollDataSource<DataRow<T>>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Source for the table</p>\\n","line":153,"rawdescription":"\\nSource for the table","modifierKind":[148]},{"name":"table","deprecated":false,"deprecationMessage":"","type":"ElementRef","indexKey":"","optional":false,"description":"<p>Reference to biomarker table</p>\\n","line":122,"rawdescription":"\\nReference to biomarker table","decorators":[{"name":"ViewChild","stringifiedArguments":"\'table\', {static: true, read: ElementRef}"}],"modifierKind":[170]},{"name":"vscroll","deprecated":false,"deprecationMessage":"","type":"CdkVirtualScrollViewport","indexKey":"","optional":false,"description":"<p>Reference to virtual scroll viewport</p>\\n","line":119,"rawdescription":"\\nReference to virtual scroll viewport","decorators":[{"name":"ViewChild","stringifiedArguments":"CdkVirtualScrollViewport, {static: true}"}],"modifierKind":[170]}],"methodsClass":[{"name":"checkDisplayedColumns","args":[{"name":"forceUpdate","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false"}],"optional":false,"returnType":"void","typeParameters":[],"line":196,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks to see if columns should be updated\\n","description":"<p>Checks to see if columns should be updated</p>\\n","jsdoctags":[{"name":"forceUpdate","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"text":"param"}}]},{"name":"getColor","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":355,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCalculates the color of this value on this gradient\\n","description":"<p>Calculates the color of this value on this gradient</p>\\n","jsdoctags":[{"name":{"pos":10252,"end":10257,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"value"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":10246,"end":10251,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"tagName":{"pos":10264,"end":10271,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":""}]},{"name":"getHoverData","args":[{"type":"[number, DataRow<T>]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"[][]","typeParameters":[],"line":385,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nProcesses the object for hover data for Table Cell\\n","description":"<p>Processes the object for hover data for Table Cell</p>\\n","jsdoctags":[{"type":"[number, DataRow<T>]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":11080,"end":11087,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":""}]},{"name":"getHoverId","args":[{"name":"data","type":"DataRow<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":292,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGets hover id from row\\n","description":"<p>Gets hover id from row</p>\\n","jsdoctags":[{"name":{"pos":8345,"end":8349,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"data"},"type":"DataRow<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":8339,"end":8344,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>row data</p>\\n"},{"tagName":{"pos":8365,"end":8372,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>cell type id</p>\\n"}]},{"name":"getMinMaxColor","args":[{"name":"meanExpression","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":325,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGets Min and Max color grade based on the meanExpression value\\n","description":"<p>Gets Min and Max color grade based on the meanExpression value</p>\\n","jsdoctags":[{"name":{"pos":9150,"end":9164,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"meanExpression"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":9144,"end":9149,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"tagName":{"pos":9171,"end":9178,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":""}]},{"name":"getMinMaxSize","args":[{"name":"percentage","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":341,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGets Min and Max size grade based on the Percentage value\\n","description":"<p>Gets Min and Max size grade based on the Percentage value</p>\\n","jsdoctags":[{"name":{"pos":9742,"end":9752,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"percentage"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":9736,"end":9741,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"tagName":{"pos":9759,"end":9766,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":""}]},{"name":"getSize","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":374,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ngets Size of the Cell based on the percentage value\\n","description":"<p>gets Size of the Cell based on the percentage value</p>\\n","jsdoctags":[{"name":{"pos":10748,"end":10753,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"value"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":10742,"end":10747,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"tagName":{"pos":10760,"end":10767,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":""}]},{"name":"hex2rgb","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"RGBTriplet","typeParameters":[],"line":313,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nConverts HexCode to RGB\\n","description":"<p>Converts HexCode to RGB</p>\\n","jsdoctags":[{"name":{"pos":8841,"end":8844,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"hex"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":8835,"end":8840,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"tagName":{"pos":8851,"end":8858,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":""}]},{"name":"isHighlighted","args":[{"name":"row","type":"DataRow<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":283,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns true if id matches the cell id of the row\\n","description":"<p>Returns true if id matches the cell id of the row</p>\\n","jsdoctags":[{"name":{"pos":8164,"end":8167,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"row"},"type":"DataRow<T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":8158,"end":8163,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Highlighted row</p>\\n"}]},{"name":"lerp","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""},{"name":"min","type":"number","deprecated":false,"deprecationMessage":""},{"name":"max","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":304,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nLerp function to give value beween min and max value based on the given value\\n\\n","description":"<p>Lerp function to give value beween min and max value based on the given value</p>\\n","jsdoctags":[{"name":{"pos":8629,"end":8634,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"value"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":8623,"end":8628,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"name":{"pos":8647,"end":8650,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"min"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":8641,"end":8646,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"name":{"pos":8663,"end":8666,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"max"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":8657,"end":8662,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":""},{"tagName":{"pos":8673,"end":8680,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":""}]},{"name":"onMouseMove","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":182,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks for column updates on mouse move\\n","description":"<p>Checks for column updates on mouse move</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:mousemove\', [\'$event\']"}],"modifierKind":[170]},{"name":"setHoverId","args":[{"name":"hoverId","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":420,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSets and emits cell type id on row hover\\n","description":"<p>Sets and emits cell type id on row hover</p>\\n","jsdoctags":[{"name":{"pos":12034,"end":12041,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"hoverId"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":12028,"end":12033,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>cell type id</p>\\n"}]},{"name":"sortTableData","args":[{"name":"data","type":"DataRow<T>[]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataRow[]","typeParameters":[],"line":257,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSorts table by cell type alphabetically, then puts cells that are in the illustration on top\\n","description":"<p>Sorts table by cell type alphabetically, then puts cells that are in the illustration on top</p>\\n","jsdoctags":[{"name":"data","type":"DataRow<T>[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"trackByIndex","args":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":189,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturns index value\\n","description":"<p>Returns index value</p>\\n","jsdoctags":[{"name":"index","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateColumns","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":236,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates table columns with prefiller and postfiller columns\\n","description":"<p>Updates table columns with prefiller and postfiller columns</p>\\n"},{"name":"updateHorizontalViewportOffset","args":[{"name":"offset","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":228,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates horizontal viewport offset and updates displayed column offset\\n","description":"<p>Updates horizontal viewport offset and updates displayed column offset</p>\\n","jsdoctags":[{"name":"offset","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateHorizontalViewportSize","args":[{"name":"size","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":219,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nUpdates horizontal viewport size and updates displayed column count\\n","description":"<p>Updates horizontal viewport size and updates displayed column count</p>\\n","jsdoctags":[{"name":"size","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"window:mousemove","args":[],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nChecks for column updates on mouse move\\n","description":"<p>Checks for column updates on mouse move</p>\\n","line":182}],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatTableModule","type":"module"},{"name":"BiomarkerTableDataIconComponent","type":"component"},{"name":"HoverDirective","type":"directive"},{"name":"BiomarkerTableDataCardComponent","type":"component"},{"name":"ScrollingModule","type":"module"},{"name":"TableVirtualScrollModule","type":"module"}],"description":"<p>Cell types table, describing the types and quanitites of cells for a specific organ</p>\\n","rawdescription":"\\nCell types table, describing the types and quanitites of cells for a specific organ","type":"component","sourceCode":"import { CdkVirtualScrollViewport, ScrollingModule } from \'@angular/cdk/scrolling\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef,\\n  Component,\\n  ElementRef,\\n  EventEmitter,\\n  HostListener,\\n  inject,\\n  Input,\\n  OnChanges,\\n  OnInit,\\n  Output,\\n  SimpleChanges,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport { MatTableModule } from \'@angular/material/table\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { GradientPoint, SizeLegend } from \'@hra-ui/components/atoms\';\\nimport {\\n  BiomarkerTableDataCardComponent,\\n  BiomarkerTableDataIconComponent,\\n  DataItem,\\n  SourceListItem,\\n} from \'@hra-ui/components/molecules\';\\nimport { TableVirtualScrollDataSource, TableVirtualScrollModule } from \'ng-table-virtual-scroll\';\\nimport { ReplaySubject } from \'rxjs\';\\n\\n/**\\n * RGBTriblet of type RGB to store color\\n */\\ntype RGBTriplet = [number, number, number];\\n\\n/**\\n * An interface representing a single cell of the table.\\n */\\nexport interface DataCell {\\n  /** Represents the color of the icon */\\n  color: string;\\n  /** Represents the size of the icon */\\n  size: number;\\n  /** Represents the data for the data card */\\n  data: {\\n    /** Cell name */\\n    cell: string;\\n    /** Biomarker name */\\n    biomarker: string;\\n    /** Mean expression value */\\n    meanExpression: number;\\n    /** Dataset count */\\n    dataset_count?: number;\\n  };\\n}\\n\\n/**\\n * Details of the Tissue\\n */\\nexport interface TissueInfo {\\n  /** ID of the Tissue */\\n  id: string;\\n  /** Name of the Tissue */\\n  label: string;\\n}\\n\\n/** Describes the composition of a single row in the table */\\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\\n\\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\\n@Component({\\n  selector: \'hra-biomarker-table\',\\n  imports: [\\n    CommonModule,\\n    MatTableModule,\\n    BiomarkerTableDataIconComponent,\\n    HoverDirective,\\n    BiomarkerTableDataCardComponent,\\n    ScrollingModule,\\n    TableVirtualScrollModule,\\n  ],\\n  templateUrl: \'./biomarker-table.component.html\',\\n  styleUrls: [\'./biomarker-table.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableComponent<T extends DataCell> implements OnInit, OnChanges {\\n  /**\\n   * Input: TissueInfo carrying the details of the tissue open\\n   */\\n  @Input() tissueInfo: TissueInfo = {\\n    id: \'\',\\n    label: \'\',\\n  };\\n\\n  /** Columns for the table */\\n  @Input() columns: string[] = [];\\n\\n  /** Source list for biomarker table */\\n  @Input() dataSources: SourceListItem[] = [];\\n\\n  /** Rows of the table */\\n  @Input() data: DataRow<T>[] = [];\\n\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n\\n  /** Cell id which is hovered, used for highlighting */\\n  @Input() highlightedCellId = \'\';\\n\\n  /** List of cell ids in the illustration */\\n  @Input() illustrationIds: string[] = [];\\n\\n  /** Emits cell type label when row is hovered */\\n  @Output() readonly rowHover = new EventEmitter<string>();\\n\\n  /** Reference to virtual scroll viewport */\\n  @ViewChild(CdkVirtualScrollViewport, { static: true }) vscroll!: CdkVirtualScrollViewport;\\n\\n  /** Reference to biomarker table */\\n  @ViewChild(\'table\', { static: true, read: ElementRef }) table!: ElementRef;\\n\\n  /** Columns replaysubject */\\n  readonly columns$ = new ReplaySubject<string[]>(1);\\n\\n  /** Cell width (px) */\\n  private readonly cellWidth = 44;\\n  /** Extra columns to render outside the visible viewport */\\n  private readonly extraDisplayedColumnCount = 2;\\n\\n  /** Current horizontal viewport size */\\n  private horizontalViewportSize = 400;\\n  /** Current horizontal scroll offset */\\n  private horizontalScrollOffset = 0;\\n  /** Current displayed column count */\\n  private displayedColumnCount = 10;\\n  /** Current displayed column offset */\\n  private displayedColumnOffset = 0;\\n\\n  /** Gets the current width of the prefiller column */\\n  get preFillerWidth(): string {\\n    return `${this.cellWidth * this.displayedColumnOffset}px`;\\n  }\\n\\n  /** Gets the current width of the postfiller column */\\n  get postFillerWidth(): string {\\n    const count = this.columns.length - this.displayedColumnCount - this.displayedColumnOffset;\\n    return `${this.cellWidth * count}px`;\\n  }\\n\\n  /** Source for the table */\\n  readonly dataSource = new TableVirtualScrollDataSource<DataRow<T>>([]);\\n\\n  /** Change detection */\\n  private readonly cdr = inject(ChangeDetectorRef);\\n\\n  /**\\n   * Subscribes to scroll event on virtual scroll viewport and checks displayed columns\\n   */\\n  ngOnInit(): void {\\n    const scroll$ = this.vscroll.scrollable.elementScrolled();\\n    scroll$.subscribe(() => this.checkDisplayedColumns());\\n  }\\n\\n  /**\\n   * Sets the data source for the table on every change\\n   * Sorts the biomarker table on illustrationIds change\\n   * @param changes object consisting of change in the Input\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    this.checkDisplayedColumns(\'columns\' in changes);\\n    if (\'data\' in changes || \'illustrationIds\' in changes) {\\n      this.dataSource.data = this.sortTableData(this.data);\\n    }\\n  }\\n\\n  /**\\n   * Checks for column updates on mouse move\\n   */\\n  @HostListener(\'window:mousemove\', [\'$event\'])\\n  onMouseMove() {\\n    this.checkDisplayedColumns();\\n  }\\n\\n  /**\\n   * Returns index value\\n   */\\n  trackByIndex(index: number): number {\\n    return index;\\n  }\\n\\n  /**\\n   * Checks to see if columns should be updated\\n   */\\n  checkDisplayedColumns(forceUpdate = false): void {\\n    const scrollable = this.vscroll.scrollable;\\n    const size = scrollable.measureViewportSize(\'horizontal\');\\n    const offset = scrollable.measureScrollOffset(\'start\');\\n    let shouldUpdate = forceUpdate;\\n\\n    if (size !== this.horizontalViewportSize) {\\n      this.updateHorizontalViewportSize(size);\\n      shouldUpdate = true;\\n    }\\n    if (offset !== this.horizontalScrollOffset) {\\n      this.updateHorizontalViewportOffset(offset);\\n      shouldUpdate = true;\\n    }\\n\\n    if (shouldUpdate) {\\n      this.updateColumns();\\n    }\\n  }\\n\\n  /**\\n   * Updates horizontal viewport size and updates displayed column count\\n   */\\n  updateHorizontalViewportSize(size: number): void {\\n    this.horizontalViewportSize = size;\\n    this.displayedColumnCount =\\n      Math.ceil(this.horizontalViewportSize / this.cellWidth) + this.extraDisplayedColumnCount;\\n  }\\n\\n  /**\\n   * Updates horizontal viewport offset and updates displayed column offset\\n   */\\n  updateHorizontalViewportOffset(offset: number): void {\\n    this.horizontalScrollOffset = offset;\\n    this.displayedColumnOffset = Math.max(Math.floor(offset / this.cellWidth) - this.extraDisplayedColumnCount / 2, 0);\\n  }\\n\\n  /**\\n   * Updates table columns with prefiller and postfiller columns\\n   */\\n  updateColumns(): void {\\n    const { displayedColumnCount, displayedColumnOffset } = this;\\n    const columns = [\'type\', \'count\'];\\n    if (this.displayedColumnOffset > 0) {\\n      columns.push(\'preFiller\');\\n    }\\n\\n    const displayedColumns = this.columns.slice(displayedColumnOffset, displayedColumnOffset + displayedColumnCount);\\n    columns.push(...displayedColumns);\\n\\n    if (displayedColumnOffset + displayedColumnCount < this.columns.length) {\\n      columns.push(\'postFiller\');\\n    }\\n\\n    this.columns$.next(columns);\\n    this.cdr.detectChanges();\\n  }\\n\\n  /**\\n   * Sorts table by cell type alphabetically, then puts cells that are in the illustration on top\\n   */\\n  sortTableData(data: DataRow<T>[]): DataRow<T>[] {\\n    const illustrationIdsSet = new Set(this.illustrationIds);\\n    const inIllustration = new Map<DataRow<T>, boolean>();\\n    for (const row of data) {\\n      const id = this.getHoverId(row);\\n      inIllustration.set(row, illustrationIdsSet.has(id));\\n    }\\n\\n    return [...data].sort((row1, row2) => {\\n      const in1 = inIllustration.get(row1);\\n      const in2 = inIllustration.get(row2);\\n\\n      if (in1 && !in2) {\\n        return -1;\\n      } else if (!in1 && in2) {\\n        return 1;\\n      }\\n\\n      return row1[0].localeCompare(row2[0]);\\n    });\\n  }\\n\\n  /**\\n   * Returns true if id matches the cell id of the row\\n   * @param row Highlighted row\\n   */\\n  isHighlighted(row: DataRow<T>): boolean {\\n    return this.getHoverId(row) === this.highlightedCellId;\\n  }\\n\\n  /**\\n   * Gets hover id from row\\n   * @param data row data\\n   * @returns cell type id\\n   */\\n  getHoverId(data: DataRow<T>): string {\\n    const entry = data.slice(2).find((entry) => entry) as T;\\n    return entry?.data.cell;\\n  }\\n\\n  /** Lerp function to give value beween min and max value based on the given value\\n   *\\n   * @param value\\n   * @param min\\n   * @param max\\n   * @returns\\n   */\\n  lerp(value: number, min: number, max: number): number {\\n    return min * (1 - value) + max * value;\\n  }\\n\\n  /**\\n   * Converts HexCode to RGB\\n   * @param hex\\n   * @returns\\n   */\\n  hex2rgb(hex: string): RGBTriplet {\\n    const r = parseInt(hex.slice(1, 3), 16);\\n    const g = parseInt(hex.slice(3, 5), 16);\\n    const b = parseInt(hex.slice(5, 7), 16);\\n    return [r, g, b];\\n  }\\n\\n  /**\\n   * Gets Min and Max color grade based on the meanExpression value\\n   * @param meanExpression\\n   * @returns\\n   */\\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\\n    const index = this.gradient.findIndex((item, i, arr) => {\\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\\n    });\\n\\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\\n    const maxColor: RGBTriplet = this.hex2rgb(this.gradient[index + 1].color);\\n\\n    return { minColor, maxColor };\\n  }\\n\\n  /**\\n   * Gets Min and Max size grade based on the Percentage value\\n   * @param percentage\\n   * @returns\\n   */\\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\\n    const index = this.sizes.findIndex((item, i, arr) => {\\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\\n    });\\n    const minSize: number = this.sizes[index]?.radius;\\n    const maxSize: number = this.sizes[index + 1].radius;\\n    return { minSize, maxSize };\\n  }\\n\\n  /**\\n   * Calculates the color of this value on this gradient\\n   * @param value\\n   * @returns\\n   */\\n  getColor(value: number): string {\\n    const { minColor, maxColor } = this.getMinMaxColor(value * 100);\\n    return (\\n      \'#\' +\\n      minColor\\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\\n        .map((component) => {\\n          const hex = Math.round(component).toString(16);\\n          return hex.length == 1 ? \'0\' + hex : hex;\\n        })\\n        .join(\'\')\\n    );\\n  }\\n\\n  /**\\n   * gets Size of the Cell based on the percentage value\\n   * @param value\\n   * @returns\\n   */\\n  getSize(value: number): number {\\n    const { minSize, maxSize } = this.getMinMaxSize(value);\\n    return this.lerp(value, minSize, maxSize);\\n  }\\n\\n  /**\\n   * Processes the object for hover data for Table Cell\\n   * @param index index of the row of the datasource\\n   * @param row row of the datasource\\n   * @returns\\n   */\\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\\n    if (row[index] === undefined) {\\n      return [];\\n    }\\n\\n    const {\\n      tissueInfo: { id, label },\\n    } = this;\\n    const {\\n      data: { cell, biomarker, meanExpression, dataset_count },\\n    } = row[index] as T;\\n\\n    return [\\n      [\\n        { label: \'Functional Tissue Unit Name\', value: label },\\n        { label: \'Uberon ID\', value: id },\\n        { label: \'#Datasets\', value: `${dataset_count ?? 0}` },\\n      ],\\n      [\\n        { label: \'Cell Type Name\', value: row[0] },\\n        { label: \'CL ID\', value: cell },\\n        { label: \'Number of Cells\', value: `${row[1]}` },\\n      ],\\n      [\\n        { label: \'Gene Name\', value: this.columns[index - 2] },\\n        { label: \'HGNC ID\', value: biomarker },\\n        { label: \'Mean Expression Value\', value: meanExpression.toFixed(6) },\\n      ],\\n    ];\\n  }\\n\\n  /**\\n   * Sets and emits cell type id on row hover\\n   * @param hoverId cell type id\\n   */\\n  setHoverId(hoverId?: string): void {\\n    this.highlightedCellId = hoverId ?? \'\';\\n    this.rowHover.emit(hoverId);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n\\n  .table th,\\n  .table th div {\\n    height: 6.5rem !important;\\n  }\\n\\n  cdk-virtual-scroll-viewport {\\n    height: 100%;\\n  }\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n\\n  .table {\\n    margin-left: -1px;\\n\\n    .highlight {\\n      background: rgba(vars.$primary-lighter);\\n    }\\n    td.type {\\n      text-transform: lowercase;\\n    }\\n  }\\n\\n  .table th {\\n    background: rgba(vars.$primary-lighter);\\n    color: rgba(vars.$accent-darker);\\n    font-weight: 500;\\n    height: 56px;\\n    padding: 0;\\n    max-width: 2.75rem;\\n    min-width: 2.75rem;\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  .table td {\\n    border-bottom: 1px solid rgba(vars.$light-dividers);\\n    padding: 0 0.5rem;\\n\\n    &:not(:first-child) {\\n      border-left: 1px solid rgba(vars.$light-dividers);\\n    }\\n  }\\n\\n  .table tr {\\n    height: 2rem;\\n    font-size: 0.75rem;\\n  }\\n\\n  .table tr:first-child td {\\n    border-top: 0rem solid rgba(vars.$light-dividers);\\n    max-width: 13.5rem;\\n  }\\n\\n  tr > td:first-child {\\n    text-align: left;\\n  }\\n\\n  tr > th:first-child {\\n    text-align: left;\\n  }\\n\\n  tr > td:last-of-type {\\n    border-right: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  tr > th:last-of-type {\\n    border-right: 1px solid rgba(vars.$light-dividers);\\n    border-left: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  .type {\\n    height: 2rem;\\n    max-width: 13.5rem;\\n    border-radius: 0rem;\\n    white-space: nowrap;\\n\\n    &.highlight {\\n      font-weight: bold;\\n    }\\n  }\\n\\n  .count {\\n    height: 2rem;\\n    min-width: 4.25rem;\\n    border-right: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  th:not(:first-child) {\\n    border-left: 1px solid rgba(vars.$light-dividers);\\n  }\\n\\n  th:first-child,\\n  th:nth-child(2) {\\n    padding: 0 0.5rem !important;\\n  }\\n\\n  .icon-header {\\n    .header-column-text {\\n      // transform: rotate(-90deg);\\n      writing-mode: vertical-rl;\\n      transform: rotate(180deg);\\n      white-space: nowrap;\\n      overflow: hidden;\\n      text-overflow: ellipsis;\\n      margin: 0.5rem auto;\\n    }\\n  }\\n\\n  .icon-cell {\\n    width: 2rem;\\n    min-height: 2rem;\\n\\n    .icon {\\n      margin: auto;\\n    }\\n  }\\n}\\n\\n.mat-mdc-row:hover .mat-mdc-cell {\\n  background: rgba(vars.$primary-lighter);\\n}\\n","styleUrl":"./biomarker-table.component.scss"}],"stylesData":"","extends":[],"implements":["OnInit","OnChanges"],"accessors":{"preFillerWidth":{"name":"preFillerWidth","getSignature":{"name":"preFillerWidth","type":"string","returnType":"string","line":142,"rawdescription":"\\nGets the current width of the prefiller column","description":"<p>Gets the current width of the prefiller column</p>\\n"}},"postFillerWidth":{"name":"postFillerWidth","getSignature":{"name":"postFillerWidth","type":"string","returnType":"string","line":147,"rawdescription":"\\nGets the current width of the postfiller column","description":"<p>Gets the current width of the postfiller column</p>\\n"}}},"templateData":"<cdk-virtual-scroll-viewport tvsItemSize=\\"32\\" headerHeight=\\"72\\">\\n  <table class=\\"table\\" mat-table [dataSource]=\\"dataSource\\" #table>\\n    <caption class=\\"sr-only\\">\\n      Cell type table by Biomarker\\n    </caption>\\n\\n    <ng-container matColumnDef=\\"type\\" sticky>\\n      <th mat-header-cell *matHeaderCellDef>Cell Type</th>\\n\\n      <td\\n        class=\\"type\\"\\n        mat-cell\\n        *matCellDef=\\"let element\\"\\n        [class.highlight]=\\"isHighlighted(element)\\"\\n        [hraHover]=\\"columnHover\\"\\n        [hraHoverData]=\\"element[0]\\"\\n      >\\n        {{ element[0] }}\\n      </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\"count\\" sticky>\\n      <th class=\\"count\\" mat-header-cell *matHeaderCellDef>Cell Count</th>\\n\\n      <td class=\\"count\\" mat-cell *matCellDef=\\"let element\\" [class.highlight]=\\"isHighlighted(element)\\">\\n        {{ element[1] !== undefined ? (element[1] | number) : \'no data\' }}\\n      </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\"preFiller\\">\\n      <th mat-header-cell *matHeaderCellDef></th>\\n      <td mat-cell *matCellDef=\\"let element\\" style=\\"max-width: unset\\">\\n        <div [style.width]=\\"preFillerWidth\\"></div>\\n      </td>\\n    </ng-container>\\n\\n    <ng-container *ngFor=\\"let column of columns; let index = index; trackBy: trackByIndex\\" [matColumnDef]=\\"column\\">\\n      <th class=\\"icon-header\\" mat-header-cell *matHeaderCellDef [hraHover]=\\"columnHover\\" [hraHoverData]=\\"column\\">\\n        <div class=\\"header-column-text\\">\\n          {{ column }}\\n        </div>\\n      </th>\\n\\n      <td class=\\"icon-cell\\" mat-cell *matCellDef=\\"let element\\" [class.highlight]=\\"isHighlighted(element)\\">\\n        <hra-biomarker-table-data-icon\\n          class=\\"icon\\"\\n          *ngIf=\\"element[index + 2] !== undefined; else emptyCell\\"\\n          [color]=\\"getColor(element[index + 2].color)\\"\\n          [size]=\\"getSize(element[index + 2].size)\\"\\n          [hraHover]=\\"dataHover\\"\\n          [hraHoverData]=\\"[index + 2, element]\\"\\n        >\\n        </hra-biomarker-table-data-icon>\\n\\n        <ng-template #emptyCell>\\n          <div class=\\"empty\\" [hraHover]=\\"dataHover\\" [hraHoverData]=\\"[index + 2, element]\\"></div>\\n        </ng-template>\\n      </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\"postFiller\\">\\n      <th mat-header-cell *matHeaderCellDef></th>\\n      <td mat-cell *matCellDef=\\"let element\\" style=\\"max-width: unset\\">\\n        <div [style.width]=\\"postFillerWidth\\"></div>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\"(columns$ | async) ?? []; sticky: true\\"></tr>\\n    <tr\\n      mat-row\\n      *matRowDef=\\"let row; columns: (columns$ | async) ?? []\\"\\n      (mouseover)=\\"setHoverId(getHoverId(row))\\"\\n      (mouseout)=\\"setHoverId(undefined)\\"\\n    ></tr>\\n  </table>\\n</cdk-virtual-scroll-viewport>\\n\\n<ng-template #columnHover let-columnName>\\n  <div class=\\"biomarker-table-hover full-column-name\\">\\n    {{ columnName }}\\n  </div>\\n</ng-template>\\n\\n<ng-template #dataHover let-data>\\n  <hra-biomarker-table-data-card [data]=\\"getHoverData(data)\\"> </hra-biomarker-table-data-card>\\n</ng-template>\\n"}],"modules":[],"miscellaneous":{"variables":[],"functions":[],"typealiases":[{"name":"DataRow","ctype":"miscellaneous","subtype":"typealias","rawtype":"[string, , ...[]]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Describes the composition of a single row in the table</p>\\n","kind":189},{"name":"RGBTriplet","ctype":"miscellaneous","subtype":"typealias","rawtype":"[number, number, number]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>RGBTriblet of type RGB to store color</p>\\n","kind":189}],"enumerations":[],"groupedVariables":{},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"src/lib/biomarker-table/biomarker-table.component.ts":[{"name":"DataRow","ctype":"miscellaneous","subtype":"typealias","rawtype":"[string, , ...[]]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Describes the composition of a single row in the table</p>\\n","kind":189},{"name":"RGBTriplet","ctype":"miscellaneous","subtype":"typealias","rawtype":"[number, number, number]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>RGBTriblet of type RGB to store color</p>\\n","kind":189}]}}}')},"./dist/compodoc/design-system/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"BreadcrumbItem","id":"interface-BreadcrumbItem-56ac05f544b545db7c1098e4a37552985041323d8713926d117028c6e04166e63309b6c086d2dbaff7e06cbd93f0e7730cf71f4e650e230982b1d72aa585b2f8","file":"buttons/breadcrumbs/src/lib/breadcrumbs.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { RouterModule } from \'@angular/router\';\\nimport { TextHyperlinkDirective } from \'@hra-ui/design-system/buttons/text-hyperlink\';\\n\\n/** Breadcrumb item */\\nexport interface BreadcrumbItem {\\n  /** Name of item */\\n  name: string;\\n  /** Route to page */\\n  route?: string;\\n}\\n\\n/**\\n * Component used to help the user understand their location within websites\\n */\\n@Component({\\n  selector: \'hra-breadcrumbs\',\\n  imports: [CommonModule, RouterModule, MatIconModule, TextHyperlinkDirective],\\n  templateUrl: \'./breadcrumbs.component.html\',\\n  styleUrl: \'./breadcrumbs.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BreadcrumbsComponent {\\n  /** Crumbs to display */\\n  readonly crumbs = input<BreadcrumbItem[]>([]);\\n}\\n","properties":[{"name":"name","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Name of item</p>\\n","line":10,"rawdescription":"\\nName of item"},{"name":"route","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Route to page</p>\\n","line":12,"rawdescription":"\\nRoute to page"}],"indexSignatures":[],"kind":171,"description":"<p>Breadcrumb item</p>\\n","rawdescription":"\\nBreadcrumb item","methods":[],"extends":[]},{"name":"CardData","id":"interface-CardData-a850dba1dd07f42be528800fd9e506b4362a6337a3764ee05a324689ea57f01c4fc08ca0f695d3eb880750ab780557787899370ab2c1ffd166c2e5f590a5b778","file":"nav-header/src/lib/nav-header.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatSidenavModule } from \'@angular/material/sidenav\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { AppNavButtonComponent } from \'@hra-ui/design-system/buttons/app-nav-button\';\\nimport { IconButtonSizeDirective } from \'@hra-ui/design-system/icon-button\';\\nimport { NavHeaderButtonsComponent, NavHeaderButtonsVariant } from \'@hra-ui/design-system/nav-header-buttons\';\\nimport { ScrollingModule } from \'@hra-ui/design-system/scrolling\';\\nimport { SoftwareStatus } from \'@hra-ui/design-system/software-status-indicator\';\\n\\n/** Sidenav card data */\\nexport interface CardData {\\n  /** Name of card category */\\n  category: string;\\n  /** Info for apps in category */\\n  cards: {\\n    /** Name of app */\\n    name: string;\\n    /** Icon path */\\n    icon: string;\\n    /** App title */\\n    title: string;\\n    /** App description */\\n    description: string;\\n    /** Link to app */\\n    link: string;\\n  }[];\\n}\\n\\n/**\\n * Navigation Header Component\\n */\\n@Component({\\n  selector: \'hra-nav-header\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    NavHeaderButtonsComponent,\\n    IconButtonSizeDirective,\\n    MatSidenavModule,\\n    AppNavButtonComponent,\\n    ScrollingModule,\\n    AssetUrlPipe,\\n  ],\\n  templateUrl: \'./nav-header.component.html\',\\n  styleUrl: \'./nav-header.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class NavHeaderComponent {\\n  /** Variant of the header */\\n  readonly variant = input<NavHeaderButtonsVariant>(\'basic\');\\n  /** Link to the app */\\n  readonly link = input.required<string>();\\n  /** Current app */\\n  readonly app = input.required<string>();\\n  /** Name of the app */\\n  readonly tagline = input.required<string>();\\n  /** Status of the app */\\n  readonly status = input<SoftwareStatus>();\\n  /** Data to display in sidenav */\\n  readonly navigationCategories = input.required<CardData[]>();\\n}\\n","properties":[{"name":"cards","deprecated":false,"deprecationMessage":"","type":"literal type[]","indexKey":"","optional":false,"description":"<p>Info for apps in category</p>\\n","line":18,"rawdescription":"\\nInfo for apps in category"},{"name":"category","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Name of card category</p>\\n","line":16,"rawdescription":"\\nName of card category"}],"indexSignatures":[],"kind":171,"description":"<p>Sidenav card data</p>\\n","rawdescription":"\\nSidenav card data","methods":[],"extends":[]},{"name":"CtaConfig","id":"interface-CtaConfig-9ca3cf39d95f4f482bf64940708c4a5a9c2a635b4639ccbdda0ca35981f0d125793bec935501ee2e9cec3c27c7d583d7fe7e789113ea06e301fc4f37df8a149c","file":"navigation/header/src/lib/header.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CdkConnectedOverlay, ConnectedPosition, Overlay, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  effect,\\n  ElementRef,\\n  inject,\\n  input,\\n  signal,\\n  viewChild,\\n} from \'@angular/core\';\\nimport { MatDividerModule } from \'@angular/material/divider\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatProgressBarModule, ProgressBarMode } from \'@angular/material/progress-bar\';\\nimport { Breakpoints, watchBreakpoint } from \'@hra-ui/cdk/breakpoints\';\\nimport { BrandModule } from \'@hra-ui/design-system/brand\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { BreadcrumbItem } from \'@hra-ui/design-system/buttons/breadcrumbs\';\\nimport { CtaBarComponent } from \'@hra-ui/design-system/navigation/cta-bar\';\\nimport { explicitEffect } from \'ngxtension/explicit-effect\';\\nimport { DesktopMenuComponent } from \'./desktop-menu/desktop-menu.component\';\\nimport { MobileMenuComponent } from \'./mobile-menu/mobile-menu.component\';\\nimport { HUBMAP_MENU, MENUS } from \'./static-data/parsed\';\\nimport { Menu } from \'./types/menus.schema\';\\n\\n/** Call to action configuration */\\nexport interface CtaConfig {\\n  /** Action text */\\n  action: string;\\n  /** Action description */\\n  description: string;\\n  /** Action url */\\n  url: string;\\n}\\n\\n/** Position of the mobile menu overlay */\\nconst MOBILE_MENU_POSITIONS: ConnectedPosition[] = [\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\' },\\n];\\n/** Position of the desktop menu overlay */\\nconst DESKTOP_MENU_POSITIONS: ConnectedPosition[] = [\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\', offsetX: -16, offsetY: 16 },\\n];\\n\\n/**\\n * Global navigation header.\\n * Includes a call to action bar, navigation menus, breadcrumbs, and a progress bar.\\n */\\n@Component({\\n  selector: \'hra-header\',\\n  imports: [\\n    CommonModule,\\n    OverlayModule,\\n    MatDividerModule,\\n    MatIconModule,\\n    MatProgressBarModule,\\n    BrandModule,\\n    ButtonsModule,\\n    CtaBarComponent,\\n    DesktopMenuComponent,\\n    MobileMenuComponent,\\n  ],\\n  templateUrl: \'./header.component.html\',\\n  styleUrl: \'./header.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HeaderComponent {\\n  /** Call to action configuration */\\n  readonly cta = input<CtaConfig>();\\n  /** Hubmap menu data */\\n  readonly hubmapMenu = input(HUBMAP_MENU);\\n  /** All other menus */\\n  readonly menus = input(MENUS);\\n  /** Breadcrumb items */\\n  readonly breadcrumbs = input<BreadcrumbItem[]>([]);\\n  /**\\n   * Progress bar progress.\\n   * Use `true` for an indeterminate bar and values between `0` and `100` for a determinate bar.\\n   * Using false disables and hides the progress bar.\\n   */\\n  readonly progress = input<boolean | number>(false);\\n\\n  /** Whether the user has dismissed the call to action */\\n  protected readonly ctaDismissed = signal(false);\\n  /** Progress bar mode */\\n  protected readonly progressMode = computed((): ProgressBarMode => {\\n    return typeof this.progress() === \'boolean\' ? \'indeterminate\' : \'determinate\';\\n  });\\n\\n  /** Whether the screen is currently mobile sized */\\n  protected readonly isMobile = watchBreakpoint(Breakpoints.Mobile);\\n  /** Reference to this component\'s html element */\\n  private readonly elementRef = inject<ElementRef<Element>>(ElementRef);\\n\\n  /** Overlay positions for the mobile menu */\\n  protected readonly mobileMenuPositions = MOBILE_MENU_POSITIONS;\\n  /** Overlay positions for the desktop menu */\\n  protected readonly desktopMenuPositions = DESKTOP_MENU_POSITIONS;\\n  /** Blocking overlay scroll strategy */\\n  protected readonly mobileMenuBlockScroll = inject(Overlay).scrollStrategies.block();\\n  /** Offset from top to the menu. Used to calculate menu heights and max heights */\\n  protected readonly menuOffsetPx = signal<number>(0);\\n  /** Mobile menu height. Fills the entire screen */\\n  protected readonly mobileMenuHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px)`);\\n  /** Desktop menu max height */\\n  protected readonly desktopMenuMaxHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px - 16px)`);\\n  /** Mobile menu overlay origin */\\n  private readonly mobileMenuOrigin = viewChild.required(\'mobileMenuOrigin\', { read: ElementRef });\\n  /** Desktop menu overlay origin */\\n  private readonly desktopMenuOrigin = viewChild.required(\'desktopMenuOrigin\', { read: ElementRef });\\n  /** Reference to the mobile overlay */\\n  private readonly mobileMenuOverlay = viewChild(\'mobileMenuOverlay\', { read: CdkConnectedOverlay });\\n  /** Currently open menu or undefined */\\n  private readonly activeMenu = signal<Menu | \'main\' | undefined>(undefined);\\n\\n  /** Initialize the header */\\n  constructor() {\\n    effect((cleanup) => {\\n      if (this.activeMenu() !== undefined) {\\n        const observer = this.attachResizeObserver();\\n        cleanup(() => observer.disconnect());\\n      }\\n    });\\n\\n    explicitEffect([this.menuOffsetPx], () => this.updateMenuPositions(), { defer: true });\\n  }\\n\\n  /**\\n   * Determine whether the specified menu is open\\n   *\\n   * @param menu The menu to check\\n   * @returns true if the menu is open, false otherwise\\n   */\\n  isMenuActive(menu: Menu | \'main\'): boolean {\\n    return this.activeMenu() === menu;\\n  }\\n\\n  /**\\n   * Toggles a menu open or close\\n   *\\n   * @param menu Menu to toggle\\n   */\\n  toggleMenu(menu: Menu | \'main\'): void {\\n    this.activeMenu.update((current) => (menu !== current ? menu : undefined));\\n  }\\n\\n  /**\\n   * Closes any active menu\\n   */\\n  closeMenu(): void {\\n    this.activeMenu.set(undefined);\\n  }\\n\\n  /**\\n   * Creates and attaches a resize observer that updates the menu offset\\n   * whenever the header size changes\\n   *\\n   * @returns The resize observer\\n   */\\n  private attachResizeObserver(): ResizeObserver {\\n    const observer = new ResizeObserver(() => this.updateMenuOffset());\\n    observer.observe(this.elementRef.nativeElement, { box: \'border-box\' });\\n    this.updateMenuOffset();\\n    return observer;\\n  }\\n\\n  /**\\n   * Computes the bounding box for the menu\'s overlay origin element\\n   *\\n   * @returns The computed bounding box\\n   */\\n  private getMenuOriginBbox(): DOMRect {\\n    const origin = this.isMobile() ? this.mobileMenuOrigin() : this.desktopMenuOrigin();\\n    return (origin.nativeElement as Element).getBoundingClientRect();\\n  }\\n\\n  /**\\n   * Updates the menu offset based on the overlay origin\'s bounding box\\n   */\\n  private updateMenuOffset(): void {\\n    const { bottom } = this.getMenuOriginBbox();\\n    this.menuOffsetPx.set(bottom);\\n  }\\n\\n  /**\\n   * Notify menu overlays of position changes\\n   */\\n  private updateMenuPositions(): void {\\n    /* istanbul ignore next */\\n    this.mobileMenuOverlay()?.overlayRef?.updatePosition();\\n  }\\n}\\n","properties":[{"name":"action","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Action text</p>\\n","line":31,"rawdescription":"\\nAction text"},{"name":"description","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Action description</p>\\n","line":33,"rawdescription":"\\nAction description"},{"name":"url","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Action url</p>\\n","line":35,"rawdescription":"\\nAction url"}],"indexSignatures":[],"kind":171,"description":"<p>Call to action configuration</p>\\n","rawdescription":"\\nCall to action configuration","methods":[],"extends":[]},{"name":"DataItem","id":"interface-DataItem-604f39c5cba08234cbee318cec0535940a5d48ef158e5c60010270b159251a9abf22c311829653216bbc78a6100aaa150ddb1f9b7601585b9dd3f9aaeff2aace","file":"info-modal/src/lib/info-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input, output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** Info modal variants */\\nexport type InfoModalVariant = \'tabular\' | \'center\';\\n\\n/**\\n * Modal to display all available information about specific areas of a dataset.\\n */\\n@Component({\\n  selector: \'hra-info-modal\',\\n  imports: [CommonModule, MatTableModule, MatIconModule, MatButtonModule],\\n  templateUrl: \'./info-modal.component.html\',\\n  styleUrl: \'./info-modal.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class.center]\': \'variant() == \\"center\\"\',\\n  },\\n})\\nexport class InfoModalComponent {\\n  /** List of data items to display */\\n  data = input<DataItem[]>([]);\\n\\n  /** Variant of info modal to use */\\n  variant = input<InfoModalVariant>(\'tabular\');\\n\\n  /** Title of modal */\\n  title = input.required<string>();\\n\\n  /** Emits when close icon clicked */\\n  close = output<void>();\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>A string property that represents the label</p>\\n","line":10,"rawdescription":"\\nA string property that represents the label"},{"name":"value","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>A string property that represents the value</p>\\n","line":12,"rawdescription":"\\nA string property that represents the value"}],"indexSignatures":[],"kind":171,"description":"<p>An item which defines a string label and a string value</p>\\n","rawdescription":"\\nAn item which defines a string label and a string value","methods":[],"extends":[]},{"name":"DesignSystemOptions","id":"interface-DesignSystemOptions-b0cb8d82f00fa209c8e19133e088bcd58ca4847cd816809857444a633b0576376f242d7d21d866a9b8e64472b3c0b652e12a1a53777259764b9ef839d8abdd6a","file":"src/lib/providers.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { OverlayContainer } from \'@angular/cdk/overlay\';\\nimport { HttpFeature, HttpFeatureKind, provideHttpClient } from \'@angular/common/http\';\\nimport { EnvironmentProviders, inject, makeEnvironmentProviders, provideAppInitializer } from \'@angular/core\';\\nimport { provideAnimations } from \'@angular/platform-browser/animations\';\\nimport { provideIcons } from \'@hra-ui/cdk/icons\';\\nimport { provideButtons } from \'@hra-ui/design-system/buttons\';\\nimport { provideCheckboxes } from \'@hra-ui/design-system/checkbox\';\\nimport { provideIconButtons } from \'@hra-ui/design-system/icon-button\';\\nimport { provideInput } from \'@hra-ui/design-system/input\';\\nimport { provideMenu } from \'@hra-ui/design-system/menu\';\\nimport { provideScrolling, ScrollingOptions } from \'@hra-ui/design-system/scrolling\';\\nimport { provideSelect } from \'@hra-ui/design-system/select\';\\nimport { provideTable } from \'@hra-ui/design-system/table\';\\nimport { provideTrees } from \'@hra-ui/design-system/tree\';\\n\\n/** Design system provider options */\\nexport interface DesignSystemOptions {\\n  /** Http features */\\n  http?: HttpFeature<HttpFeatureKind>[];\\n  /** Scrolling options */\\n  scrolling?: ScrollingOptions;\\n}\\n\\n/** Get the providers shared between prod and testing */\\nexport function provideDesignSystemCommon(options?: DesignSystemOptions) {\\n  return [\\n    provideAppInitializer(() => {\\n      const overlayContainer = inject(OverlayContainer);\\n      overlayContainer.getContainerElement().classList.add(\'hra-app\');\\n    }),\\n    provideIcons({\\n      fontIcons: {\\n        defaultClasses: [\'material-symbols-rounded\'],\\n      },\\n    }),\\n    provideButtons(),\\n    provideIconButtons(),\\n    provideTrees(),\\n    provideScrolling(options?.scrolling),\\n    provideMenu(),\\n    provideTable(),\\n    provideSelect(),\\n    provideInput(),\\n    provideCheckboxes(),\\n  ];\\n}\\n\\n/**\\n * Returns design system providers\\n */\\nexport function provideDesignSystem(options?: DesignSystemOptions): EnvironmentProviders {\\n  return makeEnvironmentProviders([\\n    provideHttpClient(...(options?.http ?? [])),\\n    provideAnimations(),\\n    ...provideDesignSystemCommon(options),\\n  ]);\\n}\\n","properties":[{"name":"http","deprecated":false,"deprecationMessage":"","type":"HttpFeature<HttpFeatureKind>[]","indexKey":"","optional":true,"description":"<p>Http features</p>\\n","line":19,"rawdescription":"\\nHttp features"},{"name":"scrolling","deprecated":false,"deprecationMessage":"","type":"ScrollingOptions","indexKey":"","optional":true,"description":"<p>Scrolling options</p>\\n","line":21,"rawdescription":"\\nScrolling options"}],"indexSignatures":[],"kind":171,"description":"<p>Design system provider options</p>\\n","rawdescription":"\\nDesign system provider options","methods":[],"extends":[]},{"name":"DialogData","id":"interface-DialogData-1d41a9b160020a7c8b2d2f7d05799c18544d74061f100e9491630758c5fcd832185f5e614fbfda8a91a43a1777483dc6607aad8d2f48b7732a90f84bc344898d","file":"dialog/src/lib/notice/notice.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport {\\n  MAT_DIALOG_DATA,\\n  MatDialogActions,\\n  MatDialogClose,\\n  MatDialogContent,\\n  MatDialogTitle,\\n} from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { IconButtonSizeDirective } from \'@hra-ui/design-system/icon-button\';\\n\\n/** Interface for Dialog Data */\\nexport interface DialogData {\\n  /** Title of the dialog */\\n  title: string;\\n  /** Message of the dialog */\\n  message: string;\\n  /** Action Button Object */\\n  action?: {\\n    /** Label for the action button */\\n    label: string;\\n    /** Callback function for the action button */\\n    callback: () => void;\\n  };\\n}\\n\\n/** Notice Component */\\n@Component({\\n  selector: \'hra-notice\',\\n  imports: [\\n    CommonModule,\\n    IconButtonSizeDirective,\\n    MatIconModule,\\n    ButtonsModule,\\n    MatButtonModule,\\n    MatDialogActions,\\n    MatDialogTitle,\\n    MatDialogContent,\\n    MatDialogClose,\\n  ],\\n  templateUrl: \'./notice.component.html\',\\n  styleUrl: \'./notice.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class NoticeComponent {\\n  /** Instance of Mat Dialog Data */\\n  protected readonly data: DialogData = inject(MAT_DIALOG_DATA);\\n}\\n","properties":[{"name":"action","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":true,"description":"<p>Action Button Object</p>\\n","line":22,"rawdescription":"\\nAction Button Object"},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Message of the dialog</p>\\n","line":20,"rawdescription":"\\nMessage of the dialog"},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Title of the dialog</p>\\n","line":18,"rawdescription":"\\nTitle of the dialog"}],"indexSignatures":[],"kind":171,"description":"<p>Interface for Dialog Data</p>\\n","rawdescription":"\\nInterface for Dialog Data","methods":[],"extends":[]},{"name":"MenuDemoOption","id":"interface-MenuDemoOption-c9c532fdb1bc7b08b78bdec7f5aad68c649d1f2815db67a6ae79a0e6e8f5a201f5e984978aadb693e582578b25bcfb5f9f3386fafd4c8722fe7bc26a737cd9d0","file":"menu/src/lib/menu-demo/menu-demo.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, input, ViewEncapsulation } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatMenuModule } from \'@angular/material/menu\';\\n\\n/** Menu option interface */\\nexport interface MenuDemoOption {\\n  /** Name of option */\\n  name: string;\\n  /** Material icon name */\\n  icon: string;\\n  /** Options to open in a second menu */\\n  expandedOptions?: MenuDemoOption[];\\n}\\n\\n/**\\n * Nested Angular Material menu component\\n */\\n@Component({\\n  selector: \'hra-menu\',\\n  imports: [MatButtonModule, MatMenuModule, MatIconModule, MatRippleModule],\\n  templateUrl: \'./menu-demo.component.html\',\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MenuDemoComponent {\\n  /** List of menu options */\\n  readonly menuOptions = input<MenuDemoOption[]>([]);\\n\\n  /** List of suboptions to display in the second menu */\\n  suboptions: MenuDemoOption[] = [];\\n}\\n","properties":[{"name":"expandedOptions","deprecated":false,"deprecationMessage":"","type":"MenuDemoOption[]","indexKey":"","optional":true,"description":"<p>Options to open in a second menu</p>\\n","line":14,"rawdescription":"\\nOptions to open in a second menu"},{"name":"icon","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Material icon name</p>\\n","line":12,"rawdescription":"\\nMaterial icon name"},{"name":"name","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Name of option</p>\\n","line":10,"rawdescription":"\\nName of option"}],"indexSignatures":[],"kind":171,"description":"<p>Menu option interface</p>\\n","rawdescription":"\\nMenu option interface","methods":[],"extends":[]},{"name":"NestedNode","id":"interface-NestedNode-f6e1ecb463b0582e37ef566a3316d1f3a3901aa9ae6518426712986e465c9b3d96c4987fec8f541fa20e1654be5108d4ab5ff1deaeb87166a337b4bf05714b50","file":"tree/src/lib/tree-demo/tree-demo.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ArrayDataSource } from \'@angular/cdk/collections\';\\nimport { AfterViewInit, ChangeDetectionStrategy, Component, computed, input, ViewChild } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTree, MatTreeModule } from \'@angular/material/tree\';\\n\\nimport { TreeSize, TreeSizeDirective } from \'../tree-size/tree-size.directive\';\\n\\n/** Nested tree node data */\\nexport interface NestedNode {\\n  /** Name of node */\\n  name: string;\\n  /** List of child nodes */\\n  children?: NestedNode[];\\n}\\n\\n/** Padding indents for each tree size (px) */\\nconst PADDING: Record<TreeSize, number> = {\\n  small: 32,\\n  medium: 36,\\n  large: 40,\\n};\\n\\n/**\\n * Angular Material nested tree component with HRA styles\\n */\\n@Component({\\n  selector: \'hra-tree-demo\',\\n  templateUrl: \'tree-demo.component.html\',\\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, TreeSizeDirective],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TreeDemoComponent implements AfterViewInit {\\n  /** ViewChild for tree component */\\n  @ViewChild(MatTree) tree!: MatTree<NestedNode>;\\n\\n  /** Tree node data */\\n  readonly treeData = input<NestedNode[]>([]);\\n\\n  /** Size of tree to use */\\n  readonly size = input<TreeSize>(\'medium\');\\n\\n  /** Padding indents */\\n  protected readonly padding = computed(() => PADDING[this.size()]);\\n\\n  /** Data source */\\n  dataSource = new ArrayDataSource<NestedNode>([]);\\n\\n  /** Current selected node */\\n  selectedNode?: NestedNode;\\n\\n  /** Gets the children of a node */\\n  childrenAccessor = (dataNode: NestedNode) => dataNode.children ?? [];\\n\\n  /** If the node has a child */\\n  hasChild = (_: number, node: NestedNode) => !!node.children?.length;\\n\\n  /** Sets dataSource data after view init */\\n  ngAfterViewInit() {\\n    this.dataSource = new ArrayDataSource<NestedNode>(this.treeData());\\n  }\\n\\n  /** Renders node if it is a root node or if all of its ancestors are expanded */\\n  shouldRender(node: NestedNode): boolean {\\n    const parent = this.getParentNode(node);\\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\\n  }\\n\\n  /** Gets parent of a node */\\n  private getParentNode(node: NestedNode): NestedNode | undefined {\\n    for (const parent of this.treeData()) {\\n      if (parent.children?.includes(node)) {\\n        return parent;\\n      }\\n    }\\n    return undefined;\\n  }\\n}\\n","properties":[{"name":"children","deprecated":false,"deprecationMessage":"","type":"NestedNode[]","indexKey":"","optional":true,"description":"<p>List of child nodes</p>\\n","line":14,"rawdescription":"\\nList of child nodes"},{"name":"name","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Name of node</p>\\n","line":12,"rawdescription":"\\nName of node"}],"indexSignatures":[],"kind":171,"description":"<p>Nested tree node data</p>\\n","rawdescription":"\\nNested tree node data","methods":[],"extends":[]},{"name":"ScrollingGlobals","id":"interface-ScrollingGlobals-c96a7556bfc0c42b46a8ec9cf620e92dcd858b881cbed8518c731034dcd8fd0fb25b648c2fce95a5d7e14588e028a315dbed1eba0244c0afca861ae001881bb6","file":"scrolling/testing/src/index.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import type { ScrollTimelineFunc } from \'@hra-ui/design-system/scrolling\';\\n\\n/** Globals used by scrolling */\\ninterface ScrollingGlobals {\\n  /** Scroll timeline constructor */\\n  ScrollTimeline?: ScrollTimelineFunc;\\n}\\n\\n/**\\n * Setup the testing environment for scrolling to work.\\n * Adds global mocks for functions used by scrolling if they don\'t exist.\\n */\\nexport function setupScrollTesting(): void {\\n  const globals = globalThis as ScrollingGlobals;\\n  if (typeof globals.ScrollTimeline !== \'function\') {\\n    globals.ScrollTimeline = jest.fn();\\n  }\\n\\n  if (typeof HTMLElement.prototype.animate !== \'function\') {\\n    HTMLElement.prototype.animate = jest.fn(\\n      () =>\\n        ({\\n          cancel: jest.fn(),\\n        }) as unknown as Animation,\\n    );\\n  }\\n}\\n","properties":[{"name":"ScrollTimeline","deprecated":false,"deprecationMessage":"","type":"ScrollTimelineFunc","indexKey":"","optional":true,"description":"<p>Scroll timeline constructor</p>\\n","line":7,"rawdescription":"\\nScroll timeline constructor"}],"indexSignatures":[],"kind":171,"description":"<p>Globals used by scrolling</p>\\n","rawdescription":"\\nGlobals used by scrolling","methods":[],"extends":[]},{"name":"ScrollingOptions","id":"interface-ScrollingOptions-be92df704ab4f4a4523b66effa747b28adbcd4019d314eb5d936bc3c0fcb004ad347b57d224ea9715e389f15b61ce0bf4f8dd875fed05a827cd767ba1ce12c35","file":"scrolling/src/lib/scrolling.module.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { EnvironmentProviders, NgModule, makeEnvironmentProviders } from \'@angular/core\';\\nimport { getCurrentScriptBasePath } from \'@hra-ui/cdk/app-href\';\\nimport { provideStyleComponents } from \'@hra-ui/cdk/styling\';\\nimport {\\n  NgScrollbarModule,\\n  NgScrollbarOptions,\\n  provideScrollbarOptions,\\n  provideScrollbarPolyfill,\\n} from \'ngx-scrollbar\';\\nimport { ScrollOverflowFadeDirective } from \'./scroll-overflow-fade/scroll-overflow-fade.directive\';\\nimport { ScrollbarStylesComponent } from \'./scrollbar-styles/scrollbar-styles.component\';\\n\\n/** Scrolling configuration */\\nexport interface ScrollingOptions extends NgScrollbarOptions {\\n  /** Url to the scroll timeline polyfill script */\\n  polyfillUrl?: string;\\n}\\n\\n/** Default scroll timeline polyfill url */\\nconst DEFAULT_POLYFILL_URL = \'assets/polyfills/scroll-timeline-polyfill.js\';\\n\\n/**\\n * Provide scrolling functionality to an application.\\n *\\n * @param options Scrollbar options\\n * @returns An environment provider\\n */\\nexport function provideScrolling(options?: ScrollingOptions): EnvironmentProviders {\\n  const polyfillUrl = getCurrentScriptBasePath() + (options?.polyfillUrl ?? DEFAULT_POLYFILL_URL);\\n\\n  return makeEnvironmentProviders([\\n    provideStyleComponents(ScrollbarStylesComponent),\\n    provideScrollbarPolyfill(polyfillUrl),\\n    provideScrollbarOptions({\\n      visibility: \'hover\',\\n      appearance: \'compact\',\\n      trackClass: \'hra-scrollbar-track\',\\n      thumbClass: \'hra-scrollbar-thumb\',\\n      ...options,\\n    }),\\n  ]);\\n}\\n\\n/** Module exporting ng-scrollbar and related scrolling utilities */\\n@NgModule({\\n  imports: [ScrollOverflowFadeDirective],\\n  exports: [NgScrollbarModule, ScrollOverflowFadeDirective],\\n})\\nexport class ScrollingModule {}\\n","properties":[{"name":"polyfillUrl","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Url to the scroll timeline polyfill script</p>\\n","line":16,"rawdescription":"\\nUrl to the scroll timeline polyfill script"}],"indexSignatures":[],"kind":171,"description":"<p>Scrolling configuration</p>\\n","rawdescription":"\\nScrolling configuration","methods":[],"extends":["NgScrollbarOptions"]},{"name":"SnackbarData","id":"interface-SnackbarData-8766ca472d19d28a16082b84e9635c3c550326c77bdbd73a2af5c667444a6467f578fb6ca108847c730a1ac3a0006e5d18d5d75f8f8679f5896a6aac4e96db3c","file":"snackbar/src/lib/snackbar.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from \'@angular/material/snack-bar\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { IconButtonSizeDirective } from \'@hra-ui/design-system/icon-button\';\\n\\n/** Type for button position */\\nexport type ButtonPosition = \'start\' | \'end\';\\n\\n/** interface for snackbar data */\\nexport interface SnackbarData {\\n  /** Message in the snackbar */\\n  message: string;\\n  /** Action button */\\n  action?: string;\\n  /** Flag to show/hide the close button */\\n  close?: boolean;\\n  /** Position of the action button */\\n  actionButtonPosition?: ButtonPosition;\\n}\\n\\n/** Snackbar component */\\n@Component({\\n  selector: \'hra-snackbar\',\\n  imports: [CommonModule, MatIconModule, ButtonsModule, IconButtonSizeDirective, MatIconModule],\\n  templateUrl: \'./snackbar.component.html\',\\n  styleUrl: \'./snackbar.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SnackbarComponent {\\n  /** Reference to the MatSnackbarRef */\\n  protected readonly snackbarRef = inject(MatSnackBarRef);\\n\\n  /** Injection token for the snackbar data*/\\n  protected readonly data: SnackbarData = inject(MAT_SNACK_BAR_DATA);\\n}\\n","properties":[{"name":"action","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Action button</p>\\n","line":16,"rawdescription":"\\nAction button"},{"name":"actionButtonPosition","deprecated":false,"deprecationMessage":"","type":"ButtonPosition","indexKey":"","optional":true,"description":"<p>Position of the action button</p>\\n","line":20,"rawdescription":"\\nPosition of the action button"},{"name":"close","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":true,"description":"<p>Flag to show/hide the close button</p>\\n","line":18,"rawdescription":"\\nFlag to show/hide the close button"},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Message in the snackbar</p>\\n","line":14,"rawdescription":"\\nMessage in the snackbar"}],"indexSignatures":[],"kind":171,"description":"<p>interface for snackbar data</p>\\n","rawdescription":"\\ninterface for snackbar data","methods":[],"extends":[]},{"name":"TableDemoData","id":"interface-TableDemoData-f712bbba5ae4b005f32490419bc0d30512fa6fe7689311634a0a5ae7682e9e3cb8575e7e13c2e6d0ccd9fdc4eb2d82efe36245f2c07dd246342622a6b82dd8bc","file":"table/src/lib/table-demo/table-demo.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { Component, effect, input, viewChild } from \'@angular/core\';\\nimport { MatSort, MatSortModule } from \'@angular/material/sort\';\\nimport { MatTableDataSource, MatTableModule } from \'@angular/material/table\';\\n\\n/** Type for row data */\\nexport interface TableDemoData {\\n  /** Name of item */\\n  name: string;\\n  /** Value of item*/\\n  value: number;\\n}\\n\\n/**\\n * Angular Material table with with sort feature\\n */\\n@Component({\\n  selector: \'hra-table-demo\',\\n  templateUrl: \'table-demo.component.html\',\\n  imports: [MatTableModule, MatSortModule, CommonModule],\\n})\\nexport class TableDemoComponent {\\n  /** Unsorted data */\\n  readonly data = input<TableDemoData[]>([]);\\n\\n  /** Columns in table */\\n  readonly columns: string[] = [\'name\', \'value\'];\\n\\n  /** Mat sort element */\\n  readonly sort = viewChild.required(MatSort);\\n\\n  /** Table data source */\\n  readonly dataSource = new MatTableDataSource<TableDemoData>([]);\\n\\n  /** Sort data on load */\\n  constructor() {\\n    effect(() => {\\n      this.dataSource.data = this.data();\\n      this.dataSource.sort = this.sort();\\n    });\\n  }\\n}\\n","properties":[{"name":"name","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Name of item</p>\\n","line":9,"rawdescription":"\\nName of item"},{"name":"value","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"<p>Value of item</p>\\n","line":11,"rawdescription":"\\nValue of item"}],"indexSignatures":[],"kind":171,"description":"<p>Type for row data</p>\\n","rawdescription":"\\nType for row data","methods":[],"extends":[]},{"name":"TooltipContent","id":"interface-TooltipContent-7193ef52483d069fc6a41fa3e1edfc82f9c2d8ab65ff0d1d72fc22d8f1ad27f4d7618c9475d46b7ed4e4d7d6680c1750ed780f63a83b9d2b4506ef53e5ca33c6","file":"tooltip-card/src/lib/tooltip-card.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { booleanAttribute, ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\n\\n/** Interface for Tooltip Card Content */\\nexport interface TooltipContent {\\n  /** Title of the card */\\n  title?: string;\\n  /** Description of the card */\\n  description: string;\\n}\\n\\n/**\\n * Tooltip Card component\\n */\\n@Component({\\n  selector: \'hra-tooltip-card\',\\n  imports: [CommonModule],\\n  templateUrl: \'./tooltip-card.component.html\',\\n  styleUrl: \'./tooltip-card.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class.small]\': \'small()\',\\n  },\\n})\\nexport class TooltipCardComponent {\\n  /** Input for the card */\\n  readonly content = input.required<TooltipContent[]>();\\n\\n  /** Flag to decide whether the card is small */\\n  readonly small = input(false, { transform: booleanAttribute });\\n}\\n","properties":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Description of the card</p>\\n","line":9,"rawdescription":"\\nDescription of the card"},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"<p>Title of the card</p>\\n","line":7,"rawdescription":"\\nTitle of the card"}],"indexSignatures":[],"kind":171,"description":"<p>Interface for Tooltip Card Content</p>\\n","rawdescription":"\\nInterface for Tooltip Card Content","methods":[],"extends":[]}],"injectables":[{"name":"DialogService","id":"injectable-DialogService-0ace45ae862d76523389909666d70c6ef45ad47f0884082316b823495cfe48cbf362341035d333a07ba5780780f42e13e7ce649467b1edeb04ccae26226baad7","file":"dialog/src/dialog.service.ts","properties":[],"methods":[{"name":"openNotice","args":[{"name":"title","type":"string","deprecated":false,"deprecationMessage":""},{"name":"message","type":"string","deprecated":false,"deprecationMessage":""},{"name":"action","type":"DialogData","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"MatDialogRef<NoticeComponent>","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nOpens the dialog with necessary data and config","description":"<p>Opens the dialog with necessary data and config</p>\\n","jsdoctags":[{"name":"title","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"action","type":"DialogData","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Service to open dialog</p>\\n","rawdescription":"\\nService to open dialog","sourceCode":"import { inject, Injectable } from \'@angular/core\';\\nimport { MatDialog, MatDialogRef } from \'@angular/material/dialog\';\\nimport { DialogData, NoticeComponent } from \'./lib/notice/notice.component\';\\n\\n/** Service to open dialog */\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class DialogService {\\n  /** Instance of MatDialog */\\n  private readonly matDialog = inject(MatDialog);\\n\\n  /** Opens the dialog with necessary data and config */\\n  openNotice(title: string, message: string, action?: DialogData[\'action\']): MatDialogRef<NoticeComponent> {\\n    return this.matDialog.open(NoticeComponent, {\\n      data: {\\n        title,\\n        message,\\n        action,\\n      } satisfies DialogData,\\n      panelClass: \'hra-dialog-panel\',\\n    });\\n  }\\n}\\n","extends":[],"type":"injectable"},{"name":"SnackbarService","id":"injectable-SnackbarService-07a69536534bee9e9b2e8a53b0594798723a8a11398caae9faf867c3b26d90eaaaa255353ea14e02540323b5ae3abe547151d26587d6dc73c82123f43c22c74a","file":"snackbar/src/lib/snackbar.service.ts","properties":[{"name":"matSnackbar","defaultValue":"inject(MatSnackBar)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Reference to the MatSnackbar</p>\\n","line":14,"rawdescription":"\\nReference to the MatSnackbar","modifierKind":[148]}],"methods":[{"name":"open","args":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":""},{"name":"action","type":"string","deprecated":false,"deprecationMessage":""},{"name":"close","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false"},{"name":"actionButtonPosition","type":"ButtonPosition","deprecated":false,"deprecationMessage":"","defaultValue":"\'start\'"},{"name":"config","type":"SnackbarConfig","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"MatSnackBarRef<SnackbarComponent>","typeParameters":[],"line":17,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nOpens the snackbar with provided config","description":"<p>Opens the snackbar with provided config</p>\\n","jsdoctags":[{"name":"message","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"action","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"close","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"text":"param"}},{"name":"actionButtonPosition","type":"ButtonPosition","deprecated":false,"deprecationMessage":"","defaultValue":"\'start\'","tagName":{"text":"param"}},{"name":"config","type":"SnackbarConfig","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Service for snackbar. Opens the snackbar and configures it</p>\\n","rawdescription":"\\nService for snackbar. Opens the snackbar and configures it","sourceCode":"import { inject, Injectable } from \'@angular/core\';\\nimport { MatSnackBar, MatSnackBarConfig, MatSnackBarRef } from \'@angular/material/snack-bar\';\\nimport { ButtonPosition, SnackbarComponent, SnackbarData } from \'./snackbar.component\';\\n\\n/** Snackbar configuration */\\nexport type SnackbarConfig = Omit<MatSnackBarConfig, \'data\' | \'panelClass\'>;\\n\\n/** Service for snackbar. Opens the snackbar and configures it */\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class SnackbarService {\\n  /** Reference to the MatSnackbar */\\n  readonly matSnackbar = inject(MatSnackBar);\\n\\n  /** Opens the snackbar with provided config */\\n  open(\\n    message: string,\\n    action: string,\\n    close = false,\\n    actionButtonPosition: ButtonPosition = \'start\',\\n    config?: SnackbarConfig,\\n  ): MatSnackBarRef<SnackbarComponent> {\\n    return this.matSnackbar.openFromComponent(SnackbarComponent, {\\n      announcementMessage: message,\\n      ...config,\\n      data: { message, action, close, actionButtonPosition } satisfies SnackbarData,\\n      panelClass: [\'hra-snackbar-panel\'],\\n    });\\n  }\\n}\\n","extends":[],"type":"injectable"}],"guards":[],"interceptors":[],"classes":[],"directives":[{"name":"BaseButtonVariantDirective","id":"directive-BaseButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749","file":"buttons/button/src/lib/directives/variant.directive.ts","type":"directive","description":"<p>Base class for variant directives</p>\\n","rawdescription":"\\nBase class for variant directives","sourceCode":"import { computed, Directive, input, isSignal, Signal } from \'@angular/core\';\\n\\n/** Named button variants */\\nexport type ButtonVariant = \'primary\' | \'secondary\';\\n\\n/** Base class for variant directives */\\n@Directive({\\n  standalone: true,\\n  host: {\\n    \'[class]\': \'variantClass()\',\\n  },\\n})\\nexport abstract class BaseButtonVariantDirective {\\n  /** Button variant */\\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\\n\\n  /** Variant class applied to the button */\\n  protected readonly variantClass = computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  });\\n}\\n\\n/** Style a mat-button to a specific named variant */\\n@Directive({\\n  selector: \'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]\',\\n  standalone: true,\\n})\\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  // eslint-disable-next-line @angular-eslint/no-input-rename\\n  readonly variant = input.required<ButtonVariant>({ alias: \'hraButtonVariant\' });\\n}\\n\\n/** Style a mat-button as a primary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]\',\\n  standalone: true,\\n})\\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'primary\';\\n}\\n\\n/** Style a mat-button as a secondary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]\',\\n  standalone: true,\\n})\\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'secondary\';\\n}\\n","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"variant","deprecated":false,"deprecationMessage":"","type":"ButtonVariant | Signal<ButtonVariant>","indexKey":"","optional":false,"description":"<p>Button variant</p>\\n","line":15,"rawdescription":"\\nButton variant","modifierKind":[128,148]},{"name":"variantClass","defaultValue":"computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Variant class applied to the button</p>\\n","line":18,"rawdescription":"\\nVariant class applied to the button","modifierKind":[124,148]}],"methodsClass":[],"extends":[]},{"name":"ButtonSizeDirective","id":"directive-ButtonSizeDirective-cb587df7e790784c6736261163c35b122f6c93dd7cb008443d49153498f0251dd16b6c92c4f47f7369d2255a275ade5155f9af02ef9c2d70a5dad2d951889268","file":"buttons/button/src/lib/directives/size.directive.ts","type":"directive","description":"<p>Style a mat-button to a specific named size</p>\\n","rawdescription":"\\nStyle a mat-button to a specific named size","sourceCode":"import { Directive, input } from \'@angular/core\';\\n\\n/** Named button sizes */\\nexport type ButtonSize = \'small\' | \'medium\';\\n\\n/** Style a mat-button to a specific named size */\\n@Directive({\\n  selector: \'button[mat-button][hraButtonSize], a[mat-button][hraButtonSize]\',\\n  standalone: true,\\n  host: {\\n    \'[class]\': \'\\"hra-button-size-\\" + size()\',\\n  },\\n})\\nexport class ButtonSizeDirective {\\n  /** Size of button */\\n  // eslint-disable-next-line @angular-eslint/no-input-rename\\n  readonly size = input.required<ButtonSize>({ alias: \'hraButtonSize\' });\\n}\\n","selector":"button[mat-button][hraButtonSize], a[mat-button][hraButtonSize]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"size","defaultValue":"input.required<ButtonSize>({ alias: \'hraButtonSize\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of button</p>\\n","line":17,"rawdescription":"\\nSize of button","modifierKind":[148]}],"methodsClass":[],"extends":[]},{"name":"ButtonToggleSizeDirective","id":"directive-ButtonToggleSizeDirective-79c713300388290d539070e5a22ea60aef8f1f824c3921933f261975d641b6c8a03d899d74428f72acce1985e9ab369f8973cc755c0ea8438f2623af1c2fde9e","file":"buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts","type":"directive","description":"<p>Applies sizing to button toggle groups</p>\\n","rawdescription":"\\nApplies sizing to button toggle groups","sourceCode":"import { Directive, input } from \'@angular/core\';\\n\\n/** Button toggle size */\\nexport type ButtonToggleSize = \'small\' | \'medium\' | \'large\';\\n\\n/** Applies sizing to button toggle groups */\\n@Directive({\\n  selector: \'mat-button-toggle-group[hraButtonToggleSize]\',\\n  standalone: true,\\n  host: {\\n    \'[class]\': \'\\"hra-button-toggle-size-\\" + size()\',\\n  },\\n})\\nexport class ButtonToggleSizeDirective {\\n  /** Size of buttons */\\n  readonly size = input.required<ButtonToggleSize>({ alias: \'hraButtonToggleSize\' });\\n}\\n","selector":"mat-button-toggle-group[hraButtonToggleSize]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"size","defaultValue":"input.required<ButtonToggleSize>({ alias: \'hraButtonToggleSize\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of buttons</p>\\n","line":16,"rawdescription":"\\nSize of buttons","modifierKind":[148]}],"methodsClass":[],"extends":[]},{"name":"ButtonVariantDirective","id":"directive-ButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749","file":"buttons/button/src/lib/directives/variant.directive.ts","type":"directive","description":"<p>Style a mat-button to a specific named variant</p>\\n","rawdescription":"\\nStyle a mat-button to a specific named variant","sourceCode":"import { computed, Directive, input, isSignal, Signal } from \'@angular/core\';\\n\\n/** Named button variants */\\nexport type ButtonVariant = \'primary\' | \'secondary\';\\n\\n/** Base class for variant directives */\\n@Directive({\\n  standalone: true,\\n  host: {\\n    \'[class]\': \'variantClass()\',\\n  },\\n})\\nexport abstract class BaseButtonVariantDirective {\\n  /** Button variant */\\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\\n\\n  /** Variant class applied to the button */\\n  protected readonly variantClass = computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  });\\n}\\n\\n/** Style a mat-button to a specific named variant */\\n@Directive({\\n  selector: \'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]\',\\n  standalone: true,\\n})\\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  // eslint-disable-next-line @angular-eslint/no-input-rename\\n  readonly variant = input.required<ButtonVariant>({ alias: \'hraButtonVariant\' });\\n}\\n\\n/** Style a mat-button as a primary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]\',\\n  standalone: true,\\n})\\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'primary\';\\n}\\n\\n/** Style a mat-button as a secondary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]\',\\n  standalone: true,\\n})\\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'secondary\';\\n}\\n","selector":"button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"variant","defaultValue":"input.required<ButtonVariant>({ alias: \'hraButtonVariant\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Button variant</p>\\n","line":33,"rawdescription":"\\nButton variant","modifierKind":[148],"inheritance":{"file":"BaseButtonVariantDirective"}},{"name":"variantClass","defaultValue":"computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Variant class applied to the button</p>\\n","line":18,"rawdescription":"\\nVariant class applied to the button","modifierKind":[124,148],"inheritance":{"file":"BaseButtonVariantDirective"}}],"methodsClass":[],"extends":["BaseButtonVariantDirective"]},{"name":"CheckboxErrorVariantDirective","id":"directive-CheckboxErrorVariantDirective-90041ffb12e9bd8a13c6ebd19641ae1df814f232181f45b94bc19725410dc7add9054eafb2a59dacd73986c01d2d0801f0959f9b1118f5e63700e038a93931d3","file":"checkbox/src/lib/checkbox-error-variant/checkbox-error-variant-directive.ts","type":"directive","description":"<p>Directive for checkbox error variant</p>\\n","rawdescription":"\\n\\nDirective for checkbox error variant\\n","sourceCode":"import { Directive } from \'@angular/core\';\\n\\n/**\\n * Directive for checkbox error variant\\n */\\n@Directive({\\n  selector: \'[hraCheckboxErrorVariant]\',\\n  standalone: true,\\n  host: {\\n    class: \'hra-checkbox-error-variant\',\\n  },\\n})\\nexport class CheckboxErrorVariantDirective {}\\n","selector":"[hraCheckboxErrorVariant]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[],"extends":[]},{"name":"CtaButtonDirective","id":"directive-CtaButtonDirective-780dc200a60cd0c8ca0a5cd31482a27b1b603799bb3539bbc7679a4535799acbb891053ab2d7d8fb11cec2d65d27e47acddca2078caa9e3aafbd0fe43b936790","file":"buttons/button/src/lib/directives/cta.directive.ts","type":"directive","description":"<p>Turns a mat-button into a call-to-action styled button</p>\\n","rawdescription":"\\nTurns a mat-button into a call-to-action styled button","sourceCode":"import { Directive } from \'@angular/core\';\\n\\n/** Turns a mat-button into a call-to-action styled button */\\n@Directive({\\n  selector: \'button[mat-button][hraCtaButton], a[mat-button][hraCtaButton]\',\\n  standalone: true,\\n  host: {\\n    class: \'hra-cta-button\',\\n  },\\n})\\nexport class CtaButtonDirective {}\\n","selector":"button[mat-button][hraCtaButton], a[mat-button][hraCtaButton]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[],"extends":[]},{"name":"FullscreenDirective","id":"directive-FullscreenDirective-a918371e814faff4b1a12944eba618de311d95fdbf85263bd34b2fe5445e21aa36e2ac2f3009fe7d0c105c53f2e1b625e17b87783c4bc4acf712f562fce3cda5","file":"fullscreen/src/lib/fullscreen.directive.ts","type":"directive","description":"<p>Fullscreen directive</p>\\n","rawdescription":"\\nFullscreen directive","sourceCode":"import { Directive, inject, output, TemplateRef, ViewContainerRef } from \'@angular/core\';\\nimport { MatDialog } from \'@angular/material/dialog\';\\nimport { Subscription } from \'rxjs\';\\nimport { FullscreenComponent } from \'./fullscreen/fullscreen.component\';\\n\\n/** Fullscreen directive */\\n@Directive({\\n  selector: \'[hraFullscreen]\',\\n  standalone: true,\\n  exportAs: \'hraFullscreen\',\\n})\\nexport class FullscreenDirective {\\n  /** Output to emit when fullscreen is closed */\\n  readonly closed = output<void>({ alias: \'hraFullscreenClosed\' });\\n\\n  /** Returns the native element of the view reference */\\n  get nativeElement(): HTMLElement {\\n    return this.viewRef.rootNodes[0];\\n  }\\n\\n  /** Reference to the mat dialog */\\n  private readonly dialog = inject(MatDialog);\\n  /** Reference to the template */\\n  private readonly templateRef = inject(TemplateRef);\\n  /** Reference to the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n  /** Create view reference using the template */\\n  private readonly viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);\\n\\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\\n  open(): void {\\n    const { viewContainerRef, viewRef } = this;\\n    const index = viewContainerRef.indexOf(viewRef);\\n    viewContainerRef.detach(index);\\n\\n    const dialogRef = this.dialog.open(FullscreenComponent, {\\n      data: viewRef,\\n    });\\n\\n    const subs = new Subscription();\\n    const sub1 = dialogRef.beforeClosed().subscribe(() => {\\n      viewContainerRef.insert(viewRef);\\n    });\\n\\n    const sub2 = dialogRef.afterClosed().subscribe(() => {\\n      this.closed.emit();\\n    });\\n\\n    subs.add(sub1);\\n    subs.add(sub2);\\n  }\\n}\\n","selector":"[hraFullscreen]","providers":[],"exportAs":"hraFullscreen","hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"closed","defaultValue":"output<void>({ alias: \'hraFullscreenClosed\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Output to emit when fullscreen is closed</p>\\n","line":14,"rawdescription":"\\nOutput to emit when fullscreen is closed","modifierKind":[148]}],"methodsClass":[{"name":"open","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":31,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nDetaches the view from histogram module and attaches it to the view in the dialog","description":"<p>Detaches the view from histogram module and attaches it to the view in the dialog</p>\\n"}],"extends":[],"accessors":{"nativeElement":{"name":"nativeElement","getSignature":{"name":"nativeElement","type":"","returnType":"HTMLElement","line":17,"rawdescription":"\\nReturns the native element of the view reference","description":"<p>Returns the native element of the view reference</p>\\n"}}}},{"name":"HubmapMenuGroupDirective","id":"directive-HubmapMenuGroupDirective-ffc247892ca9ef8218941c3dd25a5994f7bbbf37351adcc424d60de438e26494f803e106c51b52ab725883d3f2165333ae5d25f3017cc35b6fa8b1a8cefe138e","file":"navigation/header/src/lib/hubmap-menu-content/hubmap-menu-content.component.ts","type":"directive","description":"<p>Directive used to type the context for menu group templates</p>\\n","rawdescription":"\\nDirective used to type the context for menu group templates","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Directive, input } from \'@angular/core\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { HubmapMenuGroup, HubmapMenuItem } from \'../types/hubmap-menu.schema\';\\n\\n/** Directive used to type the context for menu group templates */\\n@Directive({\\n  selector: \'ng-template[hraHubmapMenuGroup]\',\\n  standalone: true,\\n})\\nexport class HubmapMenuGroupDirective {\\n  /** Types the context as `HubmapMenuGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: HubmapMenuGroupDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuGroup } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu item templates */\\n@Directive({\\n  selector: \'ng-template[hraHubmapMenuItem]\',\\n  standalone: true,\\n})\\nexport class HubmapMenuItemDirective {\\n  /** Types the context as `HubmapMenuItem` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: HubmapMenuItemDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuItem } {\\n    return true;\\n  }\\n}\\n\\n/**\\n * Displays the content of a hubmap menu.\\n * Works for both mobile and desktop size screens.\\n */\\n@Component({\\n  selector: \'hra-hubmap-menu-content\',\\n  imports: [CommonModule, AssetUrlPipe, ButtonsModule, HubmapMenuGroupDirective, HubmapMenuItemDirective],\\n  templateUrl: \'./hubmap-menu-content.component.html\',\\n  styleUrl: \'./hubmap-menu-content.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HubmapMenuContentComponent {\\n  /** Menu data to display */\\n  readonly menu = input.required<HubmapMenuGroup[]>();\\n}\\n","selector":"ng-template[hraHubmapMenuGroup]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"ngTemplateContextGuard","args":[{"name":"_dir","type":"HubmapMenuGroupDirective","deprecated":false,"deprecationMessage":""},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":15,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nTypes the context as `HubmapMenuGroup`","description":"<p>Types the context as <code>HubmapMenuGroup</code></p>\\n","modifierKind":[126],"jsdoctags":[{"name":"_dir","type":"HubmapMenuGroupDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[]},{"name":"HubmapMenuItemDirective","id":"directive-HubmapMenuItemDirective-ffc247892ca9ef8218941c3dd25a5994f7bbbf37351adcc424d60de438e26494f803e106c51b52ab725883d3f2165333ae5d25f3017cc35b6fa8b1a8cefe138e","file":"navigation/header/src/lib/hubmap-menu-content/hubmap-menu-content.component.ts","type":"directive","description":"<p>Directive used to type the context for menu item templates</p>\\n","rawdescription":"\\nDirective used to type the context for menu item templates","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Directive, input } from \'@angular/core\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { HubmapMenuGroup, HubmapMenuItem } from \'../types/hubmap-menu.schema\';\\n\\n/** Directive used to type the context for menu group templates */\\n@Directive({\\n  selector: \'ng-template[hraHubmapMenuGroup]\',\\n  standalone: true,\\n})\\nexport class HubmapMenuGroupDirective {\\n  /** Types the context as `HubmapMenuGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: HubmapMenuGroupDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuGroup } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu item templates */\\n@Directive({\\n  selector: \'ng-template[hraHubmapMenuItem]\',\\n  standalone: true,\\n})\\nexport class HubmapMenuItemDirective {\\n  /** Types the context as `HubmapMenuItem` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: HubmapMenuItemDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuItem } {\\n    return true;\\n  }\\n}\\n\\n/**\\n * Displays the content of a hubmap menu.\\n * Works for both mobile and desktop size screens.\\n */\\n@Component({\\n  selector: \'hra-hubmap-menu-content\',\\n  imports: [CommonModule, AssetUrlPipe, ButtonsModule, HubmapMenuGroupDirective, HubmapMenuItemDirective],\\n  templateUrl: \'./hubmap-menu-content.component.html\',\\n  styleUrl: \'./hubmap-menu-content.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HubmapMenuContentComponent {\\n  /** Menu data to display */\\n  readonly menu = input.required<HubmapMenuGroup[]>();\\n}\\n","selector":"ng-template[hraHubmapMenuItem]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"ngTemplateContextGuard","args":[{"name":"_dir","type":"HubmapMenuItemDirective","deprecated":false,"deprecationMessage":""},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":28,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nTypes the context as `HubmapMenuItem`","description":"<p>Types the context as <code>HubmapMenuItem</code></p>\\n","modifierKind":[126],"jsdoctags":[{"name":"_dir","type":"HubmapMenuItemDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[]},{"name":"IconButtonSizeDirective","id":"directive-IconButtonSizeDirective-cfdc2a22b611c289aa41f82dfad5046fe463a9eda6fcf42fbe790c809d95b310788144d3ae8fb0fb59896794b07362d53d81174034202bd54f575c6f62d7c56a","file":"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts","type":"directive","description":"<p>Directive for icon buttons</p>\\n","rawdescription":"\\n\\nDirective for icon buttons\\n","sourceCode":"import { computed, Directive, input } from \'@angular/core\';\\n\\n/** Input options for icon button size */\\nexport type IconButtonSize = \'small\' | \'large\';\\n\\n/** Record of button sizes (number in rem) */\\nconst BUTTON_SIZES: Record<IconButtonSize, number> = {\\n  small: 1.5,\\n  large: 2.5,\\n};\\n\\n/** Record of icon sizes (number in rem) */\\nconst ICON_SIZES: Record<IconButtonSize, number> = {\\n  small: 1.25,\\n  large: 1.5,\\n};\\n\\n/**\\n * Directive for icon buttons\\n */\\n@Directive({\\n  selector: \'[hraIconButtonSize]\',\\n  standalone: true,\\n  host: {\\n    \'[style.--mdc-icon-button-state-layer-size.rem]\': \'buttonSize()\',\\n    \'[style.--mdc-icon-button-icon-size.rem]\': \'iconSize()\',\\n  },\\n})\\nexport class IconButtonSizeDirective {\\n  /** Size of icon button to use */\\n  readonly size = input.required<IconButtonSize>({ alias: \'hraIconButtonSize\' });\\n\\n  /** Gets size of button in rem */\\n  protected readonly buttonSize = computed(() => BUTTON_SIZES[this.size()]);\\n  /** Gets size of icon in rem */\\n  protected readonly iconSize = computed(() => ICON_SIZES[this.size()]);\\n}\\n","selector":"[hraIconButtonSize]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"buttonSize","defaultValue":"computed(() => BUTTON_SIZES[this.size()])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Gets size of button in rem</p>\\n","line":34,"rawdescription":"\\nGets size of button in rem","modifierKind":[124,148]},{"name":"iconSize","defaultValue":"computed(() => ICON_SIZES[this.size()])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Gets size of icon in rem</p>\\n","line":36,"rawdescription":"\\nGets size of icon in rem","modifierKind":[124,148]},{"name":"size","defaultValue":"input.required<IconButtonSize>({ alias: \'hraIconButtonSize\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of icon button to use</p>\\n","line":31,"rawdescription":"\\nSize of icon button to use","modifierKind":[148]}],"methodsClass":[],"extends":[]},{"name":"IconButtonVariantDirective","id":"directive-IconButtonVariantDirective-33600bf1e618b5bd5444c3ae23a8298307152521cc96377350a193b3ad9a402b34225ac2158799a40e57bd2ecdce3987dc1fd007c10269d0fa6e4dcc515624fe","file":"icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts","type":"directive","description":"<p>Directive for icon button variants (color)</p>\\n","rawdescription":"\\n\\nDirective for icon button variants (color)\\n","sourceCode":"import { Directive, input } from \'@angular/core\';\\n\\n/** Input options for icon button color */\\nexport type IconButtonVariant = \'light\' | \'dark\' | \'color\';\\n\\n/**\\n * Directive for icon button variants (color)\\n */\\n@Directive({\\n  selector: \'[hraIconButtonVariant]\',\\n  standalone: true,\\n  host: {\\n    \'[class]\': \'\\"icon-button-variant-\\" + variant()\',\\n  },\\n})\\nexport class IconButtonVariantDirective {\\n  /** Input for icon button color variant */\\n  readonly variant = input<IconButtonVariant>(\'dark\', { alias: \'hraIconButtonVariant\' });\\n}\\n","selector":"[hraIconButtonVariant]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"variant","defaultValue":"input<IconButtonVariant>(\'dark\', { alias: \'hraIconButtonVariant\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for icon button color variant</p>\\n","line":18,"rawdescription":"\\nInput for icon button color variant","modifierKind":[148]}],"methodsClass":[],"extends":[]},{"name":"MenuGroupDirective","id":"directive-MenuGroupDirective-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1","file":"navigation/header/src/lib/menu-content/menu-content.component.ts","type":"directive","description":"<p>Directive used to type the context for menu group templates</p>\\n","rawdescription":"\\nDirective used to type the context for menu group templates","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Directive, input } from \'@angular/core\';\\nimport { MatDivider } from \'@angular/material/divider\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from \'../types/menus.schema\';\\n\\n/** Display modes of the menu content component */\\nexport type MenuContentVariant = \'desktop\' | \'mobile\';\\n\\n/** Directive used to type the context for menu group templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuGroup]\',\\n  standalone: true,\\n})\\nexport class MenuGroupDirective {\\n  /** Types the context as `MenuGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu item templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuItem]\',\\n  standalone: true,\\n})\\nexport class MenuItemDirective {\\n  /** Types the context as `MenuItem` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu subgroup templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuSubGroup]\',\\n  standalone: true,\\n})\\nexport class MenuSubGroupDirective {\\n  /** Types the context as `MenuSubGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\\n    return true;\\n  }\\n}\\n\\n/**\\n * Displays the content of a menu.\\n * Has variants for both mobile and desktop size screens.\\n */\\n@Component({\\n  selector: \'hra-menu-content\',\\n  imports: [\\n    CommonModule,\\n    MatDivider,\\n    MatIconModule,\\n    ButtonsModule,\\n    MenuGroupDirective,\\n    MenuItemDirective,\\n    MenuSubGroupDirective,\\n  ],\\n  templateUrl: \'./menu-content.component.html\',\\n  styleUrl: \'./menu-content.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class]\': \'\\"menu-content-variant-\\" + variant()\',\\n  },\\n})\\nexport class MenuContentComponent {\\n  /** Display mode */\\n  readonly variant = input.required<MenuContentVariant>();\\n  /** Menu data to display */\\n  readonly menu = input.required<Menu>();\\n}\\n","selector":"ng-template[hraMenuGroup]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"ngTemplateContextGuard","args":[{"name":"_dir","type":"MenuGroupDirective","deprecated":false,"deprecationMessage":""},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":19,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nTypes the context as `MenuGroup`","description":"<p>Types the context as <code>MenuGroup</code></p>\\n","modifierKind":[126],"jsdoctags":[{"name":"_dir","type":"MenuGroupDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[]},{"name":"MenuItemDirective","id":"directive-MenuItemDirective-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1","file":"navigation/header/src/lib/menu-content/menu-content.component.ts","type":"directive","description":"<p>Directive used to type the context for menu item templates</p>\\n","rawdescription":"\\nDirective used to type the context for menu item templates","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Directive, input } from \'@angular/core\';\\nimport { MatDivider } from \'@angular/material/divider\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from \'../types/menus.schema\';\\n\\n/** Display modes of the menu content component */\\nexport type MenuContentVariant = \'desktop\' | \'mobile\';\\n\\n/** Directive used to type the context for menu group templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuGroup]\',\\n  standalone: true,\\n})\\nexport class MenuGroupDirective {\\n  /** Types the context as `MenuGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu item templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuItem]\',\\n  standalone: true,\\n})\\nexport class MenuItemDirective {\\n  /** Types the context as `MenuItem` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu subgroup templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuSubGroup]\',\\n  standalone: true,\\n})\\nexport class MenuSubGroupDirective {\\n  /** Types the context as `MenuSubGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\\n    return true;\\n  }\\n}\\n\\n/**\\n * Displays the content of a menu.\\n * Has variants for both mobile and desktop size screens.\\n */\\n@Component({\\n  selector: \'hra-menu-content\',\\n  imports: [\\n    CommonModule,\\n    MatDivider,\\n    MatIconModule,\\n    ButtonsModule,\\n    MenuGroupDirective,\\n    MenuItemDirective,\\n    MenuSubGroupDirective,\\n  ],\\n  templateUrl: \'./menu-content.component.html\',\\n  styleUrl: \'./menu-content.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class]\': \'\\"menu-content-variant-\\" + variant()\',\\n  },\\n})\\nexport class MenuContentComponent {\\n  /** Display mode */\\n  readonly variant = input.required<MenuContentVariant>();\\n  /** Menu data to display */\\n  readonly menu = input.required<Menu>();\\n}\\n","selector":"ng-template[hraMenuItem]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"ngTemplateContextGuard","args":[{"name":"_dir","type":"MenuItemDirective","deprecated":false,"deprecationMessage":""},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":32,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nTypes the context as `MenuItem`","description":"<p>Types the context as <code>MenuItem</code></p>\\n","modifierKind":[126],"jsdoctags":[{"name":"_dir","type":"MenuItemDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[]},{"name":"MenuSubGroupDirective","id":"directive-MenuSubGroupDirective-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1","file":"navigation/header/src/lib/menu-content/menu-content.component.ts","type":"directive","description":"<p>Directive used to type the context for menu subgroup templates</p>\\n","rawdescription":"\\nDirective used to type the context for menu subgroup templates","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Directive, input } from \'@angular/core\';\\nimport { MatDivider } from \'@angular/material/divider\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from \'../types/menus.schema\';\\n\\n/** Display modes of the menu content component */\\nexport type MenuContentVariant = \'desktop\' | \'mobile\';\\n\\n/** Directive used to type the context for menu group templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuGroup]\',\\n  standalone: true,\\n})\\nexport class MenuGroupDirective {\\n  /** Types the context as `MenuGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu item templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuItem]\',\\n  standalone: true,\\n})\\nexport class MenuItemDirective {\\n  /** Types the context as `MenuItem` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu subgroup templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuSubGroup]\',\\n  standalone: true,\\n})\\nexport class MenuSubGroupDirective {\\n  /** Types the context as `MenuSubGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\\n    return true;\\n  }\\n}\\n\\n/**\\n * Displays the content of a menu.\\n * Has variants for both mobile and desktop size screens.\\n */\\n@Component({\\n  selector: \'hra-menu-content\',\\n  imports: [\\n    CommonModule,\\n    MatDivider,\\n    MatIconModule,\\n    ButtonsModule,\\n    MenuGroupDirective,\\n    MenuItemDirective,\\n    MenuSubGroupDirective,\\n  ],\\n  templateUrl: \'./menu-content.component.html\',\\n  styleUrl: \'./menu-content.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class]\': \'\\"menu-content-variant-\\" + variant()\',\\n  },\\n})\\nexport class MenuContentComponent {\\n  /** Display mode */\\n  readonly variant = input.required<MenuContentVariant>();\\n  /** Menu data to display */\\n  readonly menu = input.required<Menu>();\\n}\\n","selector":"ng-template[hraMenuSubGroup]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[{"name":"ngTemplateContextGuard","args":[{"name":"_dir","type":"MenuSubGroupDirective","deprecated":false,"deprecationMessage":""},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nTypes the context as `MenuSubGroup`","description":"<p>Types the context as <code>MenuSubGroup</code></p>\\n","modifierKind":[126],"jsdoctags":[{"name":"_dir","type":"MenuSubGroupDirective","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"_ctx","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[]},{"name":"MicroTooltipDirective","id":"directive-MicroTooltipDirective-f93a9a4b0be3dcf5c8906b069ecfd7519dbe8b57555f87f93e82144d2348e930bbd880e1e6e0e1fc8f8e239e1698f0445a4e93a0d9a62f75f6800588145a91e3","file":"micro-tooltip/src/micro-tooltip.directive.ts","type":"directive","description":"<p>Directive for Tooltip</p>\\n","rawdescription":"\\nDirective for Tooltip","sourceCode":"import { Directive, effect, inject, input } from \'@angular/core\';\\nimport { MatTooltip } from \'@angular/material/tooltip\';\\nimport { registerStyleComponents } from \'@hra-ui/cdk/styling\';\\nimport { MicroTooltipStylesComponent } from \'./micro-tooltip-styles/micro-tooltip-styles.component\';\\n\\n/** Type of Tooltip size */\\nexport type MicroTooltipSize = \'small\' | \'medium\';\\n\\n/** Directive for Tooltip */\\n@Directive({\\n  selector: \'[hraMicroTooltip]\',\\n  standalone: true,\\n  hostDirectives: [\\n    {\\n      directive: MatTooltip,\\n      inputs: [\'matTooltip: hraMicroTooltip\', \'matTooltipPosition: hraMicroTooltipPosition\'],\\n    },\\n  ],\\n})\\nexport class MicroTooltipDirective {\\n  /** Size of the tooltip */\\n  readonly size = input<MicroTooltipSize>(\'medium\', { alias: \'hraMicroTooltipSize\' });\\n\\n  /** Instance of MatTooltip */\\n  protected readonly tooltip = inject(MatTooltip);\\n\\n  /** Registers the styles and sets class names for the tooltip container */\\n  constructor() {\\n    registerStyleComponents([MicroTooltipStylesComponent]);\\n\\n    effect(() => {\\n      this.tooltip.tooltipClass = [\'hra-micro-tooltip\', `hra-micro-tooltip-${this.size()}`];\\n    });\\n  }\\n}\\n","selector":"[hraMicroTooltip]","providers":[],"hostDirectives":[{"name":"MatTooltip","inputs":["matTooltip: hraMicroTooltip","matTooltipPosition: hraMicroTooltipPosition"],"outputs":[]}],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"size","defaultValue":"input<MicroTooltipSize>(\'medium\', { alias: \'hraMicroTooltipSize\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of the tooltip</p>\\n","line":22,"rawdescription":"\\nSize of the tooltip","modifierKind":[148]},{"name":"tooltip","defaultValue":"inject(MatTooltip)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Instance of MatTooltip</p>\\n","line":25,"rawdescription":"\\nInstance of MatTooltip","modifierKind":[124,148]}],"methodsClass":[],"extends":[],"constructorObj":{"name":"constructor","description":"<p>Registers the styles and sets class names for the tooltip container</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":25,"rawdescription":"\\nRegisters the styles and sets class names for the tooltip container"}},{"name":"PrimaryButtonVariantDirective","id":"directive-PrimaryButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749","file":"buttons/button/src/lib/directives/variant.directive.ts","type":"directive","description":"<p>Style a mat-button as a primary variant button</p>\\n","rawdescription":"\\nStyle a mat-button as a primary variant button","sourceCode":"import { computed, Directive, input, isSignal, Signal } from \'@angular/core\';\\n\\n/** Named button variants */\\nexport type ButtonVariant = \'primary\' | \'secondary\';\\n\\n/** Base class for variant directives */\\n@Directive({\\n  standalone: true,\\n  host: {\\n    \'[class]\': \'variantClass()\',\\n  },\\n})\\nexport abstract class BaseButtonVariantDirective {\\n  /** Button variant */\\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\\n\\n  /** Variant class applied to the button */\\n  protected readonly variantClass = computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  });\\n}\\n\\n/** Style a mat-button to a specific named variant */\\n@Directive({\\n  selector: \'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]\',\\n  standalone: true,\\n})\\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  // eslint-disable-next-line @angular-eslint/no-input-rename\\n  readonly variant = input.required<ButtonVariant>({ alias: \'hraButtonVariant\' });\\n}\\n\\n/** Style a mat-button as a primary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]\',\\n  standalone: true,\\n})\\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'primary\';\\n}\\n\\n/** Style a mat-button as a secondary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]\',\\n  standalone: true,\\n})\\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'secondary\';\\n}\\n","selector":"button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"variant","defaultValue":"\'primary\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Button variant</p>\\n","line":43,"rawdescription":"\\nButton variant","modifierKind":[148],"inheritance":{"file":"BaseButtonVariantDirective"}},{"name":"variantClass","defaultValue":"computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Variant class applied to the button</p>\\n","line":18,"rawdescription":"\\nVariant class applied to the button","modifierKind":[124,148],"inheritance":{"file":"BaseButtonVariantDirective"}}],"methodsClass":[],"extends":["BaseButtonVariantDirective"]},{"name":"ScrollOverflowFadeDirective","id":"directive-ScrollOverflowFadeDirective-5c069d94d9cda63486aa31c1f23d16a2e9d7563746326d99a1bebc6db1587495214db4c3ef234dcfc5e6a0a8302103131d976909000eb2f37ae90b65a07b6a0e","file":"scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts","type":"directive","description":"<p>Directive that can be used along ng-scrollbar to apply a gradient\\nto the top and bottom of the scroll area to indicate that there\\nis additional content available through scrolling.</p>\\n","rawdescription":"\\n\\nDirective that can be used along ng-scrollbar to apply a gradient\\nto the top and bottom of the scroll area to indicate that there\\nis additional content available through scrolling.\\n","sourceCode":"import {\\n  ChangeDetectionStrategy,\\n  Component,\\n  Directive,\\n  Renderer2,\\n  ViewEncapsulation,\\n  effect,\\n  inject,\\n  input,\\n  numberAttribute,\\n} from \'@angular/core\';\\nimport { registerStyleComponents } from \'@hra-ui/cdk/styling\';\\nimport { NG_SCROLLBAR } from \'ngx-scrollbar\';\\nimport { SCROLL_TIMELINE, ScrollTimelineFunc } from \'../scroll-timeline/scroll-timeline\';\\n\\n/** Keyframes for the top gradient */\\nconst GRADIENT_TOP_KEYFRAMES: Keyframe[] = [\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-start)\',\\n    opacity: 0,\\n  },\\n  {\\n    offset: 0.02,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-end)\',\\n  },\\n];\\n\\n/** Keyframes for the bottom gradient */\\nconst GRADIENT_BOTTOM_KEYFRAMES: Keyframe[] = [\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-start)\',\\n  },\\n  {\\n    offset: 0.98,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-end)\',\\n    opacity: 0,\\n  },\\n];\\n\\n/** Scroll overflow fade global styles component */\\n@Component({\\n  selector: \'hra-scroll-overflow-fade-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./scroll-overflow-fade.directive.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScrollOverflowFadeStylesComponent {}\\n\\n/**\\n * Directive that can be used along ng-scrollbar to apply a gradient\\n * to the top and bottom of the scroll area to indicate that there\\n * is additional content available through scrolling.\\n */\\n@Directive({\\n  selector: \'[hraScrollOverflowFade]\',\\n  standalone: true,\\n  host: {\\n    \'[style.--hra-scroll-overflow-fade-offset.px]\': \'scrollOverflowFadeOffset()\',\\n  },\\n})\\nexport class ScrollOverflowFadeDirective {\\n  /**\\n   * Additional offset to the gradient elements.\\n   * Primarily useful when there are sticky headers on a table, etc.\\n   */\\n  readonly scrollOverflowFadeOffset = input(0, { transform: numberAttribute });\\n\\n  /** Renderer instance */\\n  private readonly renderer = inject(Renderer2);\\n  /** Nearest ng-scrollbar instance */\\n  private readonly scrollbar = inject(NG_SCROLLBAR);\\n  /** Signal providing access to ScrollTimeline though browser builtin or polyfill */\\n  private readonly scrollTimeline = inject(SCROLL_TIMELINE);\\n\\n  /**\\n   * Initializes the directive, adding the gradient elements to the scroll area.\\n   */\\n  constructor() {\\n    registerStyleComponents([ScrollOverflowFadeStylesComponent]);\\n\\n    effect((onCleanup) => {\\n      const scrollTimeline = this.scrollTimeline();\\n      if (!this.scrollbar.viewport.initialized() || !scrollTimeline) {\\n        return;\\n      }\\n\\n      const viewport = this.scrollbar.viewport.nativeElement;\\n      const cleanupFns = [\\n        this.attachGradient(viewport, \'top\', scrollTimeline, GRADIENT_TOP_KEYFRAMES),\\n        this.attachGradient(viewport, \'bottom\', scrollTimeline, GRADIENT_BOTTOM_KEYFRAMES),\\n      ];\\n\\n      onCleanup(() => cleanupFns.forEach((fn) => fn()));\\n    });\\n  }\\n\\n  /**\\n   * Creates and attaches a gradient element to a scroll area.\\n   *\\n   * @param viewport The scroll area viewport\\n   * @param placement Whether to place the gradient on top or bottom\\n   * @param scrollTimeline Reference to ScrollTimeline\\n   * @param keyframes Keyframes used to animate/move the gradient\\n   * @returns A cleanup function\\n   */\\n  private attachGradient(\\n    viewport: HTMLElement,\\n    placement: \'top\' | \'bottom\',\\n    scrollTimeline: ScrollTimelineFunc,\\n    keyframes: Keyframe[],\\n  ): () => void {\\n    const el = this.createGradientElement(placement);\\n    this.renderer.appendChild(viewport, el);\\n\\n    const animation = this.animateGradient(scrollTimeline, el, viewport, keyframes);\\n    return () => {\\n      el.remove();\\n      animation.cancel();\\n    };\\n  }\\n\\n  /**\\n   * Creates a new gradient element.\\n   *\\n   * @param placement Whether it will be placed on the top or bottom\\n   * @returns A new element\\n   */\\n  private createGradientElement(placement: \'top\' | \'bottom\'): HTMLElement {\\n    const el: HTMLElement = this.renderer.createElement(\'div\');\\n    this.renderer.addClass(el, `hra-scroll-overflow-fade-gradient-${placement}`);\\n    return el;\\n  }\\n\\n  /**\\n   * Animates a gradient element using a scroll timeline.\\n   *\\n   * @param scrollTimeline Reference to ScrollTimeline\\n   * @param el Element to animate\\n   * @param source Scroll container element\\n   * @param keyframes Keyframe specification\\n   * @returns An animation\\n   */\\n  private animateGradient(\\n    scrollTimeline: ScrollTimelineFunc,\\n    el: HTMLElement,\\n    source: HTMLElement,\\n    keyframes: Keyframe[],\\n  ): Animation {\\n    return el.animate(keyframes, {\\n      fill: \'both\',\\n      easing: \'linear\',\\n      timeline: new scrollTimeline({ source, axis: \'y\' }),\\n    });\\n  }\\n}\\n","selector":"[hraScrollOverflowFade]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"scrollOverflowFadeOffset","defaultValue":"input(0, { transform: numberAttribute })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Additional offset to the gradient elements.\\nPrimarily useful when there are sticky headers on a table, etc.</p>\\n","line":74,"rawdescription":"\\n\\nAdditional offset to the gradient elements.\\nPrimarily useful when there are sticky headers on a table, etc.\\n","modifierKind":[148]}],"methodsClass":[],"extends":[],"constructorObj":{"name":"constructor","description":"<p>Initializes the directive, adding the gradient elements to the scroll area.</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":81,"rawdescription":"\\n\\nInitializes the directive, adding the gradient elements to the scroll area.\\n"}},{"name":"SecondaryButtonVariantDirective","id":"directive-SecondaryButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749","file":"buttons/button/src/lib/directives/variant.directive.ts","type":"directive","description":"<p>Style a mat-button as a secondary variant button</p>\\n","rawdescription":"\\nStyle a mat-button as a secondary variant button","sourceCode":"import { computed, Directive, input, isSignal, Signal } from \'@angular/core\';\\n\\n/** Named button variants */\\nexport type ButtonVariant = \'primary\' | \'secondary\';\\n\\n/** Base class for variant directives */\\n@Directive({\\n  standalone: true,\\n  host: {\\n    \'[class]\': \'variantClass()\',\\n  },\\n})\\nexport abstract class BaseButtonVariantDirective {\\n  /** Button variant */\\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\\n\\n  /** Variant class applied to the button */\\n  protected readonly variantClass = computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  });\\n}\\n\\n/** Style a mat-button to a specific named variant */\\n@Directive({\\n  selector: \'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]\',\\n  standalone: true,\\n})\\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  // eslint-disable-next-line @angular-eslint/no-input-rename\\n  readonly variant = input.required<ButtonVariant>({ alias: \'hraButtonVariant\' });\\n}\\n\\n/** Style a mat-button as a primary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]\',\\n  standalone: true,\\n})\\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'primary\';\\n}\\n\\n/** Style a mat-button as a secondary variant button */\\n@Directive({\\n  selector: \'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]\',\\n  standalone: true,\\n})\\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\\n  /** Button variant */\\n  readonly variant = \'secondary\';\\n}\\n","selector":"button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"variant","defaultValue":"\'secondary\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>Button variant</p>\\n","line":53,"rawdescription":"\\nButton variant","modifierKind":[148],"inheritance":{"file":"BaseButtonVariantDirective"}},{"name":"variantClass","defaultValue":"computed(() => {\\n    const { variant } = this;\\n    const variantValue = isSignal(variant) ? variant() : variant;\\n    return `hra-button-variant-${variantValue}`;\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Variant class applied to the button</p>\\n","line":18,"rawdescription":"\\nVariant class applied to the button","modifierKind":[124,148],"inheritance":{"file":"BaseButtonVariantDirective"}}],"methodsClass":[],"extends":["BaseButtonVariantDirective"]},{"name":"SoftwareStatusSizeDirective","id":"directive-SoftwareStatusSizeDirective-0be27dfb48026e433e77109088c47a918fe2b0fc0bf7a976e4938db7a1a588a848ca69d07d313889c2ad8fb95992cf59b07b844ba9fd1a0c43e9f794069d11df","file":"software-status-indicator/src/lib/software-status-indicator-size.directive.ts","type":"directive","description":"<p>Directive for icon buttons</p>\\n","rawdescription":"\\n\\nDirective for icon buttons\\n","sourceCode":"import { computed, Directive, input } from \'@angular/core\';\\n\\n/** Input options for Software status size */\\nexport type SoftwareStatusSize = \'small\' | \'medium\' | \'large\';\\n\\n/** Record of button fonts */\\nconst STATUS_FONTS: Record<SoftwareStatusSize, string> = {\\n  small: \'var(--mat-sys-label-micro)\',\\n  medium: \'var(--mat-sys-label-medium)\',\\n  large: \'var(--mat-sys-label-large)\',\\n};\\n\\n/**\\n * Directive for icon buttons\\n */\\n@Directive({\\n  selector: \'[hraSoftwareStatusSize]\',\\n  standalone: true,\\n  host: {\\n    \'[style.font]\': \'font()\',\\n  },\\n})\\nexport class SoftwareStatusSizeDirective {\\n  /** Size of icon button to use */\\n  readonly size = input.required<SoftwareStatusSize>({ alias: \'hraSoftwareStatusSize\' });\\n\\n  /** Font */\\n  protected readonly font = computed(() => STATUS_FONTS[this.size()]);\\n}\\n","selector":"[hraSoftwareStatusSize]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"font","defaultValue":"computed(() => STATUS_FONTS[this.size()])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Font</p>\\n","line":28,"rawdescription":"\\nFont","modifierKind":[124,148]},{"name":"size","defaultValue":"input.required<SoftwareStatusSize>({ alias: \'hraSoftwareStatusSize\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of icon button to use</p>\\n","line":25,"rawdescription":"\\nSize of icon button to use","modifierKind":[148]}],"methodsClass":[],"extends":[]},{"name":"TextHyperlinkDirective","id":"directive-TextHyperlinkDirective-ec5e5b7fc9c3e189c77815ce30aaafdeada32321e386a649abb3fa0be26d51f822a0cc8d48bbbf7c1f9f650f77d71964603802e5a83a2ffeb079b29b8aae111c","file":"buttons/text-hyperlink/src/lib/text-hyperlink.directive.ts","type":"directive","description":"<p>Applies hyperlink styles when placed on an <a> tag</p>\\n","rawdescription":"\\nApplies hyperlink styles when placed on an <a> tag","sourceCode":"import { Directive } from \'@angular/core\';\\n\\n/** Applies hyperlink styles when placed on an <a> tag */\\n@Directive({\\n  selector: \'a[hraHyperlink]\',\\n  standalone: true,\\n  host: {\\n    class: \'hra-text-hyperlink\',\\n  },\\n})\\nexport class TextHyperlinkDirective {}\\n","selector":"a[hraHyperlink]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[],"methodsClass":[],"extends":[]},{"name":"TreeSizeDirective","id":"directive-TreeSizeDirective-08d21392cbcaab6b2b4c885a4cefdb26b3c1ace1f2284843dcca2a852c1fd65457bf3860553cf287c0052c09d5cfa50ce6e1fc6b65da68b66907dea95c0756b9","file":"tree/src/lib/tree-size/tree-size.directive.ts","type":"directive","description":"<p>Directive for hra tree component size</p>\\n","rawdescription":"\\n\\nDirective for hra tree component size\\n","sourceCode":"import { computed, Directive, input } from \'@angular/core\';\\n\\n/** Input options for each tree size */\\nexport type TreeSize = \'small\' | \'medium\' | \'large\';\\n\\n/** Icon sizes for each tree size (rem) */\\nconst ICON_SIZES: Record<TreeSize, number> = {\\n  small: 1.25,\\n  medium: 1.5,\\n  large: 1.5,\\n};\\n\\n/** Font sizes for each tree size (rem) */\\nconst FONT_SIZES: Record<TreeSize, number> = {\\n  small: 0.75,\\n  medium: 0.875,\\n  large: 1,\\n};\\n\\n/** Node heights for each tree size (rem) */\\nconst NODE_HEIGHTS: Record<TreeSize, number> = {\\n  small: 1.5,\\n  medium: 1.75,\\n  large: 2,\\n};\\n\\n/**\\n * Directive for hra tree component size\\n */\\n@Directive({\\n  selector: \'[hraTreeSize]\',\\n  standalone: true,\\n  host: {\\n    \'[style.--mat-tree-node-text-size.rem]\': \'fontSize()\',\\n    \'[style.--mat-tree-node-min-height.rem]\': \'nodeHeight()\',\\n    \'[style.--mdc-icon-button-state-layer-size.rem]\': \'nodeHeight()\',\\n    \'[style.--mdc-icon-button-icon-size.rem]\': \'iconSize()\',\\n  },\\n})\\nexport class TreeSizeDirective {\\n  /** Size of tree to use */\\n  readonly size = input.required<TreeSize>({ alias: \'hraTreeSize\' });\\n\\n  /** Gets font size of tree in rem */\\n  protected readonly iconSize = computed(() => ICON_SIZES[this.size()]);\\n\\n  /** Gets font size of tree in rem */\\n  protected readonly fontSize = computed(() => FONT_SIZES[this.size()]);\\n\\n  /** Node heights */\\n  protected readonly nodeHeight = computed(() => NODE_HEIGHTS[this.size()]);\\n}\\n","selector":"[hraTreeSize]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"fontSize","defaultValue":"computed(() => FONT_SIZES[this.size()])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Gets font size of tree in rem</p>\\n","line":48,"rawdescription":"\\nGets font size of tree in rem","modifierKind":[124,148]},{"name":"iconSize","defaultValue":"computed(() => ICON_SIZES[this.size()])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Gets font size of tree in rem</p>\\n","line":45,"rawdescription":"\\nGets font size of tree in rem","modifierKind":[124,148]},{"name":"nodeHeight","defaultValue":"computed(() => NODE_HEIGHTS[this.size()])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Node heights</p>\\n","line":51,"rawdescription":"\\nNode heights","modifierKind":[124,148]},{"name":"size","defaultValue":"input.required<TreeSize>({ alias: \'hraTreeSize\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of tree to use</p>\\n","line":42,"rawdescription":"\\nSize of tree to use","modifierKind":[148]}],"methodsClass":[],"extends":[]},{"name":"ViewOutletDirective","id":"directive-ViewOutletDirective-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd","file":"fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts","type":"directive","description":"<p>View outlet directive</p>\\n","rawdescription":"\\nView outlet directive","sourceCode":"import {\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  DestroyRef,\\n  Directive,\\n  effect,\\n  inject,\\n  input,\\n  output,\\n  TemplateRef,\\n  viewChild,\\n  ViewContainerRef,\\n  ViewRef,\\n} from \'@angular/core\';\\nimport { takeUntilDestroyed } from \'@angular/core/rxjs-interop\';\\nimport { MatDialog, MatDialogModule, MatDialogRef } from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { ExpansionPanelModule } from \'@hra-ui/design-system/expansion-panel\';\\nimport { filter, MonoTypeOperatorFunction, pipe } from \'rxjs\';\\n\\n/** View outlet directive */\\n@Directive({\\n  selector: \'[hraViewOutlet]\',\\n  standalone: true,\\n})\\nexport class ViewOutletDirective {\\n  /** view reference input */\\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: \'hraViewOutlet\' });\\n\\n  /** Reference of the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Attaches the view */\\n  constructor() {\\n    effect(() => this.attach());\\n  }\\n\\n  /** Attaches the view to the view container */\\n  attach(): void {\\n    const viewRef = this.viewRef();\\n    if (viewRef) {\\n      this.viewContainerRef.insert(viewRef);\\n    }\\n  }\\n  /** Detaches the view from the view container */\\n  detach(): void {\\n    const viewRef = this.viewRef();\\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\\n    if (index >= 0) {\\n      this.viewContainerRef.detach(index);\\n    }\\n  }\\n}\\n\\n/** Fullscreen actions component */\\n@Component({\\n  selector: \'hra-fullscreen-actions\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      display: flex;\\n      width: 100%;\\n      height: 100%;\\n      flex-direction: row;\\n      align-items: center;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenActionsComponent {}\\n\\n/** Fullscreen portal content component */\\n@Component({\\n  selector: \'hra-fullscreen-portal-content\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      width: 100%;\\n      height: 100%;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalContentComponent {}\\n\\n/** Fullscreen Component */\\n@Component({\\n  selector: \'hra-fullscreen-portal\',\\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\\n  templateUrl: \'./fullscreen-portal.component.html\',\\n  styleUrl: \'./fullscreen-portal.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalComponent {\\n  /** Heading of the dialog */\\n  readonly tagline = input.required<string>();\\n\\n  /** Classes to apply to the dialog panel in fullscreen mode */\\n  readonly panelClass = input<string | string[]>();\\n\\n  /** Event for before the dialog is opened */\\n  readonly beforeOpened = output<void>();\\n  /** Event for when the dialog is opened */\\n  readonly opened = output<void>();\\n  /** Event for before the dialog is closed */\\n  readonly beforeClosed = output<void>();\\n  /** Event for when the dialog is closed */\\n  readonly closed = output<void>();\\n\\n  /** Creates embedded view using template */\\n  readonly viewRef = computed(() => {\\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\\n  });\\n\\n  /** Rootnodes of the view reference */\\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\\n\\n  /** Reference to the mat dialog */\\n  private readonly dialogService = inject(MatDialog);\\n\\n  /** Reference to the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Reference to the destroy ref */\\n  private readonly destroyRef = inject(DestroyRef);\\n\\n  /** Reference to the view outlet directive */\\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\\n\\n  /** Reference to the view content template */\\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>(\'contentTemplate\');\\n\\n  /** Reference to the view dialog template */\\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>(\'dialogTemplate\');\\n\\n  /** Reference to the mat dialog */\\n  private dialogRef?: MatDialogRef<void>;\\n\\n  /** Destroys the view */\\n  constructor() {\\n    this.destroyRef.onDestroy(() => {\\n      const dialogRef = this.dialogRef;\\n      this.dialogRef = undefined;\\n      dialogRef?.close();\\n      this.viewRef().destroy();\\n    });\\n  }\\n\\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\\n  open(): void {\\n    if (this.dialogRef !== undefined) {\\n      return;\\n    }\\n\\n    const { dialogService, dialogTemplateRef } = this;\\n    const panelClass = this.panelClass() ?? [];\\n    const normalizedPanelClass = typeof panelClass === \'string\' ? panelClass.split(\' \') : panelClass;\\n\\n    this.beforeOpened.emit();\\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\\n      panelClass: [...normalizedPanelClass, \'fullscreen-panel\'],\\n    }));\\n\\n    dialogRef\\n      .afterOpened()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.opened.emit();\\n      });\\n\\n    dialogRef\\n      .beforeClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.beforeClosed.emit();\\n        this.viewOutlet().attach();\\n      });\\n\\n    dialogRef\\n      .afterClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.dialogRef = undefined;\\n        this.closed.emit();\\n      });\\n  }\\n\\n  /** Closes the dialog */\\n  close(): void {\\n    this.dialogRef?.close();\\n  }\\n\\n  /** Filters the dialog event based on provided dialog reference */\\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\\n    return pipe(\\n      takeUntilDestroyed(this.destroyRef),\\n      filter(() => this.dialogRef === dialogRef),\\n    );\\n  }\\n}\\n","selector":"[hraViewOutlet]","providers":[],"hostDirectives":[],"standalone":true,"inputsClass":[],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"viewRef","defaultValue":"input<ViewRef | undefined>(undefined, { alias: \'hraViewOutlet\' })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>view reference input</p>\\n","line":30,"rawdescription":"\\nview reference input","modifierKind":[148]}],"methodsClass":[{"name":"attach","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":41,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nAttaches the view to the view container","description":"<p>Attaches the view to the view container</p>\\n"},{"name":"detach","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":48,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nDetaches the view from the view container","description":"<p>Detaches the view from the view container</p>\\n"}],"extends":[],"constructorObj":{"name":"constructor","description":"<p>Attaches the view</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":33,"rawdescription":"\\nAttaches the view"}}],"components":[{"name":"AppNavButtonComponent","id":"component-AppNavButtonComponent-e696bd41d143f97965b81ffa415e68bfc390a04bfc95766b7ee7ec4e281337dbfe10d8bc43b641db11427f3676f69fdb0e3680bce8bbf454b6131d9376fe860c","file":"buttons/app-nav-button/src/lib/app-nav-button.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-app-nav-button","styleUrls":[],"styles":[],"templateUrl":["./app-nav-button.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Description of the card</p>\\n","line":19,"rawdescription":"\\nDescription of the card","modifierKind":[148],"required":true},{"name":"icon","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>URL for the icon</p>\\n","line":15,"rawdescription":"\\nURL for the icon","modifierKind":[148],"required":true},{"name":"link","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Link of the card</p>\\n","line":21,"rawdescription":"\\nLink of the card","modifierKind":[148],"required":true},{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Title of the card</p>\\n","line":17,"rawdescription":"\\nTitle of the card","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Description of the card</p>\\n","line":19,"rawdescription":"\\nDescription of the card","modifierKind":[148],"required":true},{"name":"icon","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>URL for the icon</p>\\n","line":15,"rawdescription":"\\nURL for the icon","modifierKind":[148],"required":true},{"name":"link","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Link of the card</p>\\n","line":21,"rawdescription":"\\nLink of the card","modifierKind":[148],"required":true},{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Title of the card</p>\\n","line":17,"rawdescription":"\\nTitle of the card","modifierKind":[148],"required":true}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatRippleModule","type":"module"}],"description":"<p>Apps Card Component</p>\\n","rawdescription":"\\nApps Card Component","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\n\\n/** Apps Card Component */\\n@Component({\\n  selector: \'hra-app-nav-button\',\\n  imports: [CommonModule, MatRippleModule],\\n  templateUrl: \'./app-nav-button.component.html\',\\n  styleUrl: \'./app-nav-button.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class AppNavButtonComponent {\\n  /** URL for the icon */\\n  readonly icon = input.required<string>();\\n  /** Title of the card */\\n  readonly tagline = input.required<string>();\\n  /** Description of the card */\\n  readonly description = input.required<string>();\\n  /** Link of the card */\\n  readonly link = input.required<string>();\\n}\\n","styleUrl":"./app-nav-button.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<a matRipple [attr.href]=\\"link()\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n  <img class=\\"icon\\" [attr.src]=\\"icon()\\" alt=\\"\\" />\\n  <span class=\\"tagline\\">{{ tagline() }}</span>\\n  <span class=\\"description\\">{{ description() }}</span>\\n</a>\\n"},{"name":"AppsSidenavDemoComponent","id":"component-AppsSidenavDemoComponent-aa67c1bfd678752af1a783cd5ed2b1dc04a7646cbb530e7ea5c77f9cc9e3b297d9501904a87df259a6b78d2cd6d5019a296f9405ba3420a0af518ab4a4ffed46","file":"src/lib/apps-sidenav-demo/apps-sidenav-demo.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-apps-sidenav","styleUrls":[],"styles":[],"templateUrl":["./apps-sidenav-demo.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"data","defaultValue":"[\\n    {\\n      category: \'About\',\\n      cards: [\\n        {\\n          name: \'HuBMAP Consortium\',\\n          icon: \'assets/logo/hubmap.svg\',\\n          title: \'HuBMAP Consortium\',\\n          description:\\n            \'HuBMAP all access: Learn about us, our policies, data, and tools. Explore our publications and how to work with us.\',\\n          link: \'https://hubmapconsortium.org/\',\\n        },\\n      ],\\n    },\\n    {\\n      category: \'Data\',\\n      cards: [\\n        {\\n          name: \'HubMAP Data Portal\',\\n          icon: \'assets/logo/data_portal.svg\',\\n          title: \'HuBMAP Data Portal\',\\n          description:\\n            \'Explore, visualize and download consortium-generated spatial and single cell data for the human body.\',\\n          link: \'https://portal.hubmapconsortium.org/\',\\n        },\\n        {\\n          name: \'Data Portal Workspaces\',\\n          icon: \'assets/logo/data_portal.svg\',\\n          title: \'Data Portal Workspaces\',\\n          description:\\n            \'Access HuBMAP data in a lightweight exploration platform and perform analyses directly within the portal.\',\\n          link: \'https://portal.hubmapconsortium.org/workspaces\',\\n        },\\n      ],\\n    },\\n    {\\n      category: \'Atlas\',\\n      cards: [\\n        {\\n          name: \'Human Reference Atlas\',\\n          icon: \'assets/logo/hra_small.svg\',\\n          title: \'Human Reference Atlas\',\\n          description:\\n            \'Use the HRA Portal to access atlas data, explore atlas functionality, and contribute to the Human Reference Atlas.\',\\n          link: \'https://humanatlas.io/\',\\n        },\\n        {\\n          name: \'Exploration User Interface\',\\n          icon: \'assets/logo/hra_small.svg\',\\n          title: \'Exploration User Interface\',\\n          description:\\n            \'Explore and validate spatially registered single-cell datasets in three-dimensions across organs.\',\\n          link: \'https://apps.humanatlas.io/eui/\',\\n        },\\n        {\\n          name: \'ASCT+B Reporter\',\\n          icon: \'assets/logo/hra_small.svg\',\\n          title: \'ASCT+B Reporter\',\\n          description:\\n            \'Explore and compare ASCT+B tables and construct validated panels for multiplexed antibody-based imaging (OMAPs) tables.\',\\n          link: \'https://hubmapconsortium.github.io/ccf-asct-reporter/\',\\n        },\\n      ],\\n    },\\n    {\\n      category: \'Analytics Tools\',\\n      cards: [\\n        {\\n          name: \'Azimuth\',\\n          icon: \'assets/logo/azimuth.svg\',\\n          title: \'Azimuth\',\\n          description:\\n            \'Azimuth uses a reference dataset to process, analyze, and interpret single-cell RNA-seq or ATAC-seq experiments.\',\\n          link: \'https://azimuth.hubmapconsortium.org/\',\\n        },\\n        {\\n          name: \'FUSION\',\\n          icon: \'assets/logo/fusion.svg\',\\n          title: \'FUSION\',\\n          description: \'Functional Unit State Identification and Navigation with WSI.\',\\n          link: \'http://fusion.hubmapconsortium.org/?utm_source=hubmap\',\\n        },\\n        {\\n          name: \'Antibody Validation Reports\',\\n          icon: \'assets/logo/antibody-validation-reports.svg\',\\n          title: \'Antibody Validation Reports\',\\n          description:\\n            \'Provide antibody details for multiplex imaging assays and capture data requested by journals for manuscript submission.\',\\n          link: \'https://avr.hubmapconsortium.org/\',\\n        },\\n      ],\\n    },\\n  ]","deprecated":false,"deprecationMessage":"","type":"CardData[]","indexKey":"","optional":false,"description":"<p>data to render the cards inside the sidenav</p>\\n","line":20,"rawdescription":"\\ndata to render the cards inside the sidenav","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatSidenavModule","type":"module"},{"name":"AppNavButtonComponent","type":"component"},{"name":"MatIconModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"ScrollingModule","type":"module"}],"description":"<p>Apps Sidenav component</p>\\n","rawdescription":"\\nApps Sidenav component","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatSidenavModule } from \'@angular/material/sidenav\';\\nimport { AppNavButtonComponent } from \'../../../buttons/app-nav-button/src/index\';\\nimport { ScrollingModule } from \'@hra-ui/design-system/scrolling\';\\nimport { CardData } from \'@hra-ui/design-system/nav-header\';\\n\\n/** Apps Sidenav component */\\n@Component({\\n  selector: \'hra-apps-sidenav\',\\n  imports: [CommonModule, MatSidenavModule, AppNavButtonComponent, MatIconModule, MatButtonModule, ScrollingModule],\\n  templateUrl: \'./apps-sidenav-demo.component.html\',\\n  styleUrl: \'./apps-sidenav-demo.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class AppsSidenavDemoComponent {\\n  /** data to render the cards inside the sidenav */\\n  readonly data: CardData[] = [\\n    {\\n      category: \'About\',\\n      cards: [\\n        {\\n          name: \'HuBMAP Consortium\',\\n          icon: \'assets/logo/hubmap.svg\',\\n          title: \'HuBMAP Consortium\',\\n          description:\\n            \'HuBMAP all access: Learn about us, our policies, data, and tools. Explore our publications and how to work with us.\',\\n          link: \'https://hubmapconsortium.org/\',\\n        },\\n      ],\\n    },\\n    {\\n      category: \'Data\',\\n      cards: [\\n        {\\n          name: \'HubMAP Data Portal\',\\n          icon: \'assets/logo/data_portal.svg\',\\n          title: \'HuBMAP Data Portal\',\\n          description:\\n            \'Explore, visualize and download consortium-generated spatial and single cell data for the human body.\',\\n          link: \'https://portal.hubmapconsortium.org/\',\\n        },\\n        {\\n          name: \'Data Portal Workspaces\',\\n          icon: \'assets/logo/data_portal.svg\',\\n          title: \'Data Portal Workspaces\',\\n          description:\\n            \'Access HuBMAP data in a lightweight exploration platform and perform analyses directly within the portal.\',\\n          link: \'https://portal.hubmapconsortium.org/workspaces\',\\n        },\\n      ],\\n    },\\n    {\\n      category: \'Atlas\',\\n      cards: [\\n        {\\n          name: \'Human Reference Atlas\',\\n          icon: \'assets/logo/hra_small.svg\',\\n          title: \'Human Reference Atlas\',\\n          description:\\n            \'Use the HRA Portal to access atlas data, explore atlas functionality, and contribute to the Human Reference Atlas.\',\\n          link: \'https://humanatlas.io/\',\\n        },\\n        {\\n          name: \'Exploration User Interface\',\\n          icon: \'assets/logo/hra_small.svg\',\\n          title: \'Exploration User Interface\',\\n          description:\\n            \'Explore and validate spatially registered single-cell datasets in three-dimensions across organs.\',\\n          link: \'https://apps.humanatlas.io/eui/\',\\n        },\\n        {\\n          name: \'ASCT+B Reporter\',\\n          icon: \'assets/logo/hra_small.svg\',\\n          title: \'ASCT+B Reporter\',\\n          description:\\n            \'Explore and compare ASCT+B tables and construct validated panels for multiplexed antibody-based imaging (OMAPs) tables.\',\\n          link: \'https://hubmapconsortium.github.io/ccf-asct-reporter/\',\\n        },\\n      ],\\n    },\\n    {\\n      category: \'Analytics Tools\',\\n      cards: [\\n        {\\n          name: \'Azimuth\',\\n          icon: \'assets/logo/azimuth.svg\',\\n          title: \'Azimuth\',\\n          description:\\n            \'Azimuth uses a reference dataset to process, analyze, and interpret single-cell RNA-seq or ATAC-seq experiments.\',\\n          link: \'https://azimuth.hubmapconsortium.org/\',\\n        },\\n        {\\n          name: \'FUSION\',\\n          icon: \'assets/logo/fusion.svg\',\\n          title: \'FUSION\',\\n          description: \'Functional Unit State Identification and Navigation with WSI.\',\\n          link: \'http://fusion.hubmapconsortium.org/?utm_source=hubmap\',\\n        },\\n        {\\n          name: \'Antibody Validation Reports\',\\n          icon: \'assets/logo/antibody-validation-reports.svg\',\\n          title: \'Antibody Validation Reports\',\\n          description:\\n            \'Provide antibody details for multiplex imaging assays and capture data requested by journals for manuscript submission.\',\\n          link: \'https://avr.hubmapconsortium.org/\',\\n        },\\n      ],\\n    },\\n  ];\\n}\\n","styleUrl":"./apps-sidenav-demo.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<mat-sidenav-container class=\\"container\\">\\n  <mat-sidenav #sidenav mode=\\"over\\" class=\\"apps-sidenav\\" position=\\"end\\" [fixedInViewport]=\\"false\\">\\n    <div class=\\"header\\">\\n      <span class=\\"sidenav-title\\"> HuBMAP Tools & Applications </span>\\n      <div style=\\"flex-grow: 1\\"></div>\\n      <button mat-icon-button hraIconButtonSize=\\"large\\" disableRipple (click)=\\"sidenav.toggle()\\">\\n        <mat-icon>close</mat-icon>\\n      </button>\\n    </div>\\n    <ng-scrollbar>\\n      @for (item of data; track item) {\\n        <div class=\\"category\\">\\n          <div class=\\"card-category\\">{{ item.category }}</div>\\n          @for (card of item.cards; track card) {\\n            <hra-app-nav-button\\n              [icon]=\\"card.icon\\"\\n              [tagline]=\\"card.name\\"\\n              [description]=\\"card.description\\"\\n              [link]=\\"card.link\\"\\n            ></hra-app-nav-button>\\n          }\\n        </div>\\n      }\\n    </ng-scrollbar>\\n  </mat-sidenav>\\n\\n  <mat-sidenav-content>\\n    <div class=\\"main\\">\\n      Sidenav Demonstration\\n      <div style=\\"flex-grow: 1\\"></div>\\n      <button mat-icon-button hraIconButtonSize=\\"large\\" disableRipple (click)=\\"sidenav.toggle()\\">\\n        <mat-icon>apps</mat-icon>\\n      </button>\\n    </div>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n"},{"name":"BackButtonBarComponent","id":"component-BackButtonBarComponent-bd9dc95083585034e9099454ce9df444284e8a6dc9eb7c343f0ea401973b8b40cd164ecf14a398fe84f4487377ee1bc5d64c6f1c68fd426298e61ed2bff8ae17","file":"navigation/back-button-bar/src/lib/back-button-bar.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-back-button-bar","styleUrls":[],"styles":[],"templateUrl":["./back-button-bar.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[{"name":"backClick","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Emits when the back button is clicked</p>\\n","line":16,"rawdescription":"\\nEmits when the back button is clicked","modifierKind":[148],"required":false}],"propertiesClass":[{"name":"backClick","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Emits when the back button is clicked</p>\\n","line":16,"rawdescription":"\\nEmits when the back button is clicked","modifierKind":[148],"required":false}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"MatCommonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"ButtonsModule","type":"module"}],"description":"<p>Back bar component used when an application is embedded</p>\\n","rawdescription":"\\nBack bar component used when an application is embedded","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, output } from \'@angular/core\';\\nimport { MatCommonModule } from \'@angular/material/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\n\\n/** Back bar component used when an application is embedded */\\n@Component({\\n  selector: \'hra-back-button-bar\',\\n  imports: [MatCommonModule, MatIconModule, ButtonsModule],\\n  templateUrl: \'./back-button-bar.component.html\',\\n  styleUrl: \'./back-button-bar.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BackButtonBarComponent {\\n  /** Emits when the back button is clicked */\\n  readonly backClick = output<void>();\\n}\\n","styleUrl":"./back-button-bar.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<button mat-button (click)=\\"backClick.emit()\\">\\n  <mat-icon>arrow_back</mat-icon>\\n  Back\\n</button>\\n"},{"name":"BrandLogoComponent","id":"component-BrandLogoComponent-0b4acb40c9f5ff12aeb181d1ff8594ca2933b2716e7a395c11323b6d2c64d5ef3698c320c23fc1262ca24aea63712d6714abb4cd072b7729b5ce930b223ad4da","file":"brand/logo/src/lib/logo.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"hra-brand-logo","styleUrls":[],"styles":[],"templateUrl":["./logo.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"data","defaultValue":"computed(() => findOrThrow(LOGOS, ({ size }) => size === this.size()))","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Logo data</p>\\n","line":28,"rawdescription":"\\nLogo data","modifierKind":[124,148]},{"name":"NEVER_EVAL_SCRIPTS","defaultValue":"SVGScriptEvalMode.NEVER","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>SVG script eval mode</p>\\n","line":25,"rawdescription":"\\nSVG script eval mode","modifierKind":[124,148]},{"name":"size","defaultValue":"input<BrandLogoSize>(\'regular\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of the logo</p>\\n","line":22,"rawdescription":"\\nSize of the logo","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"InlineSVGModule","type":"module"},{"name":"AssetUrlPipe","type":"pipe"}],"description":"<p>Brand Logo Component</p>\\n","rawdescription":"\\nBrand Logo Component","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, computed, input } from \'@angular/core\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { findOrThrow } from \'@hra-ui/common/array-util\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { LOGOS } from \'./static-data/parsed\';\\nimport { BrandLogoSize } from \'./types/logos.schema\';\\n\\n/** Brand Logo Component */\\n@Component({\\n  selector: \'hra-brand-logo\',\\n  imports: [CommonModule, InlineSVGModule, AssetUrlPipe],\\n  templateUrl: \'./logo.component.html\',\\n  styleUrl: \'./logo.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class]\': \'\\"hra-brand-logo-size-\\" + size()\',\\n  },\\n})\\nexport class BrandLogoComponent {\\n  /** Size of the logo */\\n  readonly size = input<BrandLogoSize>(\'regular\');\\n\\n  /** SVG script eval mode */\\n  protected readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Logo data */\\n  protected readonly data = computed(() => findOrThrow(LOGOS, ({ size }) => size === this.size()));\\n}\\n","styleUrl":"./logo.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<a\\n  class=\\"logo\\"\\n  [inlineSVG]=\\"data().src | assetUrl\\"\\n  [evalScripts]=\\"NEVER_EVAL_SCRIPTS\\"\\n  [style.width.px]=\\"data().width\\"\\n  [style.height.px]=\\"data().height\\"\\n  aria-label=\\"Visit Human Reference Atlas\\"\\n  href=\\"https://humanatlas.io/\\"\\n  target=\\"_blank\\"\\n  rel=\\"noopener noreferrer\\"\\n>\\n</a>\\n"},{"name":"BrandMarkComponent","id":"component-BrandMarkComponent-85372be079e0db3452222a1909c25ebdb1e653bdbede9678d3783bbe365834301e80ddba56c32cd9620a6b6bf601322d5e1907903ab08b8770e923771679c655","file":"brand/mark/src/lib/mark.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-brand-mark","styleUrls":[],"styles":[],"templateUrl":["./mark.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"data","defaultValue":"computed(() => findOrThrow(MARKS, ({ variant }) => variant === this.variant()))","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Mark data</p>\\n","line":27,"rawdescription":"\\nMark data","modifierKind":[124,148]},{"name":"NEVER_EVAL_SCRIPTS","defaultValue":"SVGScriptEvalMode.NEVER","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>SVG script eval mode</p>\\n","line":24,"rawdescription":"\\nSVG script eval mode","modifierKind":[124,148]},{"name":"variant","defaultValue":"input<BrandMarkVariant>(\'default\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Mark variant</p>\\n","line":21,"rawdescription":"\\nMark variant","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"InlineSVGModule","type":"module"},{"name":"AssetUrlPipe","type":"pipe"}],"description":"<p>HRA brandmark component</p>\\n","rawdescription":"\\n\\nHRA brandmark component\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, computed, input } from \'@angular/core\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { findOrThrow } from \'@hra-ui/common/array-util\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { MARKS } from \'./static-data/parsed\';\\nimport { BrandMarkVariant } from \'./types/marks.schema\';\\n\\n/**\\n * HRA brandmark component\\n */\\n@Component({\\n  selector: \'hra-brand-mark\',\\n  imports: [CommonModule, InlineSVGModule, AssetUrlPipe],\\n  templateUrl: \'./mark.component.html\',\\n  styleUrl: \'./mark.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BrandMarkComponent {\\n  /** Mark variant */\\n  readonly variant = input<BrandMarkVariant>(\'default\');\\n\\n  /** SVG script eval mode */\\n  protected readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Mark data */\\n  protected readonly data = computed(() => findOrThrow(MARKS, ({ variant }) => variant === this.variant()));\\n}\\n","styleUrl":"./mark.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<div\\n  class=\\"hra-brandmark\\"\\n  [inlineSVG]=\\"data().src | assetUrl\\"\\n  [evalScripts]=\\"NEVER_EVAL_SCRIPTS\\"\\n  [style.width.px]=\\"data().width\\"\\n  [style.height.px]=\\"data().height\\"\\n  aria-label=\\"Human Reference Atlas brandmark\\"\\n></div>\\n"},{"name":"BreadcrumbsComponent","id":"component-BreadcrumbsComponent-56ac05f544b545db7c1098e4a37552985041323d8713926d117028c6e04166e63309b6c086d2dbaff7e06cbd93f0e7730cf71f4e650e230982b1d72aa585b2f8","file":"buttons/breadcrumbs/src/lib/breadcrumbs.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-breadcrumbs","styleUrls":[],"styles":[],"templateUrl":["./breadcrumbs.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"crumbs","defaultValue":"input<BreadcrumbItem[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Crumbs to display</p>\\n","line":27,"rawdescription":"\\nCrumbs to display","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"RouterModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"TextHyperlinkDirective","type":"directive"}],"description":"<p>Component used to help the user understand their location within websites</p>\\n","rawdescription":"\\n\\nComponent used to help the user understand their location within websites\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { RouterModule } from \'@angular/router\';\\nimport { TextHyperlinkDirective } from \'@hra-ui/design-system/buttons/text-hyperlink\';\\n\\n/** Breadcrumb item */\\nexport interface BreadcrumbItem {\\n  /** Name of item */\\n  name: string;\\n  /** Route to page */\\n  route?: string;\\n}\\n\\n/**\\n * Component used to help the user understand their location within websites\\n */\\n@Component({\\n  selector: \'hra-breadcrumbs\',\\n  imports: [CommonModule, RouterModule, MatIconModule, TextHyperlinkDirective],\\n  templateUrl: \'./breadcrumbs.component.html\',\\n  styleUrl: \'./breadcrumbs.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BreadcrumbsComponent {\\n  /** Crumbs to display */\\n  readonly crumbs = input<BreadcrumbItem[]>([]);\\n}\\n","styleUrl":"./breadcrumbs.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<nav class=\\"navigation\\">\\n  <ol class=\\"crumbs\\">\\n    @for (crumb of crumbs(); track $index) {\\n      <li class=\\"crumb\\">\\n        @if (crumb.route) {\\n          <a hraHyperlink [routerLink]=\\"crumb.route\\">{{ crumb.name }}</a>\\n        } @else {\\n          {{ crumb.name }}\\n        }\\n\\n        @if (!$last) {\\n          <mat-icon class=\\"icon\\">chevron_right</mat-icon>\\n        }\\n      </li>\\n    }\\n  </ol>\\n</nav>\\n"},{"name":"ButtonGlobalStylesComponent","id":"component-ButtonGlobalStylesComponent-a3bfc6a43497fd00b96485fca7462a1c76c561babc583cfc63986e0b4b1b061806f75e5eea0f1bdb229e0dcf1e645a870519efc9fc9f0ca87f58678802112011","file":"buttons/button/src/lib/global-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-button-global-styles","styleUrls":["./global-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Global styles for standard buttons</p>\\n","rawdescription":"\\nGlobal styles for standard buttons","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/** Global styles for standard buttons */\\n@Component({\\n  selector: \'hra-button-global-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./global-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ButtonGlobalStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  :is(button, a).mdc-button {\\n    @include utils.use-font(label, medium);\\n\\n    --mdc-text-button-label-text-color: var(--mat-sys-on-tertiary-fixed);\\n    --mat-text-button-state-layer-color: var(--mat-sys-on-tertiary-fixed);\\n    --mdc-text-button-disabled-label-text-color: #{utils.with-alpha(var(--mat-sys-secondary), 38%)};\\n    --mat-text-button-ripple-color: #{utils.with-alpha(var(--mat-sys-secondary), 8%)};\\n\\n    --mdc-text-button-container-height: 2.5rem;\\n    --mdc-text-button-container-shape: var(--mat-sys-corner-extra-small);\\n    --mat-text-button-horizontal-padding: 1rem;\\n    --mat-text-button-icon-offset: 0;\\n\\n    &:focus-visible {\\n      --mdc-text-button-label-text-color: var(--mat-sys-secondary);\\n      --mat-text-button-focus-state-layer-opacity: 0;\\n      @include utils.inset-outline(var(--mat-sys-tertiary));\\n    }\\n\\n    &.hra-button-variant-secondary.hra-cta-button {\\n      --mdc-text-button-container-shape: var(--mat-sys-corner-none);\\n    }\\n\\n    &.hra-button-variant-secondary:not(.hra-cta-button) {\\n      --mdc-text-button-label-text-color: var(--mat-sys-secondary);\\n      --mat-text-button-state-layer-color: var(--mat-sys-secondary);\\n    }\\n\\n    &.hra-button-size-small {\\n      @include utils.use-font(label, small);\\n\\n      --mdc-text-button-container-height: 1.75rem;\\n      --mat-text-button-horizontal-padding: 0.5rem;\\n    }\\n  }\\n\\n  :is(button, a).mdc-button[mat-flat-button] {\\n    --mdc-filled-button-label-text-color: var(--mat-sys-on-primary);\\n    --mat-filled-button-state-layer-color: var(--mat-sys-on-primary);\\n    --mdc-filled-button-container-color: var(--mat-sys-tertiary);\\n    --mdc-filled-button-disabled-label-text-color: #{utils.with-alpha(var(--mat-sys-secondary), 38%)};\\n    --mdc-filled-button-disabled-container-color: #{utils.with-alpha(var(--mat-sys-outline-variant), 38%)};\\n    --mat-filled-button-ripple-color: #{utils.with-alpha(var(--mat-sys-secondary), 12%)};\\n\\n    --mdc-filled-button-container-height: 2.5rem;\\n    --mdc-filled-button-container-shape: var(--mat-sys-corner-extra-small);\\n    --mat-filled-button-horizontal-padding: 1rem;\\n    --mat-filled-button-hover-state-layer-opacity: 0;\\n    --mat-filled-button-icon-offset: 0;\\n\\n    &:hover:not(:active) {\\n      box-shadow: 0.0625rem 0.125rem 1rem 0rem utils.with-alpha(var(--mat-sys-tertiary), 56%);\\n    }\\n\\n    &:focus-visible {\\n      --mdc-filled-button-label-text-color: var(--mat-sys-secondary);\\n      --mdc-filled-button-container-color: transparent;\\n      --mat-filled-button-focus-state-layer-opacity: 0;\\n      @include utils.inset-outline(var(--mat-sys-tertiary));\\n    }\\n  }\\n\\n  :is(button, a).mdc-button.hra-cta-button:not(.hra-button-variant-secondary) {\\n    $corner-width: 0.9375rem;\\n    $corner-height: 0.8125rem;\\n    $border-width: 0.15rem;\\n    $x-multiplier: 0.373;\\n    $y-multiplier: 0.4566;\\n    /* Order of path: bottom left -> top left -> top right -> bottom right y-axis -> bottom right x-axis */\\n    $background-clip-path: polygon(\\n      0 100%,\\n      0 0,\\n      100% 0%,\\n      100% calc(100% - #{$corner-height}),\\n      calc(100% - #{$corner-width}) 100%\\n    );\\n    $overlay-clip-path: polygon(\\n      $border-width calc(100% - $border-width),\\n      $border-width $border-width,\\n      calc(100% - $border-width) $border-width,\\n      calc(100% - $border-width) calc(100% - $corner-height - $border-width * $y-multiplier),\\n      calc(100% - $corner-width - $border-width * $x-multiplier) calc(100% - $border-width)\\n    );\\n\\n    --mdc-text-button-label-text-color: var(--mat-sys-on-primary);\\n    --mat-text-button-state-layer-color: var(--mat-sys-on-primary);\\n    --mdc-text-button-disabled-label-text-color: #{utils.with-alpha(var(--mat-sys-secondary), 38%)};\\n    --mat-text-button-ripple-color: #{utils.with-alpha(var(--mat-sys-secondary), 12%)};\\n\\n    --mdc-text-button-container-shape: var(--mat-sys-corner-none);\\n    --mat-text-button-hover-state-layer-opacity: 0;\\n\\n    background-color: var(--mat-sys-tertiary);\\n    clip-path: $background-clip-path;\\n\\n    &:disabled {\\n      background-color: utils.with-alpha(var(--mat-sys-outline-variant), 38%);\\n    }\\n\\n    &:hover:not(:active) {\\n      background-color: transparent;\\n      clip-path: unset;\\n      box-shadow: unset;\\n      filter: drop-shadow(0.0625rem 0.125rem 1rem utils.with-alpha(var(--mat-sys-tertiary), 56%));\\n\\n      &:before {\\n        content: \'\';\\n        position: absolute;\\n        z-index: -1;\\n        inset: 0;\\n        background: var(--mat-sys-tertiary);\\n        clip-path: $background-clip-path;\\n      }\\n    }\\n\\n    &:focus-visible {\\n      --mdc-text-button-label-text-color: var(--mat-sys-secondary);\\n      outline: unset;\\n\\n      &::after {\\n        content: \'\';\\n        position: absolute;\\n        background-color: var(--mat-sys-on-primary);\\n        inset: 0;\\n        z-index: -1;\\n        clip-path: $overlay-clip-path;\\n      }\\n    }\\n  }\\n}\\n","styleUrl":"./global-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"ButtonToggleGlobalStylesComponent","id":"component-ButtonToggleGlobalStylesComponent-b0821542a8e70e9edf17b59296abf8367d76258f3c76fffa6e6159de5cca80922c47779b6a6fbd92bb9dc1b44f0cc180bda9f64eeb8c751b65a14363f7625a82","file":"buttons/button-toggle/src/lib/global-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-button-toggle-global-styles","styleUrls":["./global-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Global styles for button toggles</p>\\n","rawdescription":"\\nGlobal styles for button toggles","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/** Global styles for button toggles */\\n@Component({\\n  selector: \'hra-button-toggle-global-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./global-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ButtonToggleGlobalStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  mat-button-toggle-group {\\n    --mat-standard-button-toggle-height: var(--mat-standard-button-toggle-label-text-line-height);\\n    --mat-standard-button-toggle-shape: var(--sys-corner-extra-small);\\n    --mat-standard-button-toggle-divider-color: var(--sys-primary);\\n\\n    --mat-standard-button-toggle-selected-state-text-color: var(--sys-secondary);\\n    --mat-standard-button-toggle-selected-state-background-color: #{utils.with-alpha(var(--sys-tertiary), 20%)};\\n\\n    &.hra-button-toggle-size-small {\\n      --mat-standard-button-toggle-label-text-font: var(--sys-label-small-font);\\n      --mat-standard-button-toggle-label-text-size: var(--sys-label-small-size);\\n      --mat-standard-button-toggle-label-text-line-height: var(--sys-label-small-line-height);\\n      --mat-standard-button-toggle-label-text-weight: var(--sys-label-small-weight);\\n      --mat-standard-button-toggle-label-text-tracking: var(--sys-label-small-tracking);\\n\\n      .mat-button-toggle-label-content {\\n        padding: 0.3125rem 0.5rem;\\n      }\\n    }\\n\\n    &.hra-button-toggle-size-medium {\\n      --mat-standard-button-toggle-label-text-font: var(--sys-label-medium-font);\\n      --mat-standard-button-toggle-label-text-size: var(--sys-label-medium-size);\\n      --mat-standard-button-toggle-label-text-line-height: var(--sys-label-medium-line-height);\\n      --mat-standard-button-toggle-label-text-weight: var(--sys-label-medium-weight);\\n      --mat-standard-button-toggle-label-text-tracking: var(--sys-label-medium-tracking);\\n\\n      .mat-button-toggle-label-content {\\n        padding: 0.3438rem 0.5rem;\\n      }\\n    }\\n\\n    &,\\n    &.hra-button-toggle-size-large {\\n      --mat-standard-button-toggle-label-text-font: var(--sys-label-large-font);\\n      --mat-standard-button-toggle-label-text-size: var(--sys-label-large-size);\\n      --mat-standard-button-toggle-label-text-line-height: var(--sys-label-large-line-height);\\n      --mat-standard-button-toggle-label-text-weight: var(--sys-label-large-weight);\\n      --mat-standard-button-toggle-label-text-tracking: var(--sys-label-large-tracking);\\n\\n      .mat-button-toggle-label-content {\\n        padding: 0.5rem 1rem;\\n      }\\n    }\\n  }\\n}\\n","styleUrl":"./global-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"CheckboxStylesComponent","id":"component-CheckboxStylesComponent-02d70ee5a000854e525275f68c518e7ee808756f6cc722803b782f17b72afc3f0193651e2e5b3f2ef62684af3f67bc5e42d6f2a56715c04d8f9654223e0ae166","file":"checkbox/src/lib/checkbox-styles/checkbox-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-checkbox-styles","styleUrls":["./checkbox-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Applies checkbox styles globally</p>\\n","rawdescription":"\\n\\nApplies checkbox styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/**\\n * Applies checkbox styles globally\\n */\\n@Component({\\n  selector: \'hra-checkbox-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./checkbox-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class CheckboxStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  mat-checkbox {\\n    --mdc-checkbox-unselected-icon-color: var(--mat-sys-primary);\\n    --mdc-checkbox-unselected-hover-icon-color: var(--mat-sys-secondary);\\n    --mdc-checkbox-unselected-focus-icon-color: var(--mat-sys-secondary);\\n\\n    --mdc-checkbox-selected-icon-color: var(--mat-sys-on-tertiary-fixed);\\n    --mdc-checkbox-selected-hover-icon-color: var(--mat-sys-on-tertiary-fixed);\\n    --mdc-checkbox-selected-focus-icon-color: var(--mat-sys-on-tertiary-fixed);\\n\\n    --mdc-checkbox-unselected-hover-state-layer-color: var(--mat-sys-secondary);\\n    --mdc-checkbox-unselected-focus-state-layer-color: var(--mat-sys-secondary);\\n    --mdc-checkbox-unselected-pressed-state-layer-color: var(--mat-sys-secondary);\\n\\n    --mdc-checkbox-selected-hover-state-layer-color: var(--mat-sys-on-tertiary-fixed);\\n    --mdc-checkbox-selected-focus-state-layer-color: var(--mat-sys-on-tertiary-fixed);\\n    --mdc-checkbox-selected-pressed-state-layer-color: var(--mat-sys-on-tertiary-fixed);\\n\\n    &.hra-checkbox-error-variant {\\n      --mdc-checkbox-unselected-icon-color: var(--mat-sys-error);\\n      --mdc-checkbox-unselected-hover-icon-color: var(--mat-sys-error);\\n      --mdc-checkbox-unselected-focus-icon-color: var(--mat-sys-error);\\n\\n      --mdc-checkbox-selected-icon-color: var(--mat-sys-error);\\n      --mdc-checkbox-selected-hover-icon-color: var(--mat-sys-error);\\n      --mdc-checkbox-selected-focus-icon-color: var(--mat-sys-error);\\n\\n      --mdc-checkbox-unselected-hover-state-layer-color: var(--mat-sys-error);\\n      --mdc-checkbox-unselected-focus-state-layer-color: var(--mat-sys-error);\\n      --mdc-checkbox-unselected-pressed-state-layer-color: var(--mat-sys-error);\\n\\n      --mdc-checkbox-selected-hover-state-layer-color: var(--mat-sys-error);\\n      --mdc-checkbox-selected-focus-state-layer-color: var(--mat-sys-error);\\n      --mdc-checkbox-selected-pressed-state-layer-color: var(--mat-sys-error);\\n    }\\n  }\\n}\\n","styleUrl":"./checkbox-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"ColorPickerComponent","id":"component-ColorPickerComponent-93ddee140f4551fc1b76cf374856d66eb6d324d630131470a73c0022851f856def64425f017251da31acbd4358f2f3ab3b514cef269b658c7f54a879a386de35","file":"color-picker/src/lib/color-picker.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-color-picker","styleUrls":[],"styles":[],"templateUrl":["./color-picker.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The RGB color value</p>\\n","line":16,"rawdescription":"\\nThe RGB color value","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>The RGB color value</p>\\n","line":16,"rawdescription":"\\nThe RGB color value","modifierKind":[148],"required":true},{"name":"colorPickerOpen","defaultValue":"output<ColorPickerDirective | null>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Emits when the color picker is opened or closed</p>\\n","line":19,"rawdescription":"\\nEmits when the color picker is opened or closed","modifierKind":[148]},{"name":"hexColor","defaultValue":"signal(\'#000000\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Hex representation of the color</p>\\n","line":22,"rawdescription":"\\nHex representation of the color","modifierKind":[148]}],"methodsClass":[{"name":"selectColor","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":25,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nSelect a new color from the color picker","description":"<p>Select a new color from the color picker</p>\\n","jsdoctags":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"ColorPickerModule","type":"module"}],"description":"<p>Color Picker Component</p>\\n","rawdescription":"\\nColor Picker Component","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, model, output, signal } from \'@angular/core\';\\nimport { colorEquals, hexToRgb, Rgb } from \'./color-utils\';\\nimport { ColorPickerDirective, ColorPickerModule } from \'ngx-color-picker\';\\n\\n/** Color Picker Component */\\n@Component({\\n  selector: \'hra-color-picker\',\\n  imports: [CommonModule, ColorPickerModule],\\n  templateUrl: \'./color-picker.component.html\',\\n  styleUrl: \'./color-picker.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ColorPickerComponent {\\n  /** The RGB color value */\\n  readonly color = model.required<Rgb>();\\n\\n  /** Emits when the color picker is opened or closed */\\n  readonly colorPickerOpen = output<ColorPickerDirective | null>();\\n\\n  /** Hex representation of the color */\\n  readonly hexColor = signal(\'#000000\');\\n\\n  /** Select a new color from the color picker */\\n  selectColor(hex: string): void {\\n    const rgb = hexToRgb(hex);\\n    if (!colorEquals(this.color(), rgb)) {\\n      this.color.set(rgb);\\n    }\\n  }\\n}\\n","styleUrl":"./color-picker.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<span\\n  class=\\"color-pick\\"\\n  [style.background]=\\"hexColor()\\"\\n  [colorPicker]=\\"hexColor()\\"\\n  cpWidth=\\"252px\\"\\n  cpOutputFormat=\\"hex\\"\\n  cpPositionOffset=\\"-17%\\"\\n  [cpOKButton]=\\"true\\"\\n  cpOKButtonClass=\\"accept-button\\"\\n  cpOKButtonText=\\"Accept\\"\\n  [cpCancelButton]=\\"true\\"\\n  cpCancelButtonClass=\\"cancel-button\\"\\n  cpAlphaChannel=\\"always\\"\\n  [cpUseRootViewContainer]=\\"true\\"\\n  (colorPickerOpen)=\\"colorPickerOpen.emit(colorPicker)\\"\\n  (colorPickerClose)=\\"colorPickerOpen.emit(null)\\"\\n  (colorPickerChange)=\\"this.hexColor.set($event)\\"\\n  (colorPickerSelect)=\\"selectColor($event)\\"\\n  data-testid=\\"color-picker-button\\"\\n  #colorPicker=\\"ngxColorPicker\\"\\n></span>\\n"},{"name":"CtaBarComponent","id":"component-CtaBarComponent-e27192fdd545c9d29c91c8da86dcddd01fc247e8f009cc7d7397be23fd90d1d9d139325e7c4bdf3ad5912a48d624145a38db93b80214eb54dbbb4bdcfc45d727","file":"navigation/cta-bar/src/lib/cta-bar.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-cta-bar","styleUrls":[],"styles":[],"templateUrl":["./cta-bar.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"action","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Action button text</p>\\n","line":16,"rawdescription":"\\nAction button text","modifierKind":[148],"required":true},{"name":"description","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Action description</p>\\n","line":18,"rawdescription":"\\nAction description","modifierKind":[148],"required":true},{"name":"url","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Url to visit when action button is clicked</p>\\n","line":20,"rawdescription":"\\nUrl to visit when action button is clicked","modifierKind":[148],"required":true}],"outputsClass":[{"name":"closeClick","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Emits when the close button is clicked</p>\\n","line":22,"rawdescription":"\\nEmits when the close button is clicked","modifierKind":[148],"required":false}],"propertiesClass":[{"name":"action","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Action button text</p>\\n","line":16,"rawdescription":"\\nAction button text","modifierKind":[148],"required":true},{"name":"closeClick","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Emits when the close button is clicked</p>\\n","line":22,"rawdescription":"\\nEmits when the close button is clicked","modifierKind":[148],"required":false},{"name":"description","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Action description</p>\\n","line":18,"rawdescription":"\\nAction description","modifierKind":[148],"required":true},{"name":"url","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Url to visit when action button is clicked</p>\\n","line":20,"rawdescription":"\\nUrl to visit when action button is clicked","modifierKind":[148],"required":true}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"ButtonsModule","type":"module"}],"description":"<p>A call to action bar that can be displayed at top of the page</p>\\n","rawdescription":"\\nA call to action bar that can be displayed at top of the page","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input, output } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\n\\n/** A call to action bar that can be displayed at top of the page */\\n@Component({\\n  selector: \'hra-cta-bar\',\\n  imports: [CommonModule, MatIconModule, ButtonsModule],\\n  templateUrl: \'./cta-bar.component.html\',\\n  styleUrl: \'./cta-bar.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class CtaBarComponent {\\n  /** Action button text */\\n  readonly action = input.required<string>();\\n  /** Action description */\\n  readonly description = input.required<string>();\\n  /** Url to visit when action button is clicked */\\n  readonly url = input.required<string>();\\n  /** Emits when the close button is clicked */\\n  readonly closeClick = output();\\n}\\n","styleUrl":"./cta-bar.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<div class=\\"content\\">\\n  <span class=\\"description\\">{{ description() }}</span>\\n  <a hraHyperlink class=\\"action\\" [attr.href]=\\"url()\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n    {{ action() }}\\n    <mat-icon>arrow_forwards</mat-icon>\\n  </a>\\n</div>\\n\\n<button mat-icon-button class=\\"close\\" aria-label=\\"Hide the call to action bar\\" (click)=\\"closeClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n"},{"name":"DeleteFileButtonComponent","id":"component-DeleteFileButtonComponent-1e95a146fd9a0a3c9a2e0e04bcd305a4a088679166a6b9c429f67bfbfe3ad95275b64d42de199a897cb2aae78ce7b091bdb92560585287405fa5384c77ae51ff","file":"buttons/delete-file-button/src/lib/delete-file-button.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-delete-file-button","styleUrls":[],"styles":[],"templateUrl":["./delete-file-button.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"fileName","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>File name</p>\\n","line":19,"rawdescription":"\\nFile name","modifierKind":[148],"required":true}],"outputsClass":[{"name":"cancelLoad","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Cancels load</p>\\n","line":22,"rawdescription":"\\nCancels load","modifierKind":[148],"required":false}],"propertiesClass":[{"name":"cancelLoad","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Cancels load</p>\\n","line":22,"rawdescription":"\\nCancels load","modifierKind":[148],"required":false},{"name":"fileName","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>File name</p>\\n","line":19,"rawdescription":"\\nFile name","modifierKind":[148],"required":true}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"IconButtonSizeDirective","type":"directive"}],"description":"<p>Button to give users an option to delete their file if they upload the wrong file</p>\\n","rawdescription":"\\n\\nButton to give users an option to delete their file if they upload the wrong file\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, input, output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { IconButtonSizeDirective } from \'@hra-ui/design-system/icon-button\';\\n\\n/**\\n * Button to give users an option to delete their file if they upload the wrong file\\n */\\n@Component({\\n  selector: \'hra-delete-file-button\',\\n  imports: [CommonModule, MatButtonModule, MatIconModule, IconButtonSizeDirective],\\n  templateUrl: \'./delete-file-button.component.html\',\\n  styleUrl: \'./delete-file-button.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class DeleteFileButtonComponent {\\n  /** File name */\\n  readonly fileName = input.required<string>();\\n\\n  /** Cancels load */\\n  readonly cancelLoad = output<void>();\\n}\\n","styleUrl":"./delete-file-button.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<span class=\\"file-name\\">{{ fileName() }}</span>\\n<button mat-icon-button hraIconButtonSize=\\"large\\" aria-label=\\"Delete file\\" (click)=\\"cancelLoad.emit()\\">\\n  <mat-icon>delete</mat-icon>\\n</button>\\n"},{"name":"DeprecatedWorkflowCardComponent","id":"component-DeprecatedWorkflowCardComponent-3a129d3e50cc5058946b0e23e26fe5022e6dd03a346cf036563d1768fde089e7e124d5b2c095be1a3103b354d7d4b4fe08c951160213f317b16c269034d55a0b","file":"workflow-card/src/lib/deprecated/workflow-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-workflow-card","styleUrls":[],"styles":[],"templateUrl":["./workflow-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"allowUpload","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the card allows uploading of files</p>\\n","line":21,"rawdescription":"\\nWhether the card allows uploading of files","required":false},{"name":"loadProgress","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current data load progress</p>\\n","line":18,"rawdescription":"\\nCurrent data load progress","required":false}],"outputsClass":[],"propertiesClass":[{"name":"allowUpload","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the card allows uploading of files</p>\\n","line":21,"rawdescription":"\\nWhether the card allows uploading of files","required":false},{"name":"loadProgress","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current data load progress</p>\\n","line":18,"rawdescription":"\\nCurrent data load progress","required":false}],"methodsClass":[],"deprecated":true,"deprecationMessage":"Use [WorkflowCardComponent](../workflow-card.component.ts) instead","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatProgressBarModule","type":"module"}],"description":"<p>Component that appears when users are completing a workflow process</p>\\n","rawdescription":"\\n\\nComponent that appears when users are completing a workflow process\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatProgressBarModule } from \'@angular/material/progress-bar\';\\n\\n/**\\n * Component that appears when users are completing a workflow process\\n * @deprecated Use [WorkflowCardComponent](../workflow-card.component.ts) instead\\n */\\n@Component({\\n  selector: \'hra-workflow-card\',\\n  imports: [CommonModule, MatProgressBarModule],\\n  templateUrl: \'./workflow-card.component.html\',\\n  styleUrl: \'./workflow-card.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class DeprecatedWorkflowCardComponent {\\n  /** Current data load progress */\\n  loadProgress = input<number>(0);\\n\\n  /** Whether the card allows uploading of files */\\n  allowUpload = input<boolean>(false);\\n}\\n","styleUrl":"./workflow-card.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<div class=\\"content\\" [class.allow-upload]=\\"allowUpload()\\">\\n  <ng-content></ng-content>\\n</div>\\n@if (allowUpload()) {\\n  <mat-progress-bar\\n    mode=\\"determinate\\"\\n    [class.ready]=\\"loadProgress() === 0\\"\\n    [class.fully-loaded]=\\"loadProgress() === 1\\"\\n    [value]=\\"loadProgress() * 100\\"\\n  ></mat-progress-bar>\\n}\\n"},{"name":"DesktopMenuComponent","id":"component-DesktopMenuComponent-e81d0652fb3ad1d8fba133d5930f5c6056e04c02787ac9eb972065749b6391f4a54ff0bccdb7504b70999b27aae039f5e52befb6764cfa3c82c987c807fc0ef7","file":"navigation/header/src/lib/desktop-menu/desktop-menu.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-desktop-menu","styleUrls":[],"styles":[],"templateUrl":["./desktop-menu.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"menu","defaultValue":"input.required<Menu | HubmapMenuGroup[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Menu to display</p>\\n","line":21,"rawdescription":"\\nMenu to display","modifierKind":[148]},{"name":"typedMenu","defaultValue":"computed(() => {\\n    const menu = this.menu();\\n    return Array.isArray(menu) ? { type: \'hubmap\' as const, menu } : { type: \'menu\' as const, menu };\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Menu object along with whether it is a hubmap or regular menu type</p>\\n","line":24,"rawdescription":"\\nMenu object along with whether it is a hubmap or regular menu type","modifierKind":[124]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"ScrollingModule","type":"module"},{"name":"HubmapMenuContentComponent","type":"component"},{"name":"MenuContentComponent","type":"component"}],"description":"<p>Display a menu for desktop sized screens</p>\\n","rawdescription":"\\n\\nDisplay a menu for desktop sized screens\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, computed, input } from \'@angular/core\';\\nimport { ScrollingModule } from \'@hra-ui/design-system/scrolling\';\\nimport { HubmapMenuContentComponent } from \'../hubmap-menu-content/hubmap-menu-content.component\';\\nimport { MenuContentComponent } from \'../menu-content/menu-content.component\';\\nimport { HubmapMenuGroup } from \'../types/hubmap-menu.schema\';\\nimport { Menu } from \'../types/menus.schema\';\\n\\n/**\\n * Display a menu for desktop sized screens\\n */\\n@Component({\\n  selector: \'hra-desktop-menu\',\\n  imports: [CommonModule, ScrollingModule, HubmapMenuContentComponent, MenuContentComponent],\\n  templateUrl: \'./desktop-menu.component.html\',\\n  styleUrl: \'./desktop-menu.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class DesktopMenuComponent {\\n  /** Menu to display */\\n  readonly menu = input.required<Menu | HubmapMenuGroup[]>();\\n\\n  /** Menu object along with whether it is a hubmap or regular menu type */\\n  protected typedMenu = computed(() => {\\n    const menu = this.menu();\\n    return Array.isArray(menu) ? { type: \'hubmap\' as const, menu } : { type: \'menu\' as const, menu };\\n  });\\n}\\n","styleUrl":"./desktop-menu.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<ng-scrollbar>\\n  @let typed = typedMenu();\\n  @if (typed.type === \'menu\') {\\n    <hra-menu-content variant=\\"desktop\\" [menu]=\\"typed.menu\\"></hra-menu-content>\\n  } @else {\\n    <hra-hubmap-menu-content [menu]=\\"typed.menu\\"></hra-hubmap-menu-content>\\n  }\\n</ng-scrollbar>\\n"},{"name":"ErrorIndicatorComponent","id":"component-ErrorIndicatorComponent-80f720ec959c5fb7f8dd65d625b60c005097e2276086fe7da9fbd399ab05195ae8782d10250b2c17310200293f7096cf7134c496c4a4ed91ac703633de9ac534","file":"error-indicator/src/lib/error-indicator.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-error-indicator","styleUrls":[],"styles":[],"templateUrl":["./error-indicator.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"errors","defaultValue":"input<string[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of errors to be shown in the indicator</p>\\n","line":15,"rawdescription":"\\nList of errors to be shown in the indicator","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatIconModule","type":"module"}],"description":"<p>Error Indicator component</p>\\n","rawdescription":"\\nError Indicator component","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\n\\n/** Error Indicator component */\\n@Component({\\n  selector: \'hra-error-indicator\',\\n  imports: [CommonModule, MatIconModule],\\n  templateUrl: \'./error-indicator.component.html\',\\n  styleUrl: \'./error-indicator.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ErrorIndicatorComponent {\\n  /** List of errors to be shown in the indicator */\\n  readonly errors = input<string[]>();\\n}\\n","styleUrl":"./error-indicator.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<mat-icon>error</mat-icon>\\n<div class=\\"errors\\">\\n  @for (error of errors(); track error) {\\n    <div class=\\"error\\">{{ error }}</div>\\n  }\\n</div>\\n"},{"name":"ExpansionPanelActionsComponent","id":"component-ExpansionPanelActionsComponent-bf4a38562564fd2cc9169c7f172cfaa48f8e7f615217f8556fb2eb116f31d49f3dc77613a38ed54deb154b2438fb498abe555eb0a70b445c1e5b00338b08c6c0","file":"expansion-panel/src/lib/expansion-panel.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-expansion-panel-actions","styleUrls":[],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Expansion panel actions component</p>\\n","rawdescription":"\\nExpansion panel actions component","type":"component","sourceCode":"import { AnimationEvent } from \'@angular/animations\';\\nimport { CdkAccordionModule } from \'@angular/cdk/accordion\';\\nimport {\\n  ANIMATION_MODULE_TYPE,\\n  booleanAttribute,\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  ElementRef,\\n  inject,\\n  input,\\n  Renderer2,\\n  viewChild,\\n} from \'@angular/core\';\\nimport { MatIconButton } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { BODY_EXPANSION } from \'./expansion-panel-animations\';\\nimport { MicroTooltipDirective } from \'@hra-ui/design-system/micro-tooltip\';\\n\\n/** Counter to keep track of distinct panels */\\nlet idCounter = 0;\\n\\n/** Expansion panel actions component */\\n@Component({\\n  selector: \'hra-expansion-panel-actions\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelActionsComponent {}\\n\\n/** Expansion panel header content component */\\n@Component({\\n  selector: \'hra-expansion-panel-header-content\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelHeaderContentComponent {}\\n\\n/** Expansion panel component */\\n@Component({\\n  selector: \'hra-expansion-panel\',\\n  imports: [CdkAccordionModule, MatIconButton, MatIconModule, MicroTooltipDirective],\\n  animations: [BODY_EXPANSION],\\n  templateUrl: \'./expansion-panel.component.html\',\\n  styleUrl: \'./expansion-panel.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelComponent {\\n  /** Title of the expansion panel */\\n  readonly tagline = input.required<string>();\\n\\n  /** Flag to check if the body is expanded */\\n  readonly expanded = input(true, { transform: booleanAttribute });\\n\\n  /** Flag to denote panel as disabled */\\n  readonly disabled = input(false, { transform: booleanAttribute });\\n\\n  /** Tooltip for header title */\\n  readonly tooltip = input<string>();\\n\\n  /** Increments the counter on every declaration */\\n  protected readonly id = idCounter++;\\n\\n  /** Id attribute for title based on current id counter */\\n  protected readonly taglineId = `expansion-panel-tagline-${this.id}`;\\n\\n  /** Id attribute for body based on current id counter */\\n  protected readonly bodyId = `expansion-panel-body-${this.id}`;\\n\\n  /** Instance of renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Instance of body element */\\n  private readonly bodyElementRef = viewChild.required<ElementRef<HTMLElement>>(\'body\');\\n\\n  /** Actual body element */\\n  private readonly body = computed(() => this.bodyElementRef().nativeElement);\\n\\n  /** Disable animations based on module type */\\n  private readonly animationsDisabled = inject(ANIMATION_MODULE_TYPE) === \'NoopAnimations\';\\n\\n  /** Sets attribute based on event state */\\n  protected animationStart(event: AnimationEvent): void {\\n    if (event.fromState !== \'void\' && !this.animationsDisabled) {\\n      this.renderer.setAttribute(this.body(), \'inert\', \'\');\\n    }\\n  }\\n\\n  /** Removes attribute based on event state */\\n  protected animationDone(event: AnimationEvent): void {\\n    if (event.fromState !== \'void\' && !this.animationsDisabled) {\\n      this.renderer.removeAttribute(this.body(), \'inert\');\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"ExpansionPanelComponent","id":"component-ExpansionPanelComponent-bf4a38562564fd2cc9169c7f172cfaa48f8e7f615217f8556fb2eb116f31d49f3dc77613a38ed54deb154b2438fb498abe555eb0a70b445c1e5b00338b08c6c0","file":"expansion-panel/src/lib/expansion-panel.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-expansion-panel","styleUrls":[],"styles":[],"templateUrl":["./expansion-panel.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Title of the expansion panel</p>\\n","line":52,"rawdescription":"\\nTitle of the expansion panel","modifierKind":[148],"required":true},{"name":"tooltip","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Tooltip for header title</p>\\n","line":61,"rawdescription":"\\nTooltip for header title","modifierKind":[148],"required":false}],"outputsClass":[],"propertiesClass":[{"name":"bodyId","defaultValue":"`expansion-panel-body-${this.id}`","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Id attribute for body based on current id counter</p>\\n","line":70,"rawdescription":"\\nId attribute for body based on current id counter","modifierKind":[124,148]},{"name":"disabled","defaultValue":"input(false, { transform: booleanAttribute })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Flag to denote panel as disabled</p>\\n","line":58,"rawdescription":"\\nFlag to denote panel as disabled","modifierKind":[148]},{"name":"expanded","defaultValue":"input(true, { transform: booleanAttribute })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Flag to check if the body is expanded</p>\\n","line":55,"rawdescription":"\\nFlag to check if the body is expanded","modifierKind":[148]},{"name":"id","defaultValue":"idCounter++","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Increments the counter on every declaration</p>\\n","line":64,"rawdescription":"\\nIncrements the counter on every declaration","modifierKind":[124,148]},{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Title of the expansion panel</p>\\n","line":52,"rawdescription":"\\nTitle of the expansion panel","modifierKind":[148],"required":true},{"name":"taglineId","defaultValue":"`expansion-panel-tagline-${this.id}`","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Id attribute for title based on current id counter</p>\\n","line":67,"rawdescription":"\\nId attribute for title based on current id counter","modifierKind":[124,148]},{"name":"tooltip","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Tooltip for header title</p>\\n","line":61,"rawdescription":"\\nTooltip for header title","modifierKind":[148],"required":false}],"methodsClass":[{"name":"animationDone","args":[{"name":"event","type":"AnimationEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nRemoves attribute based on event state","description":"<p>Removes attribute based on event state</p>\\n","modifierKind":[124],"jsdoctags":[{"name":"event","type":"AnimationEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"animationStart","args":[{"name":"event","type":"AnimationEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":85,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nSets attribute based on event state","description":"<p>Sets attribute based on event state</p>\\n","modifierKind":[124],"jsdoctags":[{"name":"event","type":"AnimationEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CdkAccordionModule","type":"module"},{"name":"MatIconButton"},{"name":"MatIconModule","type":"module"},{"name":"MicroTooltipDirective","type":"directive"}],"description":"<p>Expansion panel component</p>\\n","rawdescription":"\\nExpansion panel component","type":"component","sourceCode":"import { AnimationEvent } from \'@angular/animations\';\\nimport { CdkAccordionModule } from \'@angular/cdk/accordion\';\\nimport {\\n  ANIMATION_MODULE_TYPE,\\n  booleanAttribute,\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  ElementRef,\\n  inject,\\n  input,\\n  Renderer2,\\n  viewChild,\\n} from \'@angular/core\';\\nimport { MatIconButton } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { BODY_EXPANSION } from \'./expansion-panel-animations\';\\nimport { MicroTooltipDirective } from \'@hra-ui/design-system/micro-tooltip\';\\n\\n/** Counter to keep track of distinct panels */\\nlet idCounter = 0;\\n\\n/** Expansion panel actions component */\\n@Component({\\n  selector: \'hra-expansion-panel-actions\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelActionsComponent {}\\n\\n/** Expansion panel header content component */\\n@Component({\\n  selector: \'hra-expansion-panel-header-content\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelHeaderContentComponent {}\\n\\n/** Expansion panel component */\\n@Component({\\n  selector: \'hra-expansion-panel\',\\n  imports: [CdkAccordionModule, MatIconButton, MatIconModule, MicroTooltipDirective],\\n  animations: [BODY_EXPANSION],\\n  templateUrl: \'./expansion-panel.component.html\',\\n  styleUrl: \'./expansion-panel.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelComponent {\\n  /** Title of the expansion panel */\\n  readonly tagline = input.required<string>();\\n\\n  /** Flag to check if the body is expanded */\\n  readonly expanded = input(true, { transform: booleanAttribute });\\n\\n  /** Flag to denote panel as disabled */\\n  readonly disabled = input(false, { transform: booleanAttribute });\\n\\n  /** Tooltip for header title */\\n  readonly tooltip = input<string>();\\n\\n  /** Increments the counter on every declaration */\\n  protected readonly id = idCounter++;\\n\\n  /** Id attribute for title based on current id counter */\\n  protected readonly taglineId = `expansion-panel-tagline-${this.id}`;\\n\\n  /** Id attribute for body based on current id counter */\\n  protected readonly bodyId = `expansion-panel-body-${this.id}`;\\n\\n  /** Instance of renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Instance of body element */\\n  private readonly bodyElementRef = viewChild.required<ElementRef<HTMLElement>>(\'body\');\\n\\n  /** Actual body element */\\n  private readonly body = computed(() => this.bodyElementRef().nativeElement);\\n\\n  /** Disable animations based on module type */\\n  private readonly animationsDisabled = inject(ANIMATION_MODULE_TYPE) === \'NoopAnimations\';\\n\\n  /** Sets attribute based on event state */\\n  protected animationStart(event: AnimationEvent): void {\\n    if (event.fromState !== \'void\' && !this.animationsDisabled) {\\n      this.renderer.setAttribute(this.body(), \'inert\', \'\');\\n    }\\n  }\\n\\n  /** Removes attribute based on event state */\\n  protected animationDone(event: AnimationEvent): void {\\n    if (event.fromState !== \'void\' && !this.animationsDisabled) {\\n      this.renderer.removeAttribute(this.body(), \'inert\');\\n    }\\n  }\\n}\\n","styleUrl":"./expansion-panel.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<cdk-accordion>\\n  <cdk-accordion-item\\n    #accordionItem=\\"cdkAccordionItem\\"\\n    tabindex=\\"0\\"\\n    [attr.aria-expanded]=\\"accordionItem.expanded\\"\\n    [attr.aria-controls]=\\"bodyId\\"\\n    [expanded]=\\"expanded\\"\\n  >\\n    <div class=\\"header\\">\\n      @if (!disabled()) {\\n        <button mat-icon-button data-testid=\\"toggle\\" (click)=\\"accordionItem.toggle()\\">\\n          <mat-icon [hraMicroTooltip]=\\"accordionItem.expanded ? \'Collapse\' : \'Expand\'\\">\\n            {{ accordionItem.expanded ? \'remove\' : \'add\' }}\\n          </mat-icon>\\n        </button>\\n      }\\n\\n      <span class=\\"title\\" [attr.id]=\\"taglineId\\" [hraMicroTooltip]=\\"tooltip()\\">\\n        {{ tagline() }}\\n      </span>\\n\\n      <span>\\n        <ng-content select=\\"hra-expansion-panel-actions\\"> </ng-content>\\n      </span>\\n      <div class=\\"filler\\"></div>\\n      <span>\\n        <ng-content select=\\"hra-expansion-panel-header-content\\"></ng-content>\\n      </span>\\n    </div>\\n    <div\\n      role=\\"region\\"\\n      class=\\"content\\"\\n      [attr.id]=\\"bodyId\\"\\n      [attr.aria-labelledby]=\\"taglineId\\"\\n      #body\\n      [@bodyExpansion]=\\"accordionItem.expanded ? \'expanded\' : \'collapsed\'\\"\\n      (@bodyExpansion.start)=\\"animationStart($event)\\"\\n      (@bodyExpansion.done)=\\"animationDone($event)\\"\\n      data-testid=\\"body\\"\\n    >\\n      <div class=\\"expansion-body\\">\\n        <ng-content></ng-content>\\n      </div>\\n    </div>\\n  </cdk-accordion-item>\\n</cdk-accordion>\\n"},{"name":"ExpansionPanelHeaderContentComponent","id":"component-ExpansionPanelHeaderContentComponent-bf4a38562564fd2cc9169c7f172cfaa48f8e7f615217f8556fb2eb116f31d49f3dc77613a38ed54deb154b2438fb498abe555eb0a70b445c1e5b00338b08c6c0","file":"expansion-panel/src/lib/expansion-panel.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-expansion-panel-header-content","styleUrls":[],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Expansion panel header content component</p>\\n","rawdescription":"\\nExpansion panel header content component","type":"component","sourceCode":"import { AnimationEvent } from \'@angular/animations\';\\nimport { CdkAccordionModule } from \'@angular/cdk/accordion\';\\nimport {\\n  ANIMATION_MODULE_TYPE,\\n  booleanAttribute,\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  ElementRef,\\n  inject,\\n  input,\\n  Renderer2,\\n  viewChild,\\n} from \'@angular/core\';\\nimport { MatIconButton } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { BODY_EXPANSION } from \'./expansion-panel-animations\';\\nimport { MicroTooltipDirective } from \'@hra-ui/design-system/micro-tooltip\';\\n\\n/** Counter to keep track of distinct panels */\\nlet idCounter = 0;\\n\\n/** Expansion panel actions component */\\n@Component({\\n  selector: \'hra-expansion-panel-actions\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelActionsComponent {}\\n\\n/** Expansion panel header content component */\\n@Component({\\n  selector: \'hra-expansion-panel-header-content\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelHeaderContentComponent {}\\n\\n/** Expansion panel component */\\n@Component({\\n  selector: \'hra-expansion-panel\',\\n  imports: [CdkAccordionModule, MatIconButton, MatIconModule, MicroTooltipDirective],\\n  animations: [BODY_EXPANSION],\\n  templateUrl: \'./expansion-panel.component.html\',\\n  styleUrl: \'./expansion-panel.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ExpansionPanelComponent {\\n  /** Title of the expansion panel */\\n  readonly tagline = input.required<string>();\\n\\n  /** Flag to check if the body is expanded */\\n  readonly expanded = input(true, { transform: booleanAttribute });\\n\\n  /** Flag to denote panel as disabled */\\n  readonly disabled = input(false, { transform: booleanAttribute });\\n\\n  /** Tooltip for header title */\\n  readonly tooltip = input<string>();\\n\\n  /** Increments the counter on every declaration */\\n  protected readonly id = idCounter++;\\n\\n  /** Id attribute for title based on current id counter */\\n  protected readonly taglineId = `expansion-panel-tagline-${this.id}`;\\n\\n  /** Id attribute for body based on current id counter */\\n  protected readonly bodyId = `expansion-panel-body-${this.id}`;\\n\\n  /** Instance of renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Instance of body element */\\n  private readonly bodyElementRef = viewChild.required<ElementRef<HTMLElement>>(\'body\');\\n\\n  /** Actual body element */\\n  private readonly body = computed(() => this.bodyElementRef().nativeElement);\\n\\n  /** Disable animations based on module type */\\n  private readonly animationsDisabled = inject(ANIMATION_MODULE_TYPE) === \'NoopAnimations\';\\n\\n  /** Sets attribute based on event state */\\n  protected animationStart(event: AnimationEvent): void {\\n    if (event.fromState !== \'void\' && !this.animationsDisabled) {\\n      this.renderer.setAttribute(this.body(), \'inert\', \'\');\\n    }\\n  }\\n\\n  /** Removes attribute based on event state */\\n  protected animationDone(event: AnimationEvent): void {\\n    if (event.fromState !== \'void\' && !this.animationsDisabled) {\\n      this.renderer.removeAttribute(this.body(), \'inert\');\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"FooterComponent","id":"component-FooterComponent-7b9cc604e575efeae1b8d15e7d7d9069e00aee54109600298551a8f531e9a938e4c3cbf5d77d84e9b661a2a48f0349bbc7a9dd4d5b072f3ade79c37cb68226f1","file":"navigation/footer/src/lib/footer.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-footer","styleUrls":[],"styles":[],"templateUrl":["./footer.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"funders","defaultValue":"FUNDER_IDS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of funders to show</p>\\n","line":22,"rawdescription":"\\nList of funders to show","modifierKind":[148],"required":false},{"name":"socials","defaultValue":"SOCIAL_IDS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of social media link to show</p>\\n","line":24,"rawdescription":"\\nList of social media link to show","modifierKind":[148],"required":false}],"outputsClass":[],"propertiesClass":[{"name":"funders","defaultValue":"FUNDER_IDS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of funders to show</p>\\n","line":22,"rawdescription":"\\nList of funders to show","modifierKind":[148],"required":false},{"name":"socials","defaultValue":"SOCIAL_IDS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of social media link to show</p>\\n","line":24,"rawdescription":"\\nList of social media link to show","modifierKind":[148],"required":false}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"BrandModule","type":"module"},{"name":"ButtonsModule","type":"module"},{"name":"FundingComponent","type":"component"}],"description":"<p>Global footer component</p>\\n","rawdescription":"\\n\\nGlobal footer component\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { BrandModule } from \'@hra-ui/design-system/brand\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { SOCIAL_IDS } from \'@hra-ui/design-system/buttons/social-media-button\';\\nimport { FundingComponent } from \'./funding/funding.component\';\\nimport { FUNDER_IDS } from \'./static-data/parsed\';\\n\\n/**\\n * Global footer component\\n */\\n@Component({\\n  selector: \'hra-footer\',\\n  imports: [CommonModule, MatIconModule, BrandModule, ButtonsModule, FundingComponent],\\n  templateUrl: \'./footer.component.html\',\\n  styleUrl: \'./footer.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterComponent {\\n  /** List of funders to show */\\n  readonly funders = input(FUNDER_IDS);\\n  /** List of social media link to show */\\n  readonly socials = input(SOCIAL_IDS);\\n}\\n","styleUrl":"./footer.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<div class=\\"left\\">\\n  <div class=\\"content\\">\\n    <hra-brand-logo class=\\"logo\\"></hra-brand-logo>\\n    <span class=\\"copyright\\">\\n      <mat-icon fontSet=\\"material-symbols-outlined\\">copyright</mat-icon>\\n      2024 CNS at Indiana University\\n    </span>\\n    <div class=\\"socials\\">\\n      @for (id of socials(); track id) {\\n        <hra-social-media-button [id]=\\"$any(id)\\" size=\\"large\\" variant=\\"light\\"></hra-social-media-button>\\n      }\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\"right\\">\\n  <div class=\\"content\\">\\n    <hra-funding [funders]=\\"funders()\\"></hra-funding>\\n    <p class=\\"disclaimer\\">\\n      Medical Disclaimer: This resource is intended for research purposes only. It should not be used for emergencies or\\n      medical or professional advice.\\n    </p>\\n    <p class=\\"data-notice\\">\\n      HuBMAP data is managed and published in the Data Portal and HRA according to FAIR principles, including\\n      standardized processing with reproducible pipelines. HuBMAP data may also be processed by other methods in\\n      scientific results published by HuBMAP consortium collaborations.\\n    </p>\\n  </div>\\n</div>\\n"},{"name":"FullscreenActionsComponent","id":"component-FullscreenActionsComponent-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd","file":"fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-actions","styleUrls":[],"styles":["\\n    :host {\\n      display: flex;\\n      width: 100%;\\n      height: 100%;\\n      flex-direction: row;\\n      align-items: center;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Fullscreen actions component</p>\\n","rawdescription":"\\nFullscreen actions component","type":"component","sourceCode":"import {\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  DestroyRef,\\n  Directive,\\n  effect,\\n  inject,\\n  input,\\n  output,\\n  TemplateRef,\\n  viewChild,\\n  ViewContainerRef,\\n  ViewRef,\\n} from \'@angular/core\';\\nimport { takeUntilDestroyed } from \'@angular/core/rxjs-interop\';\\nimport { MatDialog, MatDialogModule, MatDialogRef } from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { ExpansionPanelModule } from \'@hra-ui/design-system/expansion-panel\';\\nimport { filter, MonoTypeOperatorFunction, pipe } from \'rxjs\';\\n\\n/** View outlet directive */\\n@Directive({\\n  selector: \'[hraViewOutlet]\',\\n  standalone: true,\\n})\\nexport class ViewOutletDirective {\\n  /** view reference input */\\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: \'hraViewOutlet\' });\\n\\n  /** Reference of the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Attaches the view */\\n  constructor() {\\n    effect(() => this.attach());\\n  }\\n\\n  /** Attaches the view to the view container */\\n  attach(): void {\\n    const viewRef = this.viewRef();\\n    if (viewRef) {\\n      this.viewContainerRef.insert(viewRef);\\n    }\\n  }\\n  /** Detaches the view from the view container */\\n  detach(): void {\\n    const viewRef = this.viewRef();\\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\\n    if (index >= 0) {\\n      this.viewContainerRef.detach(index);\\n    }\\n  }\\n}\\n\\n/** Fullscreen actions component */\\n@Component({\\n  selector: \'hra-fullscreen-actions\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      display: flex;\\n      width: 100%;\\n      height: 100%;\\n      flex-direction: row;\\n      align-items: center;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenActionsComponent {}\\n\\n/** Fullscreen portal content component */\\n@Component({\\n  selector: \'hra-fullscreen-portal-content\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      width: 100%;\\n      height: 100%;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalContentComponent {}\\n\\n/** Fullscreen Component */\\n@Component({\\n  selector: \'hra-fullscreen-portal\',\\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\\n  templateUrl: \'./fullscreen-portal.component.html\',\\n  styleUrl: \'./fullscreen-portal.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalComponent {\\n  /** Heading of the dialog */\\n  readonly tagline = input.required<string>();\\n\\n  /** Classes to apply to the dialog panel in fullscreen mode */\\n  readonly panelClass = input<string | string[]>();\\n\\n  /** Event for before the dialog is opened */\\n  readonly beforeOpened = output<void>();\\n  /** Event for when the dialog is opened */\\n  readonly opened = output<void>();\\n  /** Event for before the dialog is closed */\\n  readonly beforeClosed = output<void>();\\n  /** Event for when the dialog is closed */\\n  readonly closed = output<void>();\\n\\n  /** Creates embedded view using template */\\n  readonly viewRef = computed(() => {\\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\\n  });\\n\\n  /** Rootnodes of the view reference */\\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\\n\\n  /** Reference to the mat dialog */\\n  private readonly dialogService = inject(MatDialog);\\n\\n  /** Reference to the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Reference to the destroy ref */\\n  private readonly destroyRef = inject(DestroyRef);\\n\\n  /** Reference to the view outlet directive */\\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\\n\\n  /** Reference to the view content template */\\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>(\'contentTemplate\');\\n\\n  /** Reference to the view dialog template */\\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>(\'dialogTemplate\');\\n\\n  /** Reference to the mat dialog */\\n  private dialogRef?: MatDialogRef<void>;\\n\\n  /** Destroys the view */\\n  constructor() {\\n    this.destroyRef.onDestroy(() => {\\n      const dialogRef = this.dialogRef;\\n      this.dialogRef = undefined;\\n      dialogRef?.close();\\n      this.viewRef().destroy();\\n    });\\n  }\\n\\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\\n  open(): void {\\n    if (this.dialogRef !== undefined) {\\n      return;\\n    }\\n\\n    const { dialogService, dialogTemplateRef } = this;\\n    const panelClass = this.panelClass() ?? [];\\n    const normalizedPanelClass = typeof panelClass === \'string\' ? panelClass.split(\' \') : panelClass;\\n\\n    this.beforeOpened.emit();\\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\\n      panelClass: [...normalizedPanelClass, \'fullscreen-panel\'],\\n    }));\\n\\n    dialogRef\\n      .afterOpened()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.opened.emit();\\n      });\\n\\n    dialogRef\\n      .beforeClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.beforeClosed.emit();\\n        this.viewOutlet().attach();\\n      });\\n\\n    dialogRef\\n      .afterClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.dialogRef = undefined;\\n        this.closed.emit();\\n      });\\n  }\\n\\n  /** Closes the dialog */\\n  close(): void {\\n    this.dialogRef?.close();\\n  }\\n\\n  /** Filters the dialog event based on provided dialog reference */\\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\\n    return pipe(\\n      takeUntilDestroyed(this.destroyRef),\\n      filter(() => this.dialogRef === dialogRef),\\n    );\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      display: flex;\\n      width: 100%;\\n      height: 100%;\\n      flex-direction: row;\\n      align-items: center;\\n    }\\n  \\n","extends":[]},{"name":"FullscreenPortalComponent","id":"component-FullscreenPortalComponent-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd","file":"fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-portal","styleUrls":[],"styles":[],"templateUrl":["./fullscreen-portal.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Heading of the dialog</p>\\n","line":100,"rawdescription":"\\nHeading of the dialog","modifierKind":[148],"required":true}],"outputsClass":[{"name":"beforeClosed","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for before the dialog is closed</p>\\n","line":110,"rawdescription":"\\nEvent for before the dialog is closed","modifierKind":[148],"required":false},{"name":"beforeOpened","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for before the dialog is opened</p>\\n","line":106,"rawdescription":"\\nEvent for before the dialog is opened","modifierKind":[148],"required":false},{"name":"closed","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for when the dialog is closed</p>\\n","line":112,"rawdescription":"\\nEvent for when the dialog is closed","modifierKind":[148],"required":false},{"name":"opened","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for when the dialog is opened</p>\\n","line":108,"rawdescription":"\\nEvent for when the dialog is opened","modifierKind":[148],"required":false}],"propertiesClass":[{"name":"beforeClosed","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for before the dialog is closed</p>\\n","line":110,"rawdescription":"\\nEvent for before the dialog is closed","modifierKind":[148],"required":false},{"name":"beforeOpened","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for before the dialog is opened</p>\\n","line":106,"rawdescription":"\\nEvent for before the dialog is opened","modifierKind":[148],"required":false},{"name":"closed","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for when the dialog is closed</p>\\n","line":112,"rawdescription":"\\nEvent for when the dialog is closed","modifierKind":[148],"required":false},{"name":"opened","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Event for when the dialog is opened</p>\\n","line":108,"rawdescription":"\\nEvent for when the dialog is opened","modifierKind":[148],"required":false},{"name":"panelClass","defaultValue":"input<string | string[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Classes to apply to the dialog panel in fullscreen mode</p>\\n","line":103,"rawdescription":"\\nClasses to apply to the dialog panel in fullscreen mode","modifierKind":[148]},{"name":"rootNodes","defaultValue":"computed(() => this.viewRef().rootNodes)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Rootnodes of the view reference</p>\\n","line":120,"rawdescription":"\\nRootnodes of the view reference","modifierKind":[148]},{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Heading of the dialog</p>\\n","line":100,"rawdescription":"\\nHeading of the dialog","modifierKind":[148],"required":true},{"name":"viewRef","defaultValue":"computed(() => {\\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Creates embedded view using template</p>\\n","line":115,"rawdescription":"\\nCreates embedded view using template","modifierKind":[148]}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":193,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nCloses the dialog","description":"<p>Closes the dialog</p>\\n"},{"name":"open","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":154,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nDetaches the view from histogram module and attaches it to the view in the dialog","description":"<p>Detaches the view from histogram module and attaches it to the view in the dialog</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"MatDialogModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"ButtonsModule","type":"module"},{"name":"ExpansionPanelModule","type":"module"},{"name":"ViewOutletDirective","type":"directive"}],"description":"<p>Fullscreen Component</p>\\n","rawdescription":"\\nFullscreen Component","type":"component","sourceCode":"import {\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  DestroyRef,\\n  Directive,\\n  effect,\\n  inject,\\n  input,\\n  output,\\n  TemplateRef,\\n  viewChild,\\n  ViewContainerRef,\\n  ViewRef,\\n} from \'@angular/core\';\\nimport { takeUntilDestroyed } from \'@angular/core/rxjs-interop\';\\nimport { MatDialog, MatDialogModule, MatDialogRef } from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { ExpansionPanelModule } from \'@hra-ui/design-system/expansion-panel\';\\nimport { filter, MonoTypeOperatorFunction, pipe } from \'rxjs\';\\n\\n/** View outlet directive */\\n@Directive({\\n  selector: \'[hraViewOutlet]\',\\n  standalone: true,\\n})\\nexport class ViewOutletDirective {\\n  /** view reference input */\\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: \'hraViewOutlet\' });\\n\\n  /** Reference of the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Attaches the view */\\n  constructor() {\\n    effect(() => this.attach());\\n  }\\n\\n  /** Attaches the view to the view container */\\n  attach(): void {\\n    const viewRef = this.viewRef();\\n    if (viewRef) {\\n      this.viewContainerRef.insert(viewRef);\\n    }\\n  }\\n  /** Detaches the view from the view container */\\n  detach(): void {\\n    const viewRef = this.viewRef();\\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\\n    if (index >= 0) {\\n      this.viewContainerRef.detach(index);\\n    }\\n  }\\n}\\n\\n/** Fullscreen actions component */\\n@Component({\\n  selector: \'hra-fullscreen-actions\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      display: flex;\\n      width: 100%;\\n      height: 100%;\\n      flex-direction: row;\\n      align-items: center;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenActionsComponent {}\\n\\n/** Fullscreen portal content component */\\n@Component({\\n  selector: \'hra-fullscreen-portal-content\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      width: 100%;\\n      height: 100%;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalContentComponent {}\\n\\n/** Fullscreen Component */\\n@Component({\\n  selector: \'hra-fullscreen-portal\',\\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\\n  templateUrl: \'./fullscreen-portal.component.html\',\\n  styleUrl: \'./fullscreen-portal.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalComponent {\\n  /** Heading of the dialog */\\n  readonly tagline = input.required<string>();\\n\\n  /** Classes to apply to the dialog panel in fullscreen mode */\\n  readonly panelClass = input<string | string[]>();\\n\\n  /** Event for before the dialog is opened */\\n  readonly beforeOpened = output<void>();\\n  /** Event for when the dialog is opened */\\n  readonly opened = output<void>();\\n  /** Event for before the dialog is closed */\\n  readonly beforeClosed = output<void>();\\n  /** Event for when the dialog is closed */\\n  readonly closed = output<void>();\\n\\n  /** Creates embedded view using template */\\n  readonly viewRef = computed(() => {\\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\\n  });\\n\\n  /** Rootnodes of the view reference */\\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\\n\\n  /** Reference to the mat dialog */\\n  private readonly dialogService = inject(MatDialog);\\n\\n  /** Reference to the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Reference to the destroy ref */\\n  private readonly destroyRef = inject(DestroyRef);\\n\\n  /** Reference to the view outlet directive */\\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\\n\\n  /** Reference to the view content template */\\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>(\'contentTemplate\');\\n\\n  /** Reference to the view dialog template */\\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>(\'dialogTemplate\');\\n\\n  /** Reference to the mat dialog */\\n  private dialogRef?: MatDialogRef<void>;\\n\\n  /** Destroys the view */\\n  constructor() {\\n    this.destroyRef.onDestroy(() => {\\n      const dialogRef = this.dialogRef;\\n      this.dialogRef = undefined;\\n      dialogRef?.close();\\n      this.viewRef().destroy();\\n    });\\n  }\\n\\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\\n  open(): void {\\n    if (this.dialogRef !== undefined) {\\n      return;\\n    }\\n\\n    const { dialogService, dialogTemplateRef } = this;\\n    const panelClass = this.panelClass() ?? [];\\n    const normalizedPanelClass = typeof panelClass === \'string\' ? panelClass.split(\' \') : panelClass;\\n\\n    this.beforeOpened.emit();\\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\\n      panelClass: [...normalizedPanelClass, \'fullscreen-panel\'],\\n    }));\\n\\n    dialogRef\\n      .afterOpened()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.opened.emit();\\n      });\\n\\n    dialogRef\\n      .beforeClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.beforeClosed.emit();\\n        this.viewOutlet().attach();\\n      });\\n\\n    dialogRef\\n      .afterClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.dialogRef = undefined;\\n        this.closed.emit();\\n      });\\n  }\\n\\n  /** Closes the dialog */\\n  close(): void {\\n    this.dialogRef?.close();\\n  }\\n\\n  /** Filters the dialog event based on provided dialog reference */\\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\\n    return pipe(\\n      takeUntilDestroyed(this.destroyRef),\\n      filter(() => this.dialogRef === dialogRef),\\n    );\\n  }\\n}\\n","styleUrl":"./fullscreen-portal.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"<p>Destroys the view</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":141,"rawdescription":"\\nDestroys the view"},"extends":[],"templateData":"<ng-template [hraViewOutlet]=\\"viewRef()\\"> </ng-template>\\n\\n<ng-template #contentTemplate>\\n  <ng-content select=\\"hra-fullscreen-portal-content\\"></ng-content>\\n</ng-template>\\n\\n<ng-template #dialogTemplate>\\n  <hra-expansion-panel [tagline]=\\"tagline()\\" disabled>\\n    <hra-expansion-panel-actions>\\n      <ng-content select=\\"hra-fullscreen-actions\\"></ng-content>\\n    </hra-expansion-panel-actions>\\n\\n    <hra-expansion-panel-header-content>\\n      <button mat-icon-button mat-dialog-close>\\n        <mat-icon class=\\"material-symbols-rounded\\"> close </mat-icon>\\n      </button>\\n    </hra-expansion-panel-header-content>\\n\\n    <ng-template [hraViewOutlet]=\\"viewRef()\\" data-testid=\\"fullscreen-outlet\\"></ng-template>\\n  </hra-expansion-panel>\\n</ng-template>\\n"},{"name":"FullscreenPortalContentComponent","id":"component-FullscreenPortalContentComponent-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd","file":"fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-portal-content","styleUrls":[],"styles":["\\n    :host {\\n      width: 100%;\\n      height: 100%;\\n    }\\n  "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Fullscreen portal content component</p>\\n","rawdescription":"\\nFullscreen portal content component","type":"component","sourceCode":"import {\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  DestroyRef,\\n  Directive,\\n  effect,\\n  inject,\\n  input,\\n  output,\\n  TemplateRef,\\n  viewChild,\\n  ViewContainerRef,\\n  ViewRef,\\n} from \'@angular/core\';\\nimport { takeUntilDestroyed } from \'@angular/core/rxjs-interop\';\\nimport { MatDialog, MatDialogModule, MatDialogRef } from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { ExpansionPanelModule } from \'@hra-ui/design-system/expansion-panel\';\\nimport { filter, MonoTypeOperatorFunction, pipe } from \'rxjs\';\\n\\n/** View outlet directive */\\n@Directive({\\n  selector: \'[hraViewOutlet]\',\\n  standalone: true,\\n})\\nexport class ViewOutletDirective {\\n  /** view reference input */\\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: \'hraViewOutlet\' });\\n\\n  /** Reference of the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Attaches the view */\\n  constructor() {\\n    effect(() => this.attach());\\n  }\\n\\n  /** Attaches the view to the view container */\\n  attach(): void {\\n    const viewRef = this.viewRef();\\n    if (viewRef) {\\n      this.viewContainerRef.insert(viewRef);\\n    }\\n  }\\n  /** Detaches the view from the view container */\\n  detach(): void {\\n    const viewRef = this.viewRef();\\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\\n    if (index >= 0) {\\n      this.viewContainerRef.detach(index);\\n    }\\n  }\\n}\\n\\n/** Fullscreen actions component */\\n@Component({\\n  selector: \'hra-fullscreen-actions\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      display: flex;\\n      width: 100%;\\n      height: 100%;\\n      flex-direction: row;\\n      align-items: center;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenActionsComponent {}\\n\\n/** Fullscreen portal content component */\\n@Component({\\n  selector: \'hra-fullscreen-portal-content\',\\n  standalone: true,\\n  template: `<ng-content></ng-content>`,\\n  styles: `\\n    :host {\\n      width: 100%;\\n      height: 100%;\\n    }\\n  `,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalContentComponent {}\\n\\n/** Fullscreen Component */\\n@Component({\\n  selector: \'hra-fullscreen-portal\',\\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\\n  templateUrl: \'./fullscreen-portal.component.html\',\\n  styleUrl: \'./fullscreen-portal.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenPortalComponent {\\n  /** Heading of the dialog */\\n  readonly tagline = input.required<string>();\\n\\n  /** Classes to apply to the dialog panel in fullscreen mode */\\n  readonly panelClass = input<string | string[]>();\\n\\n  /** Event for before the dialog is opened */\\n  readonly beforeOpened = output<void>();\\n  /** Event for when the dialog is opened */\\n  readonly opened = output<void>();\\n  /** Event for before the dialog is closed */\\n  readonly beforeClosed = output<void>();\\n  /** Event for when the dialog is closed */\\n  readonly closed = output<void>();\\n\\n  /** Creates embedded view using template */\\n  readonly viewRef = computed(() => {\\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\\n  });\\n\\n  /** Rootnodes of the view reference */\\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\\n\\n  /** Reference to the mat dialog */\\n  private readonly dialogService = inject(MatDialog);\\n\\n  /** Reference to the view container */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Reference to the destroy ref */\\n  private readonly destroyRef = inject(DestroyRef);\\n\\n  /** Reference to the view outlet directive */\\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\\n\\n  /** Reference to the view content template */\\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>(\'contentTemplate\');\\n\\n  /** Reference to the view dialog template */\\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>(\'dialogTemplate\');\\n\\n  /** Reference to the mat dialog */\\n  private dialogRef?: MatDialogRef<void>;\\n\\n  /** Destroys the view */\\n  constructor() {\\n    this.destroyRef.onDestroy(() => {\\n      const dialogRef = this.dialogRef;\\n      this.dialogRef = undefined;\\n      dialogRef?.close();\\n      this.viewRef().destroy();\\n    });\\n  }\\n\\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\\n  open(): void {\\n    if (this.dialogRef !== undefined) {\\n      return;\\n    }\\n\\n    const { dialogService, dialogTemplateRef } = this;\\n    const panelClass = this.panelClass() ?? [];\\n    const normalizedPanelClass = typeof panelClass === \'string\' ? panelClass.split(\' \') : panelClass;\\n\\n    this.beforeOpened.emit();\\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\\n      panelClass: [...normalizedPanelClass, \'fullscreen-panel\'],\\n    }));\\n\\n    dialogRef\\n      .afterOpened()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.opened.emit();\\n      });\\n\\n    dialogRef\\n      .beforeClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.beforeClosed.emit();\\n        this.viewOutlet().attach();\\n      });\\n\\n    dialogRef\\n      .afterClosed()\\n      .pipe(this.filterDialogEvents(dialogRef))\\n      .subscribe(() => {\\n        this.dialogRef = undefined;\\n        this.closed.emit();\\n      });\\n  }\\n\\n  /** Closes the dialog */\\n  close(): void {\\n    this.dialogRef?.close();\\n  }\\n\\n  /** Filters the dialog event based on provided dialog reference */\\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\\n    return pipe(\\n      takeUntilDestroyed(this.destroyRef),\\n      filter(() => this.dialogRef === dialogRef),\\n    );\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n    :host {\\n      width: 100%;\\n      height: 100%;\\n    }\\n  \\n","extends":[]},{"name":"FundingComponent","id":"component-FundingComponent-533a33c5844a5ecd15c1a2315eedf6254c421544929ccf359a4bc9463b02fe723845de8a54c2a3680bb6a9a457c0105b792e65d3805387d5d1c2d224ba30a7b1","file":"navigation/footer/src/lib/funding/funding.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-funding","styleUrls":[],"styles":[],"templateUrl":["./funding.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"funders","defaultValue":"input.required<FunderId[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Funders to display</p>\\n","line":17,"rawdescription":"\\nFunders to display","modifierKind":[148]},{"name":"fundersData","defaultValue":"computed(() => {\\n    const ids = new Set(this.funders());\\n    return FUNDERS.filter((item) => ids.has(item.id));\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Associated data for each funder displayed</p>\\n","line":20,"rawdescription":"\\nAssociated data for each funder displayed","modifierKind":[124,148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"AssetUrlPipe","type":"pipe"}],"description":"<p>Displays a list of funders</p>\\n","rawdescription":"\\nDisplays a list of funders","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, computed, input } from \'@angular/core\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { FUNDERS } from \'../static-data/parsed\';\\nimport { FunderId } from \'../types/funders.schema\';\\n\\n/** Displays a list of funders */\\n@Component({\\n  selector: \'hra-funding\',\\n  imports: [CommonModule, AssetUrlPipe],\\n  templateUrl: \'./funding.component.html\',\\n  styleUrl: \'./funding.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FundingComponent {\\n  /** Funders to display */\\n  readonly funders = input.required<FunderId[]>();\\n\\n  /** Associated data for each funder displayed */\\n  protected readonly fundersData = computed(() => {\\n    const ids = new Set(this.funders());\\n    return FUNDERS.filter((item) => ids.has(item.id));\\n  });\\n}\\n","styleUrl":"./funding.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<span class=\\"title\\">Funded By:</span>\\n<div class=\\"funders\\">\\n  @for (funder of fundersData(); track funder.name) {\\n    <a class=\\"funder\\" [attr.href]=\\"funder.link\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n      <img [attr.src]=\\"funder.image | assetUrl\\" alt=\\"\\" />\\n      <span>{{ funder.name }}</span>\\n    </a>\\n  }\\n</div>\\n"},{"name":"HeaderComponent","id":"component-HeaderComponent-9ca3cf39d95f4f482bf64940708c4a5a9c2a635b4639ccbdda0ca35981f0d125793bec935501ee2e9cec3c27c7d583d7fe7e789113ea06e301fc4f37df8a149c","file":"navigation/header/src/lib/header.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-header","styleUrls":[],"styles":[],"templateUrl":["./header.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"cta","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Call to action configuration</p>\\n","line":71,"rawdescription":"\\nCall to action configuration","modifierKind":[148],"required":false},{"name":"hubmapMenu","defaultValue":"HUBMAP_MENU","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Hubmap menu data</p>\\n","line":73,"rawdescription":"\\nHubmap menu data","modifierKind":[148],"required":false},{"name":"menus","defaultValue":"MENUS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>All other menus</p>\\n","line":75,"rawdescription":"\\nAll other menus","modifierKind":[148],"required":false}],"outputsClass":[],"propertiesClass":[{"name":"breadcrumbs","defaultValue":"input<BreadcrumbItem[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Breadcrumb items</p>\\n","line":77,"rawdescription":"\\nBreadcrumb items","modifierKind":[148]},{"name":"cta","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Call to action configuration</p>\\n","line":71,"rawdescription":"\\nCall to action configuration","modifierKind":[148],"required":false},{"name":"ctaDismissed","defaultValue":"signal(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the user has dismissed the call to action</p>\\n","line":86,"rawdescription":"\\nWhether the user has dismissed the call to action","modifierKind":[124,148]},{"name":"desktopMenuMaxHeight","defaultValue":"computed(() => `calc(100vh - ${this.menuOffsetPx()}px - 16px)`)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Desktop menu max height</p>\\n","line":108,"rawdescription":"\\nDesktop menu max height","modifierKind":[124,148]},{"name":"desktopMenuPositions","defaultValue":"DESKTOP_MENU_POSITIONS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Overlay positions for the desktop menu</p>\\n","line":100,"rawdescription":"\\nOverlay positions for the desktop menu","modifierKind":[124,148]},{"name":"hubmapMenu","defaultValue":"HUBMAP_MENU","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Hubmap menu data</p>\\n","line":73,"rawdescription":"\\nHubmap menu data","modifierKind":[148],"required":false},{"name":"isMobile","defaultValue":"watchBreakpoint(Breakpoints.Mobile)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the screen is currently mobile sized</p>\\n","line":93,"rawdescription":"\\nWhether the screen is currently mobile sized","modifierKind":[124,148]},{"name":"menuOffsetPx","defaultValue":"signal<number>(0)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Offset from top to the menu. Used to calculate menu heights and max heights</p>\\n","line":104,"rawdescription":"\\nOffset from top to the menu. Used to calculate menu heights and max heights","modifierKind":[124,148]},{"name":"menus","defaultValue":"MENUS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>All other menus</p>\\n","line":75,"rawdescription":"\\nAll other menus","modifierKind":[148],"required":false},{"name":"mobileMenuBlockScroll","defaultValue":"inject(Overlay).scrollStrategies.block()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Blocking overlay scroll strategy</p>\\n","line":102,"rawdescription":"\\nBlocking overlay scroll strategy","modifierKind":[124,148]},{"name":"mobileMenuHeight","defaultValue":"computed(() => `calc(100vh - ${this.menuOffsetPx()}px)`)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Mobile menu height. Fills the entire screen</p>\\n","line":106,"rawdescription":"\\nMobile menu height. Fills the entire screen","modifierKind":[124,148]},{"name":"mobileMenuPositions","defaultValue":"MOBILE_MENU_POSITIONS","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Overlay positions for the mobile menu</p>\\n","line":98,"rawdescription":"\\nOverlay positions for the mobile menu","modifierKind":[124,148]},{"name":"progress","defaultValue":"input<boolean | number>(false)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Progress bar progress.\\nUse <code>true</code> for an indeterminate bar and values between <code>0</code> and <code>100</code> for a determinate bar.\\nUsing false disables and hides the progress bar.</p>\\n","line":83,"rawdescription":"\\n\\nProgress bar progress.\\nUse `true` for an indeterminate bar and values between `0` and `100` for a determinate bar.\\nUsing false disables and hides the progress bar.\\n","modifierKind":[148]},{"name":"progressMode","defaultValue":"computed((): ProgressBarMode => {\\n    return typeof this.progress() === \'boolean\' ? \'indeterminate\' : \'determinate\';\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Progress bar mode</p>\\n","line":88,"rawdescription":"\\nProgress bar mode","modifierKind":[124,148]}],"methodsClass":[{"name":"closeMenu","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":152,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCloses any active menu\\n","description":"<p>Closes any active menu</p>\\n"},{"name":"isMenuActive","args":[{"name":"menu","type":"Menu | \\"main\\"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":136,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetermine whether the specified menu is open\\n\\n","description":"<p>Determine whether the specified menu is open</p>\\n","jsdoctags":[{"name":{"pos":5121,"end":5125,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"menu"},"type":"Menu | \\"main\\"","deprecated":false,"deprecationMessage":"","tagName":{"pos":5115,"end":5120,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>The menu to check</p>\\n"},{"tagName":{"pos":5150,"end":5157,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>true if the menu is open, false otherwise</p>\\n"}]},{"name":"toggleMenu","args":[{"name":"menu","type":"Menu | \\"main\\"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":145,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nToggles a menu open or close\\n\\n","description":"<p>Toggles a menu open or close</p>\\n","jsdoctags":[{"name":{"pos":5354,"end":5358,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"menu"},"type":"Menu | \\"main\\"","deprecated":false,"deprecationMessage":"","tagName":{"pos":5348,"end":5353,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>Menu to toggle</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"OverlayModule","type":"module"},{"name":"MatDividerModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatProgressBarModule","type":"module"},{"name":"BrandModule","type":"module"},{"name":"ButtonsModule","type":"module"},{"name":"CtaBarComponent","type":"component"},{"name":"DesktopMenuComponent","type":"component"},{"name":"MobileMenuComponent","type":"component"}],"description":"<p>Global navigation header.\\nIncludes a call to action bar, navigation menus, breadcrumbs, and a progress bar.</p>\\n","rawdescription":"\\n\\nGlobal navigation header.\\nIncludes a call to action bar, navigation menus, breadcrumbs, and a progress bar.\\n","type":"component","sourceCode":"import { CdkConnectedOverlay, ConnectedPosition, Overlay, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  computed,\\n  effect,\\n  ElementRef,\\n  inject,\\n  input,\\n  signal,\\n  viewChild,\\n} from \'@angular/core\';\\nimport { MatDividerModule } from \'@angular/material/divider\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatProgressBarModule, ProgressBarMode } from \'@angular/material/progress-bar\';\\nimport { Breakpoints, watchBreakpoint } from \'@hra-ui/cdk/breakpoints\';\\nimport { BrandModule } from \'@hra-ui/design-system/brand\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { BreadcrumbItem } from \'@hra-ui/design-system/buttons/breadcrumbs\';\\nimport { CtaBarComponent } from \'@hra-ui/design-system/navigation/cta-bar\';\\nimport { explicitEffect } from \'ngxtension/explicit-effect\';\\nimport { DesktopMenuComponent } from \'./desktop-menu/desktop-menu.component\';\\nimport { MobileMenuComponent } from \'./mobile-menu/mobile-menu.component\';\\nimport { HUBMAP_MENU, MENUS } from \'./static-data/parsed\';\\nimport { Menu } from \'./types/menus.schema\';\\n\\n/** Call to action configuration */\\nexport interface CtaConfig {\\n  /** Action text */\\n  action: string;\\n  /** Action description */\\n  description: string;\\n  /** Action url */\\n  url: string;\\n}\\n\\n/** Position of the mobile menu overlay */\\nconst MOBILE_MENU_POSITIONS: ConnectedPosition[] = [\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\' },\\n];\\n/** Position of the desktop menu overlay */\\nconst DESKTOP_MENU_POSITIONS: ConnectedPosition[] = [\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\', offsetX: -16, offsetY: 16 },\\n];\\n\\n/**\\n * Global navigation header.\\n * Includes a call to action bar, navigation menus, breadcrumbs, and a progress bar.\\n */\\n@Component({\\n  selector: \'hra-header\',\\n  imports: [\\n    CommonModule,\\n    OverlayModule,\\n    MatDividerModule,\\n    MatIconModule,\\n    MatProgressBarModule,\\n    BrandModule,\\n    ButtonsModule,\\n    CtaBarComponent,\\n    DesktopMenuComponent,\\n    MobileMenuComponent,\\n  ],\\n  templateUrl: \'./header.component.html\',\\n  styleUrl: \'./header.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HeaderComponent {\\n  /** Call to action configuration */\\n  readonly cta = input<CtaConfig>();\\n  /** Hubmap menu data */\\n  readonly hubmapMenu = input(HUBMAP_MENU);\\n  /** All other menus */\\n  readonly menus = input(MENUS);\\n  /** Breadcrumb items */\\n  readonly breadcrumbs = input<BreadcrumbItem[]>([]);\\n  /**\\n   * Progress bar progress.\\n   * Use `true` for an indeterminate bar and values between `0` and `100` for a determinate bar.\\n   * Using false disables and hides the progress bar.\\n   */\\n  readonly progress = input<boolean | number>(false);\\n\\n  /** Whether the user has dismissed the call to action */\\n  protected readonly ctaDismissed = signal(false);\\n  /** Progress bar mode */\\n  protected readonly progressMode = computed((): ProgressBarMode => {\\n    return typeof this.progress() === \'boolean\' ? \'indeterminate\' : \'determinate\';\\n  });\\n\\n  /** Whether the screen is currently mobile sized */\\n  protected readonly isMobile = watchBreakpoint(Breakpoints.Mobile);\\n  /** Reference to this component\'s html element */\\n  private readonly elementRef = inject<ElementRef<Element>>(ElementRef);\\n\\n  /** Overlay positions for the mobile menu */\\n  protected readonly mobileMenuPositions = MOBILE_MENU_POSITIONS;\\n  /** Overlay positions for the desktop menu */\\n  protected readonly desktopMenuPositions = DESKTOP_MENU_POSITIONS;\\n  /** Blocking overlay scroll strategy */\\n  protected readonly mobileMenuBlockScroll = inject(Overlay).scrollStrategies.block();\\n  /** Offset from top to the menu. Used to calculate menu heights and max heights */\\n  protected readonly menuOffsetPx = signal<number>(0);\\n  /** Mobile menu height. Fills the entire screen */\\n  protected readonly mobileMenuHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px)`);\\n  /** Desktop menu max height */\\n  protected readonly desktopMenuMaxHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px - 16px)`);\\n  /** Mobile menu overlay origin */\\n  private readonly mobileMenuOrigin = viewChild.required(\'mobileMenuOrigin\', { read: ElementRef });\\n  /** Desktop menu overlay origin */\\n  private readonly desktopMenuOrigin = viewChild.required(\'desktopMenuOrigin\', { read: ElementRef });\\n  /** Reference to the mobile overlay */\\n  private readonly mobileMenuOverlay = viewChild(\'mobileMenuOverlay\', { read: CdkConnectedOverlay });\\n  /** Currently open menu or undefined */\\n  private readonly activeMenu = signal<Menu | \'main\' | undefined>(undefined);\\n\\n  /** Initialize the header */\\n  constructor() {\\n    effect((cleanup) => {\\n      if (this.activeMenu() !== undefined) {\\n        const observer = this.attachResizeObserver();\\n        cleanup(() => observer.disconnect());\\n      }\\n    });\\n\\n    explicitEffect([this.menuOffsetPx], () => this.updateMenuPositions(), { defer: true });\\n  }\\n\\n  /**\\n   * Determine whether the specified menu is open\\n   *\\n   * @param menu The menu to check\\n   * @returns true if the menu is open, false otherwise\\n   */\\n  isMenuActive(menu: Menu | \'main\'): boolean {\\n    return this.activeMenu() === menu;\\n  }\\n\\n  /**\\n   * Toggles a menu open or close\\n   *\\n   * @param menu Menu to toggle\\n   */\\n  toggleMenu(menu: Menu | \'main\'): void {\\n    this.activeMenu.update((current) => (menu !== current ? menu : undefined));\\n  }\\n\\n  /**\\n   * Closes any active menu\\n   */\\n  closeMenu(): void {\\n    this.activeMenu.set(undefined);\\n  }\\n\\n  /**\\n   * Creates and attaches a resize observer that updates the menu offset\\n   * whenever the header size changes\\n   *\\n   * @returns The resize observer\\n   */\\n  private attachResizeObserver(): ResizeObserver {\\n    const observer = new ResizeObserver(() => this.updateMenuOffset());\\n    observer.observe(this.elementRef.nativeElement, { box: \'border-box\' });\\n    this.updateMenuOffset();\\n    return observer;\\n  }\\n\\n  /**\\n   * Computes the bounding box for the menu\'s overlay origin element\\n   *\\n   * @returns The computed bounding box\\n   */\\n  private getMenuOriginBbox(): DOMRect {\\n    const origin = this.isMobile() ? this.mobileMenuOrigin() : this.desktopMenuOrigin();\\n    return (origin.nativeElement as Element).getBoundingClientRect();\\n  }\\n\\n  /**\\n   * Updates the menu offset based on the overlay origin\'s bounding box\\n   */\\n  private updateMenuOffset(): void {\\n    const { bottom } = this.getMenuOriginBbox();\\n    this.menuOffsetPx.set(bottom);\\n  }\\n\\n  /**\\n   * Notify menu overlays of position changes\\n   */\\n  private updateMenuPositions(): void {\\n    /* istanbul ignore next */\\n    this.mobileMenuOverlay()?.overlayRef?.updatePosition();\\n  }\\n}\\n","styleUrl":"./header.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"<p>Initialize the header</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":116,"rawdescription":"\\nInitialize the header"},"extends":[],"templateData":"@let ctaConfig = cta();\\n@if (ctaConfig && !ctaDismissed()) {\\n  <hra-cta-bar\\n    [action]=\\"ctaConfig.action\\"\\n    [description]=\\"ctaConfig.description\\"\\n    [url]=\\"ctaConfig.url\\"\\n    (closeClick)=\\"ctaDismissed.set(true)\\"\\n  >\\n  </hra-cta-bar>\\n}\\n\\n<header\\n  class=\\"header\\"\\n  cdkOverlayOrigin\\n  [class.mobile-menu-open]=\\"isMobile() && isMenuActive(\'main\')\\"\\n  #mobileMenuOrigin=\\"cdkOverlayOrigin\\"\\n  data-testid=\\"header\\"\\n>\\n  <div class=\\"menus\\" #desktopMenuOrigin>\\n    <hra-brand-logo size=\\"small\\"></hra-brand-logo>\\n\\n    <div class=\\"filler\\"></div>\\n\\n    @if (!isMobile()) {\\n      @for (menu of menus(); track menu.id) {\\n        <hra-navigation-category-toggle\\n          cdkOverlayOrigin\\n          [toggled]=\\"isMenuActive(menu)\\"\\n          (toggledChange)=\\"toggleMenu(menu)\\"\\n          #navigationCategoryMenuOrigin=\\"cdkOverlayOrigin\\"\\n        >\\n          {{ menu.label }}\\n        </hra-navigation-category-toggle>\\n\\n        <ng-template\\n          cdkConnectedOverlay\\n          cdkConnectedOverlayHasBackdrop=\\"false\\"\\n          cdkConnectedOverlayLockPosition=\\"true\\"\\n          cdkConnectedOverlayPush=\\"true\\"\\n          [cdkConnectedOverlayOpen]=\\"isMenuActive(menu)\\"\\n          [cdkConnectedOverlayOrigin]=\\"navigationCategoryMenuOrigin\\"\\n          [cdkConnectedOverlayPositions]=\\"desktopMenuPositions\\"\\n          (overlayOutsideClick)=\\"closeMenu()\\"\\n        >\\n          <hra-desktop-menu [menu]=\\"menu\\" [style.max-height]=\\"desktopMenuMaxHeight()\\"></hra-desktop-menu>\\n        </ng-template>\\n      }\\n    }\\n\\n    <button\\n      mat-icon-button\\n      cdkOverlayOrigin\\n      aria-label=\\"Open the main navigation menu\\"\\n      (click)=\\"toggleMenu(\'main\')\\"\\n      #mainMenuOrigin=\\"cdkOverlayOrigin\\"\\n    >\\n      <mat-icon>\\n        @if (isMenuActive(\'main\')) {\\n          close\\n        } @else if (isMobile()) {\\n          menu\\n        } @else {\\n          apps\\n        }\\n      </mat-icon>\\n    </button>\\n\\n    @if (isMobile()) {\\n      <ng-template\\n        cdkConnectedOverlay\\n        cdkConnectedOverlayDisposeOnNavigation=\\"true\\"\\n        cdkConnectedOverlayHasBackdrop=\\"false\\"\\n        cdkConnectedOverlayLockPosition=\\"true\\"\\n        [cdkConnectedOverlayOpen]=\\"isMenuActive(\'main\')\\"\\n        [cdkConnectedOverlayOrigin]=\\"mobileMenuOrigin\\"\\n        [cdkConnectedOverlayPositions]=\\"mobileMenuPositions\\"\\n        [cdkConnectedOverlayScrollStrategy]=\\"mobileMenuBlockScroll\\"\\n        [cdkConnectedOverlayHeight]=\\"mobileMenuHeight()\\"\\n        [cdkConnectedOverlayWidth]=\\"\'100%\'\\"\\n        #mobileMenuOverlay\\n      >\\n        <hra-mobile-menu [hubmapMenu]=\\"hubmapMenu()\\" [menus]=\\"menus()\\"></hra-mobile-menu>\\n      </ng-template>\\n    } @else {\\n      <ng-template\\n        cdkConnectedOverlay\\n        cdkConnectedOverlayHasBackdrop=\\"false\\"\\n        cdkConnectedOverlayLockPosition=\\"true\\"\\n        cdkConnectedOverlayPush=\\"true\\"\\n        [cdkConnectedOverlayOpen]=\\"isMenuActive(\'main\')\\"\\n        [cdkConnectedOverlayOrigin]=\\"mainMenuOrigin\\"\\n        [cdkConnectedOverlayPositions]=\\"desktopMenuPositions\\"\\n        (overlayOutsideClick)=\\"closeMenu()\\"\\n      >\\n        <hra-desktop-menu [menu]=\\"hubmapMenu()\\" [style.max-height]=\\"desktopMenuMaxHeight()\\"></hra-desktop-menu>\\n      </ng-template>\\n    }\\n  </div>\\n\\n  @if (breadcrumbs().length > 0) {\\n    <mat-divider></mat-divider>\\n\\n    <div class=\\"navigation\\">\\n      <hra-breadcrumbs [crumbs]=\\"breadcrumbs()\\"> </hra-breadcrumbs>\\n      <div class=\\"filler\\"></div>\\n      <ng-content></ng-content>\\n    </div>\\n  }\\n</header>\\n\\n@if (progress() !== false) {\\n  <mat-progress-bar class=\\"progress-bar\\" [mode]=\\"progressMode()\\" [value]=\\"progress()\\"></mat-progress-bar>\\n}\\n"},{"name":"HubmapMenuContentComponent","id":"component-HubmapMenuContentComponent-ffc247892ca9ef8218941c3dd25a5994f7bbbf37351adcc424d60de438e26494f803e106c51b52ab725883d3f2165333ae5d25f3017cc35b6fa8b1a8cefe138e","file":"navigation/header/src/lib/hubmap-menu-content/hubmap-menu-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-hubmap-menu-content","styleUrls":[],"styles":[],"templateUrl":["./hubmap-menu-content.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"menu","defaultValue":"input.required<HubmapMenuGroup[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Menu data to display</p>\\n","line":46,"rawdescription":"\\nMenu data to display","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"AssetUrlPipe","type":"pipe"},{"name":"ButtonsModule","type":"module"},{"name":"HubmapMenuGroupDirective","type":"directive"},{"name":"HubmapMenuItemDirective","type":"directive"}],"description":"<p>Displays the content of a hubmap menu.\\nWorks for both mobile and desktop size screens.</p>\\n","rawdescription":"\\n\\nDisplays the content of a hubmap menu.\\nWorks for both mobile and desktop size screens.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Directive, input } from \'@angular/core\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { HubmapMenuGroup, HubmapMenuItem } from \'../types/hubmap-menu.schema\';\\n\\n/** Directive used to type the context for menu group templates */\\n@Directive({\\n  selector: \'ng-template[hraHubmapMenuGroup]\',\\n  standalone: true,\\n})\\nexport class HubmapMenuGroupDirective {\\n  /** Types the context as `HubmapMenuGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: HubmapMenuGroupDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuGroup } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu item templates */\\n@Directive({\\n  selector: \'ng-template[hraHubmapMenuItem]\',\\n  standalone: true,\\n})\\nexport class HubmapMenuItemDirective {\\n  /** Types the context as `HubmapMenuItem` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: HubmapMenuItemDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuItem } {\\n    return true;\\n  }\\n}\\n\\n/**\\n * Displays the content of a hubmap menu.\\n * Works for both mobile and desktop size screens.\\n */\\n@Component({\\n  selector: \'hra-hubmap-menu-content\',\\n  imports: [CommonModule, AssetUrlPipe, ButtonsModule, HubmapMenuGroupDirective, HubmapMenuItemDirective],\\n  templateUrl: \'./hubmap-menu-content.component.html\',\\n  styleUrl: \'./hubmap-menu-content.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HubmapMenuContentComponent {\\n  /** Menu data to display */\\n  readonly menu = input.required<HubmapMenuGroup[]>();\\n}\\n","styleUrl":"./hubmap-menu-content.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"@for (group of menu(); track $index) {\\n  <ng-container *ngTemplateOutlet=\\"groupTemplate; context: { $implicit: group }\\"></ng-container>\\n}\\n\\n<ng-template hraHubmapMenuGroup let-group #groupTemplate>\\n  <div class=\\"group-label\\">\\n    {{ group.label }}\\n  </div>\\n\\n  <div class=\\"group-items\\">\\n    @for (item of group.items; track $index) {\\n      <ng-container *ngTemplateOutlet=\\"itemTemplate; context: { $implicit: item }\\"></ng-container>\\n    }\\n  </div>\\n</ng-template>\\n\\n<ng-template hraHubmapMenuItem let-item #itemTemplate>\\n  <hra-app-nav-button\\n    class=\\"item-button\\"\\n    [tagline]=\\"item.label\\"\\n    [description]=\\"item.description\\"\\n    [icon]=\\"item.icon | assetUrl\\"\\n    [link]=\\"item.url\\"\\n  >\\n  </hra-app-nav-button>\\n</ng-template>\\n"},{"name":"IconButtonStylesComponent","id":"component-IconButtonStylesComponent-94a1a6eb1c2e74616269d445654201ae718b6594f4f6a2b598ef4e6f2a0e85dd7bdf976b40a47ad61f631507144341e285196283bad4979a91bb0c6b1a5758d3","file":"icon-button/src/lib/icon-button-styles/icon-button-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-icon-button-styles","styleUrls":["./icon-button-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Applies mat icon button styles globally</p>\\n","rawdescription":"\\n\\nApplies mat icon button styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/**\\n * Applies mat icon button styles globally\\n */\\n@Component({\\n  selector: \'hra-icon-button-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./icon-button-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class IconButtonStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  button[mat-icon-button],\\n  a[mat-icon-button] {\\n    --mat-icon-button-hover-state-layer-opacity: 0.08;\\n    --mat-icon-button-pressed-state-layer-opacity: 0.12;\\n    --mat-icon-button-focus-state-layer-opacity: 0;\\n    --mdc-icon-button-icon-color: var(--mat-sys-secondary);\\n    --mat-icon-button-state-layer-color: var(--mat-sys-secondary);\\n\\n    mat-icon {\\n      height: var(--mdc-icon-button-icon-size);\\n      width: var(--mdc-icon-button-icon-size);\\n      font-size: var(--mdc-icon-button-icon-size);\\n    }\\n\\n    &.icon-button-variant-light {\\n      --mdc-icon-button-icon-color: var(--mat-sys-on-primary);\\n      --mat-icon-button-state-layer-color: var(--mat-sys-on-primary);\\n    }\\n\\n    &.icon-button-variant-dark {\\n      --mdc-icon-button-icon-color: var(--mat-sys-secondary);\\n      --mat-icon-button-state-layer-color: var(--mat-sys-secondary);\\n    }\\n\\n    &.icon-button-variant-color {\\n      --mdc-icon-button-icon-color: var(--mat-sys-on-tertiary-fixed);\\n      --mat-icon-button-state-layer-color: var(--mat-sys-on-tertiary-fixed);\\n    }\\n\\n    &:focus-visible {\\n      --mdc-icon-button-icon-color: var(--mat-sys-secondary);\\n      outline: 2px solid var(--mat-sys-tertiary);\\n    }\\n  }\\n}\\n","styleUrl":"./icon-button-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"InfoModalComponent","id":"component-InfoModalComponent-604f39c5cba08234cbee318cec0535940a5d48ef158e5c60010270b159251a9abf22c311829653216bbc78a6100aaa150ddb1f9b7601585b9dd3f9aaeff2aace","file":"info-modal/src/lib/info-modal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"hra-info-modal","styleUrls":[],"styles":[],"templateUrl":["./info-modal.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"title","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Title of modal</p>\\n","line":39,"rawdescription":"\\nTitle of modal","required":true}],"outputsClass":[{"name":"close","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Emits when close icon clicked</p>\\n","line":42,"rawdescription":"\\nEmits when close icon clicked","required":false}],"propertiesClass":[{"name":"close","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Emits when close icon clicked</p>\\n","line":42,"rawdescription":"\\nEmits when close icon clicked","required":false},{"name":"data","defaultValue":"input<DataItem[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of data items to display</p>\\n","line":33,"rawdescription":"\\nList of data items to display"},{"name":"title","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Title of modal</p>\\n","line":39,"rawdescription":"\\nTitle of modal","required":true},{"name":"variant","defaultValue":"input<InfoModalVariant>(\'tabular\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Variant of info modal to use</p>\\n","line":36,"rawdescription":"\\nVariant of info modal to use"}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatTableModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatButtonModule","type":"module"}],"description":"<p>Modal to display all available information about specific areas of a dataset.</p>\\n","rawdescription":"\\n\\nModal to display all available information about specific areas of a dataset.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input, output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** Info modal variants */\\nexport type InfoModalVariant = \'tabular\' | \'center\';\\n\\n/**\\n * Modal to display all available information about specific areas of a dataset.\\n */\\n@Component({\\n  selector: \'hra-info-modal\',\\n  imports: [CommonModule, MatTableModule, MatIconModule, MatButtonModule],\\n  templateUrl: \'./info-modal.component.html\',\\n  styleUrl: \'./info-modal.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class.center]\': \'variant() == \\"center\\"\',\\n  },\\n})\\nexport class InfoModalComponent {\\n  /** List of data items to display */\\n  data = input<DataItem[]>([]);\\n\\n  /** Variant of info modal to use */\\n  variant = input<InfoModalVariant>(\'tabular\');\\n\\n  /** Title of modal */\\n  title = input.required<string>();\\n\\n  /** Emits when close icon clicked */\\n  close = output<void>();\\n}\\n","styleUrl":"./info-modal.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<h2 class=\\"header\\">\\n  <mat-icon class=\\"info\\"> info </mat-icon>\\n  <span class=\\"card-title\\">{{ title() }}</span>\\n  <div class=\\"filler\\"></div>\\n  <button class=\\"close\\" mat-icon-button (click)=\\"close.emit()\\">\\n    <mat-icon>close</mat-icon>\\n  </button>\\n</h2>\\n\\n<div class=\\"table-container\\">\\n  <table mat-table [dataSource]=\\"data()\\" aria-label=\\"info table\\">\\n    \x3c!-- Label Column --\x3e\\n    <ng-container matColumnDef=\\"label\\">\\n      <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Label</th>\\n      <td class=\\"label\\" mat-cell *matCellDef=\\"let element\\">\\n        {{ element.label }}\\n      </td>\\n    </ng-container>\\n\\n    \x3c!-- Value Column --\x3e\\n    <ng-container matColumnDef=\\"value\\">\\n      <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Value</th>\\n      <td class=\\"value\\" mat-cell *matCellDef=\\"let element\\">\\n        {{ element.value }}\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-row *matRowDef=\\"let row; columns: [\'label\', \'value\']\\"></tr>\\n  </table>\\n</div>\\n"},{"name":"InputStylesComponent","id":"component-InputStylesComponent-251104d876cf1dcf5f0210e18fc46a9e6a1d530e03523354a8680e4312a19a3461b03bc9d60e00ae9cf4eb4a92bd17a7e5268ae64e058b113d8ab96f692befc2","file":"input/src/lib/input-styles/input-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-input-styles","styleUrls":[],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Applies input styles globally</p>\\n","rawdescription":"\\n\\nApplies input styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Applies input styles globally\\n */\\n@Component({\\n  selector: \'hra-input-styles\',\\n  imports: [CommonModule],\\n  template: \'\',\\n  styleUrl: \'./input-styles.component.scss\',\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class InputStylesComponent {}\\n","styleUrl":"./input-styles.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[]},{"name":"MenuContentComponent","id":"component-MenuContentComponent-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1","file":"navigation/header/src/lib/menu-content/menu-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"hra-menu-content","styleUrls":[],"styles":[],"templateUrl":["./menu-content.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"menu","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Menu data to display</p>\\n","line":76,"rawdescription":"\\nMenu data to display","modifierKind":[148],"required":true},{"name":"variant","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Display mode</p>\\n","line":74,"rawdescription":"\\nDisplay mode","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"menu","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Menu data to display</p>\\n","line":76,"rawdescription":"\\nMenu data to display","modifierKind":[148],"required":true},{"name":"variant","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Display mode</p>\\n","line":74,"rawdescription":"\\nDisplay mode","modifierKind":[148],"required":true}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatDivider"},{"name":"MatIconModule","type":"module"},{"name":"ButtonsModule","type":"module"},{"name":"MenuGroupDirective","type":"directive"},{"name":"MenuItemDirective","type":"directive"},{"name":"MenuSubGroupDirective","type":"directive"}],"description":"<p>Displays the content of a menu.\\nHas variants for both mobile and desktop size screens.</p>\\n","rawdescription":"\\n\\nDisplays the content of a menu.\\nHas variants for both mobile and desktop size screens.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Directive, input } from \'@angular/core\';\\nimport { MatDivider } from \'@angular/material/divider\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from \'../types/menus.schema\';\\n\\n/** Display modes of the menu content component */\\nexport type MenuContentVariant = \'desktop\' | \'mobile\';\\n\\n/** Directive used to type the context for menu group templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuGroup]\',\\n  standalone: true,\\n})\\nexport class MenuGroupDirective {\\n  /** Types the context as `MenuGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu item templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuItem]\',\\n  standalone: true,\\n})\\nexport class MenuItemDirective {\\n  /** Types the context as `MenuItem` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\\n    return true;\\n  }\\n}\\n\\n/** Directive used to type the context for menu subgroup templates */\\n@Directive({\\n  selector: \'ng-template[hraMenuSubGroup]\',\\n  standalone: true,\\n})\\nexport class MenuSubGroupDirective {\\n  /** Types the context as `MenuSubGroup` */\\n  /* istanbul ignore next */\\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\\n    return true;\\n  }\\n}\\n\\n/**\\n * Displays the content of a menu.\\n * Has variants for both mobile and desktop size screens.\\n */\\n@Component({\\n  selector: \'hra-menu-content\',\\n  imports: [\\n    CommonModule,\\n    MatDivider,\\n    MatIconModule,\\n    ButtonsModule,\\n    MenuGroupDirective,\\n    MenuItemDirective,\\n    MenuSubGroupDirective,\\n  ],\\n  templateUrl: \'./menu-content.component.html\',\\n  styleUrl: \'./menu-content.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class]\': \'\\"menu-content-variant-\\" + variant()\',\\n  },\\n})\\nexport class MenuContentComponent {\\n  /** Display mode */\\n  readonly variant = input.required<MenuContentVariant>();\\n  /** Menu data to display */\\n  readonly menu = input.required<Menu>();\\n}\\n","styleUrl":"./menu-content.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"@let isDesktop = variant() === \'desktop\';\\n@for (item of menu().items; track $index) {\\n  @if (item.type === \'group\') {\\n    <ng-container *ngTemplateOutlet=\\"groupTemplate; context: { $implicit: item }\\"></ng-container>\\n  } @else if (isDesktop) {\\n    <mat-divider class=\\"divider\\"></mat-divider>\\n  }\\n}\\n\\n<ng-template hraMenuGroup let-group #groupTemplate>\\n  <a mat-button class=\\"group-label\\" [attr.href]=\\"group.url\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n    {{ group.label }}\\n    <mat-icon iconPositionEnd>arrow_right_alt</mat-icon>\\n  </a>\\n\\n  @if (group.description) {\\n    <div class=\\"group-description\\">\\n      {{ group.description }}\\n    </div>\\n  }\\n\\n  @let items = group.items ?? [];\\n  @if (items.length > 0) {\\n    @if (isDesktop) {\\n      <mat-divider class=\\"divider\\"></mat-divider>\\n    }\\n\\n    @for (item of items; track $index) {\\n      @let template = item.type === \'subgroup\' ? subgroupTemplate : itemTemplate;\\n      <ng-container *ngTemplateOutlet=\\"template; context: { $implicit: item }\\"></ng-container>\\n    }\\n  }\\n</ng-template>\\n\\n<ng-template hraMenuSubGroup let-subgroup #subgroupTemplate>\\n  <div class=\\"subgroup-label\\">\\n    {{ subgroup.label }}\\n  </div>\\n  <div class=\\"subgroup-items\\">\\n    @for (item of subgroup.items; track $index) {\\n      <ng-container *ngTemplateOutlet=\\"itemTemplate; context: { $implicit: item }\\"></ng-container>\\n    }\\n  </div>\\n</ng-template>\\n\\n<ng-template hraMenuItem let-item #itemTemplate>\\n  <a mat-button hraSecondaryButton class=\\"item-label\\" [attr.href]=\\"item.url\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n    {{ item.label }}\\n  </a>\\n</ng-template>\\n"},{"name":"MenuDemoComponent","id":"component-MenuDemoComponent-c9c532fdb1bc7b08b78bdec7f5aad68c649d1f2815db67a6ae79a0e6e8f5a201f5e984978aadb693e582578b25bcfb5f9f3386fafd4c8722fe7bc26a737cd9d0","file":"menu/src/lib/menu-demo/menu-demo.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-menu","styleUrls":[],"styles":[],"templateUrl":["./menu-demo.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"menuOptions","defaultValue":"input<MenuDemoOption[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>List of menu options</p>\\n","line":29,"rawdescription":"\\nList of menu options","modifierKind":[148]},{"name":"suboptions","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"MenuDemoOption[]","indexKey":"","optional":false,"description":"<p>List of suboptions to display in the second menu</p>\\n","line":32,"rawdescription":"\\nList of suboptions to display in the second menu"}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"MatButtonModule","type":"module"},{"name":"MatMenuModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"MatRippleModule","type":"module"}],"description":"<p>Nested Angular Material menu component</p>\\n","rawdescription":"\\n\\nNested Angular Material menu component\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, input, ViewEncapsulation } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatMenuModule } from \'@angular/material/menu\';\\n\\n/** Menu option interface */\\nexport interface MenuDemoOption {\\n  /** Name of option */\\n  name: string;\\n  /** Material icon name */\\n  icon: string;\\n  /** Options to open in a second menu */\\n  expandedOptions?: MenuDemoOption[];\\n}\\n\\n/**\\n * Nested Angular Material menu component\\n */\\n@Component({\\n  selector: \'hra-menu\',\\n  imports: [MatButtonModule, MatMenuModule, MatIconModule, MatRippleModule],\\n  templateUrl: \'./menu-demo.component.html\',\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MenuDemoComponent {\\n  /** List of menu options */\\n  readonly menuOptions = input<MenuDemoOption[]>([]);\\n\\n  /** List of suboptions to display in the second menu */\\n  suboptions: MenuDemoOption[] = [];\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<button mat-icon-button [matMenuTriggerFor]=\\"options\\" aria-label=\\"Icon to open nested menu\\">\\n  <mat-icon>more_vert</mat-icon>\\n</button>\\n\\n<mat-menu #options=\\"matMenu\\">\\n  @for (option of menuOptions(); track option) {\\n    @if (option.expandedOptions) {\\n      <button\\n        class=\\"expanded\\"\\n        mat-menu-item\\n        matRipple\\n        matRippleColor=\\"#201E3D14\\"\\n        [matMenuTriggerFor]=\\"submenu\\"\\n        (mouseover)=\\"suboptions = option.expandedOptions\\"\\n      >\\n        <mat-icon>{{ option.icon }}</mat-icon>\\n        {{ option.name }}\\n        <mat-icon class=\\"expand-arrow\\">arrow_right</mat-icon>\\n      </button>\\n    } @else {\\n      <button mat-menu-item>\\n        <mat-icon>{{ option.icon }}</mat-icon>\\n        {{ option.name }}\\n      </button>\\n    }\\n  }\\n</mat-menu>\\n\\n<mat-menu #submenu=\\"matMenu\\">\\n  @for (suboption of suboptions; track suboption) {\\n    <button mat-menu-item>\\n      <mat-icon>{{ suboption.icon }}</mat-icon>\\n      <span>{{ suboption.name }}</span>\\n    </button>\\n  }\\n</mat-menu>\\n"},{"name":"MenuStylesComponent","id":"component-MenuStylesComponent-d875ece8998bcac5f368d5dda1e17ed7e75a6768cdaf1c7576d9917049327c958e8591c565406d63ba192ff90fd455eee07833dfa82e3249528046c1790e1336","file":"menu/src/lib/menu-styles/menu-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-menu-styles","styleUrls":["./menu-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Applies menu styles globally</p>\\n","rawdescription":"\\n\\nApplies menu styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/**\\n * Applies menu styles globally\\n */\\n@Component({\\n  selector: \'hra-menu-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./menu-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MenuStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  .mat-mdc-menu-panel {\\n    --mat-menu-container-shape: 0.5rem;\\n    --mat-app-elevation-shadow-level-2: 0rem 0.3125rem 1rem 0rem rgb(from var(--mat-sys-shadow) r g b / 0.16);\\n    --mat-menu-item-with-icon-leading-spacing: 1rem;\\n    --mat-menu-item-with-icon-trailing-spacing: 1rem;\\n\\n    --mat-menu-item-label-text-color: var(--mat-sys-secondary);\\n    --mat-menu-item-icon-color: var(--mat-sys-secondary);\\n\\n    --mat-menu-container-color: var(--mat-sys-surface-container-low);\\n    --mat-menu-item-hover-state-layer-color: rgb(from var(--mat-sys-secondary) r g b / 0.08); // hovered state\\n    --mat-menu-item-focus-state-layer-color: rgb(from var(--mat-sys-tertiary) r g b / 0.2); // selected state\\n\\n    --mat-menu-item-label-text-tracking: var(--mat-sys-label-medium-tracking);\\n    --mat-menu-item-label-text-weight: var(--mat-sys-label-medium-weight);\\n    --mat-menu-item-label-text-size: var(--mat-sys-label-medium-size);\\n    --mat-menu-item-label-text-line-height: var(--mat-sys-label-medium-line-height);\\n\\n    button {\\n      min-width: 12rem;\\n      border: 0.125rem solid transparent;\\n    }\\n\\n    .expand-arrow {\\n      --mat-menu-item-spacing: 1rem;\\n      position: absolute;\\n      right: 0;\\n    }\\n\\n    .mat-mdc-menu-submenu-icon {\\n      display: none;\\n    }\\n\\n    // focused state\\n    .cdk-keyboard-focused {\\n      background-color: var(--mat-sys-on-primary) !important;\\n      border: 0.125rem solid var(--mat-sys-tertiary);\\n    }\\n\\n    // selected state\\n    .mat-mdc-menu-item-highlighted {\\n      background-color: rgb(from var(--mat-sys-tertiary) r g b / 0.2);\\n    }\\n  }\\n}\\n","styleUrl":"./menu-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"MicroTooltipStylesComponent","id":"component-MicroTooltipStylesComponent-e49779f451d7cb23a01d21c0bb5fa384223f1412490d7fa6f79e85c9442e49e971517660dd8c73f73053916e845e9e1a25dd39f187d469d0db68bc0450effaed","file":"micro-tooltip/src/micro-tooltip-styles/micro-tooltip-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-micro-tooltip-styles","styleUrls":["./micro-tooltip-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Applies micro tooltip styles globally</p>\\n","rawdescription":"\\n\\nApplies micro tooltip styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/**\\n * Applies micro tooltip styles globally\\n */\\n@Component({\\n  selector: \'hra-micro-tooltip-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./micro-tooltip-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MicroTooltipStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  .hra-micro-tooltip {\\n    --mdc-plain-tooltip-supporting-text-color: var(--mat-sys-on-primary);\\n    --mdc-plain-tooltip-container-color: color-mix(in srgb, var(--mat-sys-secondary) 96%, transparent);\\n\\n    .mat-mdc-tooltip-surface {\\n      padding: 0.25rem 0.5rem;\\n      letter-spacing: unset;\\n    }\\n  }\\n\\n  .hra-micro-tooltip-medium {\\n    .mat-mdc-tooltip-surface {\\n      font: var(--mat-sys-label-medium);\\n    }\\n  }\\n\\n  .hra-micro-tooltip-small {\\n    .mat-mdc-tooltip-surface {\\n      font: var(--mat-sys-label-small);\\n    }\\n  }\\n}\\n","styleUrl":"./micro-tooltip-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"MobileMenuComponent","id":"component-MobileMenuComponent-9eec90fd2b12e278625f820f5d643c6cd737a32e65b72978e2c3aca58f5a56cb4f905c408cc16aaf168b06621d458e95e937b7066c4e1f42047301730dee2116","file":"navigation/header/src/lib/mobile-menu/mobile-menu.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-mobile-menu","styleUrls":[],"styles":[],"templateUrl":["./mobile-menu.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"hubmapMenu","defaultValue":"input.required<HubmapMenuGroup[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Hubmap menu</p>\\n","line":32,"rawdescription":"\\nHubmap menu","modifierKind":[148]},{"name":"menus","defaultValue":"input.required<Menu[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>All other menus</p>\\n","line":34,"rawdescription":"\\nAll other menus","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatDividerModule","type":"module"},{"name":"MatExpansionModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"ScrollingModule","type":"module"},{"name":"HubmapMenuContentComponent","type":"component"},{"name":"MenuContentComponent","type":"component"}],"description":"<p>Display a menu for mobile sized screens</p>\\n","rawdescription":"\\n\\nDisplay a menu for mobile sized screens\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatDividerModule } from \'@angular/material/divider\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ScrollingModule } from \'@hra-ui/design-system/scrolling\';\\nimport { HubmapMenuContentComponent } from \'../hubmap-menu-content/hubmap-menu-content.component\';\\nimport { MenuContentComponent } from \'../menu-content/menu-content.component\';\\nimport { HubmapMenuGroup } from \'../types/hubmap-menu.schema\';\\nimport { Menu } from \'../types/menus.schema\';\\n\\n/**\\n * Display a menu for mobile sized screens\\n */\\n@Component({\\n  selector: \'hra-mobile-menu\',\\n  imports: [\\n    CommonModule,\\n    MatDividerModule,\\n    MatExpansionModule,\\n    MatIconModule,\\n    ScrollingModule,\\n    HubmapMenuContentComponent,\\n    MenuContentComponent,\\n  ],\\n  templateUrl: \'./mobile-menu.component.html\',\\n  styleUrl: \'./mobile-menu.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MobileMenuComponent {\\n  /** Hubmap menu */\\n  readonly hubmapMenu = input.required<HubmapMenuGroup[]>();\\n  /** All other menus */\\n  readonly menus = input.required<Menu[]>();\\n}\\n","styleUrl":"./mobile-menu.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<mat-divider> </mat-divider>\\n<ng-scrollbar>\\n  <mat-accordion displayMode=\\"flat\\" multi=\\"false\\">\\n    @for (menu of menus(); track $index) {\\n      <mat-expansion-panel class=\\"panel\\" hideToggle>\\n        <mat-expansion-panel-header class=\\"header\\">\\n          <mat-panel-title>\\n            {{ menu.label }}\\n            <mat-icon class=\\"toggle-icon\\"> </mat-icon>\\n          </mat-panel-title>\\n        </mat-expansion-panel-header>\\n\\n        <hra-menu-content class=\\"content\\" variant=\\"mobile\\" [menu]=\\"menu\\"></hra-menu-content>\\n      </mat-expansion-panel>\\n\\n      <mat-divider> </mat-divider>\\n    }\\n\\n    <mat-expansion-panel class=\\"panel\\" hideToggle>\\n      <mat-expansion-panel-header class=\\"header\\">\\n        <mat-panel-title>\\n          HuBMAP Tools & Applications\\n          <mat-icon class=\\"toggle-icon\\"> </mat-icon>\\n        </mat-panel-title>\\n      </mat-expansion-panel-header>\\n\\n      <hra-hubmap-menu-content class=\\"content\\" [menu]=\\"hubmapMenu()\\"> </hra-hubmap-menu-content>\\n    </mat-expansion-panel>\\n\\n    <mat-divider> </mat-divider>\\n  </mat-accordion>\\n</ng-scrollbar>\\n"},{"name":"NavHeaderButtonsComponent","id":"component-NavHeaderButtonsComponent-293797678f8065c1b89a751d33da2d32697ef2efa6f348157a4bd81a9b5bdb8c33f42b7fbe71eca6d0d6a8cef8bb20da8e638b025c34d1972a23d2e6e5816532","file":"nav-header-buttons/src/lib/nav-header-buttons.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-nav-header-buttons","styleUrls":[],"styles":[],"templateUrl":["./nav-header-buttons.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"app","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current app</p>\\n","line":37,"rawdescription":"\\nCurrent app","modifierKind":[148],"required":true},{"name":"appLink","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Link to app home page</p>\\n","line":39,"rawdescription":"\\nLink to app home page","modifierKind":[148],"required":true},{"name":"appStatus","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>App software status</p>\\n","line":33,"rawdescription":"\\nApp software status","modifierKind":[148],"required":false},{"name":"appTitle","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>App title</p>\\n","line":41,"rawdescription":"\\nApp title","modifierKind":[148],"required":true},{"name":"brandmark","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether to show the HRA brandmark</p>\\n","line":35,"rawdescription":"\\nWhether to show the HRA brandmark","modifierKind":[148],"required":false}],"outputsClass":[],"propertiesClass":[{"name":"app","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current app</p>\\n","line":37,"rawdescription":"\\nCurrent app","modifierKind":[148],"required":true},{"name":"appLink","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Link to app home page</p>\\n","line":39,"rawdescription":"\\nLink to app home page","modifierKind":[148],"required":true},{"name":"appStatus","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>App software status</p>\\n","line":33,"rawdescription":"\\nApp software status","modifierKind":[148],"required":false},{"name":"appTitle","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>App title</p>\\n","line":41,"rawdescription":"\\nApp title","modifierKind":[148],"required":true},{"name":"brandmark","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether to show the HRA brandmark</p>\\n","line":35,"rawdescription":"\\nWhether to show the HRA brandmark","modifierKind":[148],"required":false},{"name":"variant","defaultValue":"input<NavHeaderButtonsVariant>(\'basic\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Variant of logo component</p>\\n","line":31,"rawdescription":"\\nVariant of logo component","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonToggleModule","type":"module"},{"name":"BrandMarkComponent","type":"component"},{"name":"ButtonsModule","type":"module"},{"name":"ProductLogoComponent","type":"component"},{"name":"SoftwareStatusIndicatorComponent","type":"component"}],"description":"<p>Logo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.</p>\\n","rawdescription":"\\n\\nLogo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatButtonToggleModule } from \'@angular/material/button-toggle\';\\nimport { BrandMarkComponent } from \'@hra-ui/design-system/brand/mark\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { ProductLogoComponent } from \'@hra-ui/design-system/product-logo\';\\nimport { SoftwareStatus, SoftwareStatusIndicatorComponent } from \'@hra-ui/design-system/software-status-indicator\';\\n\\n/** Variant of nav header button */\\nexport type NavHeaderButtonsVariant = \'basic\' | \'sidenav\';\\n\\n/**\\n * Logo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.\\n */\\n@Component({\\n  selector: \'hra-nav-header-buttons\',\\n  imports: [\\n    CommonModule,\\n    MatButtonToggleModule,\\n    BrandMarkComponent,\\n    ButtonsModule,\\n    ProductLogoComponent,\\n    SoftwareStatusIndicatorComponent,\\n  ],\\n  templateUrl: \'./nav-header-buttons.component.html\',\\n  styleUrl: \'./nav-header-buttons.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class NavHeaderButtonsComponent {\\n  /** Variant of logo component */\\n  readonly variant = input<NavHeaderButtonsVariant>(\'basic\');\\n  /** App software status */\\n  readonly appStatus = input<SoftwareStatus>();\\n  /** Whether to show the HRA brandmark */\\n  readonly brandmark = input<boolean>(true);\\n  /** Current app */\\n  readonly app = input.required<string>();\\n  /** Link to app home page */\\n  readonly appLink = input.required<string>();\\n  /** App title */\\n  readonly appTitle = input.required<string>();\\n}\\n","styleUrl":"./nav-header-buttons.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"@if (brandmark()) {\\n  <a\\n    class=\\"hra-logo\\"\\n    href=\\"https://humanatlas.io\\"\\n    target=\\"_blank\\"\\n    rel=\\"noopener noreferrer\\"\\n    aria-label=\\"Visit Human Reference Atlas\\"\\n  >\\n    <hra-brand-mark variant=\\"small\\"></hra-brand-mark>\\n  </a>\\n}\\n<a class=\\"app-logo\\" [href]=\\"appLink()\\" [attr.alt]=\\"appTitle() + \' logo\'\\">\\n  <hra-product-logo [name]=\\"app()\\" size=\\"small\\"></hra-product-logo>\\n</a>\\n\\n<span class=\\"logos-text\\">\\n  @if (variant() === \'sidenav\') {\\n    <mat-button-toggle class=\\"app-name-nav\\" value=\\"bold\\" disableRipple>\\n      <span class=\\"label\\">{{ appTitle() }}</span>\\n    </mat-button-toggle>\\n  } @else {\\n    <a class=\\"app-name\\" [href]=\\"appLink()\\" aria-label=\\"Return to app home\\">\\n      <span class=\\"app-label\\">{{ appTitle() }}</span>\\n    </a>\\n  }\\n  @if (appStatus()) {\\n    <hra-software-status-indicator [status]=\\"appStatus()!\\" size=\\"small\\"></hra-software-status-indicator>\\n  }\\n</span>\\n"},{"name":"NavHeaderComponent","id":"component-NavHeaderComponent-a850dba1dd07f42be528800fd9e506b4362a6337a3764ee05a324689ea57f01c4fc08ca0f695d3eb880750ab780557787899370ab2c1ffd166c2e5f590a5b778","file":"nav-header/src/lib/nav-header.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-nav-header","styleUrls":[],"styles":[],"templateUrl":["./nav-header.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"app","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current app</p>\\n","line":58,"rawdescription":"\\nCurrent app","modifierKind":[148],"required":true},{"name":"link","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Link to the app</p>\\n","line":56,"rawdescription":"\\nLink to the app","modifierKind":[148],"required":true},{"name":"status","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Status of the app</p>\\n","line":62,"rawdescription":"\\nStatus of the app","modifierKind":[148],"required":false},{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Name of the app</p>\\n","line":60,"rawdescription":"\\nName of the app","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"app","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current app</p>\\n","line":58,"rawdescription":"\\nCurrent app","modifierKind":[148],"required":true},{"name":"link","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Link to the app</p>\\n","line":56,"rawdescription":"\\nLink to the app","modifierKind":[148],"required":true},{"name":"navigationCategories","defaultValue":"input.required<CardData[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Data to display in sidenav</p>\\n","line":64,"rawdescription":"\\nData to display in sidenav","modifierKind":[148]},{"name":"status","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Status of the app</p>\\n","line":62,"rawdescription":"\\nStatus of the app","modifierKind":[148],"required":false},{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Name of the app</p>\\n","line":60,"rawdescription":"\\nName of the app","modifierKind":[148],"required":true},{"name":"variant","defaultValue":"input<NavHeaderButtonsVariant>(\'basic\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Variant of the header</p>\\n","line":54,"rawdescription":"\\nVariant of the header","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"NavHeaderButtonsComponent","type":"component"},{"name":"IconButtonSizeDirective","type":"directive"},{"name":"MatSidenavModule","type":"module"},{"name":"AppNavButtonComponent","type":"component"},{"name":"ScrollingModule","type":"module"},{"name":"AssetUrlPipe","type":"pipe"}],"description":"<p>Navigation Header Component</p>\\n","rawdescription":"\\n\\nNavigation Header Component\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatSidenavModule } from \'@angular/material/sidenav\';\\nimport { AssetUrlPipe } from \'@hra-ui/cdk/app-href\';\\nimport { AppNavButtonComponent } from \'@hra-ui/design-system/buttons/app-nav-button\';\\nimport { IconButtonSizeDirective } from \'@hra-ui/design-system/icon-button\';\\nimport { NavHeaderButtonsComponent, NavHeaderButtonsVariant } from \'@hra-ui/design-system/nav-header-buttons\';\\nimport { ScrollingModule } from \'@hra-ui/design-system/scrolling\';\\nimport { SoftwareStatus } from \'@hra-ui/design-system/software-status-indicator\';\\n\\n/** Sidenav card data */\\nexport interface CardData {\\n  /** Name of card category */\\n  category: string;\\n  /** Info for apps in category */\\n  cards: {\\n    /** Name of app */\\n    name: string;\\n    /** Icon path */\\n    icon: string;\\n    /** App title */\\n    title: string;\\n    /** App description */\\n    description: string;\\n    /** Link to app */\\n    link: string;\\n  }[];\\n}\\n\\n/**\\n * Navigation Header Component\\n */\\n@Component({\\n  selector: \'hra-nav-header\',\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    NavHeaderButtonsComponent,\\n    IconButtonSizeDirective,\\n    MatSidenavModule,\\n    AppNavButtonComponent,\\n    ScrollingModule,\\n    AssetUrlPipe,\\n  ],\\n  templateUrl: \'./nav-header.component.html\',\\n  styleUrl: \'./nav-header.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class NavHeaderComponent {\\n  /** Variant of the header */\\n  readonly variant = input<NavHeaderButtonsVariant>(\'basic\');\\n  /** Link to the app */\\n  readonly link = input.required<string>();\\n  /** Current app */\\n  readonly app = input.required<string>();\\n  /** Name of the app */\\n  readonly tagline = input.required<string>();\\n  /** Status of the app */\\n  readonly status = input<SoftwareStatus>();\\n  /** Data to display in sidenav */\\n  readonly navigationCategories = input.required<CardData[]>();\\n}\\n","styleUrl":"./nav-header.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<mat-sidenav-container class=\\"container\\">\\n  <mat-sidenav #sidenav mode=\\"over\\" class=\\"apps-sidenav\\" position=\\"end\\" [fixedInViewport]=\\"false\\">\\n    <div class=\\"header\\">\\n      <span class=\\"sidenav-title\\"> HuBMAP Tools & Applications </span>\\n      <div style=\\"flex-grow: 1\\"></div>\\n      <button mat-icon-button hraIconButtonSize=\\"large\\" disableRipple (click)=\\"sidenav.toggle()\\">\\n        <mat-icon>close</mat-icon>\\n      </button>\\n    </div>\\n    <ng-scrollbar>\\n      @for (item of navigationCategories(); track item) {\\n        <div class=\\"category\\">\\n          <div class=\\"card-category\\">{{ item.category }}</div>\\n          @for (card of item.cards; track card) {\\n            <hra-app-nav-button\\n              [icon]=\\"card.icon\\"\\n              [tagline]=\\"card.name\\"\\n              [description]=\\"card.description\\"\\n              [link]=\\"card.link\\"\\n            ></hra-app-nav-button>\\n          }\\n        </div>\\n      }\\n    </ng-scrollbar>\\n  </mat-sidenav>\\n\\n  <mat-sidenav-content>\\n    <div class=\\"main\\">\\n      <hra-nav-header-buttons\\n        [variant]=\\"variant()\\"\\n        [appLink]=\\"link()\\"\\n        [app]=\\"app()\\"\\n        [appTitle]=\\"tagline()\\"\\n        [appStatus]=\\"status()\\"\\n      ></hra-nav-header-buttons>\\n      <div style=\\"flex-grow: 1\\"></div>\\n      <button mat-icon-button hraIconButtonSize=\\"large\\" disableRipple (click)=\\"sidenav.toggle()\\">\\n        <mat-icon>apps</mat-icon>\\n      </button>\\n    </div>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n"},{"name":"NavigationCategoryToggleComponent","id":"component-NavigationCategoryToggleComponent-8183dabdc506b283b055ede6a9dbbb502f4c404790ae73c2891c3fd71093c4627c5685814de68fd4e8b7938004736c37db5e84cbeb7c09d88663dd8c426e9621","file":"buttons/navigation-category-toggle/src/lib/navigation-category-toggle.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-navigation-category-toggle","styleUrls":[],"styles":[],"templateUrl":["./navigation-category-toggle.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"toggled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the button is toggled on/off</p>\\n","line":16,"rawdescription":"\\nWhether the button is toggled on/off","modifierKind":[148],"required":false}],"outputsClass":[],"propertiesClass":[{"name":"toggled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Whether the button is toggled on/off</p>\\n","line":16,"rawdescription":"\\nWhether the button is toggled on/off","modifierKind":[148],"required":false}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatButtonToggleModule","type":"module"},{"name":"MatIconModule","type":"module"}],"description":"<p>Navigation toggle button</p>\\n","rawdescription":"\\nNavigation toggle button","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, model } from \'@angular/core\';\\nimport { MatButtonToggleModule } from \'@angular/material/button-toggle\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\n\\n/** Navigation toggle button */\\n@Component({\\n  selector: \'hra-navigation-category-toggle\',\\n  imports: [CommonModule, MatButtonToggleModule, MatIconModule],\\n  templateUrl: \'./navigation-category-toggle.component.html\',\\n  styleUrl: \'./navigation-category-toggle.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class NavigationCategoryToggleComponent {\\n  /** Whether the button is toggled on/off */\\n  readonly toggled = model(false);\\n}\\n","styleUrl":"./navigation-category-toggle.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<mat-button-toggle class=\\"toggle\\" [checked]=\\"toggled()\\" (change)=\\"toggled.set($event.source.checked)\\">\\n  <span class=\\"text\\">\\n    <ng-content></ng-content>\\n  </span>\\n\\n  <mat-icon class=\\"icon\\">\\n    @if (toggled()) {\\n      expand_less\\n    } @else {\\n      expand_more\\n    }\\n  </mat-icon>\\n</mat-button-toggle>\\n"},{"name":"NoticeComponent","id":"component-NoticeComponent-1d41a9b160020a7c8b2d2f7d05799c18544d74061f100e9491630758c5fcd832185f5e614fbfda8a91a43a1777483dc6607aad8d2f48b7732a90f84bc344898d","file":"dialog/src/lib/notice/notice.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-notice","styleUrls":[],"styles":[],"templateUrl":["./notice.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"data","defaultValue":"inject(MAT_DIALOG_DATA)","deprecated":false,"deprecationMessage":"","type":"DialogData","indexKey":"","optional":false,"description":"<p>Instance of Mat Dialog Data</p>\\n","line":50,"rawdescription":"\\nInstance of Mat Dialog Data","modifierKind":[124,148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"IconButtonSizeDirective","type":"directive"},{"name":"MatIconModule","type":"module"},{"name":"ButtonsModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatDialogActions"},{"name":"MatDialogTitle"},{"name":"MatDialogContent"},{"name":"MatDialogClose"}],"description":"<p>Notice Component</p>\\n","rawdescription":"\\nNotice Component","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport {\\n  MAT_DIALOG_DATA,\\n  MatDialogActions,\\n  MatDialogClose,\\n  MatDialogContent,\\n  MatDialogTitle,\\n} from \'@angular/material/dialog\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { IconButtonSizeDirective } from \'@hra-ui/design-system/icon-button\';\\n\\n/** Interface for Dialog Data */\\nexport interface DialogData {\\n  /** Title of the dialog */\\n  title: string;\\n  /** Message of the dialog */\\n  message: string;\\n  /** Action Button Object */\\n  action?: {\\n    /** Label for the action button */\\n    label: string;\\n    /** Callback function for the action button */\\n    callback: () => void;\\n  };\\n}\\n\\n/** Notice Component */\\n@Component({\\n  selector: \'hra-notice\',\\n  imports: [\\n    CommonModule,\\n    IconButtonSizeDirective,\\n    MatIconModule,\\n    ButtonsModule,\\n    MatButtonModule,\\n    MatDialogActions,\\n    MatDialogTitle,\\n    MatDialogContent,\\n    MatDialogClose,\\n  ],\\n  templateUrl: \'./notice.component.html\',\\n  styleUrl: \'./notice.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class NoticeComponent {\\n  /** Instance of Mat Dialog Data */\\n  protected readonly data: DialogData = inject(MAT_DIALOG_DATA);\\n}\\n","styleUrl":"./notice.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<div mat-dialog-title>\\n  <div class=\\"title\\">\\n    {{ data.title }}\\n  </div>\\n  <button mat-icon-button mat-dialog-close disableRipple hraIconButtonSize=\\"large\\" data-testid=\\"close-icon\\">\\n    <mat-icon class=\\"material-symbols-rounded\\">close</mat-icon>\\n  </button>\\n</div>\\n<mat-dialog-content>{{ data.message }}</mat-dialog-content>\\n<mat-dialog-actions>\\n  @if (data.action) {\\n    <button mat-button disableRipple hraButtonSize=\\"medium\\" class=\\"action\\" (click)=\\"data.action.callback()\\">\\n      {{ data.action.label }}\\n    </button>\\n  }\\n  <button mat-button disableRipple mat-dialog-close hraButtonSize=\\"medium\\" class=\\"dismiss\\">Dismiss</button>\\n</mat-dialog-actions>\\n"},{"name":"ProductLogoComponent","id":"component-ProductLogoComponent-e37bc2cfd7de3873f7ade311d20c5b923da05bad5ba773f42c0f39816bd0fe8738d65062450d9f0868a905765dea978e8ef85a98f5426cfc10897d32d8701b6b","file":"product-logo/src/lib/product-logo.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-product-logo","styleUrls":[],"styles":[],"templateUrl":["./product-logo.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"name","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Button name</p>\\n","line":20,"rawdescription":"\\nButton name","modifierKind":[148],"required":true},{"name":"size","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Button size</p>\\n","line":23,"rawdescription":"\\nButton size","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"icon","defaultValue":"computed(() => `products:${this.name()}${this.size() === \'large\' ? \'_large\' : \'\'}`)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Icon to display</p>\\n","line":26,"rawdescription":"\\nIcon to display","modifierKind":[124,148]},{"name":"name","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Button name</p>\\n","line":20,"rawdescription":"\\nButton name","modifierKind":[148],"required":true},{"name":"size","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Button size</p>\\n","line":23,"rawdescription":"\\nButton size","modifierKind":[148],"required":true}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatIconModule","type":"module"}],"description":"<p>HRA product logos</p>\\n","rawdescription":"\\n\\nHRA product logos\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, computed, input } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\n\\n/** Button size type */\\nexport type ProductLogoSize = \'small\' | \'large\';\\n\\n/**\\n * HRA product logos\\n */\\n@Component({\\n  selector: \'hra-product-logo\',\\n  imports: [CommonModule, MatIconModule],\\n  templateUrl: \'./product-logo.component.html\',\\n  styleUrl: \'./product-logo.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ProductLogoComponent {\\n  /** Button name */\\n  readonly name = input.required<string>();\\n\\n  /** Button size */\\n  readonly size = input.required<ProductLogoSize>();\\n\\n  /** Icon to display */\\n  protected readonly icon = computed(() => `products:${this.name()}${this.size() === \'large\' ? \'_large\' : \'\'}`);\\n}\\n","styleUrl":"./product-logo.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<mat-icon [class.small]=\\"size() === \'small\'\\" [svgIcon]=\\"icon()\\" data-testid=\\"product-logo\\"></mat-icon>\\n"},{"name":"ScrollbarStylesComponent","id":"component-ScrollbarStylesComponent-98b2470766cfc5e02f5528d424eab1b1b48f8a7ec5e51329e60e5c8af8042b617927f1d34f21b9e7f94bb3a558514571ebd540fc3a9f1e378ac1bdfdca0dd40d","file":"scrolling/src/lib/scrollbar-styles/scrollbar-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-scrollbar-styles","styleUrls":["./scrollbar-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>ng-scrollbar global styles component</p>\\n","rawdescription":"\\nng-scrollbar global styles component","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/** ng-scrollbar global styles component */\\n@Component({\\n  selector: \'hra-scrollbar-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./scrollbar-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScrollbarStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  --scrollbar-thumb-color: rgb(from var(--mat-sys-primary) r g b / 0.72);\\n  --scrollbar-border-radius: 1rem;\\n  --scrollbar-thickness: 8;\\n}\\n","styleUrl":"./scrollbar-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"ScrollOverflowFadeStylesComponent","id":"component-ScrollOverflowFadeStylesComponent-5c069d94d9cda63486aa31c1f23d16a2e9d7563746326d99a1bebc6db1587495214db4c3ef234dcfc5e6a0a8302103131d976909000eb2f37ae90b65a07b6a0e","file":"scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-scroll-overflow-fade-styles","styleUrls":["./scroll-overflow-fade.directive.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Scroll overflow fade global styles component</p>\\n","rawdescription":"\\nScroll overflow fade global styles component","type":"component","sourceCode":"import {\\n  ChangeDetectionStrategy,\\n  Component,\\n  Directive,\\n  Renderer2,\\n  ViewEncapsulation,\\n  effect,\\n  inject,\\n  input,\\n  numberAttribute,\\n} from \'@angular/core\';\\nimport { registerStyleComponents } from \'@hra-ui/cdk/styling\';\\nimport { NG_SCROLLBAR } from \'ngx-scrollbar\';\\nimport { SCROLL_TIMELINE, ScrollTimelineFunc } from \'../scroll-timeline/scroll-timeline\';\\n\\n/** Keyframes for the top gradient */\\nconst GRADIENT_TOP_KEYFRAMES: Keyframe[] = [\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-start)\',\\n    opacity: 0,\\n  },\\n  {\\n    offset: 0.02,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-end)\',\\n  },\\n];\\n\\n/** Keyframes for the bottom gradient */\\nconst GRADIENT_BOTTOM_KEYFRAMES: Keyframe[] = [\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-start)\',\\n  },\\n  {\\n    offset: 0.98,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-end)\',\\n    opacity: 0,\\n  },\\n];\\n\\n/** Scroll overflow fade global styles component */\\n@Component({\\n  selector: \'hra-scroll-overflow-fade-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./scroll-overflow-fade.directive.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScrollOverflowFadeStylesComponent {}\\n\\n/**\\n * Directive that can be used along ng-scrollbar to apply a gradient\\n * to the top and bottom of the scroll area to indicate that there\\n * is additional content available through scrolling.\\n */\\n@Directive({\\n  selector: \'[hraScrollOverflowFade]\',\\n  standalone: true,\\n  host: {\\n    \'[style.--hra-scroll-overflow-fade-offset.px]\': \'scrollOverflowFadeOffset()\',\\n  },\\n})\\nexport class ScrollOverflowFadeDirective {\\n  /**\\n   * Additional offset to the gradient elements.\\n   * Primarily useful when there are sticky headers on a table, etc.\\n   */\\n  readonly scrollOverflowFadeOffset = input(0, { transform: numberAttribute });\\n\\n  /** Renderer instance */\\n  private readonly renderer = inject(Renderer2);\\n  /** Nearest ng-scrollbar instance */\\n  private readonly scrollbar = inject(NG_SCROLLBAR);\\n  /** Signal providing access to ScrollTimeline though browser builtin or polyfill */\\n  private readonly scrollTimeline = inject(SCROLL_TIMELINE);\\n\\n  /**\\n   * Initializes the directive, adding the gradient elements to the scroll area.\\n   */\\n  constructor() {\\n    registerStyleComponents([ScrollOverflowFadeStylesComponent]);\\n\\n    effect((onCleanup) => {\\n      const scrollTimeline = this.scrollTimeline();\\n      if (!this.scrollbar.viewport.initialized() || !scrollTimeline) {\\n        return;\\n      }\\n\\n      const viewport = this.scrollbar.viewport.nativeElement;\\n      const cleanupFns = [\\n        this.attachGradient(viewport, \'top\', scrollTimeline, GRADIENT_TOP_KEYFRAMES),\\n        this.attachGradient(viewport, \'bottom\', scrollTimeline, GRADIENT_BOTTOM_KEYFRAMES),\\n      ];\\n\\n      onCleanup(() => cleanupFns.forEach((fn) => fn()));\\n    });\\n  }\\n\\n  /**\\n   * Creates and attaches a gradient element to a scroll area.\\n   *\\n   * @param viewport The scroll area viewport\\n   * @param placement Whether to place the gradient on top or bottom\\n   * @param scrollTimeline Reference to ScrollTimeline\\n   * @param keyframes Keyframes used to animate/move the gradient\\n   * @returns A cleanup function\\n   */\\n  private attachGradient(\\n    viewport: HTMLElement,\\n    placement: \'top\' | \'bottom\',\\n    scrollTimeline: ScrollTimelineFunc,\\n    keyframes: Keyframe[],\\n  ): () => void {\\n    const el = this.createGradientElement(placement);\\n    this.renderer.appendChild(viewport, el);\\n\\n    const animation = this.animateGradient(scrollTimeline, el, viewport, keyframes);\\n    return () => {\\n      el.remove();\\n      animation.cancel();\\n    };\\n  }\\n\\n  /**\\n   * Creates a new gradient element.\\n   *\\n   * @param placement Whether it will be placed on the top or bottom\\n   * @returns A new element\\n   */\\n  private createGradientElement(placement: \'top\' | \'bottom\'): HTMLElement {\\n    const el: HTMLElement = this.renderer.createElement(\'div\');\\n    this.renderer.addClass(el, `hra-scroll-overflow-fade-gradient-${placement}`);\\n    return el;\\n  }\\n\\n  /**\\n   * Animates a gradient element using a scroll timeline.\\n   *\\n   * @param scrollTimeline Reference to ScrollTimeline\\n   * @param el Element to animate\\n   * @param source Scroll container element\\n   * @param keyframes Keyframe specification\\n   * @returns An animation\\n   */\\n  private animateGradient(\\n    scrollTimeline: ScrollTimelineFunc,\\n    el: HTMLElement,\\n    source: HTMLElement,\\n    keyframes: Keyframe[],\\n  ): Animation {\\n    return el.animate(keyframes, {\\n      fill: \'both\',\\n      easing: \'linear\',\\n      timeline: new scrollTimeline({ source, axis: \'y\' }),\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".hra-scroll-overflow-fade-gradient-top,\\n.hra-scroll-overflow-fade-gradient-bottom {\\n  --_hra-scroll-overflow-fade-height: var(--hra-scroll-overflow-fade-height, 32px);\\n  --_hra-scroll-overflow-fade-color: var(--hra-scroll-overflow-fade-color, #ffffff);\\n\\n  display: block;\\n  position: absolute;\\n  pointer-events: none;\\n  z-index: 99;\\n  left: 0;\\n  right: 0;\\n  width: 100%;\\n  height: var(--_hra-scroll-overflow-fade-height);\\n}\\n\\n.hra-scroll-overflow-fade-gradient-top {\\n  --_hra-scroll-overflow-fade-gradient-top-start: var(--hra-scroll-overflow-fade-offset);\\n  --_hra-scroll-overflow-fade-gradient-top-end: calc(\\n    (var(--content-height) - var(--viewport-height)) * 1px + 2 * var(--hra-scroll-overflow-fade-offset) - 1px\\n  );\\n\\n  top: calc(-1 * var(--_hra-scroll-overflow-fade-height));\\n  background: linear-gradient(to bottom, var(--_hra-scroll-overflow-fade-color), transparent);\\n}\\n\\n.hra-scroll-overflow-fade-gradient-bottom {\\n  --_hra-scroll-overflow-fade-gradient-bottom-start: calc(\\n    var(--viewport-height) * 1px - var(--_hra-scroll-overflow-fade-height)\\n  );\\n  --_hra-scroll-overflow-fade-gradient-bottom-end: calc(\\n    var(--content-height) * 1px - var(--_hra-scroll-overflow-fade-height) + var(--hra-scroll-overflow-fade-offset)\\n  );\\n\\n  top: 100%;\\n  background: linear-gradient(to top, var(--_hra-scroll-overflow-fade-color), transparent);\\n}\\n\\nng-scrollbar[isVerticallyScrollable=\'false\'] {\\n  & .hra-scroll-overflow-fade-gradient-top,\\n  & .hra-scroll-overflow-fade-gradient-bottom {\\n    display: none;\\n  }\\n}\\n","styleUrl":"./scroll-overflow-fade.directive.scss"}],"stylesData":"","extends":[]},{"name":"SelectStylesComponent","id":"component-SelectStylesComponent-6387c0c4477ef2415f19058821e3ea0283565c70a8f173dc578c48db8b9aff149fdfb0dc4ca67088b46e0bc18073afdaaf01be13655b5b8fec12ad7a03e98261","file":"select/src/lib/select-styles/select-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-select-styles","styleUrls":["./select-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Applies select styles globally</p>\\n","rawdescription":"\\n\\nApplies select styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/**\\n * Applies select styles globally\\n */\\n@Component({\\n  selector: \'hra-select-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./select-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SelectStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  mat-form-field.mat-mdc-form-field-type-mat-select {\\n    --mdc-filled-text-field-container-color: var(--mat-sys-surface-container);\\n    --mat-select-focused-arrow-color: var(--mat-sys-tertiary);\\n\\n    --mat-form-field-container-height: 3rem;\\n    --mat-form-field-filled-with-label-container-padding-top: 1.25rem;\\n    --mat-form-field-filled-with-label-container-padding-bottom: 0.25rem;\\n\\n    mat-label {\\n      font: var(--mat-sys-label-small);\\n      letter-spacing: var(--mat-sys-label-small-tracking);\\n      color: var(--mat-sys-primary-fixed);\\n    }\\n\\n    &.mat-focused {\\n      mat-label {\\n        color: var(--mat-sys-tertiary);\\n      }\\n\\n      .mdc-line-ripple::after {\\n        --mdc-filled-text-field-focus-active-indicator-color: var(--mat-sys-tertiary);\\n      }\\n\\n      mat-select {\\n        .mat-mdc-select-value-text .mat-mdc-select-min-line {\\n          color: var(--mat-sys-primary-fixed);\\n          letter-spacing: var(--mat-sys-label-medium-tracking);\\n        }\\n      }\\n    }\\n\\n    mat-select {\\n      .mat-mdc-select-value-text .mat-mdc-select-min-line {\\n        font: var(--mat-sys-label-medium);\\n        letter-spacing: var(--mat-sys-label-medium-tracking);\\n      }\\n    }\\n\\n    &.mat-form-field-disabled {\\n      mat-label {\\n        color: var(--mdc-filled-text-field-disabled-label-text-color);\\n      }\\n    }\\n  }\\n\\n  .options-container {\\n    --mat-select-panel-background-color: var(--mat-sys-on-primary);\\n    --mat-option-selected-state-label-text-color: var(--mat-sys-secondary);\\n    --mat-option-hover-state-layer-color: color-mix(in srgb, var(--mat-sys-on-surface) 4%, transparent);\\n    --mat-select-container-elevation-shadow: 0px 5px 4px 0px rgb(from var(--mat-sys-shadow) r g b / 0.16);\\n    --mat-option-label-text-color: var(--mat-sys-primary-container);\\n    --mat-option-focus-state-layer-color: color-mix(in srgb, var(--mat-sys-on-surface) 4%, transparent);\\n\\n    mat-option.mat-mdc-option {\\n      font: var(--mat-sys-label-large);\\n      margin-bottom: 0.5px;\\n      min-height: 3.5rem;\\n\\n      &:active {\\n        --mat-option-hover-state-layer-color: color-mix(in srgb, var(--mat-sys-on-surface) 8%, transparent);\\n      }\\n\\n      &:focus-visible {\\n        outline: 2px solid var(--mat-sys-tertiary);\\n      }\\n\\n      &.mdc-list-item--selected.mat-mdc-option-active {\\n        --mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-sys-on-tertiary-container);\\n        background-color: color-mix(in srgb, var(--mat-sys-on-tertiary-container) 8%, transparent);\\n      }\\n\\n      &.mat-mdc-option-active {\\n        outline: 1px solid color-mix(in srgb, var(--mat-sys-on-surface) 32%, transparent);\\n      }\\n    }\\n  }\\n}\\n","styleUrl":"./select-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"SnackbarComponent","id":"component-SnackbarComponent-8766ca472d19d28a16082b84e9635c3c550326c77bdbd73a2af5c667444a6467f578fb6ca108847c730a1ac3a0006e5d18d5d75f8f8679f5896a6aac4e96db3c","file":"snackbar/src/lib/snackbar.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-snackbar","styleUrls":[],"styles":[],"templateUrl":["./snackbar.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"data","defaultValue":"inject(MAT_SNACK_BAR_DATA)","deprecated":false,"deprecationMessage":"","type":"SnackbarData","indexKey":"","optional":false,"description":"<p>Injection token for the snackbar data</p>\\n","line":36,"rawdescription":"\\nInjection token for the snackbar data","modifierKind":[124,148]},{"name":"snackbarRef","defaultValue":"inject(MatSnackBarRef)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Reference to the MatSnackbarRef</p>\\n","line":33,"rawdescription":"\\nReference to the MatSnackbarRef","modifierKind":[124,148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"ButtonsModule","type":"module"},{"name":"IconButtonSizeDirective","type":"directive"},{"name":"MatIconModule","type":"module"}],"description":"<p>Snackbar component</p>\\n","rawdescription":"\\nSnackbar component","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from \'@angular/material/snack-bar\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\nimport { IconButtonSizeDirective } from \'@hra-ui/design-system/icon-button\';\\n\\n/** Type for button position */\\nexport type ButtonPosition = \'start\' | \'end\';\\n\\n/** interface for snackbar data */\\nexport interface SnackbarData {\\n  /** Message in the snackbar */\\n  message: string;\\n  /** Action button */\\n  action?: string;\\n  /** Flag to show/hide the close button */\\n  close?: boolean;\\n  /** Position of the action button */\\n  actionButtonPosition?: ButtonPosition;\\n}\\n\\n/** Snackbar component */\\n@Component({\\n  selector: \'hra-snackbar\',\\n  imports: [CommonModule, MatIconModule, ButtonsModule, IconButtonSizeDirective, MatIconModule],\\n  templateUrl: \'./snackbar.component.html\',\\n  styleUrl: \'./snackbar.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SnackbarComponent {\\n  /** Reference to the MatSnackbarRef */\\n  protected readonly snackbarRef = inject(MatSnackBarRef);\\n\\n  /** Injection token for the snackbar data*/\\n  protected readonly data: SnackbarData = inject(MAT_SNACK_BAR_DATA);\\n}\\n","styleUrl":"./snackbar.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<span matSnackbarLabel class=\\"label\\">{{ data.message }}</span>\\n<div style=\\"flex-grow: 1\\"></div>\\n<div class=\\"actions\\">\\n  @if (data.action) {\\n    <span matSnackBarActions [class.position-end]=\\"data.actionButtonPosition === \'end\'\\">\\n      <button\\n        mat-button\\n        disableRipple\\n        hraButtonSize=\\"medium\\"\\n        matSnackBarAction\\n        (click)=\\"snackbarRef.dismissWithAction()\\"\\n      >\\n        {{ data.action }}\\n      </button>\\n    </span>\\n  }\\n  @if (data.close) {\\n    <button mat-icon-button hraIconButtonSize=\\"large\\" (click)=\\"snackbarRef.dismiss()\\" data-testid=\\"close-btn\\">\\n      <mat-icon> close </mat-icon>\\n    </button>\\n  }\\n</div>\\n"},{"name":"SocialMediaButtonComponent","id":"component-SocialMediaButtonComponent-b02ffea8f9352d2b912d3211f28fc9111d4a06f4d124fde2eeaae1f3700c97c83fe6f1e5346a426ea30f898f92235d3b31137b8d4cf97c8d14da5992d836cfa9","file":"buttons/social-media-button/src/lib/social-media-button.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-social-media-button","styleUrls":[],"styles":[],"templateUrl":["./social-media-button.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"id","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Social media to display</p>\\n","line":18,"rawdescription":"\\nSocial media to display","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"data","defaultValue":"computed(() => {\\n    const item = SOCIALS.find(({ id }) => this.id() === id);\\n    if (!item) {\\n      throw new Error(`No social media with id \'${this.id()}\'`);\\n    }\\n\\n    return item;\\n  })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Social media button data</p>\\n","line":27,"rawdescription":"\\nSocial media button data","modifierKind":[124,148]},{"name":"id","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Social media to display</p>\\n","line":18,"rawdescription":"\\nSocial media to display","modifierKind":[148],"required":true},{"name":"size","defaultValue":"input<IconButtonSize>(\'large\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Button size</p>\\n","line":21,"rawdescription":"\\nButton size","modifierKind":[148]},{"name":"variant","defaultValue":"input<IconButtonVariant>(\'dark\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Button variant</p>\\n","line":24,"rawdescription":"\\nButton variant","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"IconButtonModule","type":"module"}],"description":"<p>Social media buttons for HRA apps</p>\\n","rawdescription":"\\n\\nSocial media buttons for HRA apps\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, computed, input } from \'@angular/core\';\\nimport { IconButtonModule, IconButtonSize, IconButtonVariant } from \'@hra-ui/design-system/icon-button\';\\nimport { SocialMediaId } from \'./types/social-media.schema\';\\nimport { SOCIALS } from \'./static-data/parsed\';\\n\\n/**\\n * Social media buttons for HRA apps\\n */\\n@Component({\\n  selector: \'hra-social-media-button\',\\n  imports: [CommonModule, IconButtonModule],\\n  templateUrl: \'./social-media-button.component.html\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SocialMediaButtonComponent {\\n  /** Social media to display */\\n  readonly id = input.required<SocialMediaId>();\\n\\n  /** Button size */\\n  readonly size = input<IconButtonSize>(\'large\');\\n\\n  /** Button variant */\\n  readonly variant = input<IconButtonVariant>(\'dark\');\\n\\n  /** Social media button data */\\n  protected readonly data = computed(() => {\\n    const item = SOCIALS.find(({ id }) => this.id() === id);\\n    if (!item) {\\n      throw new Error(`No social media with id \'${this.id()}\'`);\\n    }\\n\\n    return item;\\n  });\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<a\\n  mat-icon-button\\n  [hraIconButtonVariant]=\\"variant()\\"\\n  [hraIconButtonSize]=\\"size()\\"\\n  [href]=\\"data().link\\"\\n  target=\\"_blank\\"\\n  rel=\\"noopener noreferrer\\"\\n>\\n  @if (data().isFontIcon) {\\n    <mat-icon [fontIcon]=\\"data().icon\\"></mat-icon>\\n  } @else {\\n    <mat-icon [svgIcon]=\\"data().icon\\"></mat-icon>\\n  }\\n</a>\\n"},{"name":"SoftwareStatusIndicatorComponent","id":"component-SoftwareStatusIndicatorComponent-ffd96787be9d7856104f834160ecafeb5072be68b23c0e7c7a25e12a82d4e7a9605392ce1ebaf89ba69b635a7568617e0c1c7f83792920f31891b64310c0954f","file":"software-status-indicator/src/lib/software-status-indicator.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-software-status-indicator","styleUrls":[],"styles":[],"templateUrl":["./software-status-indicator.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"status","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current status of app</p>\\n","line":24,"rawdescription":"\\nCurrent status of app","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"size","defaultValue":"input<SoftwareStatusSize>(\'medium\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of indicator</p>\\n","line":27,"rawdescription":"\\nSize of indicator","modifierKind":[148]},{"name":"status","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Current status of app</p>\\n","line":24,"rawdescription":"\\nCurrent status of app","modifierKind":[148],"required":true},{"name":"tooltips","defaultValue":"{\\n    Preview: \'Earliest development stage: Core features are under construction and evolving.\',\\n    Alpha: \'Early testing stage: Features may change. Expect bugs and incomplete functionality.\',\\n    Beta: \'Near-final stage: Most features are ready, fewer bugs, and more feedback is needed.\',\\n  }","deprecated":false,"deprecationMessage":"","type":"Record<SoftwareStatus | string>","indexKey":"","optional":false,"description":"<p>Tooltips corresponding to software status</p>\\n","line":30,"rawdescription":"\\nTooltips corresponding to software status","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"},{"name":"MicroTooltipDirective","type":"directive"},{"name":"SoftwareStatusSizeDirective","type":"directive"}],"description":"<p>Indicator to display software status in nav header</p>\\n","rawdescription":"\\n\\nIndicator to display software status in nav header\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { MicroTooltipDirective } from \'@hra-ui/design-system/micro-tooltip\';\\nimport { SoftwareStatusSizeDirective } from \'./software-status-indicator-size.directive\';\\n\\n/** Software status options */\\nexport type SoftwareStatus = \'Preview\' | \'Alpha\' | \'Beta\';\\n\\n/** Software status size options */\\nexport type SoftwareStatusSize = \'small\' | \'medium\' | \'large\';\\n\\n/**\\n * Indicator to display software status in nav header\\n */\\n@Component({\\n  selector: \'hra-software-status-indicator\',\\n  imports: [CommonModule, MicroTooltipDirective, SoftwareStatusSizeDirective],\\n  templateUrl: \'./software-status-indicator.component.html\',\\n  styleUrl: \'./software-status-indicator.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SoftwareStatusIndicatorComponent {\\n  /** Current status of app */\\n  readonly status = input.required<SoftwareStatus>();\\n\\n  /** Size of indicator */\\n  readonly size = input<SoftwareStatusSize>(\'medium\');\\n\\n  /** Tooltips corresponding to software status */\\n  readonly tooltips: Record<SoftwareStatus, string> = {\\n    Preview: \'Earliest development stage: Core features are under construction and evolving.\',\\n    Alpha: \'Early testing stage: Features may change. Expect bugs and incomplete functionality.\',\\n    Beta: \'Near-final stage: Most features are ready, fewer bugs, and more feedback is needed.\',\\n  };\\n}\\n","styleUrl":"./software-status-indicator.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<div\\n  class=\\"app-description\\"\\n  [hraSoftwareStatusSize]=\\"size()\\"\\n  [hraMicroTooltip]=\\"tooltips[status()]\\"\\n  hraMicroTooltipSize=\\"small\\"\\n>\\n  {{ status() }}\\n</div>\\n"},{"name":"StepIndicatorComponent","id":"component-StepIndicatorComponent-c3fd0426a16869f76450b109415bf25717d4fa40652d15ddc42f4025ff1b7d5674c4f5829e216d14e1cba08a2aca688ad35d455a09af940bf26cdbbb69a21244","file":"step-indicator/src/lib/step-indicator.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-step-indicator","styleUrls":[],"styles":[],"templateUrl":["./step-indicator.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"value","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Step value</p>\\n","line":16,"rawdescription":"\\nStep value","required":true}],"outputsClass":[],"propertiesClass":[{"name":"value","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Step value</p>\\n","line":16,"rawdescription":"\\nStep value","required":true}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Step indicator for module components that have multiple steps</p>\\n","rawdescription":"\\n\\nStep indicator for module components that have multiple steps\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\n\\n/**\\n * Step indicator for module components that have multiple steps\\n */\\n@Component({\\n  selector: \'hra-step-indicator\',\\n  imports: [CommonModule],\\n  templateUrl: \'./step-indicator.component.html\',\\n  styleUrl: \'./step-indicator.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class StepIndicatorComponent {\\n  /** Step value */\\n  value = input.required<number>();\\n}\\n","styleUrl":"./step-indicator.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<span class=\\"step-number\\">{{ value() }}</span>\\n"},{"name":"TableDemoComponent","id":"component-TableDemoComponent-f712bbba5ae4b005f32490419bc0d30512fa6fe7689311634a0a5ae7682e9e3cb8575e7e13c2e6d0ccd9fdc4eb2d82efe36245f2c07dd246342622a6b82dd8bc","file":"table/src/lib/table-demo/table-demo.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-table-demo","styleUrls":[],"styles":[],"templateUrl":["table-demo.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"columns","defaultValue":"[\'name\', \'value\']","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":false,"description":"<p>Columns in table</p>\\n","line":27,"rawdescription":"\\nColumns in table","modifierKind":[148]},{"name":"data","defaultValue":"input<TableDemoData[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Unsorted data</p>\\n","line":24,"rawdescription":"\\nUnsorted data","modifierKind":[148]},{"name":"dataSource","defaultValue":"new MatTableDataSource<TableDemoData>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Table data source</p>\\n","line":33,"rawdescription":"\\nTable data source","modifierKind":[148]},{"name":"sort","defaultValue":"viewChild.required(MatSort)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Mat sort element</p>\\n","line":30,"rawdescription":"\\nMat sort element","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"MatTableModule","type":"module"},{"name":"MatSortModule","type":"module"},{"name":"CommonModule","type":"module"}],"description":"<p>Angular Material table with with sort feature</p>\\n","rawdescription":"\\n\\nAngular Material table with with sort feature\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { Component, effect, input, viewChild } from \'@angular/core\';\\nimport { MatSort, MatSortModule } from \'@angular/material/sort\';\\nimport { MatTableDataSource, MatTableModule } from \'@angular/material/table\';\\n\\n/** Type for row data */\\nexport interface TableDemoData {\\n  /** Name of item */\\n  name: string;\\n  /** Value of item*/\\n  value: number;\\n}\\n\\n/**\\n * Angular Material table with with sort feature\\n */\\n@Component({\\n  selector: \'hra-table-demo\',\\n  templateUrl: \'table-demo.component.html\',\\n  imports: [MatTableModule, MatSortModule, CommonModule],\\n})\\nexport class TableDemoComponent {\\n  /** Unsorted data */\\n  readonly data = input<TableDemoData[]>([]);\\n\\n  /** Columns in table */\\n  readonly columns: string[] = [\'name\', \'value\'];\\n\\n  /** Mat sort element */\\n  readonly sort = viewChild.required(MatSort);\\n\\n  /** Table data source */\\n  readonly dataSource = new MatTableDataSource<TableDemoData>([]);\\n\\n  /** Sort data on load */\\n  constructor() {\\n    effect(() => {\\n      this.dataSource.data = this.data();\\n      this.dataSource.sort = this.sort();\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"<p>Sort data on load</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":33,"rawdescription":"\\nSort data on load"},"extends":[],"templateData":"<table mat-table [dataSource]=\\"dataSource\\" matSort aria-label=\\"Table with sort function\\">\\n  <ng-container matColumnDef=\\"name\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\\"Sort by name\\">Name</th>\\n    <td mat-cell *matCellDef=\\"let element\\">{{ element[\'name\'] }}</td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\"value\\">\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\\"Sort by value\\">Value</th>\\n    <td mat-cell *matCellDef=\\"let element\\">{{ element[\'value\'] }}</td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\"columns\\"></tr>\\n  <tr mat-row *matRowDef=\\"let row; columns: columns\\"></tr>\\n</table>\\n"},{"name":"TableStylesComponent","id":"component-TableStylesComponent-56ed26ef392a89292a2c2262e8c73b41a1eef1070da8a3db99724c9e4389293340dce99c06e7ef40f3cb6022b8615f862ad28195e72697d5eaedc23d382740e5","file":"table/src/lib/table-styles/table-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-table-styles","styleUrls":["./table-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Applies table styles globally</p>\\n","rawdescription":"\\n\\nApplies table styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/**\\n * Applies table styles globally\\n */\\n@Component({\\n  selector: \'hra-table-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./table-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TableStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  table[matSort] {\\n    --mat-sort-arrow-color: var(--mat-sys-secondary);\\n    --mat-table-background-color: var(--mat-sys-surface-container-low);\\n    --mat-table-header-container-height: 2rem;\\n    --mat-table-row-item-container-height: 2rem;\\n\\n    th,\\n    tr > td {\\n      padding: 0 0.5rem;\\n      font: var(--mat-sys-label-medium);\\n      letter-spacing: var(--mat-sys-label-medium-tracking);\\n    }\\n\\n    th {\\n      color: var(--mat-sys-secondary);\\n      line-height: normal;\\n    }\\n\\n    tr {\\n      color: black;\\n    }\\n\\n    .mat-sort-header-container {\\n      height: 1.5rem;\\n      border-bottom: 0.0625rem solid transparent;\\n      max-width: 4.375rem;\\n\\n      &:focus-visible {\\n        border-color: var(--mat-sys-secondary);\\n      }\\n\\n      .mat-sort-header-arrow {\\n        margin-right: 0.375rem;\\n\\n        .mat-sort-header-stem {\\n          border-radius: 0.25rem;\\n          height: 0.75rem;\\n        }\\n\\n        .mat-sort-header-pointer-left,\\n        .mat-sort-header-pointer-right {\\n          width: 0.4375rem;\\n        }\\n\\n        .mat-sort-header-pointer-left {\\n          left: -0.0625rem;\\n          border-radius: 0.25rem 0 0 0.25rem;\\n        }\\n\\n        .mat-sort-header-pointer-right {\\n          right: -0.0625rem;\\n          border-radius: 0 0.25rem 0.25rem 0;\\n        }\\n\\n        .mat-sort-header-pointer-middle {\\n          border-radius: 0.25rem;\\n        }\\n      }\\n    }\\n  }\\n}\\n","styleUrl":"./table-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"TextHyperlinkGlobalStylesComponent","id":"component-TextHyperlinkGlobalStylesComponent-f215f1d34a89e13dbb13eabe6019e87af07c908bdd1288070bea07b8d10571167d062f33b32d64dc8339160e5ee377ff61a0a73ed58f41c09cec818fd42c2b6c","file":"buttons/text-hyperlink/src/lib/global-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-text-hyperlink-global-styles","styleUrls":["./global-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Global styles for text hyperlinks</p>\\n","rawdescription":"\\nGlobal styles for text hyperlinks","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/** Global styles for text hyperlinks */\\n@Component({\\n  selector: \'hra-text-hyperlink-global-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./global-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TextHyperlinkGlobalStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  a:not(.hra-text-hyperlink) {\\n    text-decoration: none;\\n  }\\n\\n  a.hra-text-hyperlink {\\n    text-decoration: none;\\n\\n    &:link,\\n    &:link mat-icon {\\n      color: var(--mat-sys-on-tertiary-fixed);\\n    }\\n\\n    &:visited,\\n    &:visited mat-icon {\\n      color: var(--mat-sys-tertiary-fixed);\\n    }\\n\\n    &:focus-visible,\\n    &:hover,\\n    &:active {\\n      text-decoration: underline solid currentColor 0.0625rem;\\n      text-underline-offset: 0.125rem;\\n    }\\n\\n    &:focus-visible {\\n      color: var(--mat-sys-secondary);\\n      outline: 0.125rem solid var(--mat-sys-tertiary);\\n      border-radius: 0.25rem;\\n\\n      & mat-icon {\\n        color: var(--mat-sys-secondary);\\n      }\\n    }\\n\\n    &:hover,\\n    &:hover mat-icon {\\n      color: var(--mat-sys-on-tertiary-fixed);\\n    }\\n\\n    &:active,\\n    &:active mat-icon {\\n      color: var(--mat-sys-on-tertiary-fixed-variant);\\n    }\\n  }\\n}\\n","styleUrl":"./global-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"TooltipCardComponent","id":"component-TooltipCardComponent-7193ef52483d069fc6a41fa3e1edfc82f9c2d8ab65ff0d1d72fc22d8f1ad27f4d7618c9475d46b7ed4e4d7d6680c1750ed780f63a83b9d2b4506ef53e5ca33c6","file":"tooltip-card/src/lib/tooltip-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"host":{},"inputs":[],"outputs":[],"providers":[],"selector":"hra-tooltip-card","styleUrls":[],"styles":[],"templateUrl":["./tooltip-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"content","defaultValue":"input.required<TooltipContent[]>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Input for the card</p>\\n","line":27,"rawdescription":"\\nInput for the card","modifierKind":[148]},{"name":"small","defaultValue":"input(false, { transform: booleanAttribute })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Flag to decide whether the card is small</p>\\n","line":30,"rawdescription":"\\nFlag to decide whether the card is small","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"CommonModule","type":"module"}],"description":"<p>Tooltip Card component</p>\\n","rawdescription":"\\n\\nTooltip Card component\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { booleanAttribute, ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\n\\n/** Interface for Tooltip Card Content */\\nexport interface TooltipContent {\\n  /** Title of the card */\\n  title?: string;\\n  /** Description of the card */\\n  description: string;\\n}\\n\\n/**\\n * Tooltip Card component\\n */\\n@Component({\\n  selector: \'hra-tooltip-card\',\\n  imports: [CommonModule],\\n  templateUrl: \'./tooltip-card.component.html\',\\n  styleUrl: \'./tooltip-card.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  host: {\\n    \'[class.small]\': \'small()\',\\n  },\\n})\\nexport class TooltipCardComponent {\\n  /** Input for the card */\\n  readonly content = input.required<TooltipContent[]>();\\n\\n  /** Flag to decide whether the card is small */\\n  readonly small = input(false, { transform: booleanAttribute });\\n}\\n","styleUrl":"./tooltip-card.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"@for (item of content(); track item) {\\n  <section class=\\"section\\">\\n    @if (item.title) {\\n      <h4 class=\\"title\\">{{ item.title }}</h4>\\n    }\\n    <p class=\\"description\\">{{ item.description }}</p>\\n  </section>\\n}\\n"},{"name":"TreeDemoComponent","id":"component-TreeDemoComponent-f6e1ecb463b0582e37ef566a3316d1f3a3901aa9ae6518426712986e465c9b3d96c4987fec8f541fa20e1654be5108d4ab5ff1deaeb87166a337b4bf05714b50","file":"tree/src/lib/tree-demo/tree-demo.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-tree-demo","styleUrls":[],"styles":[],"templateUrl":["tree-demo.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"childrenAccessor","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Gets the children of a node</p>\\n","line":53,"rawdescription":"\\nGets the children of a node"},{"name":"dataSource","defaultValue":"new ArrayDataSource<NestedNode>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Data source</p>\\n","line":47,"rawdescription":"\\nData source"},{"name":"hasChild","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>If the node has a child</p>\\n","line":56,"rawdescription":"\\nIf the node has a child"},{"name":"padding","defaultValue":"computed(() => PADDING[this.size()])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Padding indents</p>\\n","line":44,"rawdescription":"\\nPadding indents","modifierKind":[124,148]},{"name":"selectedNode","deprecated":false,"deprecationMessage":"","type":"NestedNode","indexKey":"","optional":true,"description":"<p>Current selected node</p>\\n","line":50,"rawdescription":"\\nCurrent selected node"},{"name":"size","defaultValue":"input<TreeSize>(\'medium\')","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Size of tree to use</p>\\n","line":41,"rawdescription":"\\nSize of tree to use","modifierKind":[148]},{"name":"tree","deprecated":false,"deprecationMessage":"","type":"MatTree<NestedNode>","indexKey":"","optional":false,"description":"<p>ViewChild for tree component</p>\\n","line":35,"rawdescription":"\\nViewChild for tree component","decorators":[{"name":"ViewChild","stringifiedArguments":"MatTree"}],"modifierKind":[170]},{"name":"treeData","defaultValue":"input<NestedNode[]>([])","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Tree node data</p>\\n","line":38,"rawdescription":"\\nTree node data","modifierKind":[148]}],"methodsClass":[{"name":"shouldRender","args":[{"name":"node","type":"NestedNode","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nRenders node if it is a root node or if all of its ancestors are expanded","description":"<p>Renders node if it is a root node or if all of its ancestors are expanded</p>\\n","jsdoctags":[{"name":"node","type":"NestedNode","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"MatTreeModule","type":"module"},{"name":"MatButtonModule","type":"module"},{"name":"MatIconModule","type":"module"},{"name":"TreeSizeDirective","type":"directive"}],"description":"<p>Angular Material nested tree component with HRA styles</p>\\n","rawdescription":"\\n\\nAngular Material nested tree component with HRA styles\\n","type":"component","sourceCode":"import { ArrayDataSource } from \'@angular/cdk/collections\';\\nimport { AfterViewInit, ChangeDetectionStrategy, Component, computed, input, ViewChild } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTree, MatTreeModule } from \'@angular/material/tree\';\\n\\nimport { TreeSize, TreeSizeDirective } from \'../tree-size/tree-size.directive\';\\n\\n/** Nested tree node data */\\nexport interface NestedNode {\\n  /** Name of node */\\n  name: string;\\n  /** List of child nodes */\\n  children?: NestedNode[];\\n}\\n\\n/** Padding indents for each tree size (px) */\\nconst PADDING: Record<TreeSize, number> = {\\n  small: 32,\\n  medium: 36,\\n  large: 40,\\n};\\n\\n/**\\n * Angular Material nested tree component with HRA styles\\n */\\n@Component({\\n  selector: \'hra-tree-demo\',\\n  templateUrl: \'tree-demo.component.html\',\\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, TreeSizeDirective],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TreeDemoComponent implements AfterViewInit {\\n  /** ViewChild for tree component */\\n  @ViewChild(MatTree) tree!: MatTree<NestedNode>;\\n\\n  /** Tree node data */\\n  readonly treeData = input<NestedNode[]>([]);\\n\\n  /** Size of tree to use */\\n  readonly size = input<TreeSize>(\'medium\');\\n\\n  /** Padding indents */\\n  protected readonly padding = computed(() => PADDING[this.size()]);\\n\\n  /** Data source */\\n  dataSource = new ArrayDataSource<NestedNode>([]);\\n\\n  /** Current selected node */\\n  selectedNode?: NestedNode;\\n\\n  /** Gets the children of a node */\\n  childrenAccessor = (dataNode: NestedNode) => dataNode.children ?? [];\\n\\n  /** If the node has a child */\\n  hasChild = (_: number, node: NestedNode) => !!node.children?.length;\\n\\n  /** Sets dataSource data after view init */\\n  ngAfterViewInit() {\\n    this.dataSource = new ArrayDataSource<NestedNode>(this.treeData());\\n  }\\n\\n  /** Renders node if it is a root node or if all of its ancestors are expanded */\\n  shouldRender(node: NestedNode): boolean {\\n    const parent = this.getParentNode(node);\\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\\n  }\\n\\n  /** Gets parent of a node */\\n  private getParentNode(node: NestedNode): NestedNode | undefined {\\n    for (const parent of this.treeData()) {\\n      if (parent.children?.includes(node)) {\\n        return parent;\\n      }\\n    }\\n    return undefined;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"implements":["AfterViewInit"],"templateData":"<mat-tree #tree [dataSource]=\\"dataSource\\" [childrenAccessor]=\\"childrenAccessor\\" [hraTreeSize]=\\"size()\\">\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node\\"\\n    matTreeNodePadding\\n    [matTreeNodePaddingIndent]=\\"padding()\\"\\n    [style.display]=\\"shouldRender(node) ? \'flex\' : \'none\'\\"\\n    [isDisabled]=\\"!shouldRender(node)\\"\\n    (activation)=\\"selectedNode = node\\"\\n    (click)=\\"selectedNode = node\\"\\n  >\\n    <div class=\\"node-content leaf\\" [class.selected]=\\"selectedNode === node\\">\\n      {{ node.name }}\\n    </div>\\n  </mat-tree-node>\\n\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node; when: hasChild\\"\\n    matTreeNodeToggle\\n    matTreeNodePadding\\n    [matTreeNodePaddingIndent]=\\"padding()\\"\\n    [cdkTreeNodeTypeaheadLabel]=\\"node.name\\"\\n    [style.display]=\\"shouldRender(node) ? \'flex\' : \'none\'\\"\\n    [isDisabled]=\\"!shouldRender(node)\\"\\n    [isExpandable]=\\"true\\"\\n  >\\n    <div class=\\"node-content\\">\\n      <button mat-icon-button matTreeNodeToggle disableRipple [attr.aria-label]=\\"\'Toggle \' + node.name\\">\\n        <mat-icon class=\\"mat-icon-rtl-mirror\\">\\n          {{ tree.isExpanded(node) ? \'expand_more\' : \'expand_less\' }}\\n        </mat-icon>\\n      </button>\\n      {{ node.name }}\\n    </div>\\n  </mat-tree-node>\\n</mat-tree>\\n"},{"name":"TreeStylesComponent","id":"component-TreeStylesComponent-86a7e005716c46fb54dc207110b98a26f36bafca306c4af360e1e5b0259ad8f2e2e2be501a43adddcd38779782ed1c8d48264b6de88c546fdd7d4a6cc151cdc3","file":"tree/src/lib/tree-styles/tree-styles.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-tree-styles","styleUrls":["./tree-styles.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Applies mat tree styles globally</p>\\n","rawdescription":"\\n\\nApplies mat tree styles globally\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, ViewEncapsulation } from \'@angular/core\';\\n\\n/**\\n * Applies mat tree styles globally\\n */\\n@Component({\\n  selector: \'hra-tree-styles\',\\n  standalone: true,\\n  template: \'\',\\n  styleUrls: [\'./tree-styles.component.scss\'],\\n  encapsulation: ViewEncapsulation.None,\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TreeStylesComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'../../../../styles/utils\';\\n\\n@include utils.global-styles() {\\n  mat-tree {\\n    --mat-tree-container-background-color: var(--mat-sys-on-primary);\\n  }\\n\\n  mat-tree-node {\\n    --mat-tree-node-text-font: var(--mat-sys-label-medium-font);\\n    --mat-tree-node-text-weight: var(--mat-sys-label-medium-weight);\\n    --mat-tree-node-text-color: var(--mat-sys-secondary);\\n\\n    letter-spacing: var(--mat-sys-label-medium-tracking);\\n    cursor: pointer;\\n    user-select: none;\\n    outline: none;\\n\\n    &:focus-visible .node-content {\\n      border-color: var(--mat-sys-tertiary);\\n    }\\n  }\\n\\n  .node-content {\\n    button {\\n      --mat-icon-button-hover-state-layer-opacity: 0;\\n      --mat-icon-button-pressed-state-layer-opacity: 0;\\n    }\\n\\n    display: flex;\\n    height: var(--mat-tree-node-min-height);\\n    line-height: var(--mat-tree-node-min-height);\\n    border-radius: 0.25rem;\\n    width: 100%;\\n    border-width: 2px;\\n    border-style: solid;\\n    border-color: transparent;\\n\\n    &.leaf {\\n      padding-left: 0.5rem;\\n    }\\n\\n    &:hover {\\n      background: rgb(from var(--mat-sys-secondary) r g b / 0.08);\\n    }\\n\\n    &:active {\\n      background: rgb(from var(--mat-sys-secondary) r g b / 0.16);\\n      border-color: transparent;\\n    }\\n\\n    &.selected {\\n      background: rgb(from var(--mat-sys-tertiary) r g b / 0.2);\\n    }\\n  }\\n}\\n","styleUrl":"./tree-styles.component.scss"}],"stylesData":"","extends":[]},{"name":"WebComponentCardComponent","id":"component-WebComponentCardComponent-18ace894449bbbf6e8cd073c2dcff7ad95a3216fe230a00faeacda2a6969c3c78f3bec37cfee33095e196767c970240c78687d87d9bbca6d9a2e6838934c9c3c","file":"web-component-card/src/lib/web-component-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-web-component-card","styleUrls":[],"styles":[],"templateUrl":["./web-component-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Description</p>\\n","line":25,"rawdescription":"\\nDescription","modifierKind":[148],"required":true},{"name":"imageUrl","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Image url</p>\\n","line":19,"rawdescription":"\\nImage url","modifierKind":[148],"required":true},{"name":"productTitle","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Product title</p>\\n","line":21,"rawdescription":"\\nProduct title","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Description</p>\\n","line":25,"rawdescription":"\\nDescription","modifierKind":[148],"required":true},{"name":"imageUrl","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Image url</p>\\n","line":19,"rawdescription":"\\nImage url","modifierKind":[148],"required":true},{"name":"productTitle","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Product title</p>\\n","line":21,"rawdescription":"\\nProduct title","modifierKind":[148],"required":true},{"name":"webComponentName","defaultValue":"input<string | undefined>()","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Web Component Name</p>\\n","line":23,"rawdescription":"\\nWeb Component Name","modifierKind":[148]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"ButtonsModule","type":"module"},{"name":"CommonModule","type":"module"}],"description":"<p>Component representing a web component card.\\nDisplays an image, product title, web component name, and description.</p>\\n","rawdescription":"\\n\\nComponent representing a web component card.\\nDisplays an image, product title, web component name, and description.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, input } from \'@angular/core\';\\nimport { ButtonsModule } from \'@hra-ui/design-system/buttons\';\\n\\n/**\\n * Component representing a web component card.\\n * Displays an image, product title, web component name, and description.\\n */\\n\\n@Component({\\n  selector: \'hra-web-component-card\',\\n  imports: [ButtonsModule, CommonModule],\\n  templateUrl: \'./web-component-card.component.html\',\\n  styleUrl: \'./web-component-card.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WebComponentCardComponent {\\n  /** Image url */\\n  readonly imageUrl = input.required<string>();\\n  /** Product title */\\n  readonly productTitle = input.required<string>();\\n  /** Web Component Name */\\n  readonly webComponentName = input<string | undefined>();\\n  /** Description */\\n  readonly description = input.required<string>();\\n}\\n","styleUrl":"./web-component-card.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<img alt=\\"\\" [src]=\\"imageUrl()\\" />\\n<div class=\\"card-content\\">\\n  @if (webComponentName()) {\\n    <h2 class=\\"product-title\\">{{ productTitle() }}</h2>\\n    <h1 class=\\"web-component-name\\">{{ webComponentName() }}</h1>\\n  } @else {\\n    <h2 class=\\"product-title\\">{{ productTitle() }}</h2>\\n  }\\n  <span class=\\"description\\">{{ description() }}</span>\\n</div>\\n\\n<div class=\\"card-footer\\">\\n  <button mat-button hraPrimaryButton hraButtonSize=\\"medium\\">Use App</button>\\n  <button mat-flat-button hraPrimaryButton hraButtonSize=\\"medium\\">Embed</button>\\n</div>\\n"},{"name":"WorkflowCardActionsComponent","id":"component-WorkflowCardActionsComponent-56c68e59c6fd4b015c806b786fed8f1831c0040456756b51181966bdbe627b2a3dc835245da6bc22af1f17622fe78bcaa5b92d6316679039aad7128e657173fb","file":"workflow-card/src/lib/workflow-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-workflow-card-actions","styleUrls":[],"styles":[":host { display: flex; gap: 0.75rem; }"],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Actions placed next to the card title</p>\\n","rawdescription":"\\nActions placed next to the card title","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, input, numberAttribute } from \'@angular/core\';\\nimport { MatProgressBarModule } from \'@angular/material/progress-bar\';\\nimport { StepIndicatorComponent } from \'@hra-ui/design-system/step-indicator\';\\n\\n/** Actions placed next to the card title */\\n@Component({\\n  selector: \'hra-workflow-card-actions\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  styles: \':host { display: flex; gap: 0.75rem; }\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardActionsComponent {}\\n\\n/** Additional content placed on very right side of the header */\\n@Component({\\n  selector: \'hra-workflow-card-extra\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  styles: \':host { display: flex; gap: 0.75rem; }\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardExtraComponent {}\\n\\n/**\\n * Component that appears when users are completing a workflow process\\n */\\n@Component({\\n  selector: \'hra-workflow-card\',\\n  imports: [MatProgressBarModule, StepIndicatorComponent],\\n  templateUrl: \'./workflow-card.component.html\',\\n  styleUrl: \'./workflow-card.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardComponent {\\n  /** Card title */\\n  readonly tagline = input.required<string>();\\n  /** Step indicator value */\\n  readonly step = input(undefined, { transform: numberAttribute });\\n  /** Load progress */\\n  readonly progress = input<number | undefined>(undefined);\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":":host { display: flex; gap: 0.75rem; }\\n","extends":[]},{"name":"WorkflowCardComponent","id":"component-WorkflowCardComponent-56c68e59c6fd4b015c806b786fed8f1831c0040456756b51181966bdbe627b2a3dc835245da6bc22af1f17622fe78bcaa5b92d6316679039aad7128e657173fb","file":"workflow-card/src/lib/workflow-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-workflow-card","styleUrls":[],"styles":[],"templateUrl":["./workflow-card.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Card title</p>\\n","line":37,"rawdescription":"\\nCard title","modifierKind":[148],"required":true}],"outputsClass":[],"propertiesClass":[{"name":"progress","defaultValue":"input<number | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Load progress</p>\\n","line":41,"rawdescription":"\\nLoad progress","modifierKind":[148]},{"name":"step","defaultValue":"input(undefined, { transform: numberAttribute })","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Step indicator value</p>\\n","line":39,"rawdescription":"\\nStep indicator value","modifierKind":[148]},{"name":"tagline","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Card title</p>\\n","line":37,"rawdescription":"\\nCard title","modifierKind":[148],"required":true}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[{"name":"MatProgressBarModule","type":"module"},{"name":"StepIndicatorComponent","type":"component"}],"description":"<p>Component that appears when users are completing a workflow process</p>\\n","rawdescription":"\\n\\nComponent that appears when users are completing a workflow process\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, input, numberAttribute } from \'@angular/core\';\\nimport { MatProgressBarModule } from \'@angular/material/progress-bar\';\\nimport { StepIndicatorComponent } from \'@hra-ui/design-system/step-indicator\';\\n\\n/** Actions placed next to the card title */\\n@Component({\\n  selector: \'hra-workflow-card-actions\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  styles: \':host { display: flex; gap: 0.75rem; }\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardActionsComponent {}\\n\\n/** Additional content placed on very right side of the header */\\n@Component({\\n  selector: \'hra-workflow-card-extra\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  styles: \':host { display: flex; gap: 0.75rem; }\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardExtraComponent {}\\n\\n/**\\n * Component that appears when users are completing a workflow process\\n */\\n@Component({\\n  selector: \'hra-workflow-card\',\\n  imports: [MatProgressBarModule, StepIndicatorComponent],\\n  templateUrl: \'./workflow-card.component.html\',\\n  styleUrl: \'./workflow-card.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardComponent {\\n  /** Card title */\\n  readonly tagline = input.required<string>();\\n  /** Step indicator value */\\n  readonly step = input(undefined, { transform: numberAttribute });\\n  /** Load progress */\\n  readonly progress = input<number | undefined>(undefined);\\n}\\n","styleUrl":"./workflow-card.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<h2 class=\\"header\\">\\n  @let stepValue = step();\\n  @if (stepValue !== undefined) {\\n    <hra-step-indicator [value]=\\"stepValue\\"> </hra-step-indicator>\\n  }\\n\\n  <span>{{ tagline() }}</span>\\n  <ng-content select=\\"hra-workflow-card-actions\\"> </ng-content>\\n\\n  <div class=\\"filler\\"></div>\\n  <ng-content select=\\"hra-workflow-card-extra\\"> </ng-content>\\n</h2>\\n\\n<div class=\\"content\\">\\n  <ng-content></ng-content>\\n</div>\\n\\n@let progressValue = progress();\\n@if (progressValue !== undefined) {\\n  <mat-progress-bar class=\\"progress\\" mode=\\"determinate\\" [value]=\\"100 * progressValue\\"> </mat-progress-bar>\\n}\\n"},{"name":"WorkflowCardExtraComponent","id":"component-WorkflowCardExtraComponent-56c68e59c6fd4b015c806b786fed8f1831c0040456756b51181966bdbe627b2a3dc835245da6bc22af1f17622fe78bcaa5b92d6316679039aad7128e657173fb","file":"workflow-card/src/lib/workflow-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-workflow-card-extra","styleUrls":[],"styles":[":host { display: flex; gap: 0.75rem; }"],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[],"description":"<p>Additional content placed on very right side of the header</p>\\n","rawdescription":"\\nAdditional content placed on very right side of the header","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, input, numberAttribute } from \'@angular/core\';\\nimport { MatProgressBarModule } from \'@angular/material/progress-bar\';\\nimport { StepIndicatorComponent } from \'@hra-ui/design-system/step-indicator\';\\n\\n/** Actions placed next to the card title */\\n@Component({\\n  selector: \'hra-workflow-card-actions\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  styles: \':host { display: flex; gap: 0.75rem; }\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardActionsComponent {}\\n\\n/** Additional content placed on very right side of the header */\\n@Component({\\n  selector: \'hra-workflow-card-extra\',\\n  standalone: true,\\n  template: \'<ng-content></ng-content>\',\\n  styles: \':host { display: flex; gap: 0.75rem; }\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardExtraComponent {}\\n\\n/**\\n * Component that appears when users are completing a workflow process\\n */\\n@Component({\\n  selector: \'hra-workflow-card\',\\n  imports: [MatProgressBarModule, StepIndicatorComponent],\\n  templateUrl: \'./workflow-card.component.html\',\\n  styleUrl: \'./workflow-card.component.scss\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class WorkflowCardComponent {\\n  /** Card title */\\n  readonly tagline = input.required<string>();\\n  /** Step indicator value */\\n  readonly step = input(undefined, { transform: numberAttribute });\\n  /** Load progress */\\n  readonly progress = input<number | undefined>(undefined);\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":":host { display: flex; gap: 0.75rem; }\\n","extends":[]}],"modules":[{"name":"BrandModule","id":"module-BrandModule-361ccf56811ca05e6706af49ba3a0367edcdff99f4608c226a3e0957bf1c2931d404c35a2572e04b2fc4343f85bf4bcbffc945a23242d665149cf8c9d2ee37e8","description":"<p>Exports all brand components, modules, etc.</p>\\n","deprecationMessage":"","deprecated":false,"file":"brand/src/lib/brand.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { BrandLogoComponent } from \'@hra-ui/design-system/brand/logo\';\\nimport { BrandMarkComponent } from \'@hra-ui/design-system/brand/mark\';\\n\\n/** All sub library components, module, etc. */\\nconst REEXPORTS = [BrandLogoComponent, BrandMarkComponent];\\n\\n/** Exports all brand components, modules, etc. */\\n@NgModule({\\n  imports: REEXPORTS,\\n  exports: REEXPORTS,\\n})\\nexport class BrandModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"BrandLogoComponent"},{"name":"BrandMarkComponent"}]},{"type":"exports","elements":[{"name":"BrandLogoComponent"},{"name":"BrandMarkComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"ButtonsModule","id":"module-ButtonsModule-ea452ed24f55b877753066ad43cd21d4a6dcd6f29687bac504d45be0773516c05ffa2d577499fa4ceff8326de2227b5bf721407b4afa84bede3a5911b338df1a","description":"<p>Packages up subpackage angular exports for easier use</p>\\n","deprecationMessage":"","deprecated":false,"file":"buttons/src/lib/buttons.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatButtonToggleModule } from \'@angular/material/button-toggle\';\\nimport { AppNavButtonComponent } from \'@hra-ui/design-system/buttons/app-nav-button\';\\nimport { BreadcrumbsComponent } from \'@hra-ui/design-system/buttons/breadcrumbs\';\\nimport {\\n  ButtonSizeDirective,\\n  ButtonVariantDirective,\\n  CtaButtonDirective,\\n  PrimaryButtonVariantDirective,\\n  SecondaryButtonVariantDirective,\\n} from \'@hra-ui/design-system/buttons/button\';\\nimport { NavigationCategoryToggleComponent } from \'@hra-ui/design-system/buttons/navigation-category-toggle\';\\nimport { SocialMediaButtonComponent } from \'@hra-ui/design-system/buttons/social-media-button\';\\nimport { TextHyperlinkDirective } from \'@hra-ui/design-system/buttons/text-hyperlink\';\\nimport { ButtonToggleSizeDirective } from \'@hra-ui/design-system/buttons/button-toggle\';\\n\\n/** All re-exported modules, components, directives, etc. */\\nconst REEXPORTS = [\\n  MatButtonModule,\\n  MatButtonToggleModule,\\n\\n  AppNavButtonComponent,\\n  BreadcrumbsComponent,\\n  ButtonSizeDirective,\\n  ButtonToggleSizeDirective,\\n  ButtonVariantDirective,\\n  CtaButtonDirective,\\n  NavigationCategoryToggleComponent,\\n  PrimaryButtonVariantDirective,\\n  SecondaryButtonVariantDirective,\\n  SocialMediaButtonComponent,\\n  TextHyperlinkDirective,\\n];\\n\\n/** Packages up subpackage angular exports for easier use */\\n@NgModule({\\n  imports: REEXPORTS,\\n  exports: REEXPORTS,\\n})\\nexport class ButtonsModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"BrandLogoComponent"},{"name":"BrandMarkComponent"}]},{"type":"exports","elements":[{"name":"BrandLogoComponent"},{"name":"BrandMarkComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"ExpansionPanelModule","id":"module-ExpansionPanelModule-17d413bf76847d240a5f155d04a8a0984a5c9998bdfcaeef128b4242972a37b15fccc7931dbab683f5fd03f7310330a81c75ec7b81d5a8b46ce66eb3445dc685","description":"<p>Expansion panel module</p>\\n","deprecationMessage":"","deprecated":false,"file":"expansion-panel/src/lib/expansion-panel.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport {\\n  ExpansionPanelActionsComponent,\\n  ExpansionPanelComponent,\\n  ExpansionPanelHeaderContentComponent,\\n} from \'./expansion-panel.component\';\\n\\n/** Expansion panel module */\\n@NgModule({\\n  imports: [ExpansionPanelActionsComponent, ExpansionPanelHeaderContentComponent, ExpansionPanelComponent],\\n  exports: [ExpansionPanelActionsComponent, ExpansionPanelHeaderContentComponent, ExpansionPanelComponent],\\n})\\nexport class ExpansionPanelModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"ExpansionPanelActionsComponent"},{"name":"ExpansionPanelComponent"},{"name":"ExpansionPanelHeaderContentComponent"}]},{"type":"exports","elements":[{"name":"ExpansionPanelActionsComponent"},{"name":"ExpansionPanelComponent"},{"name":"ExpansionPanelHeaderContentComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"IconButtonModule","id":"module-IconButtonModule-e73b1277b11d49efd817b47b3dc2d0f39a94adc58047dfb9cbfe072de3d28d676a42bb265f3d26fcd23bc91dbad3f6f6181240ea28058483e09dcb73ac8b8b16","description":"<p>Module exporting icon button and related utilities</p>\\n","deprecationMessage":"","deprecated":false,"file":"icon-button/src/lib/icon-button.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\n\\nimport { IconButtonSizeDirective } from \'./icon-button-size/icon-button-size.directive\';\\nimport { IconButtonVariantDirective } from \'./icon-button-variant/icon-button-variant.directive\';\\n\\n/** Module exporting icon button and related utilities */\\n@NgModule({\\n  imports: [IconButtonSizeDirective, IconButtonVariantDirective],\\n  exports: [MatButtonModule, MatIconModule, IconButtonSizeDirective, IconButtonVariantDirective],\\n})\\nexport class IconButtonModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"IconButtonSizeDirective"},{"name":"IconButtonVariantDirective"}]},{"type":"exports","elements":[{"name":"IconButtonSizeDirective"},{"name":"IconButtonVariantDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NavigationModule","id":"module-NavigationModule-14fafac66b3401f156d49ecd7e62089875419564247538eb51fe2d7cb837ff63d26346a0e0996b8ef0731993e54be9bb41d7b42f6cba54ab9e824cb52a5dcf96","description":"<p>Exports all brand components, modules, etc.</p>\\n","deprecationMessage":"","deprecated":false,"file":"navigation/src/lib/navigation.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { CtaBarComponent } from \'@hra-ui/design-system/navigation/cta-bar\';\\nimport { FooterComponent } from \'@hra-ui/design-system/navigation/footer\';\\nimport { HeaderComponent } from \'@hra-ui/design-system/navigation/header\';\\n\\n/** All sub library components, module, etc. */\\nconst REEXPORTS = [CtaBarComponent, FooterComponent, HeaderComponent];\\n\\n/** Exports all brand components, modules, etc. */\\n@NgModule({\\n  imports: REEXPORTS,\\n  exports: REEXPORTS,\\n})\\nexport class NavigationModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"BrandLogoComponent"},{"name":"BrandMarkComponent"}]},{"type":"exports","elements":[{"name":"BrandLogoComponent"},{"name":"BrandMarkComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"ScrollingModule","id":"module-ScrollingModule-be92df704ab4f4a4523b66effa747b28adbcd4019d314eb5d936bc3c0fcb004ad347b57d224ea9715e389f15b61ce0bf4f8dd875fed05a827cd767ba1ce12c35","description":"<p>Module exporting ng-scrollbar and related scrolling utilities</p>\\n","deprecationMessage":"","deprecated":false,"file":"scrolling/src/lib/scrolling.module.ts","methods":[],"sourceCode":"import { EnvironmentProviders, NgModule, makeEnvironmentProviders } from \'@angular/core\';\\nimport { getCurrentScriptBasePath } from \'@hra-ui/cdk/app-href\';\\nimport { provideStyleComponents } from \'@hra-ui/cdk/styling\';\\nimport {\\n  NgScrollbarModule,\\n  NgScrollbarOptions,\\n  provideScrollbarOptions,\\n  provideScrollbarPolyfill,\\n} from \'ngx-scrollbar\';\\nimport { ScrollOverflowFadeDirective } from \'./scroll-overflow-fade/scroll-overflow-fade.directive\';\\nimport { ScrollbarStylesComponent } from \'./scrollbar-styles/scrollbar-styles.component\';\\n\\n/** Scrolling configuration */\\nexport interface ScrollingOptions extends NgScrollbarOptions {\\n  /** Url to the scroll timeline polyfill script */\\n  polyfillUrl?: string;\\n}\\n\\n/** Default scroll timeline polyfill url */\\nconst DEFAULT_POLYFILL_URL = \'assets/polyfills/scroll-timeline-polyfill.js\';\\n\\n/**\\n * Provide scrolling functionality to an application.\\n *\\n * @param options Scrollbar options\\n * @returns An environment provider\\n */\\nexport function provideScrolling(options?: ScrollingOptions): EnvironmentProviders {\\n  const polyfillUrl = getCurrentScriptBasePath() + (options?.polyfillUrl ?? DEFAULT_POLYFILL_URL);\\n\\n  return makeEnvironmentProviders([\\n    provideStyleComponents(ScrollbarStylesComponent),\\n    provideScrollbarPolyfill(polyfillUrl),\\n    provideScrollbarOptions({\\n      visibility: \'hover\',\\n      appearance: \'compact\',\\n      trackClass: \'hra-scrollbar-track\',\\n      thumbClass: \'hra-scrollbar-thumb\',\\n      ...options,\\n    }),\\n  ]);\\n}\\n\\n/** Module exporting ng-scrollbar and related scrolling utilities */\\n@NgModule({\\n  imports: [ScrollOverflowFadeDirective],\\n  exports: [NgScrollbarModule, ScrollOverflowFadeDirective],\\n})\\nexport class ScrollingModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"ScrollOverflowFadeDirective"}]},{"type":"exports","elements":[{"name":"ScrollOverflowFadeDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"WorkflowCardModule","id":"module-WorkflowCardModule-d538998a7e86168fd6122c6dcf572323089bd5f6cec04f45e8b7802e8f7593435755961eed72538b47172fbfbb503e8855584b766b860a65fe406d0bcec4e6a9","description":"<p>Main module</p>\\n","deprecationMessage":"","deprecated":false,"file":"workflow-card/src/index.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport {\\n  WorkflowCardActionsComponent,\\n  WorkflowCardComponent,\\n  WorkflowCardExtraComponent,\\n} from \'./lib/workflow-card.component\';\\n\\nexport * from \'./lib/deprecated/workflow-card.component\';\\nexport * from \'./lib/workflow-card.component\';\\n\\n/** All components */\\nconst COMPONENTS = [WorkflowCardComponent, WorkflowCardActionsComponent, WorkflowCardExtraComponent];\\n\\n/** Main module */\\n@NgModule({\\n  imports: COMPONENTS,\\n  exports: COMPONENTS,\\n})\\nexport class WorkflowCardModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[{"name":"WorkflowCardActionsComponent"},{"name":"WorkflowCardComponent"},{"name":"WorkflowCardExtraComponent"}]},{"type":"exports","elements":[{"name":"WorkflowCardActionsComponent"},{"name":"WorkflowCardComponent"},{"name":"WorkflowCardExtraComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"BODY_EXPANSION","ctype":"miscellaneous","subtype":"variable","file":"expansion-panel/src/lib/expansion-panel-animations.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"trigger(\'bodyExpansion\', [\\n  state(\'collapsed, void\', style({ height: \'0px\', visibility: \'hidden\', opacity: 0 })),\\n  state(\'expanded\', style({ height: \'*\', visibility: \'\', opacity: 1 })),\\n  transition(\'expanded <=> collapsed, void => collapsed\', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\\n])","rawdescription":"Animation for Body Expansion","description":"<p>Animation for Body Expansion</p>\\n"},{"name":"BrandLogoSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  size: BrandLogoSizeSchema,\\n  src: z.string(),\\n  width: z.number().positive(),\\n  height: z.number().positive(),\\n})","rawdescription":"Schema for logo item","description":"<p>Schema for logo item</p>\\n"},{"name":"BrandLogoSizeSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.enum([\'small\', \'regular\'])","rawdescription":"Schema for logo size","description":"<p>Schema for logo size</p>\\n"},{"name":"BrandLogosSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  logos: BrandLogoSchema.array(),\\n})","rawdescription":"Schema for logos","description":"<p>Schema for logos</p>\\n"},{"name":"BrandMarkSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  variant: BrandMarkVariantSchema,\\n  src: z.string(),\\n  width: z.number().positive(),\\n  height: z.number().positive(),\\n})","rawdescription":"Schema for mark item","description":"<p>Schema for mark item</p>\\n"},{"name":"BrandMarksSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  marks: BrandMarkSchema.array(),\\n})","rawdescription":"Schema for marks","description":"<p>Schema for marks</p>\\n"},{"name":"BrandMarkVariantSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.enum([\'default\', \'contrast\', \'small\'])","rawdescription":"Schema for mark variant","description":"<p>Schema for mark variant</p>\\n"},{"name":"BUTTON_SIZES","ctype":"miscellaneous","subtype":"variable","file":"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<IconButtonSize, number>","defaultValue":"{\\n  small: 1.5,\\n  large: 2.5,\\n}","rawdescription":"Record of button sizes (number in rem)","description":"<p>Record of button sizes (number in rem)</p>\\n"},{"name":"COMPONENTS","ctype":"miscellaneous","subtype":"variable","file":"workflow-card/src/index.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[WorkflowCardComponent, WorkflowCardActionsComponent, WorkflowCardExtraComponent]","rawdescription":"All components","description":"<p>All components</p>\\n"},{"name":"DEFAULT_POLYFILL_URL","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scrolling.module.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'assets/polyfills/scroll-timeline-polyfill.js\'","rawdescription":"Default scroll timeline polyfill url","description":"<p>Default scroll timeline polyfill url</p>\\n"},{"name":"DESKTOP_MENU_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/header.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\', offsetX: -16, offsetY: 16 },\\n]","rawdescription":"Position of the desktop menu overlay","description":"<p>Position of the desktop menu overlay</p>\\n"},{"name":"EXPANSION_PANEL_ANIMATION_TIMING","ctype":"miscellaneous","subtype":"variable","file":"expansion-panel/src/lib/expansion-panel-animations.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'225ms cubic-bezier(0.4,0.0,0.2,1)\'","rawdescription":"Animation for the expansion panel","description":"<p>Animation for the expansion panel</p>\\n"},{"name":"FONT_SIZES","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 0.75,\\n  medium: 0.875,\\n  large: 1,\\n}","rawdescription":"Font sizes for each tree size (rem)","description":"<p>Font sizes for each tree size (rem)</p>\\n"},{"name":"FUNDER_IDS","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"FUNDERS.map(({ id }) => id)","rawdescription":"All available funder ids","description":"<p>All available funder ids</p>\\n"},{"name":"FUNDERS","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"FundersSchema.parse(RAW_FUNDERS).funders","rawdescription":"Parsed funders static data","description":"<p>Parsed funders static data</p>\\n"},{"name":"FunderSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  id: z.string().brand<\'FunderId\'>(),\\n  name: z.string(),\\n  link: z.string().url(),\\n  image: z.string(),\\n})","rawdescription":"Schema for a funder item","description":"<p>Schema for a funder item</p>\\n"},{"name":"FundersSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  funders: FunderSchema.array(),\\n})","rawdescription":"Schema for multiple funders","description":"<p>Schema for multiple funders</p>\\n"},{"name":"GRADIENT_BOTTOM_KEYFRAMES","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts","deprecated":false,"deprecationMessage":"","type":"Keyframe[]","defaultValue":"[\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-start)\',\\n  },\\n  {\\n    offset: 0.98,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-end)\',\\n    opacity: 0,\\n  },\\n]","rawdescription":"Keyframes for the bottom gradient","description":"<p>Keyframes for the bottom gradient</p>\\n"},{"name":"GRADIENT_TOP_KEYFRAMES","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts","deprecated":false,"deprecationMessage":"","type":"Keyframe[]","defaultValue":"[\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-start)\',\\n    opacity: 0,\\n  },\\n  {\\n    offset: 0.02,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-end)\',\\n  },\\n]","rawdescription":"Keyframes for the top gradient","description":"<p>Keyframes for the top gradient</p>\\n"},{"name":"HUBMAP_MENU","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"HubmapMenuSchema.parse(RAW_HUBMAP_MENU).groups","rawdescription":"Parsed hubmap menu object","description":"<p>Parsed hubmap menu object</p>\\n"},{"name":"HubmapMenuGroupSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  label: z.string(),\\n  items: HubmapMenuItemSchema.array(),\\n})","rawdescription":"Schema for a hubmap menu group","description":"<p>Schema for a hubmap menu group</p>\\n"},{"name":"HubmapMenuItemSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  label: z.string(),\\n  description: z.string(),\\n  icon: z.string(),\\n  url: z.string().url(),\\n})","rawdescription":"Schema for a hubmap menu item","description":"<p>Schema for a hubmap menu item</p>\\n"},{"name":"HubmapMenuSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  groups: HubmapMenuGroupSchema.array(),\\n})","rawdescription":"Schema for a humbap menu","description":"<p>Schema for a humbap menu</p>\\n"},{"name":"ICON_SIZES","ctype":"miscellaneous","subtype":"variable","file":"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<IconButtonSize, number>","defaultValue":"{\\n  small: 1.25,\\n  large: 1.5,\\n}","rawdescription":"Record of icon sizes (number in rem)","description":"<p>Record of icon sizes (number in rem)</p>\\n"},{"name":"ICON_SIZES","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 1.25,\\n  medium: 1.5,\\n  large: 1.5,\\n}","rawdescription":"Icon sizes for each tree size (rem)","description":"<p>Icon sizes for each tree size (rem)</p>\\n"},{"name":"idCounter","ctype":"miscellaneous","subtype":"variable","file":"expansion-panel/src/lib/expansion-panel.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"0","rawdescription":"Counter to keep track of distinct panels","description":"<p>Counter to keep track of distinct panels</p>\\n"},{"name":"LOGOS","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"BrandLogosSchema.parse(RAW_LOGOS).logos","rawdescription":"Data for all logos","description":"<p>Data for all logos</p>\\n"},{"name":"MARKS","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"BrandMarksSchema.parse(RAW_MARKS).marks","rawdescription":"All marks data","description":"<p>All marks data</p>\\n"},{"name":"MenuDividerSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'divider\'),\\n})","rawdescription":"Schema for a menu divider","description":"<p>Schema for a menu divider</p>\\n"},{"name":"MenuGroupSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'group\'),\\n  label: z.string(),\\n  description: z.string().optional(),\\n  url: z.string().url(),\\n  items: z.union([MenuSubGroupSchema, MenuItemSchema]).array().optional(),\\n})","rawdescription":"Schema for a menu group","description":"<p>Schema for a menu group</p>\\n"},{"name":"MenuItemSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'item\'),\\n  label: z.string(),\\n  url: z.string().url(),\\n})","rawdescription":"Schema for a menu item","description":"<p>Schema for a menu item</p>\\n"},{"name":"MENUS","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"MenusSchema.parse(RAW_MENUS).menus","rawdescription":"Parsed menus object","description":"<p>Parsed menus object</p>\\n"},{"name":"MenuSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'menu\'),\\n  id: z.string(),\\n  label: z.string(),\\n  items: z.union([MenuGroupSchema, MenuDividerSchema]).array(),\\n})","rawdescription":"Schema for a menu","description":"<p>Schema for a menu</p>\\n"},{"name":"MenusSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  menus: MenuSchema.array(),\\n})","rawdescription":"Schema for multiple menus","description":"<p>Schema for multiple menus</p>\\n"},{"name":"MenuSubGroupSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'subgroup\'),\\n  label: z.string(),\\n  items: MenuItemSchema.array(),\\n})","rawdescription":"Schema for a menu subgroup","description":"<p>Schema for a menu subgroup</p>\\n"},{"name":"MOBILE_MENU_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/header.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\' },\\n]","rawdescription":"Position of the mobile menu overlay","description":"<p>Position of the mobile menu overlay</p>\\n"},{"name":"NODE_HEIGHTS","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 1.5,\\n  medium: 1.75,\\n  large: 2,\\n}","rawdescription":"Node heights for each tree size (rem)","description":"<p>Node heights for each tree size (rem)</p>\\n"},{"name":"PADDING","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-demo/tree-demo.component.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 32,\\n  medium: 36,\\n  large: 40,\\n}","rawdescription":"Padding indents for each tree size (px)","description":"<p>Padding indents for each tree size (px)</p>\\n"},{"name":"REEXPORTS","ctype":"miscellaneous","subtype":"variable","file":"brand/src/lib/brand.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[BrandLogoComponent, BrandMarkComponent]","rawdescription":"All sub library components, module, etc.","description":"<p>All sub library components, module, etc.</p>\\n"},{"name":"REEXPORTS","ctype":"miscellaneous","subtype":"variable","file":"buttons/src/lib/buttons.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  MatButtonModule,\\n  MatButtonToggleModule,\\n\\n  AppNavButtonComponent,\\n  BreadcrumbsComponent,\\n  ButtonSizeDirective,\\n  ButtonToggleSizeDirective,\\n  ButtonVariantDirective,\\n  CtaButtonDirective,\\n  NavigationCategoryToggleComponent,\\n  PrimaryButtonVariantDirective,\\n  SecondaryButtonVariantDirective,\\n  SocialMediaButtonComponent,\\n  TextHyperlinkDirective,\\n]","rawdescription":"All re-exported modules, components, directives, etc.","description":"<p>All re-exported modules, components, directives, etc.</p>\\n"},{"name":"REEXPORTS","ctype":"miscellaneous","subtype":"variable","file":"navigation/src/lib/navigation.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[CtaBarComponent, FooterComponent, HeaderComponent]","rawdescription":"All sub library components, module, etc.","description":"<p>All sub library components, module, etc.</p>\\n"},{"name":"SCROLL_TIMELINE","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-timeline/scroll-timeline.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Signal<ScrollTimelineFunc | null>>(\'SCROLL_TIMELINE\', {\\n  providedIn: \'root\',\\n  factory: () => {\\n    type WindowWithScrollTimeline = { ScrollTimeline: ScrollTimelineFunc };\\n    const window = inject(DOCUMENT).defaultView as unknown as WindowWithScrollTimeline | null;\\n    if (!isPlatformBrowser(inject(PLATFORM_ID)) || !window) {\\n      return signal(null);\\n    }\\n\\n    const isAvailable = () => \'ScrollTimeline\' in window && typeof window.ScrollTimeline === \'function\';\\n    if (isAvailable()) {\\n      return signal(window[\'ScrollTimeline\']);\\n    }\\n\\n    const scrollTimeline$ = inject(SCROLL_TIMELINE_QUERY_INTERVAL).pipe(\\n      takeWhile(() => !isAvailable()),\\n      ignoreElements(),\\n      endWith(null),\\n      map(() => window.ScrollTimeline),\\n    );\\n\\n    return toSignal(scrollTimeline$, { initialValue: null });\\n  },\\n})","rawdescription":"Provides ScrollTimeline as a signal.\\nIf not natively implemented it will try to wait for a polyfill\\nto provide the function.","description":"<p>Provides ScrollTimeline as a signal.\\nIf not natively implemented it will try to wait for a polyfill\\nto provide the function.</p>\\n"},{"name":"SCROLL_TIMELINE_QUERY_INTERVAL","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-timeline/scroll-timeline.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Observable<number>>(\'SCROLL_TIMELINE_QUERY_INTERVAL\', {\\n  providedIn: \'root\',\\n  factory: () => interval(100),\\n})","rawdescription":"Interval between scroll timeline availability checks.\\nPrimarily used to simplify testing.","description":"<p>Interval between scroll timeline availability checks.\\nPrimarily used to simplify testing.</p>\\n"},{"name":"SOCIAL_IDS","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"SOCIALS.map(({ id }) => id)","rawdescription":"All available social ids","description":"<p>All available social ids</p>\\n"},{"name":"SocialMediaSchema","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  id: z.string().brand<\'SocialMediaId\'>(),\\n  icon: z.string(),\\n  isFontIcon: z.boolean().optional(),\\n  link: z.string(),\\n})","rawdescription":"Schema for social media item","description":"<p>Schema for social media item</p>\\n"},{"name":"SOCIALS","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"SocialsSchema.parse(RAW_SOCIALS).socials","rawdescription":"Parsed social media items","description":"<p>Parsed social media items</p>\\n"},{"name":"SocialsSchema","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  socials: SocialMediaSchema.array(),\\n})","rawdescription":"Schema for social media items","description":"<p>Schema for social media items</p>\\n"},{"name":"STATUS_FONTS","ctype":"miscellaneous","subtype":"variable","file":"software-status-indicator/src/lib/software-status-indicator-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<SoftwareStatusSize, string>","defaultValue":"{\\n  small: \'var(--mat-sys-label-micro)\',\\n  medium: \'var(--mat-sys-label-medium)\',\\n  large: \'var(--mat-sys-label-large)\',\\n}","rawdescription":"Record of button fonts","description":"<p>Record of button fonts</p>\\n"}],"functions":[{"name":"colorEquals","file":"color-picker/src/lib/color-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Compares two RGB colors for equality</p>\\n","args":[{"name":"color1","type":"Rgb","deprecated":false,"deprecationMessage":""},{"name":"color2","type":"Rgb","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"color1","type":"Rgb","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"color2","type":"Rgb","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hexToRgb","file":"color-picker/src/lib/color-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts a hexadecimal color string to an RGB color</p>\\n","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"Rgb","jsdoctags":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"provideButton","file":"buttons/button/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Applies global styles to buttons</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":263,"end":270,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Button providers</p>\\n"}]},{"name":"provideButtons","file":"buttons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Collects all subpackage providers into a single provider function.</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":400,"end":407,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Button providers</p>\\n"}]},{"name":"provideButtonToggle","file":"buttons/button-toggle/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Applies global styles to button toggles</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":392,"end":399,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Button toggle providers</p>\\n"}]},{"name":"provideCheckboxes","file":"checkbox/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for checkboxes</p>\\n","args":[],"returnType":"EnvironmentProviders"},{"name":"provideDesignSystem","file":"src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns design system providers</p>\\n","args":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"provideDesignSystemCommon","file":"src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the providers shared between prod and testing</p>\\n","args":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true}],"jsdoctags":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"provideIconButtons","file":"icon-button/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for icon buttons</p>\\n","args":[],"returnType":"EnvironmentProviders"},{"name":"provideInput","file":"input/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for Input</p>\\n","args":[],"returnType":"EnvironmentProviders"},{"name":"provideMenu","file":"menu/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for menu</p>\\n","args":[],"returnType":"EnvironmentProviders"},{"name":"provideScrolling","file":"scrolling/src/lib/scrolling.module.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provide scrolling functionality to an application.</p>\\n","args":[{"name":"options","type":"ScrollingOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":906,"end":913,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"type":"ScrollingOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":900,"end":905,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Scrollbar options</p>\\n"},{"tagName":{"pos":936,"end":943,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An environment provider</p>\\n"}]},{"name":"provideSelect","file":"select/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for select</p>\\n","args":[],"returnType":"EnvironmentProviders"},{"name":"provideTable","file":"table/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for table</p>\\n","args":[],"returnType":"EnvironmentProviders"},{"name":"provideTextHyperlink","file":"buttons/text-hyperlink/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides the global styles for text hyperlink elements.</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":293,"end":300,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Text hyperlink providers</p>\\n"}]},{"name":"provideTrees","file":"tree/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for tree</p>\\n","args":[],"returnType":"EnvironmentProviders"},{"name":"rgbToHex","file":"color-picker/src/lib/color-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB color to its hexadecimal string representation</p>\\n","args":[{"name":"rgb","type":"Rgb","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"rgb","type":"Rgb","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setupScrollTesting","file":"scrolling/testing/src/index.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Setup the testing environment for scrolling to work.\\nAdds global mocks for functions used by scrolling if they don&#39;t exist.</p>\\n","args":[],"returnType":"void"}],"typealiases":[{"name":"BrandLogo","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Logo item</p>\\n","kind":183},{"name":"BrandLogos","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Logos</p>\\n","kind":183},{"name":"BrandLogoSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Logo size</p>\\n","kind":183},{"name":"BrandMark","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Mark item</p>\\n","kind":183},{"name":"BrandMarks","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Marks</p>\\n","kind":183},{"name":"BrandMarkVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Mark variant</p>\\n","kind":183},{"name":"ButtonPosition","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"start\\" | \\"end\\"","file":"snackbar/src/lib/snackbar.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type for button position</p>\\n","kind":192},{"name":"ButtonSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\"","file":"buttons/button/src/lib/directives/size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Named button sizes</p>\\n","kind":192},{"name":"ButtonToggleSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Button toggle size</p>\\n","kind":192},{"name":"ButtonVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"primary\\" | \\"secondary\\"","file":"buttons/button/src/lib/directives/variant.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Named button variants</p>\\n","kind":192},{"name":"Funder","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A funder item</p>\\n","kind":183},{"name":"FunderId","ctype":"miscellaneous","subtype":"typealias","rawtype":"Funder","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Data id of a funder</p>\\n","kind":199},{"name":"Funders","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Multiple funders object</p>\\n","kind":183},{"name":"HubmapMenu","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A hubmap menu</p>\\n","kind":183},{"name":"HubmapMenuGroup","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A hubmap menu group</p>\\n","kind":183},{"name":"HubmapMenuItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A hubmap menu item</p>\\n","kind":183},{"name":"IconButtonSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"large\\"","file":"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for icon button size</p>\\n","kind":192},{"name":"IconButtonVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"light\\" | \\"dark\\" | \\"color\\"","file":"icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for icon button color</p>\\n","kind":192},{"name":"InfoModalVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"tabular\\" | \\"center\\"","file":"info-modal/src/lib/info-modal.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Info modal variants</p>\\n","kind":192},{"name":"Menu","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu</p>\\n","kind":183},{"name":"MenuContentVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"desktop\\" | \\"mobile\\"","file":"navigation/header/src/lib/menu-content/menu-content.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Display modes of the menu content component</p>\\n","kind":192},{"name":"MenuDivider","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu divider</p>\\n","kind":183},{"name":"MenuGroup","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu group</p>\\n","kind":183},{"name":"MenuItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu item</p>\\n","kind":183},{"name":"Menus","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Multiple menus</p>\\n","kind":183},{"name":"MenuSubGroup","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu subgroup</p>\\n","kind":183},{"name":"MicroTooltipSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\"","file":"micro-tooltip/src/micro-tooltip.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type of Tooltip size</p>\\n","kind":192},{"name":"NavHeaderButtonsVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"basic\\" | \\"sidenav\\"","file":"nav-header-buttons/src/lib/nav-header-buttons.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Variant of nav header button</p>\\n","kind":192},{"name":"ProductLogoSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"large\\"","file":"product-logo/src/lib/product-logo.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Button size type</p>\\n","kind":192},{"name":"Rgb","ctype":"miscellaneous","subtype":"typealias","rawtype":"[, , ]","file":"color-picker/src/lib/color-utils.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type representing an RGB color as a tuple of three numbers</p>\\n","kind":189},{"name":"ScrollTimelineFunc","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"scrolling/src/lib/scroll-timeline/scroll-timeline.ts","deprecated":false,"deprecationMessage":"","description":"<p>Basic signature of the ScrollTimeline constructor</p>\\n","kind":185},{"name":"SnackbarConfig","ctype":"miscellaneous","subtype":"typealias","rawtype":"Omit<MatSnackBarConfig | \\"data\\" | \\"panelClass\\">","file":"snackbar/src/lib/snackbar.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>Snackbar configuration</p>\\n","kind":183},{"name":"SocialMedia","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Social media item</p>\\n","kind":183},{"name":"SocialMediaId","ctype":"miscellaneous","subtype":"typealias","rawtype":"SocialMedia","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Social media id</p>\\n","kind":199},{"name":"Socials","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Social media items</p>\\n","kind":183},{"name":"SoftwareStatus","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"Preview\\" | \\"Alpha\\" | \\"Beta\\"","file":"software-status-indicator/src/lib/software-status-indicator.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Software status options</p>\\n","kind":192},{"name":"SoftwareStatusSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"software-status-indicator/src/lib/software-status-indicator-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for Software status size</p>\\n","kind":192},{"name":"SoftwareStatusSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"software-status-indicator/src/lib/software-status-indicator.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Software status size options</p>\\n","kind":192},{"name":"TreeSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for each tree size</p>\\n","kind":192}],"enumerations":[],"groupedVariables":{"expansion-panel/src/lib/expansion-panel-animations.ts":[{"name":"BODY_EXPANSION","ctype":"miscellaneous","subtype":"variable","file":"expansion-panel/src/lib/expansion-panel-animations.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"trigger(\'bodyExpansion\', [\\n  state(\'collapsed, void\', style({ height: \'0px\', visibility: \'hidden\', opacity: 0 })),\\n  state(\'expanded\', style({ height: \'*\', visibility: \'\', opacity: 1 })),\\n  transition(\'expanded <=> collapsed, void => collapsed\', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\\n])","rawdescription":"Animation for Body Expansion","description":"<p>Animation for Body Expansion</p>\\n"},{"name":"EXPANSION_PANEL_ANIMATION_TIMING","ctype":"miscellaneous","subtype":"variable","file":"expansion-panel/src/lib/expansion-panel-animations.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'225ms cubic-bezier(0.4,0.0,0.2,1)\'","rawdescription":"Animation for the expansion panel","description":"<p>Animation for the expansion panel</p>\\n"}],"brand/logo/src/lib/types/logos.schema.ts":[{"name":"BrandLogoSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  size: BrandLogoSizeSchema,\\n  src: z.string(),\\n  width: z.number().positive(),\\n  height: z.number().positive(),\\n})","rawdescription":"Schema for logo item","description":"<p>Schema for logo item</p>\\n"},{"name":"BrandLogoSizeSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.enum([\'small\', \'regular\'])","rawdescription":"Schema for logo size","description":"<p>Schema for logo size</p>\\n"},{"name":"BrandLogosSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  logos: BrandLogoSchema.array(),\\n})","rawdescription":"Schema for logos","description":"<p>Schema for logos</p>\\n"}],"brand/mark/src/lib/types/marks.schema.ts":[{"name":"BrandMarkSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  variant: BrandMarkVariantSchema,\\n  src: z.string(),\\n  width: z.number().positive(),\\n  height: z.number().positive(),\\n})","rawdescription":"Schema for mark item","description":"<p>Schema for mark item</p>\\n"},{"name":"BrandMarksSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  marks: BrandMarkSchema.array(),\\n})","rawdescription":"Schema for marks","description":"<p>Schema for marks</p>\\n"},{"name":"BrandMarkVariantSchema","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.enum([\'default\', \'contrast\', \'small\'])","rawdescription":"Schema for mark variant","description":"<p>Schema for mark variant</p>\\n"}],"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts":[{"name":"BUTTON_SIZES","ctype":"miscellaneous","subtype":"variable","file":"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<IconButtonSize, number>","defaultValue":"{\\n  small: 1.5,\\n  large: 2.5,\\n}","rawdescription":"Record of button sizes (number in rem)","description":"<p>Record of button sizes (number in rem)</p>\\n"},{"name":"ICON_SIZES","ctype":"miscellaneous","subtype":"variable","file":"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<IconButtonSize, number>","defaultValue":"{\\n  small: 1.25,\\n  large: 1.5,\\n}","rawdescription":"Record of icon sizes (number in rem)","description":"<p>Record of icon sizes (number in rem)</p>\\n"}],"workflow-card/src/index.ts":[{"name":"COMPONENTS","ctype":"miscellaneous","subtype":"variable","file":"workflow-card/src/index.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[WorkflowCardComponent, WorkflowCardActionsComponent, WorkflowCardExtraComponent]","rawdescription":"All components","description":"<p>All components</p>\\n"}],"scrolling/src/lib/scrolling.module.ts":[{"name":"DEFAULT_POLYFILL_URL","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scrolling.module.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'assets/polyfills/scroll-timeline-polyfill.js\'","rawdescription":"Default scroll timeline polyfill url","description":"<p>Default scroll timeline polyfill url</p>\\n"}],"navigation/header/src/lib/header.component.ts":[{"name":"DESKTOP_MENU_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/header.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\', offsetX: -16, offsetY: 16 },\\n]","rawdescription":"Position of the desktop menu overlay","description":"<p>Position of the desktop menu overlay</p>\\n"},{"name":"MOBILE_MENU_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/header.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  { originX: \'start\', originY: \'bottom\', overlayX: \'start\', overlayY: \'top\' },\\n]","rawdescription":"Position of the mobile menu overlay","description":"<p>Position of the mobile menu overlay</p>\\n"}],"tree/src/lib/tree-size/tree-size.directive.ts":[{"name":"FONT_SIZES","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 0.75,\\n  medium: 0.875,\\n  large: 1,\\n}","rawdescription":"Font sizes for each tree size (rem)","description":"<p>Font sizes for each tree size (rem)</p>\\n"},{"name":"ICON_SIZES","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 1.25,\\n  medium: 1.5,\\n  large: 1.5,\\n}","rawdescription":"Icon sizes for each tree size (rem)","description":"<p>Icon sizes for each tree size (rem)</p>\\n"},{"name":"NODE_HEIGHTS","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 1.5,\\n  medium: 1.75,\\n  large: 2,\\n}","rawdescription":"Node heights for each tree size (rem)","description":"<p>Node heights for each tree size (rem)</p>\\n"}],"navigation/footer/src/lib/static-data/parsed.ts":[{"name":"FUNDER_IDS","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"FUNDERS.map(({ id }) => id)","rawdescription":"All available funder ids","description":"<p>All available funder ids</p>\\n"},{"name":"FUNDERS","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"FundersSchema.parse(RAW_FUNDERS).funders","rawdescription":"Parsed funders static data","description":"<p>Parsed funders static data</p>\\n"}],"navigation/footer/src/lib/types/funders.schema.ts":[{"name":"FunderSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  id: z.string().brand<\'FunderId\'>(),\\n  name: z.string(),\\n  link: z.string().url(),\\n  image: z.string(),\\n})","rawdescription":"Schema for a funder item","description":"<p>Schema for a funder item</p>\\n"},{"name":"FundersSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  funders: FunderSchema.array(),\\n})","rawdescription":"Schema for multiple funders","description":"<p>Schema for multiple funders</p>\\n"}],"scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts":[{"name":"GRADIENT_BOTTOM_KEYFRAMES","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts","deprecated":false,"deprecationMessage":"","type":"Keyframe[]","defaultValue":"[\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-start)\',\\n  },\\n  {\\n    offset: 0.98,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-bottom-end)\',\\n    opacity: 0,\\n  },\\n]","rawdescription":"Keyframes for the bottom gradient","description":"<p>Keyframes for the bottom gradient</p>\\n"},{"name":"GRADIENT_TOP_KEYFRAMES","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts","deprecated":false,"deprecationMessage":"","type":"Keyframe[]","defaultValue":"[\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-start)\',\\n    opacity: 0,\\n  },\\n  {\\n    offset: 0.02,\\n    opacity: 1,\\n  },\\n  {\\n    top: \'var(--_hra-scroll-overflow-fade-gradient-top-end)\',\\n  },\\n]","rawdescription":"Keyframes for the top gradient","description":"<p>Keyframes for the top gradient</p>\\n"}],"navigation/header/src/lib/static-data/parsed.ts":[{"name":"HUBMAP_MENU","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"HubmapMenuSchema.parse(RAW_HUBMAP_MENU).groups","rawdescription":"Parsed hubmap menu object","description":"<p>Parsed hubmap menu object</p>\\n"},{"name":"MENUS","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"MenusSchema.parse(RAW_MENUS).menus","rawdescription":"Parsed menus object","description":"<p>Parsed menus object</p>\\n"}],"navigation/header/src/lib/types/hubmap-menu.schema.ts":[{"name":"HubmapMenuGroupSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  label: z.string(),\\n  items: HubmapMenuItemSchema.array(),\\n})","rawdescription":"Schema for a hubmap menu group","description":"<p>Schema for a hubmap menu group</p>\\n"},{"name":"HubmapMenuItemSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  label: z.string(),\\n  description: z.string(),\\n  icon: z.string(),\\n  url: z.string().url(),\\n})","rawdescription":"Schema for a hubmap menu item","description":"<p>Schema for a hubmap menu item</p>\\n"},{"name":"HubmapMenuSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  groups: HubmapMenuGroupSchema.array(),\\n})","rawdescription":"Schema for a humbap menu","description":"<p>Schema for a humbap menu</p>\\n"}],"expansion-panel/src/lib/expansion-panel.component.ts":[{"name":"idCounter","ctype":"miscellaneous","subtype":"variable","file":"expansion-panel/src/lib/expansion-panel.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"0","rawdescription":"Counter to keep track of distinct panels","description":"<p>Counter to keep track of distinct panels</p>\\n"}],"brand/logo/src/lib/static-data/parsed.ts":[{"name":"LOGOS","ctype":"miscellaneous","subtype":"variable","file":"brand/logo/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"BrandLogosSchema.parse(RAW_LOGOS).logos","rawdescription":"Data for all logos","description":"<p>Data for all logos</p>\\n"}],"brand/mark/src/lib/static-data/parsed.ts":[{"name":"MARKS","ctype":"miscellaneous","subtype":"variable","file":"brand/mark/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"BrandMarksSchema.parse(RAW_MARKS).marks","rawdescription":"All marks data","description":"<p>All marks data</p>\\n"}],"navigation/header/src/lib/types/menus.schema.ts":[{"name":"MenuDividerSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'divider\'),\\n})","rawdescription":"Schema for a menu divider","description":"<p>Schema for a menu divider</p>\\n"},{"name":"MenuGroupSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'group\'),\\n  label: z.string(),\\n  description: z.string().optional(),\\n  url: z.string().url(),\\n  items: z.union([MenuSubGroupSchema, MenuItemSchema]).array().optional(),\\n})","rawdescription":"Schema for a menu group","description":"<p>Schema for a menu group</p>\\n"},{"name":"MenuItemSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'item\'),\\n  label: z.string(),\\n  url: z.string().url(),\\n})","rawdescription":"Schema for a menu item","description":"<p>Schema for a menu item</p>\\n"},{"name":"MenuSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'menu\'),\\n  id: z.string(),\\n  label: z.string(),\\n  items: z.union([MenuGroupSchema, MenuDividerSchema]).array(),\\n})","rawdescription":"Schema for a menu","description":"<p>Schema for a menu</p>\\n"},{"name":"MenusSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  menus: MenuSchema.array(),\\n})","rawdescription":"Schema for multiple menus","description":"<p>Schema for multiple menus</p>\\n"},{"name":"MenuSubGroupSchema","ctype":"miscellaneous","subtype":"variable","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(\'subgroup\'),\\n  label: z.string(),\\n  items: MenuItemSchema.array(),\\n})","rawdescription":"Schema for a menu subgroup","description":"<p>Schema for a menu subgroup</p>\\n"}],"tree/src/lib/tree-demo/tree-demo.component.ts":[{"name":"PADDING","ctype":"miscellaneous","subtype":"variable","file":"tree/src/lib/tree-demo/tree-demo.component.ts","deprecated":false,"deprecationMessage":"","type":"Record<TreeSize, number>","defaultValue":"{\\n  small: 32,\\n  medium: 36,\\n  large: 40,\\n}","rawdescription":"Padding indents for each tree size (px)","description":"<p>Padding indents for each tree size (px)</p>\\n"}],"brand/src/lib/brand.module.ts":[{"name":"REEXPORTS","ctype":"miscellaneous","subtype":"variable","file":"brand/src/lib/brand.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[BrandLogoComponent, BrandMarkComponent]","rawdescription":"All sub library components, module, etc.","description":"<p>All sub library components, module, etc.</p>\\n"}],"buttons/src/lib/buttons.module.ts":[{"name":"REEXPORTS","ctype":"miscellaneous","subtype":"variable","file":"buttons/src/lib/buttons.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\n  MatButtonModule,\\n  MatButtonToggleModule,\\n\\n  AppNavButtonComponent,\\n  BreadcrumbsComponent,\\n  ButtonSizeDirective,\\n  ButtonToggleSizeDirective,\\n  ButtonVariantDirective,\\n  CtaButtonDirective,\\n  NavigationCategoryToggleComponent,\\n  PrimaryButtonVariantDirective,\\n  SecondaryButtonVariantDirective,\\n  SocialMediaButtonComponent,\\n  TextHyperlinkDirective,\\n]","rawdescription":"All re-exported modules, components, directives, etc.","description":"<p>All re-exported modules, components, directives, etc.</p>\\n"}],"navigation/src/lib/navigation.module.ts":[{"name":"REEXPORTS","ctype":"miscellaneous","subtype":"variable","file":"navigation/src/lib/navigation.module.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[CtaBarComponent, FooterComponent, HeaderComponent]","rawdescription":"All sub library components, module, etc.","description":"<p>All sub library components, module, etc.</p>\\n"}],"scrolling/src/lib/scroll-timeline/scroll-timeline.ts":[{"name":"SCROLL_TIMELINE","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-timeline/scroll-timeline.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Signal<ScrollTimelineFunc | null>>(\'SCROLL_TIMELINE\', {\\n  providedIn: \'root\',\\n  factory: () => {\\n    type WindowWithScrollTimeline = { ScrollTimeline: ScrollTimelineFunc };\\n    const window = inject(DOCUMENT).defaultView as unknown as WindowWithScrollTimeline | null;\\n    if (!isPlatformBrowser(inject(PLATFORM_ID)) || !window) {\\n      return signal(null);\\n    }\\n\\n    const isAvailable = () => \'ScrollTimeline\' in window && typeof window.ScrollTimeline === \'function\';\\n    if (isAvailable()) {\\n      return signal(window[\'ScrollTimeline\']);\\n    }\\n\\n    const scrollTimeline$ = inject(SCROLL_TIMELINE_QUERY_INTERVAL).pipe(\\n      takeWhile(() => !isAvailable()),\\n      ignoreElements(),\\n      endWith(null),\\n      map(() => window.ScrollTimeline),\\n    );\\n\\n    return toSignal(scrollTimeline$, { initialValue: null });\\n  },\\n})","rawdescription":"Provides ScrollTimeline as a signal.\\nIf not natively implemented it will try to wait for a polyfill\\nto provide the function.","description":"<p>Provides ScrollTimeline as a signal.\\nIf not natively implemented it will try to wait for a polyfill\\nto provide the function.</p>\\n"},{"name":"SCROLL_TIMELINE_QUERY_INTERVAL","ctype":"miscellaneous","subtype":"variable","file":"scrolling/src/lib/scroll-timeline/scroll-timeline.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new InjectionToken<Observable<number>>(\'SCROLL_TIMELINE_QUERY_INTERVAL\', {\\n  providedIn: \'root\',\\n  factory: () => interval(100),\\n})","rawdescription":"Interval between scroll timeline availability checks.\\nPrimarily used to simplify testing.","description":"<p>Interval between scroll timeline availability checks.\\nPrimarily used to simplify testing.</p>\\n"}],"buttons/social-media-button/src/lib/static-data/parsed.ts":[{"name":"SOCIAL_IDS","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"SOCIALS.map(({ id }) => id)","rawdescription":"All available social ids","description":"<p>All available social ids</p>\\n"},{"name":"SOCIALS","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/static-data/parsed.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"SocialsSchema.parse(RAW_SOCIALS).socials","rawdescription":"Parsed social media items","description":"<p>Parsed social media items</p>\\n"}],"buttons/social-media-button/src/lib/types/social-media.schema.ts":[{"name":"SocialMediaSchema","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  id: z.string().brand<\'SocialMediaId\'>(),\\n  icon: z.string(),\\n  isFontIcon: z.boolean().optional(),\\n  link: z.string(),\\n})","rawdescription":"Schema for social media item","description":"<p>Schema for social media item</p>\\n"},{"name":"SocialsSchema","ctype":"miscellaneous","subtype":"variable","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  $schema: z.string(),\\n  socials: SocialMediaSchema.array(),\\n})","rawdescription":"Schema for social media items","description":"<p>Schema for social media items</p>\\n"}],"software-status-indicator/src/lib/software-status-indicator-size.directive.ts":[{"name":"STATUS_FONTS","ctype":"miscellaneous","subtype":"variable","file":"software-status-indicator/src/lib/software-status-indicator-size.directive.ts","deprecated":false,"deprecationMessage":"","type":"Record<SoftwareStatusSize, string>","defaultValue":"{\\n  small: \'var(--mat-sys-label-micro)\',\\n  medium: \'var(--mat-sys-label-medium)\',\\n  large: \'var(--mat-sys-label-large)\',\\n}","rawdescription":"Record of button fonts","description":"<p>Record of button fonts</p>\\n"}]},"groupedFunctions":{"color-picker/src/lib/color-utils.ts":[{"name":"colorEquals","file":"color-picker/src/lib/color-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Compares two RGB colors for equality</p>\\n","args":[{"name":"color1","type":"Rgb","deprecated":false,"deprecationMessage":""},{"name":"color2","type":"Rgb","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"color1","type":"Rgb","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"color2","type":"Rgb","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hexToRgb","file":"color-picker/src/lib/color-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts a hexadecimal color string to an RGB color</p>\\n","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"Rgb","jsdoctags":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHex","file":"color-picker/src/lib/color-utils.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB color to its hexadecimal string representation</p>\\n","args":[{"name":"rgb","type":"Rgb","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"rgb","type":"Rgb","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"buttons/button/src/lib/providers.ts":[{"name":"provideButton","file":"buttons/button/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Applies global styles to buttons</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":263,"end":270,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Button providers</p>\\n"}]}],"buttons/src/lib/providers.ts":[{"name":"provideButtons","file":"buttons/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Collects all subpackage providers into a single provider function.</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":400,"end":407,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Button providers</p>\\n"}]}],"buttons/button-toggle/src/lib/providers.ts":[{"name":"provideButtonToggle","file":"buttons/button-toggle/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Applies global styles to button toggles</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":392,"end":399,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Button toggle providers</p>\\n"}]}],"checkbox/src/lib/providers.ts":[{"name":"provideCheckboxes","file":"checkbox/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for checkboxes</p>\\n","args":[],"returnType":"EnvironmentProviders"}],"src/lib/providers.ts":[{"name":"provideDesignSystem","file":"src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns design system providers</p>\\n","args":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"provideDesignSystemCommon","file":"src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the providers shared between prod and testing</p>\\n","args":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true}],"jsdoctags":[{"name":"options","type":"DesignSystemOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"icon-button/src/lib/providers.ts":[{"name":"provideIconButtons","file":"icon-button/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for icon buttons</p>\\n","args":[],"returnType":"EnvironmentProviders"}],"input/src/lib/providers.ts":[{"name":"provideInput","file":"input/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for Input</p>\\n","args":[],"returnType":"EnvironmentProviders"}],"menu/src/lib/providers.ts":[{"name":"provideMenu","file":"menu/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for menu</p>\\n","args":[],"returnType":"EnvironmentProviders"}],"scrolling/src/lib/scrolling.module.ts":[{"name":"provideScrolling","file":"scrolling/src/lib/scrolling.module.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provide scrolling functionality to an application.</p>\\n","args":[{"name":"options","type":"ScrollingOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"EnvironmentProviders","jsdoctags":[{"name":{"pos":906,"end":913,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"options"},"type":"ScrollingOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":900,"end":905,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"param"},"comment":"<p>Scrollbar options</p>\\n"},{"tagName":{"pos":936,"end":943,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>An environment provider</p>\\n"}]}],"select/src/lib/providers.ts":[{"name":"provideSelect","file":"select/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for select</p>\\n","args":[],"returnType":"EnvironmentProviders"}],"table/src/lib/providers.ts":[{"name":"provideTable","file":"table/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for table</p>\\n","args":[],"returnType":"EnvironmentProviders"}],"buttons/text-hyperlink/src/lib/providers.ts":[{"name":"provideTextHyperlink","file":"buttons/text-hyperlink/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Provides the global styles for text hyperlink elements.</p>\\n","args":[],"returnType":"EnvironmentProviders","jsdoctags":[{"tagName":{"pos":293,"end":300,"kind":80,"id":0,"flags":16777216,"transformFlags":0,"escapedText":"returns"},"comment":"<p>Text hyperlink providers</p>\\n"}]}],"tree/src/lib/providers.ts":[{"name":"provideTrees","file":"tree/src/lib/providers.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Returns providers for tree</p>\\n","args":[],"returnType":"EnvironmentProviders"}],"scrolling/testing/src/index.ts":[{"name":"setupScrollTesting","file":"scrolling/testing/src/index.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Setup the testing environment for scrolling to work.\\nAdds global mocks for functions used by scrolling if they don&#39;t exist.</p>\\n","args":[],"returnType":"void"}]},"groupedEnumerations":{},"groupedTypeAliases":{"brand/logo/src/lib/types/logos.schema.ts":[{"name":"BrandLogo","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Logo item</p>\\n","kind":183},{"name":"BrandLogos","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Logos</p>\\n","kind":183},{"name":"BrandLogoSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/logo/src/lib/types/logos.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Logo size</p>\\n","kind":183}],"brand/mark/src/lib/types/marks.schema.ts":[{"name":"BrandMark","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Mark item</p>\\n","kind":183},{"name":"BrandMarks","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Marks</p>\\n","kind":183},{"name":"BrandMarkVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"brand/mark/src/lib/types/marks.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Mark variant</p>\\n","kind":183}],"snackbar/src/lib/snackbar.component.ts":[{"name":"ButtonPosition","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"start\\" | \\"end\\"","file":"snackbar/src/lib/snackbar.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type for button position</p>\\n","kind":192}],"buttons/button/src/lib/directives/size.directive.ts":[{"name":"ButtonSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\"","file":"buttons/button/src/lib/directives/size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Named button sizes</p>\\n","kind":192}],"buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts":[{"name":"ButtonToggleSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Button toggle size</p>\\n","kind":192}],"buttons/button/src/lib/directives/variant.directive.ts":[{"name":"ButtonVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"primary\\" | \\"secondary\\"","file":"buttons/button/src/lib/directives/variant.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Named button variants</p>\\n","kind":192}],"navigation/footer/src/lib/types/funders.schema.ts":[{"name":"Funder","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A funder item</p>\\n","kind":183},{"name":"FunderId","ctype":"miscellaneous","subtype":"typealias","rawtype":"Funder","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Data id of a funder</p>\\n","kind":199},{"name":"Funders","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/footer/src/lib/types/funders.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Multiple funders object</p>\\n","kind":183}],"navigation/header/src/lib/types/hubmap-menu.schema.ts":[{"name":"HubmapMenu","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A hubmap menu</p>\\n","kind":183},{"name":"HubmapMenuGroup","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A hubmap menu group</p>\\n","kind":183},{"name":"HubmapMenuItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/hubmap-menu.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A hubmap menu item</p>\\n","kind":183}],"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts":[{"name":"IconButtonSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"large\\"","file":"icon-button/src/lib/icon-button-size/icon-button-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for icon button size</p>\\n","kind":192}],"icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts":[{"name":"IconButtonVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"light\\" | \\"dark\\" | \\"color\\"","file":"icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for icon button color</p>\\n","kind":192}],"info-modal/src/lib/info-modal.component.ts":[{"name":"InfoModalVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"tabular\\" | \\"center\\"","file":"info-modal/src/lib/info-modal.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Info modal variants</p>\\n","kind":192}],"navigation/header/src/lib/types/menus.schema.ts":[{"name":"Menu","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu</p>\\n","kind":183},{"name":"MenuDivider","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu divider</p>\\n","kind":183},{"name":"MenuGroup","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu group</p>\\n","kind":183},{"name":"MenuItem","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu item</p>\\n","kind":183},{"name":"Menus","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Multiple menus</p>\\n","kind":183},{"name":"MenuSubGroup","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"navigation/header/src/lib/types/menus.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>A menu subgroup</p>\\n","kind":183}],"navigation/header/src/lib/menu-content/menu-content.component.ts":[{"name":"MenuContentVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"desktop\\" | \\"mobile\\"","file":"navigation/header/src/lib/menu-content/menu-content.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Display modes of the menu content component</p>\\n","kind":192}],"micro-tooltip/src/micro-tooltip.directive.ts":[{"name":"MicroTooltipSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\"","file":"micro-tooltip/src/micro-tooltip.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type of Tooltip size</p>\\n","kind":192}],"nav-header-buttons/src/lib/nav-header-buttons.component.ts":[{"name":"NavHeaderButtonsVariant","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"basic\\" | \\"sidenav\\"","file":"nav-header-buttons/src/lib/nav-header-buttons.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Variant of nav header button</p>\\n","kind":192}],"product-logo/src/lib/product-logo.component.ts":[{"name":"ProductLogoSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"large\\"","file":"product-logo/src/lib/product-logo.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Button size type</p>\\n","kind":192}],"color-picker/src/lib/color-utils.ts":[{"name":"Rgb","ctype":"miscellaneous","subtype":"typealias","rawtype":"[, , ]","file":"color-picker/src/lib/color-utils.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type representing an RGB color as a tuple of three numbers</p>\\n","kind":189}],"scrolling/src/lib/scroll-timeline/scroll-timeline.ts":[{"name":"ScrollTimelineFunc","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"scrolling/src/lib/scroll-timeline/scroll-timeline.ts","deprecated":false,"deprecationMessage":"","description":"<p>Basic signature of the ScrollTimeline constructor</p>\\n","kind":185}],"snackbar/src/lib/snackbar.service.ts":[{"name":"SnackbarConfig","ctype":"miscellaneous","subtype":"typealias","rawtype":"Omit<MatSnackBarConfig | \\"data\\" | \\"panelClass\\">","file":"snackbar/src/lib/snackbar.service.ts","deprecated":false,"deprecationMessage":"","description":"<p>Snackbar configuration</p>\\n","kind":183}],"buttons/social-media-button/src/lib/types/social-media.schema.ts":[{"name":"SocialMedia","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Social media item</p>\\n","kind":183},{"name":"SocialMediaId","ctype":"miscellaneous","subtype":"typealias","rawtype":"SocialMedia","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Social media id</p>\\n","kind":199},{"name":"Socials","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"buttons/social-media-button/src/lib/types/social-media.schema.ts","deprecated":false,"deprecationMessage":"","description":"<p>Social media items</p>\\n","kind":183}],"software-status-indicator/src/lib/software-status-indicator.component.ts":[{"name":"SoftwareStatus","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"Preview\\" | \\"Alpha\\" | \\"Beta\\"","file":"software-status-indicator/src/lib/software-status-indicator.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Software status options</p>\\n","kind":192},{"name":"SoftwareStatusSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"software-status-indicator/src/lib/software-status-indicator.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Software status size options</p>\\n","kind":192}],"software-status-indicator/src/lib/software-status-indicator-size.directive.ts":[{"name":"SoftwareStatusSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"software-status-indicator/src/lib/software-status-indicator-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for Software status size</p>\\n","kind":192}],"tree/src/lib/tree-size/tree-size.directive.ts":[{"name":"TreeSize","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"small\\" | \\"medium\\" | \\"large\\"","file":"tree/src/lib/tree-size/tree-size.directive.ts","deprecated":false,"deprecationMessage":"","description":"<p>Input options for each tree size</p>\\n","kind":192}]}}}')},"./dist/compodoc/shared-theming/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[],"injectables":[{"name":"ThemingState","id":"injectable-ThemingState-bc96eb085e9f41108d0a07c93ef58359e93bf96384f9b49b4e90d3f6f570a75ca04b1bd6fce0878c0c58715039571f02f400086da7f63acae3a2987851ae31fa","file":"src/lib/state/theming.state.ts","properties":[],"methods":[{"name":"load","args":[{"name":"ctx","type":"ThemingContext","deprecated":false,"deprecationMessage":""},{"type":"Load","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<>","typeParameters":[],"line":44,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAction for loading yaml, reading data from yaml, setting state variables, and set material-css-vars variables for dynamic theming.\\n","description":"<p>Action for loading yaml, reading data from yaml, setting state variables, and set material-css-vars variables for dynamic theming.</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Load"}],"modifierKind":[170],"jsdoctags":[{"name":{"pos":1096,"end":1099,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"ctx"},"type":"ThemingContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1090,"end":1095,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>State Context</p>\\n"},{"type":"Load","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":1173,"end":1180,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"returns"},"comment":"<p>asyncronous data from the url</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State for keeping track of theming applied</p>\\n","rawdescription":"\\n\\nState for keeping track of theming applied\\n","sourceCode":"import { HttpClient } from \'@angular/common/http\';\\nimport { inject, Injectable } from \'@angular/core\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { MaterialCssVariables, MaterialCssVarsService } from \'angular-material-css-vars\';\\nimport { load } from \'js-yaml\';\\nimport { map, Observable, tap } from \'rxjs\';\\nimport { Load } from \'./theming.actions\';\\nimport { ThemingContext, ThemingModel, THEMING_FILE_SCHEMA } from \'./theming.model\';\\n\\n/**\\n * State for keeping track of theming applied\\n */\\n@State<ThemingModel>({\\n  /**\\n   * name of the state\\n   */\\n  name: \'theming\',\\n  /**\\n   * state variables default value\\n   */\\n  defaults: {},\\n})\\n/**\\n * Theming state class\\n */\\n@Injectable()\\nexport class ThemingState {\\n  /**\\n   * http service for link loading\\n   */\\n  private readonly http = inject(HttpClient);\\n  /**\\n   * Material-vars service for setting theming variables\\n   */\\n  private readonly materialVars = inject(MaterialCssVarsService);\\n\\n  /**\\n   * Action for loading yaml, reading data from yaml, setting state variables, and set material-css-vars variables for dynamic theming.\\n   * @param ctx State Context\\n   * @param action Action with url(yaml url) to load\\n   * @returns asyncronous data from the url\\n   */\\n  @Action(Load)\\n  load(ctx: ThemingContext, { url }: Load): Observable<unknown> {\\n    return this.http.get(url, { responseType: \'text\' }).pipe(\\n      map((data) => load(data, { filename: url })),\\n      map((data) => THEMING_FILE_SCHEMA.parse(data)),\\n      tap((data) => ctx.setState(data)),\\n      tap((data) => this.setVariables(data))\\n    );\\n  }\\n\\n  /**\\n   * Set values to the material-css-vars pallete keys\\n   * @param data key-value pairs set in state\\n   */\\n  private setVariables(data: ThemingModel): void {\\n    for (const [key, value] of Object.entries(data)) {\\n      this.materialVars.setVariable(key as MaterialCssVariables, value);\\n    }\\n  }\\n}\\n","extends":[],"type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"Load","id":"class-Load-469f09c45915febbba378ba114f9cebc6d6342ca6e618a54edaa277bdc8b3fbbce18cea9b8c908ad8794b8a3f9a2fac6a9e21ab80e6e979fda2c08bca4eb995b","file":"src/lib/state/theming.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class Load {\\n  /**\\n   * static type for the action\\n   */\\n  static readonly type = \'[Theming] Load Theming File\';\\n  /**\\n   * Initialising type for the  action\\n   */\\n  readonly type = Load.type;\\n\\n  /**\\n   * It takes URL of the yaml file, and loads it.\\n   * @param url URL of the yaml file, containing theming color key-value pairs\\n   */\\n  constructor(readonly url: string) {}\\n}\\n","constructorObj":{"name":"constructor","description":"<p>It takes URL of the yaml file, and loads it.</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":12,"rawdescription":"\\n\\nIt takes URL of the yaml file, and loads it.\\n","jsdoctags":[{"name":{"pos":354,"end":357,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":348,"end":353,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"param"},"comment":"<p>URL of the yaml file, containing theming color key-value pairs</p>\\n"}]},"inputsClass":[],"outputsClass":[],"properties":[{"name":"type","defaultValue":"\'[Theming] Load Theming File\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"<p>static type for the action</p>\\n","line":8,"rawdescription":"\\n\\nstatic type for the action\\n","modifierKind":[126,148]},{"name":"type","defaultValue":"Load.type","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"<p>Initialising type for the  action</p>\\n","line":12,"rawdescription":"\\n\\nInitialising type for the  action\\n","modifierKind":[148]}],"description":"<p>Load Action, which is triggered to load yaml file, to get theming pallete</p>\\n","rawdescription":"\\n\\nLoad Action, which is triggered to load yaml file, to get theming pallete\\n","methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[],"modules":[{"name":"ThemingModule","id":"module-ThemingModule-a5ac292a1d8f0af8ae5b93edb01358072adb02eaa2e0139627ccb0f40b61d38613bc286464b0e4b2577330616277bc72746d8169acd7a4f527abd04f0e0fe000","description":"<p>Configures global theming</p>\\n","deprecationMessage":"","deprecated":false,"file":"src/lib/theming.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { NgxsModule } from \'@ngxs/store\';\\nimport { MaterialCssVarsModule } from \'angular-material-css-vars\';\\nimport { ThemingState } from \'./state/theming.state\';\\n\\n/** Configures global theming */\\n@NgModule({\\n  imports: [MaterialCssVarsModule.forRoot({}), NgxsModule.forFeature([ThemingState])],\\n})\\nexport class ThemingModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"placeholder","ctype":"miscellaneous","subtype":"variable","file":"src/index.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"undefined","rawdescription":"Placeholder to make build and tests pass until any actual library code is created","description":"<p>Placeholder to make build and tests pass until any actual library code is created</p>\\n"},{"name":"THEMING_FILE_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(z.nativeEnum(MaterialCssVariables), z.string())","rawdescription":"Theming mdoel schema, having records with key as material-css-vars pallete keys and string values","description":"<p>Theming mdoel schema, having records with key as material-css-vars pallete keys and string values</p>\\n"}],"functions":[],"typealiases":[{"name":"ThemingContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ThemingModel>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State context for theming, with reference of model</p>\\n","kind":183},{"name":"ThemingModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for theming</p>\\n","kind":183}],"enumerations":[],"groupedVariables":{"src/index.ts":[{"name":"placeholder","ctype":"miscellaneous","subtype":"variable","file":"src/index.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"undefined","rawdescription":"Placeholder to make build and tests pass until any actual library code is created","description":"<p>Placeholder to make build and tests pass until any actual library code is created</p>\\n"}],"src/lib/state/theming.model.ts":[{"name":"THEMING_FILE_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(z.nativeEnum(MaterialCssVariables), z.string())","rawdescription":"Theming mdoel schema, having records with key as material-css-vars pallete keys and string values","description":"<p>Theming mdoel schema, having records with key as material-css-vars pallete keys and string values</p>\\n"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"src/lib/state/theming.model.ts":[{"name":"ThemingContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ThemingModel>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State context for theming, with reference of model</p>\\n","kind":183},{"name":"ThemingModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for theming</p>\\n","kind":183}]}}}')},"./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$",module.exports=webpackEmptyAsyncContext},"./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories":["./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts",606,627,543,16,983],"./src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts":["./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts",606,627,543,16,983],"./src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories":["./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts",499],"./src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts":["./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.stories.ts",499],"./src/lib/contact-modal/contact-modal.component.stories":["./libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts",606,627,102,550,368,643],"./src/lib/contact-modal/contact-modal.component.stories.ts":["./libs/components/molecules/src/lib/contact-modal/contact-modal.component.stories.ts",606,627,102,550,368,643],"./src/lib/footer/footer.component.stories":["./libs/components/molecules/src/lib/footer/footer.component.stories.ts",606,627,102,32,543,571,550,91,71,70,940,591],"./src/lib/footer/footer.component.stories.ts":["./libs/components/molecules/src/lib/footer/footer.component.stories.ts",606,627,102,32,543,571,550,91,71,70,940,591],"./src/lib/fullscreen/fullscreen-container.stories":["./libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts",375],"./src/lib/fullscreen/fullscreen-container.stories.ts":["./libs/components/molecules/src/lib/fullscreen/fullscreen-container.stories.ts",375],"./src/lib/header/header.component.stories":["./libs/components/molecules/src/lib/header/header.component.stories.ts",606,627,102,32,71,940,39],"./src/lib/header/header.component.stories.ts":["./libs/components/molecules/src/lib/header/header.component.stories.ts",606,627,102,32,71,940,39],"./src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories":["./libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts",947],"./src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts":["./libs/components/molecules/src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.stories.ts",947],"./src/lib/info-modal/info-modal.component.stories":["./libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts",606,627,102,169],"./src/lib/info-modal/info-modal.component.stories.ts":["./libs/components/molecules/src/lib/info-modal/info-modal.component.stories.ts",606,627,102,169],"./src/lib/interactive-svg/interactive-svg.stories":["./libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts",606,543,571,91,477],"./src/lib/interactive-svg/interactive-svg.stories.ts":["./libs/components/molecules/src/lib/interactive-svg/interactive-svg.stories.ts",606,543,571,91,477],"./src/lib/landing-page-in-depth/landing-page-in-depth.component.stories":["./libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts",606,627,102,32,940,623],"./src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts":["./libs/components/molecules/src/lib/landing-page-in-depth/landing-page-in-depth.component.stories.ts",606,627,102,32,940,623],"./src/lib/landing-page-intro/landing-page-intro.component.stories":["./libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts",606,627,102,32,940,465],"./src/lib/landing-page-intro/landing-page-intro.component.stories.ts":["./libs/components/molecules/src/lib/landing-page-intro/landing-page-intro.component.stories.ts",606,627,102,32,940,465],"./src/lib/metrics/metrics.component.stories":["./libs/components/molecules/src/lib/metrics/metrics.component.stories.ts",423],"./src/lib/metrics/metrics.component.stories.ts":["./libs/components/molecules/src/lib/metrics/metrics.component.stories.ts",423],"./src/lib/screen-size-notice/screen-size-notice.component.stories":["./libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts",606,627,102,32,940,31],"./src/lib/screen-size-notice/screen-size-notice.component.stories.ts":["./libs/components/molecules/src/lib/screen-size-notice/screen-size-notice.component.stories.ts",606,627,102,32,940,31],"./src/lib/source-list/source-list.component.stories":["./libs/components/molecules/src/lib/source-list/source-list.component.stories.ts",606,627,102,32,543,571,550,91,71,16,910,987],"./src/lib/source-list/source-list.component.stories.ts":["./libs/components/molecules/src/lib/source-list/source-list.component.stories.ts",606,627,102,32,543,571,550,91,71,16,910,987],"./src/lib/tissue-tree-list/tissue-tree-list.component.stories":["./libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts",606,627,102,32,571,760,940,303],"./src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts":["./libs/components/molecules/src/lib/tissue-tree-list/tissue-tree-list.component.stories.ts",606,627,102,32,571,760,940,303],"./src/lib/title-card/title-card.component.stories":["./libs/components/molecules/src/lib/title-card/title-card.component.stories.ts",455],"./src/lib/title-card/title-card.component.stories.ts":["./libs/components/molecules/src/lib/title-card/title-card.component.stories.ts",455]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"./libs/components/molecules/.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{argTypesEnhancers:()=>argTypesEnhancers,decorators:()=>preview_decorators,parameters:()=>parameters});var core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),lib_esmodule=__webpack_require__("./node_modules/ng-inline-svg-2/lib_esmodule/index.js"),http=(__webpack_require__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs")),animations=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),ngxs_logger_plugin=__webpack_require__("./node_modules/@ngxs/logger-plugin/fesm2022/ngxs-logger-plugin.mjs"),ngxs_store=__webpack_require__("./node_modules/@ngxs/store/fesm2022/ngxs-store.mjs"),angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js"),ngx_markdown=__webpack_require__("./node_modules/ngx-markdown/fesm2022/ngx-markdown.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),angular_material_css_vars=__webpack_require__("./node_modules/angular-material-css-vars/fesm2022/angular-material-css-vars.mjs"),js_yaml=__webpack_require__("./node_modules/js-yaml/dist/js-yaml.mjs"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),Observable=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js");class Load{static{this.type="[Theming] Load Theming File"}constructor(url){this.url=url,this.type=Load.type}}var lib=__webpack_require__("./node_modules/zod/lib/index.mjs");const THEMING_FILE_SCHEMA=lib.z.record(lib.z.nativeEnum(angular_material_css_vars.GC),lib.z.string());let ThemingState=class ThemingState{constructor(){this.http=(0,core.inject)(http.Qq),this.materialVars=(0,core.inject)(angular_material_css_vars.EH)}load(ctx,{url}){return this.http.get(url,{responseType:"text"}).pipe((0,map.T)((data=>(0,js_yaml.Hh)(data,{filename:url}))),(0,map.T)((data=>THEMING_FILE_SCHEMA.parse(data))),(0,tap.M)((data=>ctx.setState(data))),(0,tap.M)((data=>this.setVariables(data))))}setVariables(data){for(const[key,value]of Object.entries(data))this.materialVars.setVariable(key,value)}};(0,tslib_es6.Cg)([(0,ngxs_store.rc)(Load),(0,tslib_es6.Sn)("design:type",Function),(0,tslib_es6.Sn)("design:paramtypes",[Object,Load]),(0,tslib_es6.Sn)("design:returntype",Observable.c)],ThemingState.prototype,"load",null),ThemingState=(0,tslib_es6.Cg)([(0,ngxs_store.Uw)({name:"theming",defaults:{}}),(0,core.Injectable)()],ThemingState);let ThemingModule=class ThemingModule{};function parseDefaultValue(type){const{defaultValue,type:typeDef}=type;if(void 0===defaultValue||"string"!=typeof defaultValue||"string"===typeDef?.name)return defaultValue;switch(typeDef?.name){case"array":case"boolean":case"number":case"object":try{return new Function("return "+defaultValue)()}catch(_error){return}case"enum":return typeDef.value.includes(defaultValue)?defaultValue:void 0;default:return}}ThemingModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[angular_material_css_vars.tY.forRoot({}),ngxs_store.rK.forFeature([ThemingState])]})],ThemingModule);const parameters={actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}},docs:{inlineStories:!0}},argTypesEnhancers=[function fixArgTypes(){return context=>{const argTypes={...context.argTypes},exclude=[...context.parameters.controls?.exclude??[]];for(const[key,type]of Object.entries(argTypes))switch(type.table?.category){case"inputs":const defaultValue=parseDefaultValue(type);defaultValue!==type.defaultValue&&(argTypes[key]={...type,defaultValue});break;case"outputs":argTypes[key]={...type,defaultValue:void 0};break;default:exclude.push(key)}return context.parameters.controls={...context.parameters.controls,exclude},argTypes}}()];const preview_decorators=[...[(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(animations.BrowserAnimationsModule,http.q1,ngxs_store.rK.forRoot([],{developmentMode:!0}),ngxs_logger_plugin.i_.forRoot(),ngx_markdown.y2.forRoot({loader:http.Qq}),ThemingModule)]}),(0,dist.componentWrapperDecorator)((story=>`\n      <div class="mat-typography">${story}</div>\n      <div class="backdrop-filler" style="position: absolute; inset: 0; z-index: -1;"></div>\n    `)),function addState(){return(fn,ctx)=>{const config=ctx.parameters.state;return config?(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(ngxs_store.rK.forFeature(config.states)),{provide:core.APP_INITIALIZER,multi:!0,useFactory:store=>()=>{const{actions}=config;return actions&&actions.length>0?store.dispatch(actions):void 0},deps:[ngxs_store.il]}]})(fn,ctx):fn(ctx)}}()],(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(lib_esmodule.e1.forRoot())]})];!function setDocs(library){const docs=__webpack_require__("./dist/compodoc sync recursive ^\\.\\/.*\\/documentation\\.json$")(`./${library}/documentation.json`);(0,angular.$)(docs)}("components-molecules")},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_CHANNELS_=__webpack_require__("storybook/internal/channels"),csf=__webpack_require__("./node_modules/@storybook/core/dist/csf/index.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const importers=[function(){var _ref=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:libs\/components\/molecules(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(28);return __webpack_require__("./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.mdx)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.A)((function*(path){if(!/^\.[\\/](?:libs\/components\/molecules(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.(js|jsx|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(28);return __webpack_require__("./libs/components/molecules lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:\\/libs\\/components\\/molecules(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")("./"+pathRemainder)}));return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.A)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield(x=()=>importers[i](path),x());if(moduleExports)return moduleExports}var x}))).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNELS_.createBrowserChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),"DEVELOPMENT"===external_STORYBOOK_MODULE_GLOBAL_.global.CONFIG_TYPE&&(window.__STORYBOOK_SERVER_CHANNEL__=channel);const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb((function importFn(_x3){return _importFn.apply(this,arguments)}),(()=>{const previewAnnotations=[__webpack_require__("./node_modules/@storybook/angular/dist/client/preview-prod.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/docs/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/viewport/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./libs/components/molecules/.storybook/preview.ts")],userPreview=previewAnnotations[previewAnnotations.length-1]?.default;return(0,csf.bU)(userPreview)?userPreview.composed:(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)(previewAnnotations)}));window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel},"@storybook/global":module=>{"use strict";module.exports=__STORYBOOK_MODULE_GLOBAL__},"storybook/internal/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"storybook/internal/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"storybook/internal/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"storybook/internal/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__},"storybook/internal/preview-errors":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[791],(()=>(__webpack_exec__("./storybook-config-entry.js"),__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./.storybook/styles.scss?ngGlobalStyle"))));__webpack_require__.O()}]);