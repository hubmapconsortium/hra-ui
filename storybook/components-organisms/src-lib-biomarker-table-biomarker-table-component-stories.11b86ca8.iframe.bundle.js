(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[967],{"./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  background-color: var(--palette-primary-contrast-500-rgb);\n  font-family: Metropolis;\n}\n:host .mat-mdc-cell {\n  padding: 0.25rem 0rem;\n}\n:host .mat-mdc-row {\n  height: fit-content;\n}\n:host .no-border {\n  border: none;\n}\n:host .label {\n  color: rgba(var(--palette-primary-500));\n  padding-right: 3rem;\n  font-weight: 500;\n}\n:host .value {\n  color: rgba(var(--palette-primary-400));\n  font-weight: 400;\n}\n:host .sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n  border-radius: 50%;\n  --radius: 0.625rem;\n  width: var(--radius);\n  height: var(--radius);\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n}\n:host .table th,\n:host .table th div {\n  height: 6.5rem !important;\n}\n:host cdk-virtual-scroll-viewport {\n  height: 100%;\n}\n:host .sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n:host .table {\n  margin-left: -1px;\n}\n:host .table .highlight {\n  background: rgba(var(--palette-primary-100));\n}\n:host .table td.type {\n  text-transform: lowercase;\n}\n:host .table th {\n  background: rgba(var(--palette-primary-100));\n  color: rgba(var(--palette-accent-A400));\n  font-weight: 500;\n  height: 56px;\n  padding: 0;\n  max-width: 2.75rem;\n  min-width: 2.75rem;\n  border-bottom: 1px solid rgba(var(--light-dividers));\n}\n:host .table td {\n  border-bottom: 1px solid rgba(var(--light-dividers));\n  padding: 0 0.5rem;\n}\n:host .table td:not(:first-child) {\n  border-left: 1px solid rgba(var(--light-dividers));\n}\n:host .table tr {\n  height: 2rem;\n  font-size: 0.75rem;\n}\n:host .table tr:first-child td {\n  border-top: 0rem solid rgba(var(--light-dividers));\n  max-width: 13.5rem;\n}\n:host tr > td:first-child {\n  text-align: left;\n}\n:host tr > th:first-child {\n  text-align: left;\n}\n:host tr > td:last-of-type {\n  border-right: 1px solid rgba(var(--light-dividers));\n}\n:host tr > th:last-of-type {\n  border-right: 1px solid rgba(var(--light-dividers));\n  border-left: 1px solid rgba(var(--light-dividers));\n}\n:host .type {\n  height: 2rem;\n  max-width: 13.5rem;\n  border-radius: 0rem;\n  white-space: nowrap;\n}\n:host .type.highlight {\n  font-weight: bold;\n}\n:host .count {\n  height: 2rem;\n  min-width: 4.25rem;\n  border-right: 1px solid rgba(var(--light-dividers));\n}\n:host th:not(:first-child) {\n  border-left: 1px solid rgba(var(--light-dividers));\n}\n:host th:first-child,\n:host th:nth-child(2) {\n  padding: 0 0.5rem !important;\n}\n:host .icon-header .header-column-text {\n  writing-mode: vertical-rl;\n  transform: rotate(180deg);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0.5rem auto;\n}\n:host .icon-cell {\n  width: 2rem;\n  min-height: 2rem;\n}\n:host .icon-cell .icon {\n  margin: auto;\n}\n\n.mat-mdc-row:hover .mat-mdc-cell {\n  background: rgba(var(--palette-primary-100));\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>biomarker_table_component_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var biomarker_table_componentngResource=__webpack_require__("./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.scss?ngResource"),biomarker_table_componentngResource_default=__webpack_require__.n(biomarker_table_componentngResource),scrolling=__webpack_require__("./node_modules/@angular/cdk/fesm2022/scrolling.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),table=__webpack_require__("./node_modules/@angular/material/fesm2022/table.mjs"),overlay=__webpack_require__("./node_modules/@angular/cdk/fesm2022/overlay.mjs"),portal=__webpack_require__("./node_modules/@angular/cdk/fesm2022/portal.mjs");let HoverDirective=class HoverDirective{constructor(){this.el=(0,core.inject)(core.ElementRef).nativeElement,this.overlay=(0,core.inject)(overlay.hJ),this.viewContainerRef=(0,core.inject)(core.ViewContainerRef)}set content(content){this.portal=new portal.VA(content,this.viewContainerRef,this._data),this.updateContent()}set data(data){this._data={$implicit:data},this.portal&&(this.portal.context=this._data,this.updateContent())}startHover(){const{portal}=this;portal&&(this.overlayRef=this.createOverlay(),this.overlayRef.attach(portal))}endHover(){const{overlayRef}=this;overlayRef?.dispose()}updateContent(){const{overlayRef,portal}=this;overlayRef&&portal&&(overlayRef.detach(),overlayRef.attach(portal))}createOverlay(){return this.overlay.create({positionStrategy:this.overlay.position().flexibleConnectedTo(this.el).withPositions([new overlay.uH({originX:"start",originY:"bottom"},{overlayX:"start",overlayY:"top"}),new overlay.uH({originX:"end",originY:"bottom"},{overlayX:"end",overlayY:"top"}),new overlay.uH({originX:"start",originY:"top"},{overlayX:"start",overlayY:"bottom"}),new overlay.uH({originX:"end",originY:"top"},{overlayX:"end",overlayY:"bottom"})]).withPush(!0)})}static{this.propDecorators={content:[{type:core.Input,args:["hraHover"]}],data:[{type:core.Input,args:["hraHoverData"]}],startHover:[{type:core.HostListener,args:["mouseover"]}],endHover:[{type:core.HostListener,args:["mouseout"]}]}}};HoverDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[hraHover]",standalone:!0})],HoverDirective);var biomarker_table_data_icon_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.scss?ngResource"),biomarker_table_data_icon_componentngResource_default=__webpack_require__.n(biomarker_table_data_icon_componentngResource);let BiomarkerTableDataIconComponent=class BiomarkerTableDataIconComponent{constructor(){this.color="",this.size=0}static{this.propDecorators={color:[{type:core.HostBinding,args:["style.background-color"]},{type:core.Input}],size:[{type:core.HostBinding,args:["style.--radius.rem"]},{type:core.Input}]}}};BiomarkerTableDataIconComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-biomarker-table-data-icon",imports:[common.CommonModule],template:"",changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_data_icon_componentngResource_default()]})],BiomarkerTableDataIconComponent);var biomarker_table_data_card_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource"),biomarker_table_data_card_componentngResource_default=__webpack_require__.n(biomarker_table_data_card_componentngResource);let BiomarkerTableDataCardComponent=class BiomarkerTableDataCardComponent{constructor(){this.data=[],this.sectionItems=[]}ngOnChanges(changes){"data"in changes&&this.updateSectionItems()}updateSectionItems(){const newSectionItems=[];this.data.forEach(((section,sectionIndex)=>{section.forEach(((item,itemIndex)=>{newSectionItems.push({data:item,section:sectionIndex,isLastItem:itemIndex===section.length-1})}))})),this.sectionItems=newSectionItems}static{this.propDecorators={data:[{type:core.Input}]}}};BiomarkerTableDataCardComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-biomarker-table-data-card",imports:[common.CommonModule,table.tP],template:'<div class="no-data" *ngIf="sectionItems.length === 0">No data</div>\n<table mat-table *ngIf="sectionItems.length > 0" [dataSource]="sectionItems">\n  <caption class="sr-only">\n    Biomarker Table Data Card\n  </caption>\n\n  \x3c!-- Label Column --\x3e\n  <ng-container matColumnDef="label">\n    <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Label</th>\n    <td class="label" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n      {{ element.data.label }}\n    </td>\n  </ng-container>\n\n  \x3c!-- Value Column --\x3e\n  <ng-container matColumnDef="value">\n    <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Value</th>\n    <td class="value" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n      {{ element.data.value }}\n    </td>\n  </ng-container>\n\n  <tr mat-row *matRowDef="let row; columns: [\'label\', \'value\']"></tr>\n</table>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_data_card_componentngResource_default()]})],BiomarkerTableDataCardComponent);var ng_table_virtual_scroll=__webpack_require__("./node_modules/ng-table-virtual-scroll/fesm2020/ng-table-virtual-scroll.mjs"),ReplaySubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js");let BiomarkerTableComponent=class BiomarkerTableComponent{constructor(){this.tissueInfo={id:"",label:""},this.columns=[],this.dataSources=[],this.data=[],this.gradient=[],this.sizes=[],this.highlightedCellId="",this.illustrationIds=[],this.rowHover=new core.EventEmitter,this.columns$=new ReplaySubject.m(1),this.cellWidth=44,this.extraDisplayedColumnCount=2,this.horizontalViewportSize=400,this.horizontalScrollOffset=0,this.displayedColumnCount=10,this.displayedColumnOffset=0,this.dataSource=new ng_table_virtual_scroll.ap([]),this.cdr=(0,core.inject)(core.ChangeDetectorRef)}get preFillerWidth(){return this.cellWidth*this.displayedColumnOffset+"px"}get postFillerWidth(){const count=this.columns.length-this.displayedColumnCount-this.displayedColumnOffset;return this.cellWidth*count+"px"}ngOnInit(){this.vscroll.scrollable.elementScrolled().subscribe((()=>this.checkDisplayedColumns()))}ngOnChanges(changes){this.checkDisplayedColumns("columns"in changes),("data"in changes||"illustrationIds"in changes)&&(this.dataSource.data=this.sortTableData(this.data))}onMouseMove(){this.checkDisplayedColumns()}trackByIndex(index){return index}checkDisplayedColumns(forceUpdate=!1){const scrollable=this.vscroll.scrollable,size=scrollable.measureViewportSize("horizontal"),offset=scrollable.measureScrollOffset("start");let shouldUpdate=forceUpdate;size!==this.horizontalViewportSize&&(this.updateHorizontalViewportSize(size),shouldUpdate=!0),offset!==this.horizontalScrollOffset&&(this.updateHorizontalViewportOffset(offset),shouldUpdate=!0),shouldUpdate&&this.updateColumns()}updateHorizontalViewportSize(size){this.horizontalViewportSize=size,this.displayedColumnCount=Math.ceil(this.horizontalViewportSize/this.cellWidth)+this.extraDisplayedColumnCount}updateHorizontalViewportOffset(offset){this.horizontalScrollOffset=offset,this.displayedColumnOffset=Math.max(Math.floor(offset/this.cellWidth)-this.extraDisplayedColumnCount/2,0)}updateColumns(){const{displayedColumnCount,displayedColumnOffset}=this,columns=["type","count"];this.displayedColumnOffset>0&&columns.push("preFiller");const displayedColumns=this.columns.slice(displayedColumnOffset,displayedColumnOffset+displayedColumnCount);columns.push(...displayedColumns),displayedColumnOffset+displayedColumnCount<this.columns.length&&columns.push("postFiller"),this.columns$.next(columns),this.cdr.detectChanges()}sortTableData(data){const illustrationIdsSet=new Set(this.illustrationIds),inIllustration=new Map;for(const row of data){const id=this.getHoverId(row);inIllustration.set(row,illustrationIdsSet.has(id))}return[...data].sort(((row1,row2)=>{const in1=inIllustration.get(row1),in2=inIllustration.get(row2);return in1&&!in2?-1:!in1&&in2?1:row1[0].localeCompare(row2[0])}))}isHighlighted(row){return this.getHoverId(row)===this.highlightedCellId}getHoverId(data){const entry=data.slice(2).find((item=>item));return entry?.data.cell}lerp(value,min,max){return min*(1-value)+max*value}hex2rgb(hex){return[parseInt(hex.slice(1,3),16),parseInt(hex.slice(3,5),16),parseInt(hex.slice(5,7),16)]}getMinMaxColor(meanExpression){const index=this.gradient.findIndex(((item,i,arr)=>meanExpression>=item.percentage&&meanExpression<=arr[i+1]?.percentage));return{minColor:this.hex2rgb(this.gradient[index]?.color??this.gradient[0].color),maxColor:this.hex2rgb(this.gradient[index+1].color)}}getMinMaxSize(percentage){const index=this.sizes.findIndex(((item,i,arr)=>percentage>=parseFloat(item.label)/100&&percentage<=parseFloat(arr[i+1]?.label)/100)),minSize=this.sizes[index]?.radius;return{minSize,maxSize:this.sizes[index+1].radius}}getColor(value){const{minColor,maxColor}=this.getMinMaxColor(100*value);return"#"+minColor.map(((min,index)=>this.lerp(value,min,maxColor[index]))).map((component=>{const hex=Math.round(component).toString(16);return 1===hex.length?"0"+hex:hex})).join("")}getSize(value){const{minSize,maxSize}=this.getMinMaxSize(value);return this.lerp(value,minSize,maxSize)}getHoverData([index,row]){if(void 0===row[index])return[];const{tissueInfo:{id,label}}=this,{data:{cell,biomarker,meanExpression,dataset_count}}=row[index];return[[{label:"Functional Tissue Unit Name",value:label},{label:"Uberon ID",value:id},{label:"#Datasets",value:`${dataset_count??0}`}],[{label:"Cell Type Name",value:row[0]},{label:"CL ID",value:cell},{label:"Number of Cells",value:`${row[1]}`}],[{label:"Gene Name",value:this.columns[index-2]},{label:"HGNC ID",value:biomarker},{label:"Mean Expression Value",value:meanExpression.toFixed(6)}]]}setHoverId(hoverId){this.highlightedCellId=hoverId??"",this.rowHover.emit(hoverId)}static{this.propDecorators={tissueInfo:[{type:core.Input}],columns:[{type:core.Input}],dataSources:[{type:core.Input}],data:[{type:core.Input}],gradient:[{type:core.Input}],sizes:[{type:core.Input}],highlightedCellId:[{type:core.Input}],illustrationIds:[{type:core.Input}],rowHover:[{type:core.Output}],vscroll:[{type:core.ViewChild,args:[scrolling.d6,{static:!0}]}],table:[{type:core.ViewChild,args:["table",{static:!0,read:core.ElementRef}]}],onMouseMove:[{type:core.HostListener,args:["window:mousemove",["$event"]]}]}}};BiomarkerTableComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-biomarker-table",imports:[common.CommonModule,table.tP,BiomarkerTableDataIconComponent,HoverDirective,BiomarkerTableDataCardComponent,scrolling.E9,ng_table_virtual_scroll.VL],template:'<cdk-virtual-scroll-viewport tvsItemSize="32" headerHeight="72">\n  <table class="table" mat-table [dataSource]="dataSource" #table>\n    <caption class="sr-only">\n      Cell type table by Biomarker\n    </caption>\n\n    <ng-container matColumnDef="type" sticky>\n      <th mat-header-cell *matHeaderCellDef>Cell Type</th>\n\n      <td\n        class="type"\n        mat-cell\n        *matCellDef="let element"\n        [class.highlight]="isHighlighted(element)"\n        [hraHover]="columnHover"\n        [hraHoverData]="element[0]"\n      >\n        {{ element[0] }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef="count" sticky>\n      <th class="count" mat-header-cell *matHeaderCellDef>Cell Count</th>\n\n      <td class="count" mat-cell *matCellDef="let element" [class.highlight]="isHighlighted(element)">\n        {{ element[1] !== undefined ? (element[1] | number) : \'no data\' }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef="preFiller">\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef="let element" style="max-width: unset">\n        <div [style.width]="preFillerWidth"></div>\n      </td>\n    </ng-container>\n\n    <ng-container *ngFor="let column of columns; let index = index; trackBy: trackByIndex" [matColumnDef]="column">\n      <th class="icon-header" mat-header-cell *matHeaderCellDef [hraHover]="columnHover" [hraHoverData]="column">\n        <div class="header-column-text">\n          {{ column }}\n        </div>\n      </th>\n\n      <td class="icon-cell" mat-cell *matCellDef="let element" [class.highlight]="isHighlighted(element)">\n        <hra-biomarker-table-data-icon\n          class="icon"\n          *ngIf="element[index + 2] !== undefined; else emptyCell"\n          [color]="getColor(element[index + 2].color)"\n          [size]="getSize(element[index + 2].size)"\n          [hraHover]="dataHover"\n          [hraHoverData]="[index + 2, element]"\n        >\n        </hra-biomarker-table-data-icon>\n\n        <ng-template #emptyCell>\n          <div class="empty" [hraHover]="dataHover" [hraHoverData]="[index + 2, element]"></div>\n        </ng-template>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef="postFiller">\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef="let element" style="max-width: unset">\n        <div [style.width]="postFillerWidth"></div>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="(columns$ | async) ?? []; sticky: true"></tr>\n    <tr\n      mat-row\n      *matRowDef="let row; columns: (columns$ | async) ?? []"\n      (mouseover)="setHoverId(getHoverId(row))"\n      (mouseout)="setHoverId(undefined)"\n    ></tr>\n  </table>\n</cdk-virtual-scroll-viewport>\n\n<ng-template #columnHover let-columnName>\n  <div class="biomarker-table-hover full-column-name">\n    {{ columnName }}\n  </div>\n</ng-template>\n\n<ng-template #dataHover let-data>\n  <hra-biomarker-table-data-card [data]="getHoverData(data)"> </hra-biomarker-table-data-card>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_componentngResource_default()]})],BiomarkerTableComponent);const biomarker_table_component_stories={title:"BiomarkerTableComponent",component:BiomarkerTableComponent},Primary={render:args=>({props:args}),args:{columns:["RGMB","SOX9","CD44","LGR5","chromosome inavalitentte A"],tissueInfo:{id:"555",label:"sampleDataset"},data:[["absorptive cell",2764,{color:"#9ca5ee",size:.56,data:{cell:"",biomarker:"",meanExpression:0,dataset_count:0}}],["enteroendocrine cell",17,{color:"#00ffb2",size:.689,data:{cell:"",biomarker:"",meanExpression:0,dataset_count:0}}],["epithelial stem cell",187,{color:"#00ffb2",size:.689,data:{cell:"",biomarker:"",meanExpression:0,dataset_count:0}}],["goblet cell",187,{color:"#00ffb2",size:.689,data:{cell:"",biomarker:"",meanExpression:0,dataset_count:0}}]]}},__namedExportsOrder=["Primary"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    columns: ['RGMB', 'SOX9', 'CD44', 'LGR5', 'chromosome inavalitentte A'],\n    tissueInfo: {\n      id: '555',\n      label: 'sampleDataset'\n    },\n    data: [['absorptive cell', 2764, {\n      color: '#9ca5ee',\n      size: 0.56,\n      data: {\n        cell: '',\n        biomarker: '',\n        meanExpression: 0,\n        dataset_count: 0\n      }\n    }], ['enteroendocrine cell', 17, {\n      color: '#00ffb2',\n      size: 0.689,\n      data: {\n        cell: '',\n        biomarker: '',\n        meanExpression: 0,\n        dataset_count: 0\n      }\n    }], ['epithelial stem cell', 187, {\n      color: '#00ffb2',\n      size: 0.689,\n      data: {\n        cell: '',\n        biomarker: '',\n        meanExpression: 0,\n        dataset_count: 0\n      }\n    }], ['goblet cell', 187, {\n      color: '#00ffb2',\n      size: 0.689,\n      data: {\n        cell: '',\n        biomarker: '',\n        meanExpression: 0,\n        dataset_count: 0\n      }\n    }]]\n  }\n}",...Primary.parameters?.docs?.source}}}}}]);