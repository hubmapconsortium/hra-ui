(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[715],{"./libs/components/atoms/src/lib/empty-biomarker/empty-biomarker.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n  padding: 1.5rem;\n}\n:host .collaborate-button {\n  margin-top: 0.5rem;\n  font-weight: 700;\n  color: #fff;\n  width: 100%;\n  max-width: 20rem;\n  height: 3rem;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/atoms/src/lib/gradient-legend/gradient-legend.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n}\n:host .gradient-bar {\n  height: 1.5rem;\n  width: 100%;\n  margin-bottom: 5px;\n}\n:host .legend {\n  display: flex;\n}\n:host .legend .filler {\n  flex-grow: 1;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/atoms/src/lib/size-legend/size-legend.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: flex;\n  flex-direction: row;\n  column-gap: 2rem;\n}\n:host .item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  line-height: 0.5rem;\n}\n:host .item .circle {\n  height: var(--size);\n  width: var(--size);\n  border-radius: 50%;\n  border: 0.125rem solid #75838f;\n}\n:host .item .label {\n  margin-top: 0.5rem;\n}\n:host .item .filler {\n  flex-grow: 1;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/behavioral/src/lib/biomarker-details/biomarker-details.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,':host {\n  display: grid;\n  grid-template-columns: 1fr 1fr auto;\n  grid-template-rows: auto 2rem 69px min-content;\n  grid-template-areas: "table table table" "gradient-legend-header size-legend-header size-legend-header" "gradient-legend size-legend ." "source-list source-list source-list";\n}\n@media (min-height: 49.5rem) {\n  :host {\n    grid-template-rows: auto 37px 69px min-content;\n  }\n  :host ::ng-deep .table-tab-header {\n    height: calc(3rem - 1px) !important;\n  }\n}\n@media (min-height: 60.75rem) {\n  :host {\n    grid-template-rows: auto 3rem 5rem min-content;\n  }\n}\n:host .table {\n  grid-area: table;\n  max-width: 100%;\n}\n:host .table ::ng-deep .mat-mdc-tab-body-wrapper {\n  height: 100%;\n}\n:host .table ::ng-deep .mat-mdc-tab {\n  max-width: 14rem;\n}\n:host .table ::ng-deep .expansion-icon {\n  position: absolute;\n  right: 0;\n  opacity: 1;\n  height: 100%;\n}\n:host .table .cursor {\n  pointer-events: auto;\n}\n:host ::ng-deep .table-tab-header > .mdc-tab__content > span {\n  -webkit-user-select: none;\n          user-select: none;\n  font-weight: 500;\n}\n:host ::ng-deep .mat-mdc-tab-group.mat-accent .mat-mdc-tab:not(.mat-mdc-tab-disabled).mdc-tab--active {\n  -webkit-user-select: none;\n          user-select: none;\n}\n:host .legend-header {\n  gap: 0.5rem;\n  min-width: max-content;\n  line-height: normal;\n}\n:host .legend-header.gradient {\n  grid-area: gradient-legend-header;\n}\n:host .legend-header.size {\n  grid-area: size-legend-header;\n}\n:host .legend-header .icon {\n  font-size: 1.125rem;\n  height: 1.125rem;\n  width: 1.125rem;\n}\n:host .legend {\n  padding: 1rem 1.5rem;\n}\n:host .legend.gradient {\n  grid-area: gradient-legend;\n}\n:host .legend.gradient .content {\n  width: 10rem;\n}\n:host .legend.size {\n  grid-area: size-legend;\n}\n:host .source-list {\n  height: min-content;\n  grid-area: source-list;\n  overflow: hidden;\n  max-height: 276px;\n}\n:host hra-biomarker-table {\n  height: 100%;\n}\n:host hra-biomarker-table.small {\n  min-height: fit-content;\n}\n:host hra-label-box {\n  font-size: 0.875rem;\n  padding-left: 1.5rem;\n}\n\n::ng-deep .biomarker-details.info-tooltip {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  max-width: 21rem;\n  font-family: Metropolis;\n  font-weight: 500;\n  font-size: 0.75rem;\n  line-height: 1.375rem;\n}\n\n::ng-deep .mdc-tab__ripple::before {\n  opacity: 0 !important;\n}\n\n::ng-deep .biomarker-table-hover.full-column-name {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  overflow: auto;\n  max-width: fit-content;\n  font-family: Metropolis;\n  font-size: 0.75rem;\n}\n::ng-deep .biomarker-table-hover.full-column-name.empty {\n  display: none;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/behavioral/src/lib/biomarker-details/biomarker-details.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,createDataItem:()=>createDataItem,default:()=>biomarker_details_component_stories});var icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),resource_registry_state=__webpack_require__("./libs/cdk/state/src/resource-registry/resource-registry.state.ts"),resource_registry_actions=__webpack_require__("./libs/cdk/state/src/resource-registry/resource-registry.actions.ts"),source_refs_state=__webpack_require__("./libs/state/src/lib/source-refs/source-refs.state.ts"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var biomarker_details_componentngResource=__webpack_require__("./libs/components/behavioral/src/lib/biomarker-details/biomarker-details.component.scss?ngResource"),biomarker_details_componentngResource_default=__webpack_require__.n(biomarker_details_componentngResource),common_module_Dx7dWex5=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),module_BnDTus5c=__webpack_require__("./node_modules/@angular/material/fesm2022/module-BnDTus5c.mjs"),tabs=__webpack_require__("./node_modules/@angular/material/fesm2022/tabs.mjs"),overlay_module_BUj0D19H=__webpack_require__("./node_modules/@angular/cdk/fesm2022/overlay-module-BUj0D19H.mjs"),portal_directives_Bw5woq8I=__webpack_require__("./node_modules/@angular/cdk/fesm2022/portal-directives-Bw5woq8I.mjs");let HoverDirective=class HoverDirective{constructor(){this.el=(0,core.inject)(core.ElementRef).nativeElement,this.overlay=(0,core.inject)(overlay_module_BUj0D19H.a),this.viewContainerRef=(0,core.inject)(core.ViewContainerRef)}set content(content){this.portal=new portal_directives_Bw5woq8I.T(content,this.viewContainerRef,this._data),this.updateContent()}set data(data){this._data={$implicit:data},this.portal&&(this.portal.context=this._data,this.updateContent())}startHover(){const{portal}=this;portal&&(this.overlayRef=this.createOverlay(),this.overlayRef.attach(portal))}endHover(){const{overlayRef}=this;overlayRef?.dispose()}updateContent(){const{overlayRef,portal}=this;overlayRef&&portal&&(overlayRef.detach(),overlayRef.attach(portal))}createOverlay(){return this.overlay.create({positionStrategy:this.overlay.position().flexibleConnectedTo(this.el).withPositions([new overlay_module_BUj0D19H.g({originX:"start",originY:"bottom"},{overlayX:"start",overlayY:"top"}),new overlay_module_BUj0D19H.g({originX:"end",originY:"bottom"},{overlayX:"end",overlayY:"top"}),new overlay_module_BUj0D19H.g({originX:"start",originY:"top"},{overlayX:"start",overlayY:"bottom"}),new overlay_module_BUj0D19H.g({originX:"end",originY:"top"},{overlayX:"end",overlayY:"bottom"})]).withPush(!0)})}static{this.propDecorators={content:[{type:core.Input,args:["hraHover"]}],data:[{type:core.Input,args:["hraHoverData"]}],startHover:[{type:core.HostListener,args:["mouseover"]}],endHover:[{type:core.HostListener,args:["mouseout"]}]}}};HoverDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[hraHover]",standalone:!0})],HoverDirective);var select_snapshot=__webpack_require__("./libs/cdk/injectors/src/lib/select/select-snapshot.ts"),dispatch=__webpack_require__("./libs/cdk/injectors/src/lib/dispatch/dispatch.ts"),resource_registry_selectors=__webpack_require__("./libs/cdk/state/src/resource-registry/resource-registry.selectors.ts");var gradient_legend_componentngResource=__webpack_require__("./libs/components/atoms/src/lib/gradient-legend/gradient-legend.component.scss?ngResource"),gradient_legend_componentngResource_default=__webpack_require__.n(gradient_legend_componentngResource);let GradientLegendComponent=class GradientLegendComponent{constructor(){this.gradient=[]}get gradientCss(){return`linear-gradient(90deg, ${this.gradient.map((({color,percentage})=>`${color} ${percentage}%`)).join(",")})`}static{this.propDecorators={gradient:[{type:core.Input}]}}};GradientLegendComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-gradient-legend",imports:[common_module_Dx7dWex5.MD],template:'<div class="gradient-bar" [style.background]="gradientCss"></div>\n<div class="legend">\n  <div class="start">0.0</div>\n  <div class="filler"></div>\n  <div class="end">1.0</div>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[gradient_legend_componentngResource_default()]})],GradientLegendComponent);var label_box_component=__webpack_require__("./libs/components/atoms/src/lib/label-box/label-box.component.ts");var size_legend_componentngResource=__webpack_require__("./libs/components/atoms/src/lib/size-legend/size-legend.component.scss?ngResource"),size_legend_componentngResource_default=__webpack_require__.n(size_legend_componentngResource);let SizeLegendComponent=class SizeLegendComponent{constructor(){this.sizes=[]}static{this.propDecorators={sizes:[{type:core.Input}]}}};SizeLegendComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-size-legend",imports:[common_module_Dx7dWex5.MD],template:'<div *ngFor="let text of sizes" class="item">\n  <div class="filler"></div>\n  <div class="circle" style="--size: {{ text.radius }}rem"></div>\n  <div class="filler"></div>\n  <div class="label">{{ text.label }}</div>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[size_legend_componentngResource_default()]})],SizeLegendComponent);var empty_biomarker_componentngResource=__webpack_require__("./libs/components/atoms/src/lib/empty-biomarker/empty-biomarker.component.scss?ngResource"),empty_biomarker_componentngResource_default=__webpack_require__.n(empty_biomarker_componentngResource),fesm2022_button=__webpack_require__("./node_modules/@angular/material/fesm2022/button.mjs"),ngx_markdown=__webpack_require__("./node_modules/ngx-markdown/fesm2022/ngx-markdown.mjs");let EmptyBiomarkerComponent=class EmptyBiomarkerComponent{constructor(){this.collaborateText="",this.message="",this.collaborateClick=new core.EventEmitter}static{this.propDecorators={collaborateText:[{type:core.Input}],message:[{type:core.Input}],collaborateClick:[{type:core.Output}]}}};EmptyBiomarkerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-empty-biomarker",imports:[common_module_Dx7dWex5.MD,fesm2022_button.Hl,ngx_markdown.y2],template:'<markdown [data]="message" class="message"></markdown>\n<button mat-flat-button class="collaborate-button" color="primary" (click)="collaborateClick.emit($event)">\n  {{ collaborateText }}\n</button>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[empty_biomarker_componentngResource_default()]})],EmptyBiomarkerComponent);var source_list_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/source-list/source-list.component.scss?ngResource"),source_list_componentngResource_default=__webpack_require__.n(source_list_componentngResource),selection_model_CeeHVIcP=__webpack_require__("./node_modules/@angular/cdk/fesm2022/selection-model-CeeHVIcP.mjs"),fesm2022_checkbox=__webpack_require__("./node_modules/@angular/material/fesm2022/checkbox.mjs"),sort=__webpack_require__("./node_modules/@angular/material/fesm2022/sort.mjs"),table=__webpack_require__("./node_modules/@angular/material/fesm2022/table.mjs"),ngx_google_analytics=__webpack_require__("./node_modules/ngx-google-analytics/fesm2020/ngx-google-analytics.mjs");let SourceListComponent=class SourceListComponent{constructor(){this.sources=[],this.collaborateText="",this.message="",this.showTable=!0,this.selection=new selection_model_CeeHVIcP.S(!0,[]),this.dataSource=new table.I6,this.displayedColumns=["select","authors","year","title","link"],this.collaborateClick=new core.EventEmitter,this.selectionChanged=new core.EventEmitter,this.ga=(0,core.inject)(ngx_google_analytics.p)}set sort(sorter){this.dataSource.sort=sorter||null}ngOnChanges(changes){"sources"in changes&&(this.selection.clear(),this.dataSource.data=this.sources,this.toggleAllRows())}toggleTable(){this.showTable=!this.showTable,this.ga.event("source_table_toggle",this.showTable.toString())}sourceLinkClicked(item){this.ga.event("source_link_clicked","link_click",item.link)}isAllSelected(){return this.selection.selected.length===this.dataSource.data.length}toggleAllRows(){if(this.isAllSelected())return this.selection.clear(),void this.selectionChanged.emit(this.selection.selected);this.dataSource.data.forEach((row=>this.selection.select(row))),this.selectionChanged.emit(this.selection.selected)}toggleRow(row){this.selection.toggle(row),this.selectionChanged.emit(this.selection.selected)}static{this.propDecorators={sources:[{type:core.Input}],collaborateText:[{type:core.Input}],message:[{type:core.Input}],collaborateClick:[{type:core.Output}],selectionChanged:[{type:core.Output}],sort:[{type:core.ViewChild,args:[sort.B4]}]}}};SourceListComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-source-list",imports:[common_module_Dx7dWex5.MD,fesm2022_button.Hl,table.tP,icon.m_,sort.NQ,label_box_component.h,EmptyBiomarkerComponent,fesm2022_checkbox.g7,HoverDirective],template:'<hra-label-box class="toggle" (click)="toggleTable()">\n  Source Data\n  <mat-icon class="end material-symbols-outlined">\n    {{ showTable ? \'keyboard_arrow_down\' : \'keyboard_arrow_up\' }}\n  </mat-icon>\n</hra-label-box>\n\n<div class="table-content" [class.hidden]="!showTable">\n  <table\n    *ngIf="sources.length !== 0"\n    mat-table\n    [dataSource]="dataSource"\n    matSort\n    matSortActive="authors"\n    matSortDirection="asc"\n  >\n    <caption class="sr-only">\n      Source Data\n    </caption>\n\n    \x3c!-- Checkbox Column --\x3e\n    <ng-container matColumnDef="select">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox\n          (change)="$event ? toggleAllRows() : null"\n          [checked]="selection.hasValue() && isAllSelected()"\n          [indeterminate]="selection.hasValue() && !isAllSelected()"\n          [disableRipple]="true"\n        >\n        </mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef="let row">\n        <mat-checkbox\n          (click)="$event.stopPropagation()"\n          (change)="$event ? toggleRow(row) : null"\n          [checked]="selection.isSelected(row)"\n          [disableRipple]="true"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    \x3c!-- Authors Column --\x3e\n    <ng-container matColumnDef="authors">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Authors</th>\n      <td mat-cell *matCellDef="let row" [hraHover]="dataHover" [hraHoverData]="row.authors">\n        {{ row.authors.join(\', \') }}\n      </td>\n    </ng-container>\n\n    \x3c!-- Year Column --\x3e\n    <ng-container matColumnDef="year">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Year</th>\n      <td mat-cell *matCellDef="let row">{{ row.year < 0 ? \'\' : row.year }}</td>\n    </ng-container>\n\n    \x3c!-- Title Column --\x3e\n    <ng-container matColumnDef="title">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper Title</th>\n      <td mat-cell *matCellDef="let row" [hraHover]="dataHover" [hraHoverData]="row.title">{{ row.title }}</td>\n    </ng-container>\n\n    \x3c!-- DOI Column --\x3e\n    <ng-container matColumnDef="link">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper DOI</th>\n      <td\n        mat-cell\n        *matCellDef="let row"\n        [hraHover]="dataHover"\n        [hraHoverData]="row.link"\n        (click)="sourceLinkClicked(row)"\n      >\n        <a\n          class="source-link"\n          mat-flat-button\n          [href]="row.link"\n          target="_blank"\n          rel="noopener noreferrer"\n          disableRipple\n        >\n          {{ row.link }}\n        </a>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></tr>\n    <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>\n  </table>\n  <hra-empty-biomarker\n    *ngIf="sources.length === 0"\n    [collaborateText]="collaborateText"\n    (collaborateClick)="collaborateClick.emit()"\n  ></hra-empty-biomarker>\n</div>\n\n<ng-template #dataHover let-columnName>\n  <div class="biomarker-table-hover full-column-name" [class.empty]="columnName.toString() === \'\'">\n    {{ columnName }}\n  </div>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[source_list_componentngResource_default()]})],SourceListComponent);var biomarker_table_componentngResource=__webpack_require__("./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.scss?ngResource"),biomarker_table_componentngResource_default=__webpack_require__.n(biomarker_table_componentngResource),scrolling=__webpack_require__("./node_modules/@angular/cdk/fesm2022/scrolling.mjs"),biomarker_table_data_icon_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.scss?ngResource"),biomarker_table_data_icon_componentngResource_default=__webpack_require__.n(biomarker_table_data_icon_componentngResource);let BiomarkerTableDataIconComponent=class BiomarkerTableDataIconComponent{constructor(){this.color="",this.size=0}static{this.propDecorators={color:[{type:core.HostBinding,args:["style.background-color"]},{type:core.Input}],size:[{type:core.HostBinding,args:["style.--radius.rem"]},{type:core.Input}]}}};BiomarkerTableDataIconComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-biomarker-table-data-icon",imports:[common_module_Dx7dWex5.MD],template:"",changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_data_icon_componentngResource_default()]})],BiomarkerTableDataIconComponent);var biomarker_table_data_card_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource"),biomarker_table_data_card_componentngResource_default=__webpack_require__.n(biomarker_table_data_card_componentngResource);let BiomarkerTableDataCardComponent=class BiomarkerTableDataCardComponent{constructor(){this.data=[],this.sectionItems=[]}ngOnChanges(changes){"data"in changes&&this.updateSectionItems()}updateSectionItems(){const newSectionItems=[];this.data.forEach(((section,sectionIndex)=>{section.forEach(((item,itemIndex)=>{newSectionItems.push({data:item,section:sectionIndex,isLastItem:itemIndex===section.length-1})}))})),this.sectionItems=newSectionItems}static{this.propDecorators={data:[{type:core.Input}]}}};BiomarkerTableDataCardComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-biomarker-table-data-card",imports:[common_module_Dx7dWex5.MD,table.tP],template:'@if (sectionItems.length === 0) {\n  <div class="no-data">No data</div>\n}\n\n@if (sectionItems.length > 0) {\n  <table mat-table [dataSource]="sectionItems">\n    <caption class="sr-only">\n      Biomarker Table Data Card\n    </caption>\n\n    \x3c!-- Label Column --\x3e\n    <ng-container matColumnDef="label">\n      <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Label</th>\n      <td class="label" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n        {{ element.data.label }}\n      </td>\n    </ng-container>\n\n    \x3c!-- Value Column --\x3e\n    <ng-container matColumnDef="value">\n      <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Value</th>\n      <td class="value" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n        {{ element.data.value }}\n      </td>\n    </ng-container>\n\n    <tr mat-row *matRowDef="let row; columns: [\'label\', \'value\']"></tr>\n  </table>\n}\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_data_card_componentngResource_default()]})],BiomarkerTableDataCardComponent);var ng_table_virtual_scroll=__webpack_require__("./node_modules/ng-table-virtual-scroll/fesm2020/ng-table-virtual-scroll.mjs"),ReplaySubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js");let BiomarkerTableComponent=class BiomarkerTableComponent{constructor(){this.tissueInfo={id:"",label:""},this.columns=[],this.dataSources=[],this.data=[],this.gradient=[],this.sizes=[],this.highlightedCellId="",this.illustrationIds=[],this.rowHover=new core.EventEmitter,this.columns$=new ReplaySubject.m(1),this.cellWidth=44,this.extraDisplayedColumnCount=2,this.horizontalViewportSize=400,this.horizontalScrollOffset=0,this.displayedColumnCount=10,this.displayedColumnOffset=0,this.dataSource=new ng_table_virtual_scroll.ap([]),this.cdr=(0,core.inject)(core.ChangeDetectorRef)}get preFillerWidth(){return this.cellWidth*this.displayedColumnOffset+"px"}get postFillerWidth(){const count=this.columns.length-this.displayedColumnCount-this.displayedColumnOffset;return this.cellWidth*count+"px"}ngOnInit(){this.vscroll.scrollable.elementScrolled().subscribe((()=>this.checkDisplayedColumns()))}ngOnChanges(changes){this.checkDisplayedColumns("columns"in changes),("data"in changes||"illustrationIds"in changes)&&(this.dataSource.data=this.sortTableData(this.data))}onMouseMove(){this.checkDisplayedColumns()}trackByIndex(index){return index}checkDisplayedColumns(forceUpdate=!1){const scrollable=this.vscroll.scrollable,size=scrollable.measureViewportSize("horizontal"),offset=scrollable.measureScrollOffset("start");let shouldUpdate=forceUpdate;size!==this.horizontalViewportSize&&(this.updateHorizontalViewportSize(size),shouldUpdate=!0),offset!==this.horizontalScrollOffset&&(this.updateHorizontalViewportOffset(offset),shouldUpdate=!0),shouldUpdate&&this.updateColumns()}updateHorizontalViewportSize(size){this.horizontalViewportSize=size,this.displayedColumnCount=Math.ceil(this.horizontalViewportSize/this.cellWidth)+this.extraDisplayedColumnCount}updateHorizontalViewportOffset(offset){this.horizontalScrollOffset=offset,this.displayedColumnOffset=Math.max(Math.floor(offset/this.cellWidth)-this.extraDisplayedColumnCount/2,0)}updateColumns(){const{displayedColumnCount,displayedColumnOffset}=this,columns=["type","count"];this.displayedColumnOffset>0&&columns.push("preFiller");const displayedColumns=this.columns.slice(displayedColumnOffset,displayedColumnOffset+displayedColumnCount);columns.push(...displayedColumns),displayedColumnOffset+displayedColumnCount<this.columns.length&&columns.push("postFiller"),this.columns$.next(columns),this.cdr.detectChanges()}sortTableData(data){const illustrationIdsSet=new Set(this.illustrationIds),inIllustration=new Map;for(const row of data){const id=this.getHoverId(row);inIllustration.set(row,illustrationIdsSet.has(id))}return[...data].sort(((row1,row2)=>{const in1=inIllustration.get(row1),in2=inIllustration.get(row2);return in1&&!in2?-1:!in1&&in2?1:row1[0].localeCompare(row2[0])}))}isHighlighted(row){return this.getHoverId(row)===this.highlightedCellId}getHoverId(data){const entry=data.slice(2).find((item=>item));return entry?.data.cell}lerp(value,min,max){return min*(1-value)+max*value}hex2rgb(hex){return[parseInt(hex.slice(1,3),16),parseInt(hex.slice(3,5),16),parseInt(hex.slice(5,7),16)]}getMinMaxColor(meanExpression){const index=this.gradient.findIndex(((item,i,arr)=>meanExpression>=item.percentage&&meanExpression<=arr[i+1]?.percentage));return{minColor:this.hex2rgb(this.gradient[index]?.color??this.gradient[0].color),maxColor:this.hex2rgb(this.gradient[index+1].color)}}getMinMaxSize(percentage){const index=this.sizes.findIndex(((item,i,arr)=>percentage>=parseFloat(item.label)/100&&percentage<=parseFloat(arr[i+1]?.label)/100)),minSize=this.sizes[index]?.radius;return{minSize,maxSize:this.sizes[index+1].radius}}getColor(value){const{minColor,maxColor}=this.getMinMaxColor(100*value);return"#"+minColor.map(((min,index)=>this.lerp(value,min,maxColor[index]))).map((component=>{const hex=Math.round(component).toString(16);return 1===hex.length?"0"+hex:hex})).join("")}getSize(value){const{minSize,maxSize}=this.getMinMaxSize(value);return this.lerp(value,minSize,maxSize)}getHoverData([index,row]){if(void 0===row[index])return[];const{tissueInfo:{id,label}}=this,{data:{cell,biomarker,meanExpression,dataset_count}}=row[index];return[[{label:"Functional Tissue Unit Name",value:label},{label:"Uberon ID",value:id},{label:"#Datasets",value:`${dataset_count??0}`}],[{label:"Cell Type Name",value:row[0]},{label:"CL ID",value:cell},{label:"Number of Cells",value:`${row[1]}`}],[{label:"Gene Name",value:this.columns[index-2]},{label:"HGNC ID",value:biomarker},{label:"Mean Expression Value",value:meanExpression.toFixed(6)}]]}setHoverId(hoverId){this.highlightedCellId=hoverId??"",this.rowHover.emit(hoverId)}static{this.propDecorators={tissueInfo:[{type:core.Input}],columns:[{type:core.Input}],dataSources:[{type:core.Input}],data:[{type:core.Input}],gradient:[{type:core.Input}],sizes:[{type:core.Input}],highlightedCellId:[{type:core.Input}],illustrationIds:[{type:core.Input}],rowHover:[{type:core.Output}],vscroll:[{type:core.ViewChild,args:[scrolling.d6,{static:!0}]}],table:[{type:core.ViewChild,args:["table",{static:!0,read:core.ElementRef}]}],onMouseMove:[{type:core.HostListener,args:["window:mousemove",["$event"]]}]}}};BiomarkerTableComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"hra-biomarker-table",imports:[common_module_Dx7dWex5.MD,table.tP,BiomarkerTableDataIconComponent,HoverDirective,BiomarkerTableDataCardComponent,scrolling.E9,ng_table_virtual_scroll.VL],template:'\x3c!-- eslint-disable @angular-eslint/template/mouse-events-have-key-events --\x3e\n<cdk-virtual-scroll-viewport tvsItemSize="32" headerHeight="72">\n  <table class="table" mat-table [dataSource]="dataSource" #table>\n    <caption class="sr-only">\n      Cell type table by Biomarker\n    </caption>\n\n    <ng-container matColumnDef="type" sticky>\n      <th mat-header-cell *matHeaderCellDef>Cell Type</th>\n\n      <td\n        class="type"\n        mat-cell\n        *matCellDef="let element"\n        [class.highlight]="isHighlighted(element)"\n        [hraHover]="columnHover"\n        [hraHoverData]="element[0]"\n      >\n        {{ element[0] }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef="count" sticky>\n      <th class="count" mat-header-cell *matHeaderCellDef>Cell Count</th>\n\n      <td class="count" mat-cell *matCellDef="let element" [class.highlight]="isHighlighted(element)">\n        {{ element[1] !== undefined ? (element[1] | number) : \'no data\' }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef="preFiller">\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef="let element" style="max-width: unset">\n        <div [style.width]="preFillerWidth"></div>\n      </td>\n    </ng-container>\n\n    @for (column of columns; track column; let index = $index) {\n      <ng-container [matColumnDef]="column">\n        <th class="icon-header" mat-header-cell *matHeaderCellDef [hraHover]="columnHover" [hraHoverData]="column">\n          <div class="header-column-text">\n            {{ column }}\n          </div>\n        </th>\n\n        <td class="icon-cell" mat-cell *matCellDef="let element" [class.highlight]="isHighlighted(element)">\n          @if (element[index + 2] !== undefined) {\n            <hra-biomarker-table-data-icon\n              class="icon"\n              [color]="getColor(element[index + 2].color)"\n              [size]="getSize(element[index + 2].size)"\n              [hraHover]="dataHover"\n              [hraHoverData]="[index + 2, element]"\n            >\n            </hra-biomarker-table-data-icon>\n          } @else {\n            <div class="empty" [hraHover]="dataHover" [hraHoverData]="[index + 2, element]"></div>\n          }\n        </td>\n      </ng-container>\n    }\n\n    <ng-container matColumnDef="postFiller">\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef="let element" style="max-width: unset">\n        <div [style.width]="postFillerWidth"></div>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef="(columns$ | async) ?? []; sticky: true"></tr>\n    <tr\n      mat-row\n      *matRowDef="let row; columns: (columns$ | async) ?? []"\n      (mouseover)="setHoverId(getHoverId(row))"\n      (mouseout)="setHoverId(undefined)"\n    ></tr>\n  </table>\n</cdk-virtual-scroll-viewport>\n\n<ng-template #columnHover let-columnName>\n  <div class="biomarker-table-hover full-column-name">\n    {{ columnName }}\n  </div>\n</ng-template>\n\n<ng-template #dataHover let-data>\n  <hra-biomarker-table-data-card [data]="getHoverData(data)"> </hra-biomarker-table-data-card>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_componentngResource_default()]})],BiomarkerTableComponent);var ngxs_store=__webpack_require__("./node_modules/@ngxs/store/fesm2022/ngxs-store.mjs"),cell_summary_state=__webpack_require__("./libs/state/src/lib/cell-summary/cell-summary.state.ts");class CellSummarySelectors{static aggregates(state){return state.aggregates}static summaries(state){return state.summaries}}(0,tslib_es6.Cg)([(0,ngxs_store.MD)([cell_summary_state.o]),(0,tslib_es6.Sn)("design:type",Function),(0,tslib_es6.Sn)("design:paramtypes",[Object]),(0,tslib_es6.Sn)("design:returntype",Array)],CellSummarySelectors,"aggregates",null),(0,tslib_es6.Cg)([(0,ngxs_store.MD)([cell_summary_state.o]),(0,tslib_es6.Sn)("design:type",Function),(0,tslib_es6.Sn)("design:paramtypes",[Object]),(0,tslib_es6.Sn)("design:returntype",Array)],CellSummarySelectors,"summaries",null);var resource_ids=__webpack_require__("./libs/state/src/lib/resource-ids.ts"),resource_types=__webpack_require__("./libs/state/src/lib/resource-types.ts");class SourceRefsSelectors{static sourceReferences({sources}){return sources}static selectedSourceReferences({selected}){return selected}}(0,tslib_es6.Cg)([(0,ngxs_store.MD)([source_refs_state.N]),(0,tslib_es6.Sn)("design:type",Function),(0,tslib_es6.Sn)("design:paramtypes",[Object]),(0,tslib_es6.Sn)("design:returntype",Array)],SourceRefsSelectors,"sourceReferences",null),(0,tslib_es6.Cg)([(0,ngxs_store.MD)([source_refs_state.N]),(0,tslib_es6.Sn)("design:type",Function),(0,tslib_es6.Sn)("design:paramtypes",[Object]),(0,tslib_es6.Sn)("design:returntype",Array)],SourceRefsSelectors,"selectedSourceReferences",null);var active_ftu_selectors=__webpack_require__("./libs/state/src/lib/active-ftu/active-ftu.selectors.ts"),tissue_library_selectors=__webpack_require__("./libs/state/src/lib/tissue-library/tissue-library.selectors.ts"),illustrator_selectors=__webpack_require__("./libs/state/src/lib/illustrator/illustrator.selectors.ts"),illustrator_actions=__webpack_require__("./libs/state/src/lib/illustrator/illustrator.actions.ts"),source_refs_actions=__webpack_require__("./libs/state/src/lib/source-refs/source-refs.actions.ts"),screen_mode_actions=__webpack_require__("./libs/state/src/lib/screen-mode/screen-mode.actions.ts"),contact_behavior_component=__webpack_require__("./libs/components/behavioral/src/lib/contact-behavior/contact-behavior.component.ts");const EMPTY_TISSUE_INFO={id:"",label:""};let BiomarkerDetailsComponent=class BiomarkerDetailsComponent{constructor(){this.getTabs=(0,select_snapshot.X)(CellSummarySelectors.aggregates),this.gradientHoverInfo=(0,select_snapshot.d)(resource_registry_selectors.M.anyText,resource_ids.cX),this.sizeHoverInfo=(0,select_snapshot.d)(resource_registry_selectors.M.anyText,resource_ids.rb),this.isTableFullScreen=!1,this.gradients=(0,select_snapshot.d)(resource_registry_selectors.M.field,resource_ids.Si,resource_types.Hf,"points",[]),this.sizes=(0,select_snapshot.d)(resource_registry_selectors.M.field,resource_ids.TF,resource_types.or,"sizes",[]),this.source=(0,select_snapshot.X)(SourceRefsSelectors.sourceReferences),this.iri=(0,select_snapshot.X)(active_ftu_selectors.c.iri),this.tissues=(0,select_snapshot.X)(tissue_library_selectors.b.tissues),this.selectedOnHovered=(0,select_snapshot.X)(illustrator_selectors.c.selectedOnHovered),this.mapping=(0,select_snapshot.X)(illustrator_selectors.c.mapping),this.highlightCell=(0,dispatch.JD)(illustrator_actions.vg),this.setSelectedSources=(0,dispatch.JD)(source_refs_actions.EL),this.collaborateText="Collaborate with the HRA Team",this.message="We currently do not have cell type data for this biomarker.\n  <br><br> Please contact us to discuss your dataset.",this.setScreenMode=(0,dispatch.JD)(screen_mode_actions.N),this.dialog=(0,core.inject)(module_BnDTus5c.j),this.ga=(0,core.inject)(ngx_google_analytics.p),this.tabs_=[],this.mapping_=[],this.illustrationIds_=[]}get tabs(){const tabs=this.getTabs();return 0!==tabs.length&&(this.tabs_=tabs),this.tabs_}get tissueInfo(){const iri=this.iri(),tissues=this.tissues();if(void 0===iri||void 0===tissues)return EMPTY_TISSUE_INFO;const{id,label}=tissues[iri];return{id,label}}get illustrationIds(){const mapping=this.mapping();return mapping!==this.mapping_&&(this.mapping_=mapping,this.illustrationIds_=Array.from(new Set(this.mapping().map((data=>data.ontologyId))))),this.illustrationIds_}trackByLabel(_index,tab){return tab.label}toggleFullscreen(){setTimeout((()=>{this.table.checkDisplayedColumns()}),250),this.isTableFullScreen=!this.isTableFullScreen,this.setScreenMode(this.isTableFullScreen)}collaborate(){const dialogConfig=new module_BnDTus5c.k;dialogConfig.disableClose=!0,this.ga.event("contact_open","modal"),this.dialog.open(contact_behavior_component.s,dialogConfig)}highlightCells(label){this.highlightCell(label)}logTabChange(event){this.ga.event("biomarker_tab_change",event.tab?event.tab.textLabel:"")}static{this.propDecorators={table:[{type:core.ViewChild,args:["table"]}]}}};BiomarkerDetailsComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ftu-biomarker-details",imports:[common_module_Dx7dWex5.MD,icon.m_,tabs.RI,module_BnDTus5c.n,BiomarkerTableComponent,GradientLegendComponent,HoverDirective,label_box_component.h,SizeLegendComponent,SourceListComponent,EmptyBiomarkerComponent],template:'<mat-tab-group\n  class="table"\n  [class.table-fullscreen]="isTableFullScreen"\n  mat-stretch-tabs="true"\n  color="accent"\n  (selectedTabChange)="logTabChange($event)"\n  disablePagination="true"\n  disableRipple="true"\n>\n  <mat-tab\n    *ngFor="let tab of tabs; trackBy: trackByLabel"\n    labelClass="table-tab-header"\n    [label]="\'Cell Types by \' + tab.label"\n  >\n    <hra-biomarker-table\n      #table\n      *ngIf="tab.rows.length !== 0"\n      [class.small]="tab.rows.length < 10"\n      [data]="$any(tab.rows)"\n      [columns]="tab.columns"\n      [gradient]="gradients()"\n      [sizes]="sizes()"\n      [tissueInfo]="tissueInfo"\n      [illustrationIds]="illustrationIds"\n      [dataSources]="source()"\n      [highlightedCellId]="selectedOnHovered()?.ontologyId ?? \'\'"\n      (rowHover)="highlightCells($event)"\n    ></hra-biomarker-table>\n    <hra-empty-biomarker\n      *ngIf="tab.rows.length === 0"\n      [collaborateText]="collaborateText"\n      [message]="message"\n      (collaborateClick)="collaborate()"\n    ></hra-empty-biomarker>\n  </mat-tab>\n  <mat-tab labelClass="expansion-icon" disabled>\n    <ng-template mat-tab-label>\n      <span (click)="toggleFullscreen()" class="end material-symbols-outlined cursor">\n        {{ isTableFullScreen ? \'close_fullscreen\' : \'open_in_full\' }}\n      </span>\n    </ng-template>\n  </mat-tab>\n</mat-tab-group>\n\n<hra-label-box class="legend-header gradient">\n  <mat-icon class="icon material-symbols-outlined" [hraHover]="infoTooltip" [hraHoverData]="gradientHoverInfo()"\n    >info_outlined</mat-icon\n  >\n  Biomarker Expression Mean in FTU\n</hra-label-box>\n<div class="legend gradient">\n  <hra-gradient-legend [gradient]="gradients()" class="content"></hra-gradient-legend>\n</div>\n\n<hra-label-box class="legend-header size">\n  <mat-icon class="icon material-symbols-outlined" [hraHover]="infoTooltip" [hraHoverData]="sizeHoverInfo()"\n    >info_outlined</mat-icon\n  >\n  Percentage of Cells in FTU\n</hra-label-box>\n<div class="legend size">\n  <hra-size-legend [sizes]="sizes()" class="content"></hra-size-legend>\n</div>\n\n<div class="source-list">\n  <hra-source-list\n    [collaborateText]="collaborateText"\n    [message]="message"\n    (collaborateClick)="collaborate()"\n    [sources]="source()"\n    (selectionChanged)="setSelectedSources($event)"\n    class="content"\n  ></hra-source-list>\n</div>\n\n<ng-template #infoTooltip let-tooltip>\n  <div class="biomarker-details info-tooltip">\n    {{ tooltip }}\n  </div>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_details_componentngResource_default()]})],BiomarkerDetailsComponent);var ftu_data_service=__webpack_require__("./libs/services/src/lib/ftu-data/ftu-data.service.ts"),ftu_data_mock=__webpack_require__("./libs/services/src/lib/ftu-data/ftu-data.mock.ts");function createDataItem(label,value){return{label,value}}const biomarker_details_component_stories={title:"BiomarkerDetailsComponent",component:BiomarkerDetailsComponent,parameters:{state:{states:[resource_registry_state.j,source_refs_state.N],actions:[new resource_registry_actions.GD("assets/resources/gradient.yml"),new resource_registry_actions.GD("assets/resources/size.yml")]}},decorators:[(0,dist.moduleMetadata)({imports:[icon.m_]}),(0,dist.applicationConfig)({providers:[{provide:ftu_data_service.N,useExisting:ftu_data_mock.ZV}]})]},Primary={render:args=>({props:args}),args:{}},__namedExportsOrder=["createDataItem","Primary"];createDataItem.parameters={...createDataItem.parameters,docs:{...createDataItem.parameters?.docs,source:{originalSource:"function createDataItem(label: string, value: string): DataItem {\n  return {\n    label,\n    value\n  };\n}",...createDataItem.parameters?.docs?.source}}},Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {}\n}",...Primary.parameters?.docs?.source}}}},"./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  font-family: Metropolis;\n}\n:host .mat-mdc-cell {\n  padding: 0.25rem 0rem;\n}\n:host .mat-mdc-row {\n  height: fit-content;\n}\n:host .no-border {\n  border: none;\n}\n:host .label {\n  padding-right: 3rem;\n  font-weight: 500;\n}\n:host .value {\n  font-weight: 400;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n  border-radius: 50%;\n  --radius: 0.625rem;\n  width: var(--radius);\n  height: var(--radius);\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/molecules/src/lib/source-list/source-list.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n  height: 100%;\n}\n@media (min-height: 60.75rem) {\n  :host .toggle {\n    height: 3rem !important;\n  }\n  :host ::ng-deep thead > tr {\n    height: 3rem !important;\n  }\n}\n:host hra-label-box {\n  font-size: 0.875rem;\n  padding-left: 1.5rem;\n}\n:host .toggle {\n  display: flex;\n  align-items: center;\n  height: 2.5rem;\n  grid-area: source-list-header;\n}\n:host .table-content {\n  max-height: 236px;\n  overflow: auto;\n}\n:host .table-content.hidden {\n  display: none;\n}\n:host .table-content .mat-column-select {\n  width: 1rem;\n  padding-right: 0;\n}\n:host .table-content .mat-column-authors,\n:host .table-content .mat-column-title,\n:host .table-content .mat-column-doi,\n:host .table-content .mat-column-link {\n  max-width: 7rem;\n}\n:host .table-content .mat-column-year {\n  max-width: 3.5rem;\n}\n:host .table-content .mat-column-link {\n  padding-right: 3rem;\n  text-overflow: unset !important;\n}\n:host .table-content ::ng-deep thead .mat-sort-header-stem,\n:host .table-content ::ng-deep thead .mat-sort-header-indicator {\n  opacity: 0 !important;\n}\n:host .table-content ::ng-deep thead .mat-sort-header-arrow {\n  background-image: url('arrow-upward.svg');\n  background-size: contain;\n  height: 1rem;\n  width: 1rem;\n}\n:host .table-content ::ng-deep thead [aria-sort=descending] .mat-sort-header-arrow {\n  background-image: url('arrow-down.svg');\n}\n:host .table-content ::ng-deep thead [aria-sort=none] .mat-sort-header-arrow {\n  background-image: url('arrow-upward.svg');\n  transition: 0.5s;\n}\n:host .table-content ::ng-deep thead tr {\n  height: 2.5rem;\n}\n:host .table-content ::ng-deep tbody .mat-column-doi,\n:host .table-content ::ng-deep tbody .mat-column-link {\n  font-weight: 500;\n}\n:host .table-content .mat-mdc-cell,\n:host .table-content .mat-mdc-header-cell {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n:host .table-content .mat-mdc-cell {\n  border-bottom: none;\n}\n:host .table-content tr {\n  font-size: 0.75rem;\n  height: 2.25rem;\n}\n:host .table-content tr .mat-column-link {\n  cursor: pointer;\n}\n:host .table-content .source-link {\n  --mdc-filled-button-label-text-tracking: 0.0178571429em;\n  font-size: 0.75rem;\n  font-weight: 500;\n  padding: 0;\n  justify-content: left;\n  color: #b20a2f;\n  text-decoration: none;\n  border: 0.25rem solid transparent;\n}\n:host .table-content .source-link:hover {\n  color: #8e0825;\n}\n:host .table-content .source-link:active {\n  color: #6a061c;\n}\n:host .table-content .source-link:focus {\n  color: #201e3d;\n  border-color: #e00d3a;\n}\n:host .table-content .source-link ::ng-deep .mdc-button__ripple::before {\n  background-color: transparent;\n}\n:host .table-content .source-link ::ng-deep .mdc-button__label {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 9rem;\n  overflow: hidden;\n}\n:host ::ng-deep mat-checkbox {\n  --mdc-checkbox-selected-checkmark-color: rgba(vars.$primary) !important;\n}\n:host ::ng-deep mat-checkbox .mdc-form-field {\n  height: 2.25rem;\n}\n:host ::ng-deep mat-checkbox .mdc-form-field .mdc-checkbox {\n  padding: 9px;\n}\n:host ::ng-deep mat-checkbox .mdc-checkbox__background {\n  background-color: transparent !important;\n  border-color: rgba(var(--mat-sys-primary)) !important;\n  top: 9px;\n  left: 9px;\n}\n:host .end {\n  cursor: pointer;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n}\n:host .table th,\n:host .table th div {\n  height: 6.5rem !important;\n}\n:host cdk-virtual-scroll-viewport {\n  height: 100%;\n}\n:host .table {\n  margin-left: -1px;\n}\n:host .table td.type {\n  text-transform: lowercase;\n}\n:host .table th {\n  font-weight: 500;\n  height: 56px;\n  padding: 0;\n  max-width: 2.75rem;\n  min-width: 2.75rem;\n}\n:host .table td {\n  padding: 0 0.5rem;\n}\n:host .table tr {\n  height: 2rem;\n  font-size: 0.75rem;\n}\n:host .table tr:first-child td {\n  max-width: 13.5rem;\n}\n:host tr > td:first-child {\n  text-align: left;\n}\n:host tr > th:first-child {\n  text-align: left;\n}\n:host .type {\n  height: 2rem;\n  max-width: 13.5rem;\n  border-radius: 0rem;\n  white-space: nowrap;\n}\n:host .type.highlight {\n  font-weight: bold;\n}\n:host .count {\n  height: 2rem;\n  min-width: 4.25rem;\n}\n:host th:first-child,\n:host th:nth-child(2) {\n  padding: 0 0.5rem !important;\n}\n:host .icon-header .header-column-text {\n  writing-mode: vertical-rl;\n  transform: rotate(180deg);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0.5rem auto;\n}\n:host .icon-cell {\n  width: 2rem;\n  min-height: 2rem;\n}\n:host .icon-cell .icon {\n  margin: auto;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/state/src/lib/illustrator/illustrator.selectors.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{c:()=>IllustratorSelectors});var tslib__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_ngxs_store__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@ngxs/store/fesm2022/ngxs-store.mjs"),_illustrator_state__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./libs/state/src/lib/illustrator/illustrator.state.ts");class IllustratorSelectors{static url({url}){return url}static selectedOnHovered({selectedOnHover}){return selectedOnHover}static selectedOnClicked({selectedOnClick}){return selectedOnClick}static mapping({mapping}){return mapping}static highlightedCell({hoveredCellTypeId}){return hoveredCellTypeId}}(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_ngxs_store__WEBPACK_IMPORTED_MODULE_1__.MD)([_illustrator_state__WEBPACK_IMPORTED_MODULE_2__.D]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:type",Function),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:paramtypes",[Object]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:returntype",Object)],IllustratorSelectors,"url",null),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_ngxs_store__WEBPACK_IMPORTED_MODULE_1__.MD)([_illustrator_state__WEBPACK_IMPORTED_MODULE_2__.D]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:type",Function),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:paramtypes",[Object]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:returntype",Object)],IllustratorSelectors,"selectedOnHovered",null),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_ngxs_store__WEBPACK_IMPORTED_MODULE_1__.MD)([_illustrator_state__WEBPACK_IMPORTED_MODULE_2__.D]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:type",Function),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:paramtypes",[Object]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:returntype",Object)],IllustratorSelectors,"selectedOnClicked",null),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_ngxs_store__WEBPACK_IMPORTED_MODULE_1__.MD)([_illustrator_state__WEBPACK_IMPORTED_MODULE_2__.D]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:type",Function),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:paramtypes",[Object]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:returntype",Array)],IllustratorSelectors,"mapping",null),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Cg)([(0,_ngxs_store__WEBPACK_IMPORTED_MODULE_1__.MD)([_illustrator_state__WEBPACK_IMPORTED_MODULE_2__.D]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:type",Function),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:paramtypes",[Object]),(0,tslib__WEBPACK_IMPORTED_MODULE_0__.Sn)("design:returntype",Object)],IllustratorSelectors,"highlightedCell",null)},"./libs/state/src/lib/resource-types.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hf:()=>Gradient,K1:()=>Metrics,or:()=>Size});var _hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/cdk/state/src/resource-registry/resource-registry.model.ts");const Metrics=(0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.Cb)("metrics",(0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.lM)()),Gradient=(0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.Cb)("gradient",(0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.lM)()),Size=(0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.Cb)("size",(0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.lM)())},"./libs/state/src/lib/screen-mode/screen-mode.actions.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{N:()=>Set,e:()=>SetSize});var _hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/cdk/state/src/actions/actions.ts");class Set extends((0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.r)("[Screenmode] Set Screenmode")){constructor(isFullScreen){super(),this.isFullScreen=isFullScreen}}class SetSize extends((0,_hra_ui_cdk_state__WEBPACK_IMPORTED_MODULE_0__.r)("[Screenmode] Set Size")){constructor(size){super(),this.size=size}}}}]);