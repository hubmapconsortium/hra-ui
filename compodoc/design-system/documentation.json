{
    "pipes": [],
    "interfaces": [
        {
            "name": "BreadcrumbConfig",
            "id": "interface-BreadcrumbConfig-3e8ba7b526a4e168a8c0d7ce256cfcd27108a3e8ad43df549c8b9b24d1c6e729803b78edce0907621ea38dacd3a3f82c2868baed9ca4e96744fe65ee0a2c14b8",
            "file": "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for breadcrumb size */\nexport type BreadcrumbSize = 'small' | 'medium' | 'large';\n\n/**\n * Breadcrumb size config interface\n */\ninterface BreadcrumbConfig {\n  /** Height of component */\n  height: number;\n  /** Font variable for the component */\n  font: string;\n}\n\n/** Breadcrumb size config (numbers in rem) */\nconst BREADCRUMB_CONFIG: Record<BreadcrumbSize, BreadcrumbConfig> = {\n  small: {\n    height: 1.5,\n    font: '--sys-label-small',\n  },\n  medium: {\n    height: 1.5,\n    font: '--sys-label-medium',\n  },\n  large: {\n    height: 1.75,\n    font: '--sys-label-large',\n  },\n};\n\n/**\n * Directive for breadcrumb sizes\n */\n@Directive({\n  selector: '[hraBreadcrumbSize]',\n  standalone: true,\n  host: {\n    '[style.font]': 'fontVar()',\n    '[style.--mdc-text-button-container-height.rem]': 'buttonHeight()',\n  },\n})\nexport class BreadcrumbsSizeDirective {\n  /** Size of breadcrumbs component */\n  readonly size = input.required<BreadcrumbSize>({ alias: 'hraBreadcrumbSize' });\n\n  /** Gets the font variable for the current breadcrumbs size */\n  protected readonly fontVar = computed(() => `var(${BREADCRUMB_CONFIG[this.size()].font})`);\n\n  /** Gets the button height for the current breadcrumbs size */\n  protected readonly buttonHeight = computed(() => BREADCRUMB_CONFIG[this.size()].height);\n}\n",
            "properties": [
                {
                    "name": "font",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Font variable for the component</p>\n",
                    "line": 13,
                    "rawdescription": "\nFont variable for the component"
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Height of component</p>\n",
                    "line": 11,
                    "rawdescription": "\nHeight of component"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Breadcrumb size config interface</p>\n",
            "rawdescription": "\n\nBreadcrumb size config interface\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "BreadcrumbItem",
            "id": "interface-BreadcrumbItem-9b086d5fde9cb9de26b96541ad7a53c4ccbdaf83c90ec64abe3a6d60474f8080efe58b84fd71d9304631369a0853a4fa9a7c9b21262cfeb1246307f6ccca0dc0",
            "file": "breadcrumbs/src/lib/breadcrumbs/breadcrumbs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { ButtonModule } from '@hra-ui/design-system/button';\n\nimport { BreadcrumbSize, BreadcrumbsSizeDirective } from '../breadcrumbs-size/breadcrumbs-size.directive';\n\n/** Breadcrumb item */\ninterface BreadcrumbItem {\n  /** Name of item */\n  name: string;\n  /** Route to page */\n  route?: string;\n}\n\n/**\n * Component used to help the user understand their location within websites\n */\n@Component({\n  selector: 'hra-breadcrumbs',\n  standalone: true,\n  imports: [CommonModule, MatIconModule, ButtonModule, RouterModule, BreadcrumbsSizeDirective],\n  templateUrl: './breadcrumbs.component.html',\n  styleUrl: './breadcrumbs.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbsComponent {\n  /** Size of breadcrumbs component */\n  readonly size = input.required<BreadcrumbSize>();\n\n  /** Crumbs to display */\n  readonly crumbs = input<BreadcrumbItem[]>([]);\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of item</p>\n",
                    "line": 12,
                    "rawdescription": "\nName of item"
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Route to page</p>\n",
                    "line": 14,
                    "rawdescription": "\nRoute to page"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Breadcrumb item</p>\n",
            "rawdescription": "\nBreadcrumb item",
            "methods": [],
            "extends": []
        },
        {
            "name": "ButtonToggleConfig",
            "id": "interface-ButtonToggleConfig-47084191f7a61172917fede8918bc84f86d73cfddb5c71644d497ca925759af4a7e94d6ae59e3f86e5fb4d1552a5818dbdec4dc01f4e3b84507e0fd9ab1fd129",
            "file": "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for icon button size */\nexport type IconButtonSize = 'medium' | 'large';\n\n/** Interface for ButtonToggle Config */\ninterface ButtonToggleConfig {\n  /** Line height of the button */\n  lineHeight: number;\n  /** Font variable of the button toggle */\n  font: string;\n}\n\n/** Record of button sizes (number in rem) */\nconst BUTTON_CONFIG: Record<IconButtonSize, ButtonToggleConfig> = {\n  medium: {\n    lineHeight: 21,\n    font: '--sys-label-medium',\n  },\n  large: {\n    lineHeight: 24,\n    font: '--sys-label-large',\n  },\n};\n\n/**\n * Directive for icon buttons\n */\n@Directive({\n  selector: '[hraButtonToggleSize]',\n  standalone: true,\n  host: {\n    '[style.--mat-standard-button-toggle-height]': 'lineHeight()',\n    '[style.--mat-standard-button-toggle-label-text-line-height]': 'lineHeight()',\n    '[style.font]': 'fontVar()',\n  },\n})\nexport class ToggleButtonSizeDirective {\n  /** Size of icon button to use */\n  readonly size = input.required<IconButtonSize>({ alias: 'hraButtonToggleSize' });\n\n  /** Gets size of button in rem */\n  protected readonly buttonSize = computed(() => BUTTON_CONFIG[this.size()]);\n\n  /** Gets the font variable for the current button size */\n  protected readonly fontVar = computed(() => `var(${BUTTON_CONFIG[this.size()].font})`);\n\n  /** Gets the line height for the current button size */\n  protected readonly lineHeight = computed(() => `${BUTTON_CONFIG[this.size()].lineHeight}px`);\n}\n",
            "properties": [
                {
                    "name": "font",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Font variable of the button toggle</p>\n",
                    "line": 11,
                    "rawdescription": "\nFont variable of the button toggle"
                },
                {
                    "name": "lineHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Line height of the button</p>\n",
                    "line": 9,
                    "rawdescription": "\nLine height of the button"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for ButtonToggle Config</p>\n",
            "rawdescription": "\nInterface for ButtonToggle Config",
            "methods": [],
            "extends": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-521828a815679204f0cc4244c2a8408fca1c4b236aa72f81724ac7fddb84aacd5a0eea0840fe7c8e0d0c3bbf1300ea6d7681f8127004d249511e64b4a739cb4e",
            "file": "dialog/src/lib/notice/notice.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonSizeDirective } from '@hra-ui/design-system/button';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Interface for Dialog Data */\nexport interface DialogData {\n  /** Title of the dialog */\n  title: string;\n  /** Message of the dialog */\n  message: string;\n  /** Action Button Object */\n  action?: {\n    /** Label for the action button */\n    label: string;\n    /** Callback function for the action button */\n    callback: () => void;\n  };\n}\n\n/** Notice Component */\n@Component({\n  selector: 'hra-notice',\n  standalone: true,\n  imports: [\n    CommonModule,\n    IconButtonSizeDirective,\n    MatIconModule,\n    ButtonSizeDirective,\n    MatButtonModule,\n    MatDialogActions,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogClose,\n  ],\n  templateUrl: './notice.component.html',\n  styleUrl: './notice.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NoticeComponent {\n  /** Instance of Mat Dialog Data */\n  protected readonly data: DialogData = inject(MAT_DIALOG_DATA);\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Action Button Object</p>\n",
                    "line": 22,
                    "rawdescription": "\nAction Button Object"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Message of the dialog</p>\n",
                    "line": 20,
                    "rawdescription": "\nMessage of the dialog"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title of the dialog</p>\n",
                    "line": 18,
                    "rawdescription": "\nTitle of the dialog"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for Dialog Data</p>\n",
            "rawdescription": "\nInterface for Dialog Data",
            "methods": [],
            "extends": []
        },
        {
            "name": "MenuDemoOption",
            "id": "interface-MenuDemoOption-ca3f947e9aace44532e9bcc03a99a5de685993e96fbfd95598e669a909b0252378ee73e0cef66ba243939fcac0d322dda2eb2bd6b19da87f34c448bc12b9cefb",
            "file": "menu/src/lib/menu-demo/menu-demo.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, ViewEncapsulation } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconButtonSize, IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Menu option interface */\nexport interface MenuDemoOption {\n  /** Name of option */\n  name: string;\n  /** Material icon name */\n  icon: string;\n  /** Options to open in a second menu */\n  expandedOptions?: MenuDemoOption[];\n}\n\n/**\n * Nested Angular Material menu component\n */\n@Component({\n  selector: 'hra-menu',\n  standalone: true,\n  imports: [MatButtonModule, MatMenuModule, MatIconModule, MatRippleModule, IconButtonSizeDirective],\n  templateUrl: './menu-demo.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuDemoComponent {\n  /** Menu size */\n  readonly size = input<IconButtonSize>('medium');\n\n  /** List of menu options */\n  readonly menuOptions = input<MenuDemoOption[]>([]);\n\n  /** List of suboptions to display in the second menu */\n  suboptions: MenuDemoOption[] = [];\n}\n",
            "properties": [
                {
                    "name": "expandedOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDemoOption[]",
                    "optional": true,
                    "description": "<p>Options to open in a second menu</p>\n",
                    "line": 15,
                    "rawdescription": "\nOptions to open in a second menu"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Material icon name</p>\n",
                    "line": 13,
                    "rawdescription": "\nMaterial icon name"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of option</p>\n",
                    "line": 11,
                    "rawdescription": "\nName of option"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Menu option interface</p>\n",
            "rawdescription": "\nMenu option interface",
            "methods": [],
            "extends": []
        },
        {
            "name": "NestedNode",
            "id": "interface-NestedNode-a14fced1e66ffb8c2d58bdea2c689fd37e00fef4b565a351776986dff01b260348e5f15a696ab02e0e2ed8a9f4f0e20081e9672dc3c1ba40ec473c21deacc257",
            "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ArrayDataSource } from '@angular/cdk/collections';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, computed, input, ViewChild } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTree, MatTreeModule } from '@angular/material/tree';\n\nimport { TreeSize, TreeSizeDirective } from '../tree-size/tree-size.directive';\n\n/** Nested tree node data */\nexport interface NestedNode {\n  /** Name of node */\n  name: string;\n  /** List of child nodes */\n  children?: NestedNode[];\n}\n\n/** Padding indents for each tree size (px) */\nconst PADDING: Record<TreeSize, number> = {\n  small: 32,\n  medium: 36,\n  large: 40,\n};\n\n/**\n * Angular Material nested tree component with HRA styles\n */\n@Component({\n  selector: 'hra-tree-demo',\n  templateUrl: 'tree-demo.component.html',\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, TreeSizeDirective],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeDemoComponent implements AfterViewInit {\n  /** ViewChild for tree component */\n  @ViewChild(MatTree) tree!: MatTree<NestedNode>;\n\n  /** Tree node data */\n  readonly treeData = input<NestedNode[]>([]);\n\n  /** Size of tree to use */\n  readonly size = input<TreeSize>('medium');\n\n  /** Padding indents */\n  protected readonly padding = computed(() => PADDING[this.size()]);\n\n  /** Data source */\n  dataSource = new ArrayDataSource<NestedNode>([]);\n\n  /** Current selected node */\n  selectedNode?: NestedNode;\n\n  /** Gets the children of a node */\n  childrenAccessor = (dataNode: NestedNode) => dataNode.children ?? [];\n\n  /** If the node has a child */\n  hasChild = (_: number, node: NestedNode) => !!node.children?.length;\n\n  /** Sets dataSource data after view init */\n  ngAfterViewInit() {\n    this.dataSource = new ArrayDataSource<NestedNode>(this.treeData());\n  }\n\n  /** Renders node if it is a root node or if all of its ancestors are expanded */\n  shouldRender(node: NestedNode): boolean {\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n\n  /** Gets parent of a node */\n  private getParentNode(node: NestedNode): NestedNode | undefined {\n    for (const parent of this.treeData()) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n    return undefined;\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NestedNode[]",
                    "optional": true,
                    "description": "<p>List of child nodes</p>\n",
                    "line": 14,
                    "rawdescription": "\nList of child nodes"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of node</p>\n",
                    "line": 12,
                    "rawdescription": "\nName of node"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Nested tree node data</p>\n",
            "rawdescription": "\nNested tree node data",
            "methods": [],
            "extends": []
        },
        {
            "name": "ScollingOptions",
            "id": "interface-ScollingOptions-0e5609eb9c1a950be135886a19896dcf9b158c1a2332a21d6fecbd1fa4aafa2d36c7fdaa442e84af865990334197a7dec16b3a3e8c6512283ce8f2b7df54e161",
            "file": "scrolling/src/lib/scrolling.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EnvironmentProviders, NgModule, makeEnvironmentProviders } from '@angular/core';\nimport { getCurrentScriptBasePath } from '@hra-ui/cdk/app-href';\nimport { provideStyleComponents } from '@hra-ui/cdk/styling';\nimport {\n  NgScrollbarModule,\n  NgScrollbarOptions,\n  provideScrollbarOptions,\n  provideScrollbarPolyfill,\n} from 'ngx-scrollbar';\nimport { ScrollOverflowFadeDirective } from './scroll-overflow-fade/scroll-overflow-fade.directive';\nimport { ScrollbarStylesComponent } from './scrollbar-styles/scrollbar-styles.component';\n\n/** Scrolling configuration */\nexport interface ScollingOptions extends NgScrollbarOptions {\n  /** Url to the scroll timeline polyfill script */\n  polyfillUrl?: string;\n}\n\n/** Default scroll timeline polyfill url */\nconst DEFAULT_POLYFILL_URL = 'assets/polyfills/scroll-timeline-polyfill.js';\n\n/**\n * Provide scrolling functionality to an application.\n *\n * @param options Scrollbar options\n * @returns An environment provider\n */\nexport function provideScrolling(options?: ScollingOptions): EnvironmentProviders {\n  const polyfillUrl = getCurrentScriptBasePath() + (options?.polyfillUrl ?? DEFAULT_POLYFILL_URL);\n\n  return makeEnvironmentProviders([\n    provideStyleComponents(ScrollbarStylesComponent),\n    provideScrollbarPolyfill(polyfillUrl),\n    provideScrollbarOptions({\n      visibility: 'hover',\n      appearance: 'compact',\n      trackClass: 'hra-scrollbar-track',\n      thumbClass: 'hra-scrollbar-thumb',\n      ...options,\n    }),\n  ]);\n}\n\n/** Module exporting ng-scrollbar and related scrolling utilities */\n@NgModule({\n  imports: [ScrollOverflowFadeDirective],\n  exports: [NgScrollbarModule, ScrollOverflowFadeDirective],\n})\nexport class ScrollingModule {}\n",
            "properties": [
                {
                    "name": "polyfillUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Url to the scroll timeline polyfill script</p>\n",
                    "line": 16,
                    "rawdescription": "\nUrl to the scroll timeline polyfill script"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Scrolling configuration</p>\n",
            "rawdescription": "\nScrolling configuration",
            "methods": [],
            "extends": [
                "NgScrollbarOptions"
            ]
        },
        {
            "name": "ScrollingGlobals",
            "id": "interface-ScrollingGlobals-c96a7556bfc0c42b46a8ec9cf620e92dcd858b881cbed8518c731034dcd8fd0fb25b648c2fce95a5d7e14588e028a315dbed1eba0244c0afca861ae001881bb6",
            "file": "scrolling/testing/src/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import type { ScrollTimelineFunc } from '@hra-ui/design-system/scrolling';\n\n/** Globals used by scrolling */\ninterface ScrollingGlobals {\n  /** Scroll timeline constructor */\n  ScrollTimeline?: ScrollTimelineFunc;\n}\n\n/**\n * Setup the testing environment for scrolling to work.\n * Adds global mocks for functions used by scrolling if they don't exist.\n */\nexport function setupScrollTesting(): void {\n  const globals = globalThis as ScrollingGlobals;\n  if (typeof globals.ScrollTimeline !== 'function') {\n    globals.ScrollTimeline = jest.fn();\n  }\n\n  if (typeof HTMLElement.prototype.animate !== 'function') {\n    HTMLElement.prototype.animate = jest.fn(\n      () =>\n        ({\n          cancel: jest.fn(),\n        }) as unknown as Animation,\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "ScrollTimeline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollTimelineFunc",
                    "optional": true,
                    "description": "<p>Scroll timeline constructor</p>\n",
                    "line": 7,
                    "rawdescription": "\nScroll timeline constructor"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Globals used by scrolling</p>\n",
            "rawdescription": "\nGlobals used by scrolling",
            "methods": [],
            "extends": []
        },
        {
            "name": "SnackbarData",
            "id": "interface-SnackbarData-9645c3b8042bfa79d9cb9aa7fc553c125ae3a09828daf5d8158d98e279266a727508bb4b76e8b51ad8a112b315f9a7a1ded02a389cf33f33f2655955901d4578",
            "file": "snackbar/src/lib/snackbar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { ButtonModule } from '@hra-ui/design-system/button';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Type for button position */\nexport type ButtonPosition = 'start' | 'end';\n\n/** interface for snackbar data */\nexport interface SnackbarData {\n  /** Message in the snackbar */\n  message: string;\n  /** Action button */\n  action?: string;\n  /** Flag to show/hide the close button */\n  close?: boolean;\n  /** Position of the action button */\n  actionButtonPosition?: ButtonPosition;\n}\n\n/** Snackbar component */\n@Component({\n  selector: 'hra-snackbar',\n  standalone: true,\n  imports: [CommonModule, MatIconModule, ButtonModule, IconButtonSizeDirective, MatIconModule],\n  templateUrl: './snackbar.component.html',\n  styleUrl: './snackbar.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SnackbarComponent {\n  /** Reference to the MatSnackbarRef */\n  protected readonly snackbarRef = inject(MatSnackBarRef);\n\n  /** Injection token for the snackbar data*/\n  protected readonly data: SnackbarData = inject(MAT_SNACK_BAR_DATA);\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Action button</p>\n",
                    "line": 16,
                    "rawdescription": "\nAction button"
                },
                {
                    "name": "actionButtonPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonPosition",
                    "optional": true,
                    "description": "<p>Position of the action button</p>\n",
                    "line": 20,
                    "rawdescription": "\nPosition of the action button"
                },
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Flag to show/hide the close button</p>\n",
                    "line": 18,
                    "rawdescription": "\nFlag to show/hide the close button"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Message in the snackbar</p>\n",
                    "line": 14,
                    "rawdescription": "\nMessage in the snackbar"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>interface for snackbar data</p>\n",
            "rawdescription": "\ninterface for snackbar data",
            "methods": [],
            "extends": []
        },
        {
            "name": "TableDemoData",
            "id": "interface-TableDemoData-3ce3a27ac40e5d073e39945e2b3f360310d8e17b67174fcb5631711de4dd888b2a7c950907e95c21585429d5595e5ae90e96285fb7a6da0c5ef8699d16065c87",
            "file": "table/src/lib/table-demo/table-demo.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, effect, input, viewChild } from '@angular/core';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\n\n/** Type for row data */\nexport interface TableDemoData {\n  /** Name of item */\n  name: string;\n  /** Value of item*/\n  value: number;\n}\n\n/**\n * Angular Material table with with sort feature\n */\n@Component({\n  selector: 'hra-table-demo',\n  templateUrl: 'table-demo.component.html',\n  standalone: true,\n  imports: [MatTableModule, MatSortModule, CommonModule],\n})\nexport class TableDemoComponent {\n  /** Unsorted data */\n  readonly data = input<TableDemoData[]>([]);\n\n  /** Columns in table */\n  readonly columns: string[] = ['name', 'value'];\n\n  /** Mat sort element */\n  readonly sort = viewChild.required(MatSort);\n\n  /** Table data source */\n  readonly dataSource = new MatTableDataSource<TableDemoData>([]);\n\n  /** Sort data on load */\n  constructor() {\n    effect(() => {\n      this.dataSource.data = this.data();\n      this.dataSource.sort = this.sort();\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of item</p>\n",
                    "line": 9,
                    "rawdescription": "\nName of item"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Value of item</p>\n",
                    "line": 11,
                    "rawdescription": "\nValue of item"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Type for row data</p>\n",
            "rawdescription": "\nType for row data",
            "methods": [],
            "extends": []
        },
        {
            "name": "TooltipContent",
            "id": "interface-TooltipContent-2dc5235a7f3eded06be211afb956e283cb85aa2b150a601c8acfe34d8604280e55c464ade42fa61cd3e0c538877e1ecb523bba58969aaf82e417d3cb62e72189",
            "file": "tooltip-card/src/lib/tooltip-card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { booleanAttribute, ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n/** Interface for Tooltip Card Content */\nexport interface TooltipContent {\n  /** Title of the card */\n  title?: string;\n  /** Description of the card */\n  description: string;\n}\n\n/**\n * Tooltip Card component\n */\n@Component({\n  selector: 'hra-tooltip-card',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './tooltip-card.component.html',\n  styleUrl: './tooltip-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.small]': 'small()',\n  },\n})\nexport class TooltipCardComponent {\n  /** Input for the card */\n  readonly content = input.required<TooltipContent[]>();\n\n  /** Flag to decide whether the card is small */\n  readonly small = input(false, { transform: booleanAttribute });\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Description of the card</p>\n",
                    "line": 9,
                    "rawdescription": "\nDescription of the card"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Title of the card</p>\n",
                    "line": 7,
                    "rawdescription": "\nTitle of the card"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for Tooltip Card Content</p>\n",
            "rawdescription": "\nInterface for Tooltip Card Content",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-0ace45ae862d76523389909666d70c6ef45ad47f0884082316b823495cfe48cbf362341035d333a07ba5780780f42e13e7ce649467b1edeb04ccae26226baad7",
            "file": "dialog/src/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openNotice",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<NoticeComponent>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpens the dialog with necessary data and config",
                    "description": "<p>Opens the dialog with necessary data and config</p>\n",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service to open dialog</p>\n",
            "rawdescription": "\nService to open dialog",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, NoticeComponent } from './lib/notice/notice.component';\n\n/** Service to open dialog */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /** Instance of MatDialog */\n  private readonly matDialog = inject(MatDialog);\n\n  /** Opens the dialog with necessary data and config */\n  openNotice(title: string, message: string, action?: DialogData['action']): MatDialogRef<NoticeComponent> {\n    return this.matDialog.open(NoticeComponent, {\n      data: {\n        title,\n        message,\n        action,\n      } satisfies DialogData,\n      panelClass: 'hra-dialog-panel',\n    });\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-ae786487e69322c863a15284268b94cf886998b38c727c213542c267aa5d0c5331551616b3123644fbf11882105011b3338b3a647ae4d3328608a74012f68d90",
            "file": "snackbar/src/lib/snackbar.service.ts",
            "properties": [
                {
                    "name": "matSnackbar",
                    "defaultValue": "inject(MatSnackBar)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Reference to the MatSnackbar</p>\n",
                    "line": 13,
                    "rawdescription": "\nReference to the MatSnackbar",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "close",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "actionButtonPosition",
                            "type": "ButtonPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'start'"
                        },
                        {
                            "name": "config",
                            "type": "SnackbarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "MatSnackBarRef<SnackbarComponent>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpens the snackbar with provided config",
                    "description": "<p>Opens the snackbar with provided config</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "close",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionButtonPosition",
                            "type": "ButtonPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'start'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "SnackbarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service for snackbar. Opens the snackbar and configures it</p>\n",
            "rawdescription": "\nService for snackbar. Opens the snackbar and configures it",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { ButtonPosition, SnackbarComponent, SnackbarData } from './snackbar.component';\n\nexport type SnackbarConfig = Omit<MatSnackBarConfig, 'data' | 'panelClass'>;\n\n/** Service for snackbar. Opens the snackbar and configures it */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  /** Reference to the MatSnackbar */\n  readonly matSnackbar = inject(MatSnackBar);\n\n  /** Opens the snackbar with provided config */\n  open(\n    message: string,\n    action: string,\n    close = false,\n    actionButtonPosition: ButtonPosition = 'start',\n    config?: SnackbarConfig,\n  ): MatSnackBarRef<SnackbarComponent> {\n    return this.matSnackbar.openFromComponent(SnackbarComponent, {\n      announcementMessage: message,\n      ...config,\n      data: { message, action, close, actionButtonPosition } satisfies SnackbarData,\n      panelClass: ['hra-snackbar-panel'],\n    });\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "BreadcrumbsSizeDirective",
            "id": "directive-BreadcrumbsSizeDirective-3e8ba7b526a4e168a8c0d7ce256cfcd27108a3e8ad43df549c8b9b24d1c6e729803b78edce0907621ea38dacd3a3f82c2868baed9ca4e96744fe65ee0a2c14b8",
            "file": "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for breadcrumb sizes</p>\n",
            "rawdescription": "\n\nDirective for breadcrumb sizes\n",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for breadcrumb size */\nexport type BreadcrumbSize = 'small' | 'medium' | 'large';\n\n/**\n * Breadcrumb size config interface\n */\ninterface BreadcrumbConfig {\n  /** Height of component */\n  height: number;\n  /** Font variable for the component */\n  font: string;\n}\n\n/** Breadcrumb size config (numbers in rem) */\nconst BREADCRUMB_CONFIG: Record<BreadcrumbSize, BreadcrumbConfig> = {\n  small: {\n    height: 1.5,\n    font: '--sys-label-small',\n  },\n  medium: {\n    height: 1.5,\n    font: '--sys-label-medium',\n  },\n  large: {\n    height: 1.75,\n    font: '--sys-label-large',\n  },\n};\n\n/**\n * Directive for breadcrumb sizes\n */\n@Directive({\n  selector: '[hraBreadcrumbSize]',\n  standalone: true,\n  host: {\n    '[style.font]': 'fontVar()',\n    '[style.--mdc-text-button-container-height.rem]': 'buttonHeight()',\n  },\n})\nexport class BreadcrumbsSizeDirective {\n  /** Size of breadcrumbs component */\n  readonly size = input.required<BreadcrumbSize>({ alias: 'hraBreadcrumbSize' });\n\n  /** Gets the font variable for the current breadcrumbs size */\n  protected readonly fontVar = computed(() => `var(${BREADCRUMB_CONFIG[this.size()].font})`);\n\n  /** Gets the button height for the current breadcrumbs size */\n  protected readonly buttonHeight = computed(() => BREADCRUMB_CONFIG[this.size()].height);\n}\n",
            "selector": "[hraBreadcrumbSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "buttonHeight",
                    "defaultValue": "computed(() => BREADCRUMB_CONFIG[this.size()].height)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets the button height for the current breadcrumbs size</p>\n",
                    "line": 51,
                    "rawdescription": "\nGets the button height for the current breadcrumbs size",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "fontVar",
                    "defaultValue": "computed(() => `var(${BREADCRUMB_CONFIG[this.size()].font})`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets the font variable for the current breadcrumbs size</p>\n",
                    "line": 48,
                    "rawdescription": "\nGets the font variable for the current breadcrumbs size",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input.required<BreadcrumbSize>({ alias: 'hraBreadcrumbSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of breadcrumbs component</p>\n",
                    "line": 45,
                    "rawdescription": "\nSize of breadcrumbs component",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "ButtonSizeDirective",
            "id": "directive-ButtonSizeDirective-598872df5d3133cc1a04754a863cb0f9a3ceaed238f2d1d20030085b5570abffc49ff3ae73c972c80ffec12d02e56b14363a61cbee70bb9d648c7bdc89acceee",
            "file": "button/src/lib/button-size/button-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for button sizes</p>\n",
            "rawdescription": "\n\nDirective for button sizes\n",
            "sourceCode": "import { Directive, input } from '@angular/core';\n\n/** Input options for icon button size */\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\n/**\n * Directive for button sizes\n */\n@Directive({\n  selector: '[hraButtonSize]',\n  standalone: true,\n  host: {\n    '[class]': '\"button-size-\"+size()',\n  },\n})\nexport class ButtonSizeDirective {\n  /** Size of icon button to use */\n  readonly size = input.required<ButtonSize>({ alias: 'hraButtonSize' });\n}\n",
            "selector": "[hraButtonSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input.required<ButtonSize>({ alias: 'hraButtonSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of icon button to use</p>\n",
                    "line": 18,
                    "rawdescription": "\nSize of icon button to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "CallToActionButtonDirective",
            "id": "directive-CallToActionButtonDirective-90847b2ca6e2f4aabbde62853ac5450c84b53f42164ffd969613364b3b1e668a78a394a77cccd0fdc885af147d7c0296ff0838b738522a719a87c6e7b77189d8",
            "file": "button/src/lib/directives/call-to-action-button.directive.ts",
            "type": "directive",
            "description": "<p>Directive for Call to Action Button</p>\n",
            "rawdescription": "\nDirective for Call to Action Button",
            "sourceCode": "import { Directive } from '@angular/core';\n\n/** Directive for Call to Action Button */\n@Directive({\n  selector: '[hraCallToActionButton]',\n  standalone: true,\n  host: {\n    class: 'cta-button',\n  },\n})\nexport class CallToActionButtonDirective {}\n",
            "selector": "[hraCallToActionButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "IconButtonSizeDirective",
            "id": "directive-IconButtonSizeDirective-ed8d84b968656e583f73b10dc7780ea03e3800bd2c19da963f8773eca09785ba08e03485e4e00a6ae50132426f5c890daabbe4c15d25f7a578b40ebc9dd8ac59",
            "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for icon buttons</p>\n",
            "rawdescription": "\n\nDirective for icon buttons\n",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for icon button size */\nexport type IconButtonSize = 'small' | 'medium' | 'large';\n\n/** Record of button sizes (number in rem) */\nconst BUTTON_SIZES: Record<IconButtonSize, number> = {\n  small: 1.5,\n  medium: 2.25,\n  large: 2.5,\n};\n\n/** Record of icon sizes (number in rem) */\nconst ICON_SIZES: Record<IconButtonSize, number> = {\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n};\n\n/**\n * Directive for icon buttons\n */\n@Directive({\n  selector: '[hraIconButtonSize]',\n  standalone: true,\n  host: {\n    '[style.--mdc-icon-button-state-layer-size.rem]': 'buttonSize()',\n    '[style.--mdc-icon-button-icon-size.rem]': 'iconSize()',\n  },\n})\nexport class IconButtonSizeDirective {\n  /** Size of icon button to use */\n  readonly size = input.required<IconButtonSize>({ alias: 'hraIconButtonSize' });\n\n  /** Gets size of button in rem */\n  protected readonly buttonSize = computed(() => BUTTON_SIZES[this.size()]);\n  /** Gets size of icon in rem */\n  protected readonly iconSize = computed(() => ICON_SIZES[this.size()]);\n}\n",
            "selector": "[hraIconButtonSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "buttonSize",
                    "defaultValue": "computed(() => BUTTON_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets size of button in rem</p>\n",
                    "line": 36,
                    "rawdescription": "\nGets size of button in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "iconSize",
                    "defaultValue": "computed(() => ICON_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets size of icon in rem</p>\n",
                    "line": 38,
                    "rawdescription": "\nGets size of icon in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input.required<IconButtonSize>({ alias: 'hraIconButtonSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of icon button to use</p>\n",
                    "line": 33,
                    "rawdescription": "\nSize of icon button to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "MicroTooltipDirective",
            "id": "directive-MicroTooltipDirective-f93a9a4b0be3dcf5c8906b069ecfd7519dbe8b57555f87f93e82144d2348e930bbd880e1e6e0e1fc8f8e239e1698f0445a4e93a0d9a62f75f6800588145a91e3",
            "file": "micro-tooltip/src/micro-tooltip.directive.ts",
            "type": "directive",
            "description": "<p>Directive for Tooltip</p>\n",
            "rawdescription": "\nDirective for Tooltip",
            "sourceCode": "import { Directive, effect, inject, input } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { registerStyleComponents } from '@hra-ui/cdk/styling';\nimport { MicroTooltipStylesComponent } from './micro-tooltip-styles/micro-tooltip-styles.component';\n\n/** Type of Tooltip size */\nexport type MicroTooltipSize = 'small' | 'medium';\n\n/** Directive for Tooltip */\n@Directive({\n  selector: '[hraMicroTooltip]',\n  standalone: true,\n  hostDirectives: [\n    {\n      directive: MatTooltip,\n      inputs: ['matTooltip: hraMicroTooltip', 'matTooltipPosition: hraMicroTooltipPosition'],\n    },\n  ],\n})\nexport class MicroTooltipDirective {\n  /** Size of the tooltip */\n  readonly size = input<MicroTooltipSize>('medium', { alias: 'hraMicroTooltipSize' });\n\n  /** Instance of MatTooltip */\n  protected readonly tooltip = inject(MatTooltip);\n\n  /** Registers the styles and sets class names for the tooltip container */\n  constructor() {\n    registerStyleComponents([MicroTooltipStylesComponent]);\n\n    effect(() => {\n      this.tooltip.tooltipClass = ['hra-micro-tooltip', `hra-micro-tooltip-${this.size()}`];\n    });\n  }\n}\n",
            "selector": "[hraMicroTooltip]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "MatTooltip",
                    "inputs": [
                        "matTooltip: hraMicroTooltip",
                        "matTooltipPosition: hraMicroTooltipPosition"
                    ],
                    "outputs": []
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input<MicroTooltipSize>('medium', { alias: 'hraMicroTooltipSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of the tooltip</p>\n",
                    "line": 22,
                    "rawdescription": "\nSize of the tooltip",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tooltip",
                    "defaultValue": "inject(MatTooltip)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Instance of MatTooltip</p>\n",
                    "line": 25,
                    "rawdescription": "\nInstance of MatTooltip",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Registers the styles and sets class names for the tooltip container</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25,
                "rawdescription": "\nRegisters the styles and sets class names for the tooltip container"
            }
        },
        {
            "name": "NavigationCategoryButtonDirective",
            "id": "directive-NavigationCategoryButtonDirective-d9da0c2ae76b4ad76431a1be2017db3002079ba321c172a1df26a20ef0bf4dfb3cdea01d34eb66d6de46098dcb9475e116def1d2304c4e69514ef8c9fa0383a0",
            "file": "button/src/lib/directives/navigation-category-button.directive.ts",
            "type": "directive",
            "description": "<p>Directive for navigation category button</p>\n",
            "rawdescription": "\nDirective for navigation category button",
            "sourceCode": "import { Directive } from '@angular/core';\n\n/** Directive for navigation category button */\n@Directive({\n  selector: '[hraNavCatButton]',\n  standalone: true,\n  host: {\n    class: 'nav-cat-button',\n  },\n})\nexport class NavigationCategoryButtonDirective {}\n",
            "selector": "[hraNavCatButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "PrimaryButtonDirective",
            "id": "directive-PrimaryButtonDirective-094ebb37701609bf16d80e6b2686914224876021e1596425da1e68f38212c354db66caadb5368f22ae6a07f8647509c4b79a45efe618d0b524e22ae88ffbb5e4",
            "file": "button/src/lib/directives/primary-button.directive.ts",
            "type": "directive",
            "description": "<p>Directive for Primary Button</p>\n",
            "rawdescription": "\nDirective for Primary Button",
            "sourceCode": "import { Directive } from '@angular/core';\n\n/** Directive for Primary Button */\n@Directive({\n  selector: '[hraPrimaryButton]',\n  standalone: true,\n  host: {\n    class: 'primary-button',\n  },\n})\nexport class PrimaryButtonDirective {}\n",
            "selector": "[hraPrimaryButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "ScrollOverflowFadeDirective",
            "id": "directive-ScrollOverflowFadeDirective-5c069d94d9cda63486aa31c1f23d16a2e9d7563746326d99a1bebc6db1587495214db4c3ef234dcfc5e6a0a8302103131d976909000eb2f37ae90b65a07b6a0e",
            "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
            "type": "directive",
            "description": "<p>Directive that can be used along ng-scrollbar to apply a gradient\nto the top and bottom of the scroll area to indicate that there\nis additional content available through scrolling.</p>\n",
            "rawdescription": "\n\nDirective that can be used along ng-scrollbar to apply a gradient\nto the top and bottom of the scroll area to indicate that there\nis additional content available through scrolling.\n",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  Renderer2,\n  ViewEncapsulation,\n  effect,\n  inject,\n  input,\n  numberAttribute,\n} from '@angular/core';\nimport { registerStyleComponents } from '@hra-ui/cdk/styling';\nimport { NG_SCROLLBAR } from 'ngx-scrollbar';\nimport { SCROLL_TIMELINE, ScrollTimelineFunc } from '../scroll-timeline/scroll-timeline';\n\n/** Keyframes for the top gradient */\nconst GRADIENT_TOP_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n];\n\n/** Keyframes for the bottom gradient */\nconst GRADIENT_BOTTOM_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n];\n\n/** Scroll overflow fade global styles component */\n@Component({\n  selector: 'hra-scroll-overflow-fade-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./scroll-overflow-fade.directive.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollOverflowFadeStylesComponent {}\n\n/**\n * Directive that can be used along ng-scrollbar to apply a gradient\n * to the top and bottom of the scroll area to indicate that there\n * is additional content available through scrolling.\n */\n@Directive({\n  selector: '[hraScrollOverflowFade]',\n  standalone: true,\n  host: {\n    '[style.--hra-scroll-overflow-fade-offset.px]': 'scrollOverflowFadeOffset()',\n  },\n})\nexport class ScrollOverflowFadeDirective {\n  /**\n   * Additional offset to the gradient elements.\n   * Primarily useful when there are sticky headers on a table, etc.\n   */\n  readonly scrollOverflowFadeOffset = input(0, { transform: numberAttribute });\n\n  /** Renderer instance */\n  private readonly renderer = inject(Renderer2);\n  /** Nearest ng-scrollbar instance */\n  private readonly scrollbar = inject(NG_SCROLLBAR);\n  /** Signal providing access to ScrollTimeline though browser builtin or polyfill */\n  private readonly scrollTimeline = inject(SCROLL_TIMELINE);\n\n  /**\n   * Initializes the directive, adding the gradient elements to the scroll area.\n   */\n  constructor() {\n    registerStyleComponents([ScrollOverflowFadeStylesComponent]);\n\n    effect((onCleanup) => {\n      const scrollTimeline = this.scrollTimeline();\n      if (!this.scrollbar.viewport.initialized() || !scrollTimeline) {\n        return;\n      }\n\n      const viewport = this.scrollbar.viewport.nativeElement;\n      const cleanupFns = [\n        this.attachGradient(viewport, 'top', scrollTimeline, GRADIENT_TOP_KEYFRAMES),\n        this.attachGradient(viewport, 'bottom', scrollTimeline, GRADIENT_BOTTOM_KEYFRAMES),\n      ];\n\n      onCleanup(() => cleanupFns.forEach((fn) => fn()));\n    });\n  }\n\n  /**\n   * Creates and attaches a gradient element to a scroll area.\n   *\n   * @param viewport The scroll area viewport\n   * @param placement Whether to place the gradient on top or bottom\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param keyframes Keyframes used to animate/move the gradient\n   * @returns A cleanup function\n   */\n  private attachGradient(\n    viewport: HTMLElement,\n    placement: 'top' | 'bottom',\n    scrollTimeline: ScrollTimelineFunc,\n    keyframes: Keyframe[],\n  ): () => void {\n    const el = this.createGradientElement(placement);\n    this.renderer.appendChild(viewport, el);\n\n    const animation = this.animateGradient(scrollTimeline, el, viewport, keyframes);\n    return () => {\n      el.remove();\n      animation.cancel();\n    };\n  }\n\n  /**\n   * Creates a new gradient element.\n   *\n   * @param placement Whether it will be placed on the top or bottom\n   * @returns A new element\n   */\n  private createGradientElement(placement: 'top' | 'bottom'): HTMLElement {\n    const el: HTMLElement = this.renderer.createElement('div');\n    this.renderer.addClass(el, `hra-scroll-overflow-fade-gradient-${placement}`);\n    return el;\n  }\n\n  /**\n   * Animates a gradient element using a scroll timeline.\n   *\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param el Element to animate\n   * @param source Scroll container element\n   * @param keyframes Keyframe specification\n   * @returns An animation\n   */\n  private animateGradient(\n    scrollTimeline: ScrollTimelineFunc,\n    el: HTMLElement,\n    source: HTMLElement,\n    keyframes: Keyframe[],\n  ): Animation {\n    return el.animate(keyframes, {\n      fill: 'both',\n      easing: 'linear',\n      timeline: new scrollTimeline({ source, axis: 'y' }),\n    });\n  }\n}\n",
            "selector": "[hraScrollOverflowFade]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "scrollOverflowFadeOffset",
                    "defaultValue": "input(0, { transform: numberAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Additional offset to the gradient elements.\nPrimarily useful when there are sticky headers on a table, etc.</p>\n",
                    "line": 74,
                    "rawdescription": "\n\nAdditional offset to the gradient elements.\nPrimarily useful when there are sticky headers on a table, etc.\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Initializes the directive, adding the gradient elements to the scroll area.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 81,
                "rawdescription": "\n\nInitializes the directive, adding the gradient elements to the scroll area.\n"
            }
        },
        {
            "name": "SecondaryButtonDirective",
            "id": "directive-SecondaryButtonDirective-6512ec8da308f81acc0cb12659ae481946d584055b5ea1d7e6e520eb0bc84812acb44e52f60bdc6148ddee337b7ab6081142c9a6e3c5146b453b75b49d15587a",
            "file": "button/src/lib/directives/secondary-button.directive.ts",
            "type": "directive",
            "description": "<p>Directive for secondary button</p>\n",
            "rawdescription": "\nDirective for secondary button",
            "sourceCode": "import { Directive } from '@angular/core';\n\n/** Directive for secondary button */\n@Directive({\n  selector: '[hraSecondaryButton]',\n  standalone: true,\n  host: {\n    class: 'secondary-button',\n  },\n})\nexport class SecondaryButtonDirective {}\n",
            "selector": "[hraSecondaryButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "SelectSizeDirective",
            "id": "directive-SelectSizeDirective-0bf2f0342d87589e28b55ce98127654a2c1b7e244b863e6f0c8b2a251a5539f81c4739bc26432ecebce2e4f4125201ff3640a5efe171761b13c1608300961606",
            "file": "select/src/lib/select-size/select-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for Select Size</p>\n",
            "rawdescription": "\n\nDirective for Select Size\n",
            "sourceCode": "import { Directive, input } from '@angular/core';\n\n/** Input options for select size */\nexport type SelectSize = 'small' | 'medium' | 'large';\n\n/**\n * Directive for Select Size\n */\n@Directive({\n  selector: '[hraSelectSize]',\n  standalone: true,\n  host: {},\n})\nexport class SelectSizeDirective {\n  /** Size of select to use */\n  readonly size = input.required<SelectSize>({ alias: 'hraSelectSize' });\n}\n",
            "selector": "[hraSelectSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input.required<SelectSize>({ alias: 'hraSelectSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of select to use</p>\n",
                    "line": 16,
                    "rawdescription": "\nSize of select to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "ToggleButtonSizeDirective",
            "id": "directive-ToggleButtonSizeDirective-47084191f7a61172917fede8918bc84f86d73cfddb5c71644d497ca925759af4a7e94d6ae59e3f86e5fb4d1552a5818dbdec4dc01f4e3b84507e0fd9ab1fd129",
            "file": "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for icon buttons</p>\n",
            "rawdescription": "\n\nDirective for icon buttons\n",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for icon button size */\nexport type IconButtonSize = 'medium' | 'large';\n\n/** Interface for ButtonToggle Config */\ninterface ButtonToggleConfig {\n  /** Line height of the button */\n  lineHeight: number;\n  /** Font variable of the button toggle */\n  font: string;\n}\n\n/** Record of button sizes (number in rem) */\nconst BUTTON_CONFIG: Record<IconButtonSize, ButtonToggleConfig> = {\n  medium: {\n    lineHeight: 21,\n    font: '--sys-label-medium',\n  },\n  large: {\n    lineHeight: 24,\n    font: '--sys-label-large',\n  },\n};\n\n/**\n * Directive for icon buttons\n */\n@Directive({\n  selector: '[hraButtonToggleSize]',\n  standalone: true,\n  host: {\n    '[style.--mat-standard-button-toggle-height]': 'lineHeight()',\n    '[style.--mat-standard-button-toggle-label-text-line-height]': 'lineHeight()',\n    '[style.font]': 'fontVar()',\n  },\n})\nexport class ToggleButtonSizeDirective {\n  /** Size of icon button to use */\n  readonly size = input.required<IconButtonSize>({ alias: 'hraButtonToggleSize' });\n\n  /** Gets size of button in rem */\n  protected readonly buttonSize = computed(() => BUTTON_CONFIG[this.size()]);\n\n  /** Gets the font variable for the current button size */\n  protected readonly fontVar = computed(() => `var(${BUTTON_CONFIG[this.size()].font})`);\n\n  /** Gets the line height for the current button size */\n  protected readonly lineHeight = computed(() => `${BUTTON_CONFIG[this.size()].lineHeight}px`);\n}\n",
            "selector": "[hraButtonToggleSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "buttonSize",
                    "defaultValue": "computed(() => BUTTON_CONFIG[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets size of button in rem</p>\n",
                    "line": 43,
                    "rawdescription": "\nGets size of button in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "fontVar",
                    "defaultValue": "computed(() => `var(${BUTTON_CONFIG[this.size()].font})`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets the font variable for the current button size</p>\n",
                    "line": 46,
                    "rawdescription": "\nGets the font variable for the current button size",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "lineHeight",
                    "defaultValue": "computed(() => `${BUTTON_CONFIG[this.size()].lineHeight}px`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets the line height for the current button size</p>\n",
                    "line": 49,
                    "rawdescription": "\nGets the line height for the current button size",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input.required<IconButtonSize>({ alias: 'hraButtonToggleSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of icon button to use</p>\n",
                    "line": 40,
                    "rawdescription": "\nSize of icon button to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "TreeSizeDirective",
            "id": "directive-TreeSizeDirective-08d21392cbcaab6b2b4c885a4cefdb26b3c1ace1f2284843dcca2a852c1fd65457bf3860553cf287c0052c09d5cfa50ce6e1fc6b65da68b66907dea95c0756b9",
            "file": "tree/src/lib/tree-size/tree-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for hra tree component size</p>\n",
            "rawdescription": "\n\nDirective for hra tree component size\n",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for each tree size */\nexport type TreeSize = 'small' | 'medium' | 'large';\n\n/** Icon sizes for each tree size (rem) */\nconst ICON_SIZES: Record<TreeSize, number> = {\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n};\n\n/** Font sizes for each tree size (rem) */\nconst FONT_SIZES: Record<TreeSize, number> = {\n  small: 0.75,\n  medium: 0.875,\n  large: 1,\n};\n\n/** Node heights for each tree size (rem) */\nconst NODE_HEIGHTS: Record<TreeSize, number> = {\n  small: 1.5,\n  medium: 1.75,\n  large: 2,\n};\n\n/**\n * Directive for hra tree component size\n */\n@Directive({\n  selector: '[hraTreeSize]',\n  standalone: true,\n  host: {\n    '[style.--mat-tree-node-text-size.rem]': 'fontSize()',\n    '[style.--mat-tree-node-min-height.rem]': 'nodeHeight()',\n    '[style.--mdc-icon-button-state-layer-size.rem]': 'nodeHeight()',\n    '[style.--mdc-icon-button-icon-size.rem]': 'iconSize()',\n  },\n})\nexport class TreeSizeDirective {\n  /** Size of tree to use */\n  readonly size = input.required<TreeSize>({ alias: 'hraTreeSize' });\n\n  /** Gets font size of tree in rem */\n  protected readonly iconSize = computed(() => ICON_SIZES[this.size()]);\n\n  /** Gets font size of tree in rem */\n  protected readonly fontSize = computed(() => FONT_SIZES[this.size()]);\n\n  /** Node heights */\n  protected readonly nodeHeight = computed(() => NODE_HEIGHTS[this.size()]);\n}\n",
            "selector": "[hraTreeSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "fontSize",
                    "defaultValue": "computed(() => FONT_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets font size of tree in rem</p>\n",
                    "line": 48,
                    "rawdescription": "\nGets font size of tree in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "iconSize",
                    "defaultValue": "computed(() => ICON_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets font size of tree in rem</p>\n",
                    "line": 45,
                    "rawdescription": "\nGets font size of tree in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "nodeHeight",
                    "defaultValue": "computed(() => NODE_HEIGHTS[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Node heights</p>\n",
                    "line": 51,
                    "rawdescription": "\nNode heights",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input.required<TreeSize>({ alias: 'hraTreeSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of tree to use</p>\n",
                    "line": 42,
                    "rawdescription": "\nSize of tree to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "AppLogosComponent",
            "id": "component-AppLogosComponent-19fa3ba7b565fac2acb37517b309854576c59595d3445966b1a4f6881dba58bfa9dc9be5289a18e1d3cc89cdc7b55fe3d596059bc980b0086d770978e4d762fd",
            "file": "app-logos/src/lib/app-logos.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-app-logos",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app-logos.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Description of app</p>\n",
                    "line": 32,
                    "rawdescription": "\nDescription of app",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "appIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Src url for app icon</p>\n",
                    "line": 28,
                    "rawdescription": "\nSrc url for app icon",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Link to app home page</p>\n",
                    "line": 26,
                    "rawdescription": "\nLink to app home page",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>App title</p>\n",
                    "line": 30,
                    "rawdescription": "\nApp title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Description of app</p>\n",
                    "line": 32,
                    "rawdescription": "\nDescription of app",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "appIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Src url for app icon</p>\n",
                    "line": 28,
                    "rawdescription": "\nSrc url for app icon",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Link to app home page</p>\n",
                    "line": 26,
                    "rawdescription": "\nLink to app home page",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>App title</p>\n",
                    "line": 30,
                    "rawdescription": "\nApp title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "variant",
                    "defaultValue": "input<AppLogosVariant>('default')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Variant of logo component</p>\n",
                    "line": 23,
                    "rawdescription": "\nVariant of logo component",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "<p>Logo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.</p>\n",
            "rawdescription": "\n\nLogo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\n\nexport type AppLogosVariant = 'default' | 'fixed';\n\n/**\n * Logo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.\n */\n@Component({\n  selector: 'hra-app-logos',\n  standalone: true,\n  imports: [CommonModule, AssetUrlPipe],\n  templateUrl: './app-logos.component.html',\n  styleUrl: './app-logos.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[attr.variant]': 'variant()',\n  },\n})\nexport class AppLogosComponent {\n  /** Variant of logo component */\n  readonly variant = input<AppLogosVariant>('default');\n\n  /** Link to app home page */\n  readonly appLink = input.required<string>();\n  /** Src url for app icon */\n  readonly appIcon = input.required<string>();\n  /** App title */\n  readonly appTitle = input.required<string>();\n  /** Description of app */\n  readonly appDescription = input<string>();\n}\n",
            "styleUrl": "./app-logos.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  class=\"hra-logo\"\n  href=\"https://humanatlas.io\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n  aria-label=\"Visit Human Reference Atlas\"\n>\n  <img [attr.src]=\"'assets/logo/hra_small.svg' | assetUrl\" [attr.alt]=\"'HRA logo'\" class=\"hra-small\" />\n  <span class=\"hra-logo-text\">Human Reference Atlas</span>\n</a>\n<a class=\"app-logo\" [href]=\"appLink()\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Return to app home\">\n  <img [attr.src]=\"appIcon() | assetUrl\" [attr.alt]=\"appTitle() + ' logo'\" />\n  <span>\n    <div class=\"mat-caption app-label\">{{ appTitle() }}</div>\n    @if (appDescription()) {\n      <div class=\"mat-caption app-description\">{{ appDescription() }}</div>\n    }\n  </span>\n</a>\n"
        },
        {
            "name": "AppsCardComponent",
            "id": "component-AppsCardComponent-3cd3254ab6dc6d92c3dfa423ec73ac355d98565ba44bddd9fa756383061ef52af586f3aadac32090e901505d327465e7e979cbc86c2cf8f4024ca25b6e2b0c7a",
            "file": "apps-card/src/lib/apps-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-apps-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./apps-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Description of the card</p>\n",
                    "line": 19,
                    "rawdescription": "\nDescription of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>URL for the icon</p>\n",
                    "line": 15,
                    "rawdescription": "\nURL for the icon",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Link of the card</p>\n",
                    "line": 21,
                    "rawdescription": "\nLink of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Title of the card</p>\n",
                    "line": 17,
                    "rawdescription": "\nTitle of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Description of the card</p>\n",
                    "line": 19,
                    "rawdescription": "\nDescription of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>URL for the icon</p>\n",
                    "line": 15,
                    "rawdescription": "\nURL for the icon",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Link of the card</p>\n",
                    "line": 21,
                    "rawdescription": "\nLink of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Title of the card</p>\n",
                    "line": 17,
                    "rawdescription": "\nTitle of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Apps Card Component</p>\n",
            "rawdescription": "\nApps Card Component",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/** Apps Card Component */\n@Component({\n  selector: 'hra-apps-card',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './apps-card.component.html',\n  styleUrl: './apps-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppsCardComponent {\n  /** URL for the icon */\n  readonly icon = input.required<string>();\n  /** Title of the card */\n  readonly title = input.required<string>();\n  /** Description of the card */\n  readonly description = input.required<string>();\n  /** Link of the card */\n  readonly link = input.required<string>();\n}\n",
            "styleUrl": "./apps-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a [attr.href]=\"link()\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img class=\"icon\" [attr.src]=\"icon()\" [attr.alt]=\"title() + ' Icon'\" />\n  <span class=\"title\">{{ title() }}</span>\n  <span class=\"description\">{{ description() }}</span>\n</a>\n"
        },
        {
            "name": "AppsSidenavDemoComponent",
            "id": "component-AppsSidenavDemoComponent-6cda83ef45b0bcad27182c475a554ddef9b22dae4025a5fd722e033a965682a3debd9a11d6f58ef9530d7707ef6729790d28c8501b40b045d52348f2a6426e5d",
            "file": "src/lib/apps-sidenav-demo/apps-sidenav-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-apps-sidenav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./apps-sidenav-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "HUBMAP_CARDS_DATA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>data to render the cards inside the sidenav</p>\n",
                    "line": 115,
                    "rawdescription": "\ndata to render the cards inside the sidenav",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "AppsCardComponent",
                    "type": "component"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                }
            ],
            "description": "<p>Apps Sidenav component</p>\n",
            "rawdescription": "\nApps Sidenav component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { AppsCardComponent } from '../../../apps-card/src/index';\nimport { ScrollingModule } from '@hra-ui/design-system/scrolling';\n\n/** HuBMAP cards data */\nexport const HUBMAP_CARDS_DATA = [\n  {\n    category: 'About',\n    cards: [\n      {\n        name: 'HuBMAP Consortium',\n        icon: 'assets/logo/hubmap.svg',\n        title: 'HuBMAP Consortium',\n        description:\n          'HuBMAP all access: Learn about us, our policies, data, and tools. Explore our publications and how to work with us.',\n        link: 'https://hubmapconsortium.org/',\n      },\n    ],\n  },\n  {\n    category: 'Data',\n    cards: [\n      {\n        name: 'HubMAP Data Portal',\n        icon: 'assets/logo/data_portal.svg',\n        title: 'HuBMAP Data Portal',\n        description:\n          'Explore, visualize and download consortium-generated spatial and single cell data for the human body.',\n        link: 'https://portal.hubmapconsortium.org/',\n      },\n      {\n        name: 'Data Portal Workspaces',\n        icon: 'assets/logo/data_portal.svg',\n        title: 'Data Portal Workspaces',\n        description:\n          'Access HuBMAP data in a lightweight exploration platform and perform analyses directly within the portal.',\n        link: 'https://portal.hubmapconsortium.org/workspaces',\n      },\n    ],\n  },\n  {\n    category: 'Atlas',\n    cards: [\n      {\n        name: 'Human Reference Atlas',\n        icon: 'assets/logo/hra_small.svg',\n        title: 'Human Reference Atlas',\n        description:\n          'Use the HRA Portal to access atlas data, explore atlas functionality, and contribute to the Human Reference Atlas.',\n        link: 'https://humanatlas.io/',\n      },\n      {\n        name: 'Exploration User Interface',\n        icon: 'assets/logo/eui.svg',\n        title: 'Exploration User Interface',\n        description:\n          'Explore and validate spatially registered single-cell datasets in three-dimensions across organs.',\n        link: 'https://apps.humanatlas.io/eui/',\n      },\n      {\n        name: 'ASCT+B Reporter',\n        icon: 'assets/logo/asctb-reporter.svg',\n        title: 'ASCT+B Reporter',\n        description:\n          'Explore and compare ASCT+B tables and construct validated panels for multiplexed antibody-based imaging (OMAPs) tables.',\n        link: 'https://hubmapconsortium.github.io/ccf-asct-reporter/',\n      },\n    ],\n  },\n  {\n    category: 'Analytics Tools',\n    cards: [\n      {\n        name: 'Azimuth',\n        icon: 'assets/logo/azimuth.svg',\n        title: 'Azimuth',\n        description:\n          'Azimuth uses a reference dataset to process, analyze, and interpret single-cell RNA-seq or ATAC-seq experiments.',\n        link: 'https://azimuth.hubmapconsortium.org/',\n      },\n      {\n        name: 'FUSION',\n        icon: 'assets/logo/fusion.svg',\n        title: 'FUSION',\n        description: 'Functional Unit State Identification and Navigation with WSI.',\n        link: 'http://fusion.hubmapconsortium.org/?utm_source=hubmap',\n      },\n      {\n        name: 'Antibody Validation Reports',\n        icon: 'assets/logo/antibody-validation-reports.svg',\n        title: 'Antibody Validation Reports',\n        description:\n          'Provide antibody details for multiplex imaging assays and capture data requested by journals for manuscript submission.',\n        link: 'https://avr.hubmapconsortium.org/',\n      },\n    ],\n  },\n];\n\n/** Apps Sidenav component */\n@Component({\n  selector: 'hra-apps-sidenav',\n  standalone: true,\n  imports: [CommonModule, MatSidenavModule, AppsCardComponent, MatIconModule, MatButtonModule, ScrollingModule],\n  templateUrl: './apps-sidenav-demo.component.html',\n  styleUrl: './apps-sidenav-demo.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppsSidenavDemoComponent {\n  /** data to render the cards inside the sidenav */\n  readonly data = HUBMAP_CARDS_DATA;\n}\n",
            "styleUrl": "./apps-sidenav-demo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-sidenav-container class=\"container\">\n  <mat-sidenav #sidenav mode=\"over\" class=\"apps-sidenav headline-small\" [position]=\"'end'\" [fixedInViewport]=\"false\">\n    <ng-scrollbar>\n      <div class=\"header\">\n        <span class=\"sidenav-title\"> HuBMAP Tools & Applications </span>\n        <div style=\"flex-grow: 1\"></div>\n        <button mat-icon-button hraIconButtonSize=\"large\" disableRipple (click)=\"sidenav.toggle()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n\n      @for (item of data; track item) {\n        <div class=\"card-category\">{{ item.category }}</div>\n        @for (card of item.cards; track card) {\n          <hra-apps-card\n            [icon]=\"card.icon\"\n            [title]=\"card.name\"\n            [description]=\"card.description\"\n            [link]=\"card.link\"\n          ></hra-apps-card>\n        }\n      }\n    </ng-scrollbar>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <div class=\"main\">\n      Sidenav Demonstration\n      <div style=\"flex-grow: 1\"></div>\n      <button mat-icon-button hraIconButtonSize=\"large\" disableRipple (click)=\"sidenav.toggle()\">\n        <mat-icon>apps</mat-icon>\n      </button>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "BrandLogoComponent",
            "id": "component-BrandLogoComponent-6437f560b6fb8186ab807bb98086a2b32a5b3e3c1b5e3a08020044d0f05ba2215c508705f65a4d92cbe20db0b2b9cfe215883ebc61a9c7aa86caf9484afde42f",
            "file": "brand-logo/src/lib/brand-logo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-brand-logo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./brand-logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logoPath",
                    "defaultValue": "computed(() => `assets/logo/hra-logo-${this.small() ? 'small' : 'regular'}.svg`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Computed logo path based on the logo size</p>\n",
                    "line": 20,
                    "rawdescription": "\nComputed logo path based on the logo size",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "NEVER_EVAL_SCRIPTS",
                    "defaultValue": "SVGScriptEvalMode.NEVER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>SVG script eval mode</p>\n",
                    "line": 23,
                    "rawdescription": "\nSVG script eval mode",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "small",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Flag to check if the Logo is small</p>\n",
                    "line": 17,
                    "rawdescription": "\nFlag to check if the Logo is small",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                },
                {
                    "name": "InlineSVGModule",
                    "type": "module"
                }
            ],
            "description": "<p>Brand Logo Component</p>\n",
            "rawdescription": "\nBrand Logo Component",
            "type": "component",
            "sourceCode": "import { booleanAttribute, ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { InlineSVGModule, SVGScriptEvalMode } from 'ng-inline-svg-2';\n\n/** Brand Logo Component */\n@Component({\n  selector: 'hra-brand-logo',\n  standalone: true,\n  imports: [CommonModule, AssetUrlPipe, InlineSVGModule],\n  templateUrl: './brand-logo.component.html',\n  styleUrl: './brand-logo.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BrandLogoComponent {\n  /** Flag to check if the Logo is small */\n  readonly small = input(false, { transform: booleanAttribute });\n\n  /** Computed logo path based on the logo size */\n  readonly logoPath = computed(() => `assets/logo/hra-logo-${this.small() ? 'small' : 'regular'}.svg`);\n\n  /** SVG script eval mode */\n  protected readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\n}\n",
            "styleUrl": "./brand-logo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  href=\"https://humanatlas.io/\"\n  target=\"_blank\"\n  [inlineSVG]=\"logoPath() | assetUrl\"\n  [evalScripts]=\"NEVER_EVAL_SCRIPTS\"\n  aria-label=\"Visit Human Reference Atlas\"\n  rel=\"noopener noreferrer\"\n  [class.small]=\"small()\"\n>\n</a>\n"
        },
        {
            "name": "BrandmarkComponent",
            "id": "component-BrandmarkComponent-b62f6c11103a93823ede00227e77645f1e53dd6ccd9b82e0a3b2df10de90a46744e8824e7ee6c0596e6a6303de1c7b61f42e8fff2732c3b859c6e149aa083ed2",
            "file": "brandmark/src/lib/brandmark.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-brandmark",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./brandmark.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "contrast",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether to use the contrast brandmark</p>\n",
                    "line": 18,
                    "rawdescription": "\nWhether to use the contrast brandmark",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contrast",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether to use the contrast brandmark</p>\n",
                    "line": 18,
                    "rawdescription": "\nWhether to use the contrast brandmark",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "svgPath",
                    "defaultValue": "computed(() => {\n    return `assets/logo/hra_brandmark${this.contrast() ? '_contrast' : ''}.svg`;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Path to SVG</p>\n",
                    "line": 21,
                    "rawdescription": "\nPath to SVG",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "InlineSVGModule",
                    "type": "module"
                }
            ],
            "description": "<p>HRA brandmark component</p>\n",
            "rawdescription": "\n\nHRA brandmark component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { InlineSVGModule } from 'ng-inline-svg-2';\n\n/**\n * HRA brandmark component\n */\n@Component({\n  selector: 'hra-brandmark',\n  standalone: true,\n  imports: [CommonModule, InlineSVGModule],\n  templateUrl: './brandmark.component.html',\n  styleUrl: './brandmark.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BrandmarkComponent {\n  /** Whether to use the contrast brandmark */\n  readonly contrast = input(false);\n\n  /** Path to SVG */\n  readonly svgPath = computed(() => {\n    return `assets/logo/hra_brandmark${this.contrast() ? '_contrast' : ''}.svg`;\n  });\n}\n",
            "styleUrl": "./brandmark.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"hra-brandmark\" [inlineSVG]=\"svgPath()\" alt=\"Human Reference Atlas brandmark\" data-testid=\"brandmark\"></div>\n"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-9b086d5fde9cb9de26b96541ad7a53c4ccbdaf83c90ec64abe3a6d60474f8080efe58b84fd71d9304631369a0853a4fa9a7c9b21262cfeb1246307f6ccca0dc0",
            "file": "breadcrumbs/src/lib/breadcrumbs/breadcrumbs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-breadcrumbs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of breadcrumbs component</p>\n",
                    "line": 30,
                    "rawdescription": "\nSize of breadcrumbs component",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "crumbs",
                    "defaultValue": "input<BreadcrumbItem[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Crumbs to display</p>\n",
                    "line": 33,
                    "rawdescription": "\nCrumbs to display",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of breadcrumbs component</p>\n",
                    "line": 30,
                    "rawdescription": "\nSize of breadcrumbs component",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "BreadcrumbsSizeDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Component used to help the user understand their location within websites</p>\n",
            "rawdescription": "\n\nComponent used to help the user understand their location within websites\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { ButtonModule } from '@hra-ui/design-system/button';\n\nimport { BreadcrumbSize, BreadcrumbsSizeDirective } from '../breadcrumbs-size/breadcrumbs-size.directive';\n\n/** Breadcrumb item */\ninterface BreadcrumbItem {\n  /** Name of item */\n  name: string;\n  /** Route to page */\n  route?: string;\n}\n\n/**\n * Component used to help the user understand their location within websites\n */\n@Component({\n  selector: 'hra-breadcrumbs',\n  standalone: true,\n  imports: [CommonModule, MatIconModule, ButtonModule, RouterModule, BreadcrumbsSizeDirective],\n  templateUrl: './breadcrumbs.component.html',\n  styleUrl: './breadcrumbs.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbsComponent {\n  /** Size of breadcrumbs component */\n  readonly size = input.required<BreadcrumbSize>();\n\n  /** Crumbs to display */\n  readonly crumbs = input<BreadcrumbItem[]>([]);\n}\n",
            "styleUrl": "./breadcrumbs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for (crumb of crumbs(); track crumb; let last = $last) {\n  @if (!last) {\n    <a [routerLink]=\"crumb.route\">\n      <button mat-button disableRipple [hraBreadcrumbSize]=\"size()\">{{ crumb.name }}</button>\n    </a>\n    <mat-icon>chevron_right</mat-icon>\n  } @else {\n    <span [hraBreadcrumbSize]=\"size()\">{{ crumb.name }}</span>\n  }\n}\n"
        },
        {
            "name": "ButtonStylesComponent",
            "id": "component-ButtonStylesComponent-5cb0afbaea6cbf0aa7bf1eeb700858b5876ebcef732fc37fc959c4c59c3e7ea4a9133c29750c28c1abb2dd81cd8b4d75c8b44b112bd3ad9916f0bc9d935e8086",
            "file": "button/src/lib/button-styles/button-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-button-styles",
            "styleUrls": [
                "./button-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies button styles globally</p>\n",
            "rawdescription": "\n\nApplies button styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies button styles globally\n */\n@Component({\n  selector: 'hra-button-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./button-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$corner-width: 0.9375rem;\n$corner-height: 0.8125rem;\n$border-width: 0.15rem;\n$x-multiplier: 0.373;\n$y-multiplier: 0.4566;\n\n@mixin material-symbols-rounded() {\n  font-family: 'Material Symbols Rounded';\n  font-weight: 300;\n  font-style: normal;\n  font-size: 1.5rem;\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n}\n\n* {\n  --mat-filled-button-pressed-state-layer-opacity: 0.16;\n  --mdc-filled-button-container-color: var(--sys-tertiary);\n  --mdc-filled-button-disabled-label-text-color: color-mix(in srgb, var(--sys-on-surface) 40%, transparent);\n}\n\n// CTA Primary\n:is(a, button)[mat-flat-button]:not(.secondary-button).cta-button {\n  --mdc-filled-button-container-color: var(--sys-tertiary);\n  --mdc-filled-button-container-shape: 0;\n  clip-path: polygon(\n    /* Bottom left */ 0 100%,\n    /* Top left */ 0 0,\n    /* Top right */ 100% 0%,\n    /* Bottom right y-axis */ 100% calc(100% - $corner-height),\n    /* Bottom right x-axis */ calc(100% - $corner-width) 100%\n  );\n\n  &:hover {\n    background-color: transparent;\n    clip-path: unset;\n    box-shadow: unset;\n    filter: drop-shadow(0px 0px 16px color-mix(in srgb, var(--sys-tertiary) 56%, transparent));\n\n    &:before {\n      content: '';\n      position: absolute;\n      z-index: -1;\n      inset: 0;\n      background: var(--mdc-filled-button-container-color);\n      clip-path: polygon(\n        /* Bottom left */ 0 100%,\n        /* Top left */ 0 0,\n        /* Top right */ 100% 0%,\n        /* Bottom right y-axis */ 100% calc(100% - $corner-height),\n        /* Bottom right x-axis */ calc(100% - $corner-width) 100%\n      );\n    }\n  }\n\n  &:focus-visible {\n    --mdc-filled-button-label-text-color: var(--sys-secondary);\n    outline: unset;\n  }\n\n  &:focus-visible::after {\n    content: '';\n    position: absolute;\n    background-color: var(--sys-on-primary);\n    inset: 0;\n    z-index: -1;\n    clip-path: polygon(\n      /* Bottom left */ $border-width calc(100% - $border-width),\n      /* Top left */ $border-width $border-width,\n      /* Top right */ calc(100% - $border-width) $border-width,\n      /* Bottom right y-axis */ calc(100% - $border-width) calc(100% - $corner-height - $border-width * $y-multiplier),\n      /* Bottom right x-axis */ calc(100% - $corner-width - $border-width * $x-multiplier) calc(100% - $border-width)\n    );\n  }\n}\n\n// CTA Secondary\n:is(a, button)[mat-flat-button].cta-button.secondary-button {\n  --mdc-filled-button-container-color: var(--sys-on-primary);\n  --mdc-filled-button-label-text-color: var(--sys-on-tertiary-fixed);\n  --mat-filled-button-hover-state-layer-opacity: 0.08;\n  --mat-filled-button-pressed-state-layer-opacity: 0.16;\n  --mat-filled-button-state-layer-color: var(--sys-on-tertiary-fixed);\n  --mdc-filled-button-container-shape: 0;\n  --mdc-filled-button-disabled-container-color: var(--sys-on-primary);\n\n  &:hover {\n    box-shadow: none;\n  }\n\n  &:focus-visible {\n    --mat-filled-button-state-layer-color: var(--sys-on-primary);\n    --mdc-filled-button-label-text-color: var(--sys-secondary);\n    outline: solid 2px var(--sys-tertiary);\n  }\n}\n\n// This css clips the focus, hover, ripple states of the button for the Primary CTA\n.mat-mdc-unelevated-button.cta-button:not(.secondary-button) {\n  .mat-mdc-button-persistent-ripple,\n  .mat-mdc-button-ripple,\n  &:hover .mat-mdc-button-persistent-ripple::before {\n    clip-path: polygon(\n      /* Bottom left */ 0 100%,\n      /* Top left */ 0 0,\n      /* Top right */ 100% 0%,\n      /* Bottom right y-axis */ 100% calc(100% - $corner-height),\n      /* Bottom right x-axis */ calc(100% - $corner-width) 100%\n    );\n  }\n}\n\n// Flat Round\n:is(a, button)[mat-flat-button] {\n  font: var(--sys-label-medium);\n  letter-spacing: var(--sys-label-medium-tracking);\n  --mdc-filled-button-container-shape: 0.25rem;\n  --mat-filled-button-horizontal-padding: 1rem;\n  --mdc-filled-button-container-height: 2rem;\n\n  &:hover {\n    box-shadow: 1px 2px 16px 0px rgb(from var(--sys-tertiary) r g b / 0.56);\n  }\n\n  &:focus-visible {\n    --mdc-filled-button-container-color: var(--sys-on-primary);\n    --mdc-filled-button-label-text-color: var(--sys-secondary);\n    outline: solid 2px var(--sys-tertiary);\n  }\n}\n\n// Custom class for Flat primary & Seconday\n:is(a, button)[mat-flat-button] {\n  &.button-size-large {\n    --mat-filled-button-horizontal-padding: 1rem;\n    --mdc-filled-button-container-height: 2.5rem;\n    font: var(--sys-label-medium);\n    letter-spacing: var(--sys-label-medium-tracking);\n    padding: 0.5rem var(--mat-filled-button-horizontal-padding);\n  }\n}\n\n// Basic Primary & Secondary\n:is(a, button)[mat-button] {\n  min-width: unset;\n  font: var(--sys-label-medium);\n  letter-spacing: var(--sys-label-medium-tracking);\n  --mdc-text-button-label-text-color: var(--sys-on-tertiary-fixed);\n  --mat-text-button-state-layer-color: var(--sys-on-tertiary-fixed);\n  --mdc-text-button-disabled-label-text-color: color-mix(in srgb, var(--sys-on-surface) 40%, transparent);\n  --mat-text-button-pressed-state-layer-opacity: 0.16;\n  --mat-text-button-focus-state-layer-opacity: 0;\n  --mdc-text-button-container-shape: 0.25rem;\n  --mat-text-button-horizontal-padding: 1rem;\n\n  &:focus-visible {\n    outline: solid 2px var(--sys-tertiary);\n    --mdc-text-button-label-text-color: var(--sys-secondary);\n  }\n\n  &.secondary-button {\n    --mat-text-button-state-layer-color: var(--sys-secondary);\n    --mdc-text-button-label-text-color: var(--sys-secondary);\n  }\n\n  &:has(mat-icon).mat-mdc-button {\n    padding: 0 1rem 0 0.75rem;\n    mat-icon {\n      margin-right: 0.5rem;\n    }\n  }\n}\n\n// Custom Class for basic primary and secondary\n:is(a, button)[mat-button] {\n  &.button-size-medium {\n    --mat-text-button-horizontal-padding: 1rem;\n    --mdc-text-button-container-height: 2.5rem;\n    font: var(--sys-label-medium);\n    letter-spacing: var(--sys-label-medium-tracking);\n    padding: 0.5rem var(--mat-text-button-horizontal-padding);\n  }\n\n  &.button-size-small {\n    --mat-text-button-horizontal-padding: 0.5rem;\n    --mdc-text-button-container-height: 1.75rem;\n    font: var(--sys-label-small);\n    letter-spacing: var(--sys-label-small-tracking);\n    padding: 0.3125rem var(--mat-text-button-horizontal-padding);\n  }\n}\n\n// Toggle\nmat-button-toggle.mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n  --mat-standard-button-toggle-shape: 0;\n  --mat-standard-button-toggle-hover-state-layer-opacity: 0.08;\n  --mat-standard-button-toggle-selected-state-text-color: var(--sys-secondary);\n  --mat-standard-button-toggle-disabled-state-text-color: color-mix(in srgb, var(--sys-on-surface) 40%, transparent);\n  --mat-standard-button-toggle-disabled-state-background-color: color-mix(\n    in srgb,\n    var(--sys-on-surface) 12%,\n    transparent\n  );\n  border: none;\n  font: var(--sys-label-large);\n  letter-spacing: var(--sys-label-large-tracking);\n\n  &.button-size-large {\n    --mat-standard-button-toggle-height: 1.5rem;\n    .mat-button-toggle-label-content {\n      padding: 0.5rem 1rem;\n    }\n  }\n\n  &.button-size-medium {\n    --mat-standard-button-toggle-height: 1.3125rem;\n    font: var(--sys-label-medium);\n    letter-spacing: var(--sys-label-medium-tracking);\n    .mat-button-toggle-label-content {\n      padding: 0.3438rem 0.5rem;\n    }\n  }\n\n  &:active {\n    .mat-button-toggle-focus-overlay {\n      opacity: 0.16;\n    }\n  }\n\n  &:focus-visible,\n  &.cdk-keyboard-focused {\n    --mat-standard-button-toggle-focus-state-layer-opacity: 0;\n    outline: solid 2px var(--sys-tertiary);\n  }\n\n  &.mat-button-toggle-checked:not(.nav-cat-button) {\n    background-color: color-mix(in srgb, var(--sys-tertiary) 24%, transparent);\n  }\n}\n\n// Nav Cat\nmat-button-toggle.mat-button-toggle-standalone.nav-cat-button .mat-button-toggle-label-content::after {\n  @include material-symbols-rounded();\n  content: 'keyboard_arrow_down';\n  vertical-align: middle;\n}\n\nmat-button-toggle.mat-button-toggle-checked.nav-cat-button {\n  .mat-button-toggle-label-content::after {\n    transform: rotate(180deg);\n  }\n\n  .label {\n    border-bottom: solid 1px var(--sys-tertiary);\n  }\n}\n\nmat-button-toggle.mat-button-toggle-standalone.nav-cat-button {\n  font: var(--sys-label-large);\n  letter-spacing: var(--sys-label-large-tracking);\n  --mat-standard-button-toggle-hover-state-layer-opacity: 0;\n  --mat-standard-button-toggle-selected-state-background-color: var(--sys-on-primary);\n  :is(:hover, :active) {\n    .label {\n      border-bottom: solid 1px var(--sys-tertiary);\n    }\n  }\n\n  .mat-button-toggle-label-content {\n    padding: 0 0.5rem;\n  }\n\n  &:active {\n    .mat-button-toggle-focus-overlay {\n      opacity: 0;\n    }\n  }\n}\n",
                    "styleUrl": "./button-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ButtonToggleStylesComponent",
            "id": "component-ButtonToggleStylesComponent-250e00cdab826bae5daee9dde6519e204387f7e8d14af05e9dcf1a729117e79de49e789a5cd035d8c822f383edfbc915ba67d5f21ca9622ae5a0b495f4f28822",
            "file": "button-toggle/src/lib/button-toggle-styles/button-toggle-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-button-toggle-styles",
            "styleUrls": [
                "./button-toggle-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies button toggle styles globally</p>\n",
            "rawdescription": "\n\nApplies button toggle styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies button toggle styles globally\n */\n@Component({\n  selector: 'hra-button-toggle-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./button-toggle-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonToggleStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-button-toggle-group {\n  --mat-standard-button-toggle-shape: 0.25rem;\n  --mat-standard-button-toggle-divider-color: var(--sys-primary);\n  --mat-standard-button-toggle-selected-state-background-color: var(--sys-tertiary);\n  --mat-standard-button-toggle-selected-state-text-color: var(--sys-on-primary);\n  --mat-standard-button-toggle-hover-state-layer-opacity: 0.04;\n  width: 100%;\n\n  &.mat-button-toggle-group-appearance-standard {\n    border: unset;\n    outline: solid 1px var(--mat-standard-button-toggle-divider-color);\n  }\n\n  .mat-button-toggle {\n    width: 100%;\n\n    &:active {\n      --mat-standard-button-toggle-hover-state-layer-opacity: 0.08;\n    }\n  }\n\n  .mat-button-toggle:not(.mat-button-toggle-checked) .mat-button-toggle-button {\n    padding: 0.5rem 1.15rem;\n  }\n\n  .mat-button-toggle.mat-button-toggle-checked .mat-button-toggle-button {\n    padding: 0.5rem 0.2rem;\n  }\n\n  &[hraButtonToggleSize='medium'] {\n    .mat-button-toggle:not(.mat-button-toggle-checked) .mat-button-toggle-button {\n      padding: 0.3438rem 1.15rem;\n    }\n\n    .mat-button-toggle.mat-button-toggle-checked .mat-button-toggle-button {\n      padding: 0.3438rem 0.2rem;\n    }\n\n    .mat-button-toggle .mat-button-toggle-label-content {\n      vertical-align: middle;\n    }\n  }\n}\n",
                    "styleUrl": "./button-toggle-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ColorPickerComponent",
            "id": "component-ColorPickerComponent-cc202a7fbbd95f76f2fb1033c5b13074d3aede5f05262a4c4298f814ebea13d82a4c1a642efd76bf55467aca265f329fe27e8dfda23fa26767d8c8738a2ded84",
            "file": "color-picker/src/lib/color-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-color-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The RGB color value</p>\n",
                    "line": 17,
                    "rawdescription": "\nThe RGB color value",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The RGB color value</p>\n",
                    "line": 17,
                    "rawdescription": "\nThe RGB color value",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "colorPickerOpen",
                    "defaultValue": "output<ColorPickerDirective | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emits when the color picker is opened or closed</p>\n",
                    "line": 20,
                    "rawdescription": "\nEmits when the color picker is opened or closed",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "hexColor",
                    "defaultValue": "signal('#000000')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Hex representation of the color</p>\n",
                    "line": 23,
                    "rawdescription": "\nHex representation of the color",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "selectColor",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect a new color from the color picker",
                    "description": "<p>Select a new color from the color picker</p>\n",
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ColorPickerModule",
                    "type": "module"
                }
            ],
            "description": "<p>Color Picker Component</p>\n",
            "rawdescription": "\nColor Picker Component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, model, output, signal } from '@angular/core';\nimport { colorEquals, hexToRgb, Rgb } from './color-utils';\nimport { ColorPickerDirective, ColorPickerModule } from 'ngx-color-picker';\n\n/** Color Picker Component */\n@Component({\n  selector: 'hra-color-picker',\n  standalone: true,\n  imports: [CommonModule, ColorPickerModule],\n  templateUrl: './color-picker.component.html',\n  styleUrl: './color-picker.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ColorPickerComponent {\n  /** The RGB color value */\n  readonly color = model.required<Rgb>();\n\n  /** Emits when the color picker is opened or closed */\n  readonly colorPickerOpen = output<ColorPickerDirective | null>();\n\n  /** Hex representation of the color */\n  readonly hexColor = signal('#000000');\n\n  /** Select a new color from the color picker */\n  selectColor(hex: string): void {\n    const rgb = hexToRgb(hex);\n    if (!colorEquals(this.color(), rgb)) {\n      this.color.set(rgb);\n    }\n  }\n}\n",
            "styleUrl": "./color-picker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span\n  class=\"color-pick\"\n  [style.background]=\"hexColor()\"\n  [colorPicker]=\"hexColor()\"\n  cpWidth=\"252px\"\n  cpOutputFormat=\"hex\"\n  cpPositionOffset=\"-17%\"\n  [cpOKButton]=\"true\"\n  cpOKButtonClass=\"accept-button\"\n  cpOKButtonText=\"Accept\"\n  [cpCancelButton]=\"true\"\n  cpCancelButtonClass=\"cancel-button\"\n  cpAlphaChannel=\"always\"\n  [cpUseRootViewContainer]=\"true\"\n  (colorPickerOpen)=\"colorPickerOpen.emit(colorPicker)\"\n  (colorPickerClose)=\"colorPickerOpen.emit(null)\"\n  (colorPickerChange)=\"this.hexColor.set($event)\"\n  (colorPickerSelect)=\"selectColor($event)\"\n  data-testid=\"color-picker-button\"\n  #colorPicker=\"ngxColorPicker\"\n></span>\n"
        },
        {
            "name": "ErrorIndicatorComponent",
            "id": "component-ErrorIndicatorComponent-6f70f3ccc35c6cfc12d31e1651c05e16f103867487d2b01ae58d28fe7e09138aec93f3571b55f813e99804f7a8325d2fe178f4a66649aee75cb1e6dd47bad607",
            "file": "error-indicator/src/lib/error-indicator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-error-indicator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./error-indicator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "defaultValue": "input<string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>List of errors to be shown in the indicator</p>\n",
                    "line": 16,
                    "rawdescription": "\nList of errors to be shown in the indicator",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "<p>Error Indicator component</p>\n",
            "rawdescription": "\nError Indicator component",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\n/** Error Indicator component */\n@Component({\n  selector: 'hra-error-indicator',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './error-indicator.component.html',\n  styleUrl: './error-indicator.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ErrorIndicatorComponent {\n  /** List of errors to be shown in the indicator */\n  readonly errors = input<string[]>();\n}\n",
            "styleUrl": "./error-indicator.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-icon>error</mat-icon>\n<div class=\"errors\">\n  @for (error of errors(); track error) {\n    <div class=\"error\">{{ error }}</div>\n  }\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-d0ab81e70404c3ef0d05c9463838702d6b1f9961526933a3476427a47992a760dfb220e603ab3a9a489b5afe0cbb35253700c7d7c550bd6c8b62587472153202",
            "file": "footer/src/lib/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logo",
                    "defaultValue": "input<string>('assets/logo/hra_logo_contrast.svg')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>HRA Logo url</p>\n",
                    "line": 20,
                    "rawdescription": "\nHRA Logo url",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "socialMediaNames",
                    "defaultValue": "Object.keys(SOCIAL_LINKS) as SocialMediaName[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>List of social links to use in the footer</p>\n",
                    "line": 23,
                    "rawdescription": "\nList of social links to use in the footer",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "SocialMediaButtonComponent",
                    "type": "component"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "<p>Component for footer</p>\n",
            "rawdescription": "\n\nComponent for footer\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { SOCIAL_LINKS, SocialMediaButtonComponent, SocialMediaName } from '@hra-ui/design-system/social-media-button';\n\n/**\n * Component for footer\n */\n@Component({\n  selector: 'hra-footer',\n  standalone: true,\n  imports: [CommonModule, MatIconModule, SocialMediaButtonComponent, AssetUrlPipe],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterComponent {\n  /** HRA Logo url */\n  readonly logo = input<string>('assets/logo/hra_logo_contrast.svg');\n\n  /** List of social links to use in the footer */\n  protected readonly socialMediaNames = Object.keys(SOCIAL_LINKS) as SocialMediaName[];\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"footer-left\">\n  <a href=\"https://humanatlas.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img [attr.src]=\"logo() | assetUrl\" alt=\"Human Reference Atlas Logo\" />\n  </a>\n  <span class=\"copyright\">\n    <mat-icon fontSet=\"material-symbols-outlined\">copyright</mat-icon>\n    2024 CNS at Indiana University\n  </span>\n</div>\n<div class=\"footer-right\">\n  <div class=\"footer-right-content\">\n    <div class=\"social-funded\">\n      <div class=\"social-media\">\n        @for (link of socialMediaNames; track link) {\n          <hra-social-media-button size=\"large\" [name]=\"link\"></hra-social-media-button>\n        }\n      </div>\n      <div class=\"funded-by\">\n        <span>Funded By:</span>\n        <div class=\"funded-logo\">\n          <a href=\"https://www.iu.edu/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img [attr.src]=\"'assets/logo/iu.svg' | assetUrl\" alt=\"Indiana University Logo\" />\n          </a>\n          <a href=\"https://www.nih.gov/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img [attr.src]=\"'assets/logo/nih.svg' | assetUrl\" alt=\"National Institutes of Health (NIH) Logo\" />\n          </a>\n          <a href=\"https://cifar.ca/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img [attr.src]=\"'assets/logo/cifar.svg' | assetUrl\" alt=\"CIFAR Logo\" />\n          </a>\n          <div class=\"spacer\"></div>\n          <div class=\"spacer\"></div>\n          <div class=\"spacer\"></div>\n        </div>\n      </div>\n    </div>\n    <div class=\"disclaimer\">\n      Medical Disclaimer: This resource is intended for research purposes only. It should not be used for emergencies or\n      medical or professional advice.\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "IconButtonStylesComponent",
            "id": "component-IconButtonStylesComponent-94a1a6eb1c2e74616269d445654201ae718b6594f4f6a2b598ef4e6f2a0e85dd7bdf976b40a47ad61f631507144341e285196283bad4979a91bb0c6b1a5758d3",
            "file": "icon-button/src/lib/icon-button-styles/icon-button-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-icon-button-styles",
            "styleUrls": [
                "./icon-button-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies mat icon button styles globally</p>\n",
            "rawdescription": "\n\nApplies mat icon button styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies mat icon button styles globally\n */\n@Component({\n  selector: 'hra-icon-button-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./icon-button-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconButtonStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button[mat-icon-button] {\n  --mat-icon-button-hover-state-layer-opacity: 0.04;\n  --mat-icon-button-pressed-state-layer-opacity: 0.08;\n  --mat-icon-color: var(--sys-secondary);\n  --mat-icon-button-state-layer-color: var(--sys-secondary);\n  --mat-icon-button-focus-state-layer-opacity: 0;\n\n  &:focus-visible {\n    outline: 2px solid var(--sys-tertiary);\n  }\n\n  mat-icon {\n    height: var(--mdc-icon-button-icon-size);\n    width: var(--mdc-icon-button-icon-size);\n    font-size: var(--mdc-icon-button-icon-size);\n  }\n}\n",
                    "styleUrl": "./icon-button-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InputStylesComponent",
            "id": "component-InputStylesComponent-c97919bd41f58c957631c6b70e0a666044f3cf493a26346880e3e1d6d1ddbf127e8895e2c0486197ab901c18cb07efd1d93de7f6acacdb5f1169d8995a0d8ff5",
            "file": "input/src/lib/input-styles/input-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-input-styles",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Applies input styles globally</p>\n",
            "rawdescription": "\n\nApplies input styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Applies input styles globally\n */\n@Component({\n  selector: 'hra-input-styles',\n  standalone: true,\n  imports: [CommonModule],\n  template: '',\n  styleUrl: './input-styles.component.scss',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputStylesComponent {}\n",
            "styleUrl": "./input-styles.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MenuDemoComponent",
            "id": "component-MenuDemoComponent-ca3f947e9aace44532e9bcc03a99a5de685993e96fbfd95598e669a909b0252378ee73e0cef66ba243939fcac0d322dda2eb2bd6b19da87f34c448bc12b9cefb",
            "file": "menu/src/lib/menu-demo/menu-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuOptions",
                    "defaultValue": "input<MenuDemoOption[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>List of menu options</p>\n",
                    "line": 34,
                    "rawdescription": "\nList of menu options",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input<IconButtonSize>('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Menu size</p>\n",
                    "line": 31,
                    "rawdescription": "\nMenu size",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "suboptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDemoOption[]",
                    "optional": false,
                    "description": "<p>List of suboptions to display in the second menu</p>\n",
                    "line": 37,
                    "rawdescription": "\nList of suboptions to display in the second menu"
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatRippleModule",
                    "type": "module"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Nested Angular Material menu component</p>\n",
            "rawdescription": "\n\nNested Angular Material menu component\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, ViewEncapsulation } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IconButtonSize, IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Menu option interface */\nexport interface MenuDemoOption {\n  /** Name of option */\n  name: string;\n  /** Material icon name */\n  icon: string;\n  /** Options to open in a second menu */\n  expandedOptions?: MenuDemoOption[];\n}\n\n/**\n * Nested Angular Material menu component\n */\n@Component({\n  selector: 'hra-menu',\n  standalone: true,\n  imports: [MatButtonModule, MatMenuModule, MatIconModule, MatRippleModule, IconButtonSizeDirective],\n  templateUrl: './menu-demo.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuDemoComponent {\n  /** Menu size */\n  readonly size = input<IconButtonSize>('medium');\n\n  /** List of menu options */\n  readonly menuOptions = input<MenuDemoOption[]>([]);\n\n  /** List of suboptions to display in the second menu */\n  suboptions: MenuDemoOption[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  mat-icon-button\n  [matMenuTriggerFor]=\"options\"\n  [hraIconButtonSize]=\"size()\"\n  aria-label=\"Icon to open nested menu\"\n>\n  <mat-icon>more_vert</mat-icon>\n</button>\n\n<mat-menu #options=\"matMenu\" [class]=\"'hra-nested-menu ' + size()\">\n  @for (option of menuOptions(); track option) {\n    @if (option.expandedOptions) {\n      <button\n        class=\"expanded\"\n        mat-menu-item\n        matRipple\n        matRippleColor=\"#201E3D14\"\n        [matMenuTriggerFor]=\"submenu\"\n        (mouseover)=\"suboptions = option.expandedOptions\"\n      >\n        <mat-icon>{{ option.icon }}</mat-icon>\n        {{ option.name }}\n        <mat-icon class=\"expand-arrow\">arrow_right</mat-icon>\n      </button>\n    } @else {\n      <button mat-menu-item>\n        <mat-icon>{{ option.icon }}</mat-icon>\n        {{ option.name }}\n      </button>\n    }\n  }\n</mat-menu>\n\n<mat-menu #submenu=\"matMenu\" [class]=\"'hra-nested-menu ' + size()\">\n  @for (suboption of suboptions; track suboption) {\n    <button mat-menu-item>\n      <mat-icon>{{ suboption.icon }}</mat-icon>\n      <span>{{ suboption.name }}</span>\n    </button>\n  }\n</mat-menu>\n"
        },
        {
            "name": "MenuStylesComponent",
            "id": "component-MenuStylesComponent-d875ece8998bcac5f368d5dda1e17ed7e75a6768cdaf1c7576d9917049327c958e8591c565406d63ba192ff90fd455eee07833dfa82e3249528046c1790e1336",
            "file": "menu/src/lib/menu-styles/menu-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-menu-styles",
            "styleUrls": [
                "./menu-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies menu styles globally</p>\n",
            "rawdescription": "\n\nApplies menu styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies menu styles globally\n */\n@Component({\n  selector: 'hra-menu-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./menu-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hra-nested-menu {\n  --mat-menu-container-color: white;\n  --mat-menu-container-shape: 0.5rem;\n  --mat-app-elevation-shadow-level-2: 0rem 0.3125rem 1rem 0rem rgb(from var(--sys-shadow) r g b / 0.16);\n  --mat-menu-item-with-icon-leading-spacing: 1rem;\n  --mat-menu-item-with-icon-trailing-spacing: 1rem;\n  --mat-menu-item-label-text-color: var(--sys-on-primary-fixed);\n  --mat-menu-item-icon-color: var(--sys-on-primary-fixed);\n  --mat-menu-item-hover-state-layer-color: rgb(from var(--sys-secondary) r g b / 0.04);\n  --mat-menu-item-focus-state-layer-color: rgb(from var(--sys-secondary) r g b / 0.04);\n\n  button {\n    min-width: 12rem;\n  }\n\n  .expand-arrow {\n    --mat-menu-item-spacing: 1rem;\n    position: absolute;\n    right: 0;\n  }\n\n  .mat-mdc-menu-submenu-icon {\n    display: none;\n  }\n\n  .mat-mdc-menu-item-highlighted {\n    border: 1px solid rgb(from var(--sys-secondary) r g b / 0.32);\n    border-left: none;\n    border-right: none;\n  }\n\n  &.small {\n    --mat-menu-item-icon-size: 1.25rem;\n    --mat-menu-item-spacing: 0.5rem;\n    --mat-menu-item-label-text-tracking: var(--sys-label-small-tracking);\n    --mat-menu-item-label-text-weight: var(--sys-label-small-weight);\n    --mat-menu-item-label-text-size: var(--sys-label-small-size);\n    --mat-menu-item-label-text-line-height: var(--mat-menu-item-icon-size);\n\n    mat-icon {\n      font-size: var(--mat-menu-item-icon-size);\n    }\n\n    .mat-mdc-menu-content {\n      padding: 0.25rem 0;\n    }\n\n    button {\n      min-height: 2.5rem;\n\n      &.expanded {\n        min-width: 10.5rem;\n      }\n    }\n  }\n\n  &.medium {\n    --mat-menu-item-label-text-tracking: var(--sys-label-medium-tracking);\n    --mat-menu-item-label-text-weight: var(--sys-label-medium-weight);\n    --mat-menu-item-label-text-size: var(--sys-label-medium-size);\n    --mat-menu-item-label-text-line-height: var(--sys-label-medium-line-height);\n\n    .mat-mdc-menu-content {\n      padding: 0.5rem 0;\n    }\n\n    button {\n      min-height: 3rem;\n\n      &.expanded {\n        min-width: 12.25rem;\n      }\n    }\n  }\n\n  &.large {\n    --mat-menu-item-label-text-tracking: var(--sys-label-large-tracking);\n    --mat-menu-item-label-text-weight: var(--sys-label-large-weight);\n    --mat-menu-item-label-text-size: var(--sys-label-large-size);\n    --mat-menu-item-label-text-line-height: var(--sys-label-large-line-height);\n\n    .mat-mdc-menu-content {\n      padding: 0.75rem 0;\n    }\n\n    button {\n      min-height: 3.5rem;\n\n      &.expanded {\n        min-width: 12.75rem;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./menu-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MicroTooltipStylesComponent",
            "id": "component-MicroTooltipStylesComponent-e49779f451d7cb23a01d21c0bb5fa384223f1412490d7fa6f79e85c9442e49e971517660dd8c73f73053916e845e9e1a25dd39f187d469d0db68bc0450effaed",
            "file": "micro-tooltip/src/micro-tooltip-styles/micro-tooltip-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-micro-tooltip-styles",
            "styleUrls": [
                "./micro-tooltip-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies micro tooltip styles globally</p>\n",
            "rawdescription": "\n\nApplies micro tooltip styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies micro tooltip styles globally\n */\n@Component({\n  selector: 'hra-micro-tooltip-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./micro-tooltip-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MicroTooltipStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hra-micro-tooltip {\n  --mdc-plain-tooltip-supporting-text-color: var(--sys-on-primary);\n  --mdc-plain-tooltip-container-color: color-mix(in srgb, var(--sys-secondary) 96%, transparent);\n\n  .mat-mdc-tooltip-surface {\n    padding: 0.25rem 0.5rem;\n    letter-spacing: unset;\n  }\n}\n\n.hra-micro-tooltip-medium {\n  .mat-mdc-tooltip-surface {\n    font: var(--sys-label-medium);\n  }\n}\n\n.hra-micro-tooltip-small {\n  .mat-mdc-tooltip-surface {\n    font: var(--sys-label-small);\n  }\n}\n",
                    "styleUrl": "./micro-tooltip-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "NavHeaderComponent",
            "id": "component-NavHeaderComponent-c32eb79b0d4f8d41148107f96059e2e32b7e66b0c27489fdbec89dc122b8c9f18af82ce833bd121df221921c0fbb70231097e04528a0f33b3725e50247974a22",
            "file": "nav-header/src/lib/nav-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-nav-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Description of the app</p>\n",
                    "line": 29,
                    "rawdescription": "\nDescription of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Icon for the app</p>\n",
                    "line": 25,
                    "rawdescription": "\nIcon for the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Link to the app</p>\n",
                    "line": 23,
                    "rawdescription": "\nLink to the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Name of the app</p>\n",
                    "line": 27,
                    "rawdescription": "\nName of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Description of the app</p>\n",
                    "line": 29,
                    "rawdescription": "\nDescription of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Icon for the app</p>\n",
                    "line": 25,
                    "rawdescription": "\nIcon for the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Link to the app</p>\n",
                    "line": 23,
                    "rawdescription": "\nLink to the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Name of the app</p>\n",
                    "line": 27,
                    "rawdescription": "\nName of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "variant",
                    "defaultValue": "input<AppLogosVariant>('default')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Variant of the header</p>\n",
                    "line": 21,
                    "rawdescription": "\nVariant of the header",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "AppLogosComponent",
                    "type": "component"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Navigation Header Component</p>\n",
            "rawdescription": "\n\nNavigation Header Component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\nimport { AppLogosComponent, AppLogosVariant } from '@hra-ui/design-system/app-logos';\n\n/**\n * Navigation Header Component\n */\n@Component({\n  selector: 'hra-nav-header',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, AppLogosComponent, IconButtonSizeDirective],\n  templateUrl: './nav-header.component.html',\n  styleUrl: './nav-header.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavHeaderComponent {\n  /** Variant of the header */\n  readonly variant = input<AppLogosVariant>('default');\n  /** Link to the app */\n  readonly link = input.required<string>();\n  /** Icon for the app */\n  readonly icon = input.required<string>();\n  /** Name of the app */\n  readonly title = input.required<string>();\n  /** Description of the app */\n  readonly description = input<string>();\n}\n",
            "styleUrl": "./nav-header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<hra-app-logos\n  [variant]=\"variant()\"\n  [appLink]=\"link()\"\n  [appIcon]=\"icon()\"\n  [appTitle]=\"title()\"\n  [appDescription]=\"description()\"\n></hra-app-logos>\n<div class=\"filler\"></div>\n<button mat-icon-button hraIconButtonSize=\"large\">\n  <mat-icon>apps</mat-icon>\n</button>\n"
        },
        {
            "name": "NoticeComponent",
            "id": "component-NoticeComponent-521828a815679204f0cc4244c2a8408fca1c4b236aa72f81724ac7fddb84aacd5a0eea0840fe7c8e0d0c3bbf1300ea6d7681f8127004d249511e64b4a739cb4e",
            "file": "dialog/src/lib/notice/notice.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-notice",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notice.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "inject(MAT_DIALOG_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "<p>Instance of Mat Dialog Data</p>\n",
                    "line": 51,
                    "rawdescription": "\nInstance of Mat Dialog Data",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonSizeDirective",
                    "type": "directive"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogActions"
                },
                {
                    "name": "MatDialogTitle"
                },
                {
                    "name": "MatDialogContent"
                },
                {
                    "name": "MatDialogClose"
                }
            ],
            "description": "<p>Notice Component</p>\n",
            "rawdescription": "\nNotice Component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonSizeDirective } from '@hra-ui/design-system/button';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Interface for Dialog Data */\nexport interface DialogData {\n  /** Title of the dialog */\n  title: string;\n  /** Message of the dialog */\n  message: string;\n  /** Action Button Object */\n  action?: {\n    /** Label for the action button */\n    label: string;\n    /** Callback function for the action button */\n    callback: () => void;\n  };\n}\n\n/** Notice Component */\n@Component({\n  selector: 'hra-notice',\n  standalone: true,\n  imports: [\n    CommonModule,\n    IconButtonSizeDirective,\n    MatIconModule,\n    ButtonSizeDirective,\n    MatButtonModule,\n    MatDialogActions,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogClose,\n  ],\n  templateUrl: './notice.component.html',\n  styleUrl: './notice.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NoticeComponent {\n  /** Instance of Mat Dialog Data */\n  protected readonly data: DialogData = inject(MAT_DIALOG_DATA);\n}\n",
            "styleUrl": "./notice.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div mat-dialog-title>\n  <div class=\"title\">\n    {{ data.title }}\n  </div>\n  <button mat-icon-button mat-dialog-close disableRipple hraIconButtonSize=\"medium\" data-testid=\"close-icon\">\n    <mat-icon class=\"material-symbols-rounded\">close</mat-icon>\n  </button>\n</div>\n<mat-dialog-content>{{ data.message }}</mat-dialog-content>\n<mat-dialog-actions>\n  @if (data.action) {\n    <button mat-button disableRipple hraButtonSize=\"medium\" class=\"action\" (click)=\"data.action.callback()\">\n      {{ data.action.label }}\n    </button>\n  }\n  <button mat-button disableRipple mat-dialog-close hraButtonSize=\"medium\" class=\"dismiss\">Dismiss</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "ScrollbarStylesComponent",
            "id": "component-ScrollbarStylesComponent-98b2470766cfc5e02f5528d424eab1b1b48f8a7ec5e51329e60e5c8af8042b617927f1d34f21b9e7f94bb3a558514571ebd540fc3a9f1e378ac1bdfdca0dd40d",
            "file": "scrolling/src/lib/scrollbar-styles/scrollbar-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-scrollbar-styles",
            "styleUrls": [
                "./scrollbar-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>ng-scrollbar global styles component</p>\n",
            "rawdescription": "\nng-scrollbar global styles component",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/** ng-scrollbar global styles component */\n@Component({\n  selector: 'hra-scrollbar-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./scrollbar-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollbarStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":root {\n  --scrollbar-thumb-color: rgb(from var(--sys-primary) r g b / 0.72);\n  --scrollbar-border-radius: 1rem;\n  --scrollbar-thickness: 8;\n}\n",
                    "styleUrl": "./scrollbar-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ScrollOverflowFadeStylesComponent",
            "id": "component-ScrollOverflowFadeStylesComponent-5c069d94d9cda63486aa31c1f23d16a2e9d7563746326d99a1bebc6db1587495214db4c3ef234dcfc5e6a0a8302103131d976909000eb2f37ae90b65a07b6a0e",
            "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-scroll-overflow-fade-styles",
            "styleUrls": [
                "./scroll-overflow-fade.directive.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Scroll overflow fade global styles component</p>\n",
            "rawdescription": "\nScroll overflow fade global styles component",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  Renderer2,\n  ViewEncapsulation,\n  effect,\n  inject,\n  input,\n  numberAttribute,\n} from '@angular/core';\nimport { registerStyleComponents } from '@hra-ui/cdk/styling';\nimport { NG_SCROLLBAR } from 'ngx-scrollbar';\nimport { SCROLL_TIMELINE, ScrollTimelineFunc } from '../scroll-timeline/scroll-timeline';\n\n/** Keyframes for the top gradient */\nconst GRADIENT_TOP_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n];\n\n/** Keyframes for the bottom gradient */\nconst GRADIENT_BOTTOM_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n];\n\n/** Scroll overflow fade global styles component */\n@Component({\n  selector: 'hra-scroll-overflow-fade-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./scroll-overflow-fade.directive.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollOverflowFadeStylesComponent {}\n\n/**\n * Directive that can be used along ng-scrollbar to apply a gradient\n * to the top and bottom of the scroll area to indicate that there\n * is additional content available through scrolling.\n */\n@Directive({\n  selector: '[hraScrollOverflowFade]',\n  standalone: true,\n  host: {\n    '[style.--hra-scroll-overflow-fade-offset.px]': 'scrollOverflowFadeOffset()',\n  },\n})\nexport class ScrollOverflowFadeDirective {\n  /**\n   * Additional offset to the gradient elements.\n   * Primarily useful when there are sticky headers on a table, etc.\n   */\n  readonly scrollOverflowFadeOffset = input(0, { transform: numberAttribute });\n\n  /** Renderer instance */\n  private readonly renderer = inject(Renderer2);\n  /** Nearest ng-scrollbar instance */\n  private readonly scrollbar = inject(NG_SCROLLBAR);\n  /** Signal providing access to ScrollTimeline though browser builtin or polyfill */\n  private readonly scrollTimeline = inject(SCROLL_TIMELINE);\n\n  /**\n   * Initializes the directive, adding the gradient elements to the scroll area.\n   */\n  constructor() {\n    registerStyleComponents([ScrollOverflowFadeStylesComponent]);\n\n    effect((onCleanup) => {\n      const scrollTimeline = this.scrollTimeline();\n      if (!this.scrollbar.viewport.initialized() || !scrollTimeline) {\n        return;\n      }\n\n      const viewport = this.scrollbar.viewport.nativeElement;\n      const cleanupFns = [\n        this.attachGradient(viewport, 'top', scrollTimeline, GRADIENT_TOP_KEYFRAMES),\n        this.attachGradient(viewport, 'bottom', scrollTimeline, GRADIENT_BOTTOM_KEYFRAMES),\n      ];\n\n      onCleanup(() => cleanupFns.forEach((fn) => fn()));\n    });\n  }\n\n  /**\n   * Creates and attaches a gradient element to a scroll area.\n   *\n   * @param viewport The scroll area viewport\n   * @param placement Whether to place the gradient on top or bottom\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param keyframes Keyframes used to animate/move the gradient\n   * @returns A cleanup function\n   */\n  private attachGradient(\n    viewport: HTMLElement,\n    placement: 'top' | 'bottom',\n    scrollTimeline: ScrollTimelineFunc,\n    keyframes: Keyframe[],\n  ): () => void {\n    const el = this.createGradientElement(placement);\n    this.renderer.appendChild(viewport, el);\n\n    const animation = this.animateGradient(scrollTimeline, el, viewport, keyframes);\n    return () => {\n      el.remove();\n      animation.cancel();\n    };\n  }\n\n  /**\n   * Creates a new gradient element.\n   *\n   * @param placement Whether it will be placed on the top or bottom\n   * @returns A new element\n   */\n  private createGradientElement(placement: 'top' | 'bottom'): HTMLElement {\n    const el: HTMLElement = this.renderer.createElement('div');\n    this.renderer.addClass(el, `hra-scroll-overflow-fade-gradient-${placement}`);\n    return el;\n  }\n\n  /**\n   * Animates a gradient element using a scroll timeline.\n   *\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param el Element to animate\n   * @param source Scroll container element\n   * @param keyframes Keyframe specification\n   * @returns An animation\n   */\n  private animateGradient(\n    scrollTimeline: ScrollTimelineFunc,\n    el: HTMLElement,\n    source: HTMLElement,\n    keyframes: Keyframe[],\n  ): Animation {\n    return el.animate(keyframes, {\n      fill: 'both',\n      easing: 'linear',\n      timeline: new scrollTimeline({ source, axis: 'y' }),\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hra-scroll-overflow-fade-gradient-top,\n.hra-scroll-overflow-fade-gradient-bottom {\n  --_hra-scroll-overflow-fade-height: var(--hra-scroll-overflow-fade-height, 32px);\n  --_hra-scroll-overflow-fade-color: var(--hra-scroll-overflow-fade-color, #ffffff);\n\n  display: block;\n  position: absolute;\n  pointer-events: none;\n  z-index: 99;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: var(--_hra-scroll-overflow-fade-height);\n}\n\n.hra-scroll-overflow-fade-gradient-top {\n  --_hra-scroll-overflow-fade-gradient-top-start: var(--hra-scroll-overflow-fade-offset);\n  --_hra-scroll-overflow-fade-gradient-top-end: calc(\n    (var(--content-height) - var(--viewport-height)) * 1px + 2 * var(--hra-scroll-overflow-fade-offset) - 1px\n  );\n\n  top: calc(-1 * var(--_hra-scroll-overflow-fade-height));\n  background: linear-gradient(to bottom, var(--_hra-scroll-overflow-fade-color), transparent);\n}\n\n.hra-scroll-overflow-fade-gradient-bottom {\n  --_hra-scroll-overflow-fade-gradient-bottom-start: calc(\n    var(--viewport-height) * 1px - var(--_hra-scroll-overflow-fade-height)\n  );\n  --_hra-scroll-overflow-fade-gradient-bottom-end: calc(\n    var(--content-height) * 1px - var(--_hra-scroll-overflow-fade-height) + var(--hra-scroll-overflow-fade-offset)\n  );\n\n  top: 100%;\n  background: linear-gradient(to top, var(--_hra-scroll-overflow-fade-color), transparent);\n}\n\nng-scrollbar[isVerticallyScrollable='false'] {\n  & .hra-scroll-overflow-fade-gradient-top,\n  & .hra-scroll-overflow-fade-gradient-bottom {\n    display: none;\n  }\n}\n",
                    "styleUrl": "./scroll-overflow-fade.directive.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SelectStylesComponent",
            "id": "component-SelectStylesComponent-6387c0c4477ef2415f19058821e3ea0283565c70a8f173dc578c48db8b9aff149fdfb0dc4ca67088b46e0bc18073afdaaf01be13655b5b8fec12ad7a03e98261",
            "file": "select/src/lib/select-styles/select-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-select-styles",
            "styleUrls": [
                "./select-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies select styles globally</p>\n",
            "rawdescription": "\n\nApplies select styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies select styles globally\n */\n@Component({\n  selector: 'hra-select-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./select-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field {\n  --mdc-filled-text-field-container-color: var(--sys-surface-container);\n  --mat-select-focused-arrow-color: var(--sys-tertiary);\n\n  .mat-mdc-form-field-infix {\n    width: 14.625rem;\n  }\n\n  mat-label {\n    font: var(--sys-label-large);\n    color: var(--sys-primary-fixed);\n  }\n\n  &.mat-focused {\n    mat-label {\n      color: var(--sys-tertiary);\n    }\n\n    .mdc-line-ripple::after {\n      --mdc-filled-text-field-focus-active-indicator-color: var(--sys-tertiary);\n    }\n\n    mat-select {\n      .mat-mdc-select-value-text .mat-mdc-select-min-line {\n        color: var(--sys-primary-fixed);\n      }\n    }\n  }\n\n  .mat-mdc-text-field-wrapper:not(:has(.mat-mdc-select-placeholder)) {\n    .mdc-floating-label.mat-mdc-floating-label {\n      top: calc(var(--mat-form-field-container-height) / 2 + 2px);\n    }\n  }\n\n  mat-select {\n    .mat-mdc-select-value-text .mat-mdc-select-min-line {\n      font: var(--sys-label-large);\n    }\n  }\n\n  &[hraSelectSize='medium'] {\n    --mat-form-field-container-height: 48px;\n    --mat-form-field-filled-with-label-container-padding-top: 20px;\n    --mat-form-field-filled-with-label-container-padding-bottom: 0px;\n\n    mat-label,\n    .mat-mdc-select-value-text .mat-mdc-select-min-line {\n      font: var(--sys-label-medium);\n    }\n\n    .mat-mdc-form-field-infix {\n      width: 13.25rem;\n    }\n  }\n\n  &[hraSelectSize='small'] {\n    --mat-form-field-container-height: 40px;\n    --mat-form-field-filled-with-label-container-padding-top: 0.875rem;\n    --mat-form-field-filled-with-label-container-padding-bottom: 0px;\n\n    mat-label,\n    .mat-mdc-select-value-text .mat-mdc-select-min-line {\n      font: var(--sys-label-small);\n    }\n\n    .mat-mdc-text-field-wrapper {\n      padding: 0 0.75rem;\n    }\n\n    .mat-mdc-form-field-infix {\n      width: 12.25rem;\n    }\n  }\n}\n\n.options-container {\n  --mat-select-panel-background-color: var(--sys-on-primary);\n  --mat-option-selected-state-label-text-color: var(--sys-secondary);\n  --mat-option-hover-state-layer-color: color-mix(in srgb, var(--sys-on-surface) 4%, transparent);\n  --mat-select-container-elevation-shadow: 0px 5px 4px 0px rgb(from var(--sys-shadow) r g b / 0.16);\n  --mat-option-label-text-color: var(--sys-primary-container);\n  --mat-option-focus-state-layer-color: color-mix(in srgb, var(--sys-on-surface) 4%, transparent);\n\n  mat-option.mat-mdc-option {\n    font: var(--sys-label-large);\n    margin-bottom: 0.5px;\n    min-height: 3.5rem;\n\n    &:active {\n      --mat-option-hover-state-layer-color: color-mix(in srgb, var(--sys-on-surface) 8%, transparent);\n    }\n\n    &:focus-visible {\n      outline: 2px solid var(--sys-tertiary);\n    }\n\n    &.mdc-list-item--selected.mat-mdc-option-active {\n      --mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--sys-on-tertiary-container);\n      background-color: color-mix(in srgb, var(--sys-on-tertiary-container) 8%, transparent);\n    }\n\n    &.mat-mdc-option-active {\n      outline: 1px solid color-mix(in srgb, var(--sys-on-surface) 32%, transparent);\n    }\n  }\n\n  &.options-container-medium {\n    mat-option.mat-mdc-option {\n      min-height: 3rem;\n      font: var(--sys-label-medium);\n    }\n  }\n\n  &.options-container-small {\n    mat-option.mat-mdc-option {\n      min-height: 2.5rem;\n      font: var(--sys-label-small);\n    }\n  }\n}\n",
                    "styleUrl": "./select-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SnackbarComponent",
            "id": "component-SnackbarComponent-9645c3b8042bfa79d9cb9aa7fc553c125ae3a09828daf5d8158d98e279266a727508bb4b76e8b51ad8a112b315f9a7a1ded02a389cf33f33f2655955901d4578",
            "file": "snackbar/src/lib/snackbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-snackbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./snackbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "inject(MAT_SNACK_BAR_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnackbarData",
                    "optional": false,
                    "description": "<p>Injection token for the snackbar data</p>\n",
                    "line": 37,
                    "rawdescription": "\nInjection token for the snackbar data",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "snackbarRef",
                    "defaultValue": "inject(MatSnackBarRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Reference to the MatSnackbarRef</p>\n",
                    "line": 34,
                    "rawdescription": "\nReference to the MatSnackbarRef",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "<p>Snackbar component</p>\n",
            "rawdescription": "\nSnackbar component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { ButtonModule } from '@hra-ui/design-system/button';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Type for button position */\nexport type ButtonPosition = 'start' | 'end';\n\n/** interface for snackbar data */\nexport interface SnackbarData {\n  /** Message in the snackbar */\n  message: string;\n  /** Action button */\n  action?: string;\n  /** Flag to show/hide the close button */\n  close?: boolean;\n  /** Position of the action button */\n  actionButtonPosition?: ButtonPosition;\n}\n\n/** Snackbar component */\n@Component({\n  selector: 'hra-snackbar',\n  standalone: true,\n  imports: [CommonModule, MatIconModule, ButtonModule, IconButtonSizeDirective, MatIconModule],\n  templateUrl: './snackbar.component.html',\n  styleUrl: './snackbar.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SnackbarComponent {\n  /** Reference to the MatSnackbarRef */\n  protected readonly snackbarRef = inject(MatSnackBarRef);\n\n  /** Injection token for the snackbar data*/\n  protected readonly data: SnackbarData = inject(MAT_SNACK_BAR_DATA);\n}\n",
            "styleUrl": "./snackbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span matSnackbarLabel class=\"label\">{{ data.message }}</span>\n<div style=\"flex-grow: 1\"></div>\n<div class=\"actions\">\n  @if (data.action) {\n    <span matSnackBarActions [class.position-end]=\"data.actionButtonPosition === 'end'\">\n      <button\n        mat-button\n        disableRipple\n        hraButtonSize=\"medium\"\n        matSnackBarAction\n        (click)=\"snackbarRef.dismissWithAction()\"\n      >\n        {{ data.action }}\n      </button>\n    </span>\n  }\n  @if (data.close) {\n    <button mat-icon-button hraIconButtonSize=\"large\" (click)=\"snackbarRef.dismiss()\" data-testid=\"close-btn\">\n      <mat-icon> close </mat-icon>\n    </button>\n  }\n</div>\n"
        },
        {
            "name": "SocialMediaButtonComponent",
            "id": "component-SocialMediaButtonComponent-69e9ba010698ed9289c8abae54031aba860c6eece3ea08304a414f3b63b8fb2e4eb99627feeef12162a3a1ad3b8c3c308a16987bede8f8c2965d1e227b5e0d01",
            "file": "social-media-button/src/lib/social-media-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-social-media-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./social-media-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Button name</p>\n",
                    "line": 33,
                    "rawdescription": "\nButton name",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Button size</p>\n",
                    "line": 36,
                    "rawdescription": "\nButton size",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "defaultValue": "computed(() => `social:${this.name()}${this.size() === 'large' ? '_large' : ''}`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Icon to display</p>\n",
                    "line": 39,
                    "rawdescription": "\nIcon to display",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "link",
                    "defaultValue": "computed(() => SOCIAL_LINKS[this.name()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>External link for button</p>\n",
                    "line": 42,
                    "rawdescription": "\nExternal link for button",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Button name</p>\n",
                    "line": 33,
                    "rawdescription": "\nButton name",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Button size</p>\n",
                    "line": 36,
                    "rawdescription": "\nButton size",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "<p>Social media buttons for HRA apps</p>\n",
            "rawdescription": "\n\nSocial media buttons for HRA apps\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\n\n/** Social media name type */\nexport type SocialMediaName = 'x' | 'facebook' | 'instagram' | 'youtube' | 'linkedin' | 'email';\n/** Button size type */\nexport type SocialMediaButtonSize = 'small' | 'large';\n\n/** All CNS links */\nexport const SOCIAL_LINKS: Record<SocialMediaName, string> = {\n  x: 'https://twitter.com/cnscenter',\n  facebook: 'https://www.facebook.com/cnscenter/',\n  instagram: 'https://www.instagram.com/cns_at_iu/',\n  youtube: 'https://www.youtube.com/@CNSCenter/',\n  linkedin: 'https://www.linkedin.com/company/cns-indiana-university-bloomington',\n  email: 'mailto:infoccf@iu.edu',\n};\n\n/**\n * Social media buttons for HRA apps\n */\n@Component({\n  selector: 'hra-social-media-button',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './social-media-button.component.html',\n  styleUrl: './social-media-button.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SocialMediaButtonComponent {\n  /** Button name */\n  readonly name = input.required<SocialMediaName>();\n\n  /** Button size */\n  readonly size = input.required<SocialMediaButtonSize>();\n\n  /** Icon to display */\n  protected icon = computed(() => `social:${this.name()}${this.size() === 'large' ? '_large' : ''}`);\n\n  /** External link for button */\n  protected link = computed(() => SOCIAL_LINKS[this.name()]);\n}\n",
            "styleUrl": "./social-media-button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a [href]=\"link()\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <mat-icon [class.small]=\"size() === 'small'\" [svgIcon]=\"icon()\"></mat-icon>\n</a>\n"
        },
        {
            "name": "StepIndicatorComponent",
            "id": "component-StepIndicatorComponent-2d18ff32b89effef5d2591da72e527c2892bcb99ebaeaa0fba96ee6343a6a1a8fcc5b516f49cc62a2ae15b8c05f5dbd4eacdf1696d5a3428c1c0bb428ef73a1b",
            "file": "step-indicator/src/lib/step-indicator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-step-indicator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./step-indicator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Step value</p>\n",
                    "line": 17,
                    "rawdescription": "\nStep value",
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Step value</p>\n",
                    "line": 17,
                    "rawdescription": "\nStep value",
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Step indicator for module components that have multiple steps</p>\n",
            "rawdescription": "\n\nStep indicator for module components that have multiple steps\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n/**\n * Step indicator for module components that have multiple steps\n */\n@Component({\n  selector: 'hra-step-indicator',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './step-indicator.component.html',\n  styleUrl: './step-indicator.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StepIndicatorComponent {\n  /** Step value */\n  value = input.required<number>();\n}\n",
            "styleUrl": "./step-indicator.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span class=\"step-number\">{{ value() }}</span>\n"
        },
        {
            "name": "TableDemoComponent",
            "id": "component-TableDemoComponent-3ce3a27ac40e5d073e39945e2b3f360310d8e17b67174fcb5631711de4dd888b2a7c950907e95c21585429d5595e5ae90e96285fb7a6da0c5ef8699d16065c87",
            "file": "table/src/lib/table-demo/table-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-table-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "table-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "['name', 'value']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>Columns in table</p>\n",
                    "line": 28,
                    "rawdescription": "\nColumns in table",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "input<TableDemoData[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Unsorted data</p>\n",
                    "line": 25,
                    "rawdescription": "\nUnsorted data",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<TableDemoData>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Table data source</p>\n",
                    "line": 34,
                    "rawdescription": "\nTable data source",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "sort",
                    "defaultValue": "viewChild.required(MatSort)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Mat sort element</p>\n",
                    "line": 31,
                    "rawdescription": "\nMat sort element",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Angular Material table with with sort feature</p>\n",
            "rawdescription": "\n\nAngular Material table with with sort feature\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, effect, input, viewChild } from '@angular/core';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\n\n/** Type for row data */\nexport interface TableDemoData {\n  /** Name of item */\n  name: string;\n  /** Value of item*/\n  value: number;\n}\n\n/**\n * Angular Material table with with sort feature\n */\n@Component({\n  selector: 'hra-table-demo',\n  templateUrl: 'table-demo.component.html',\n  standalone: true,\n  imports: [MatTableModule, MatSortModule, CommonModule],\n})\nexport class TableDemoComponent {\n  /** Unsorted data */\n  readonly data = input<TableDemoData[]>([]);\n\n  /** Columns in table */\n  readonly columns: string[] = ['name', 'value'];\n\n  /** Mat sort element */\n  readonly sort = viewChild.required(MatSort);\n\n  /** Table data source */\n  readonly dataSource = new MatTableDataSource<TableDemoData>([]);\n\n  /** Sort data on load */\n  constructor() {\n    effect(() => {\n      this.dataSource.data = this.data();\n      this.dataSource.sort = this.sort();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Sort data on load</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34,
                "rawdescription": "\nSort data on load"
            },
            "extends": [],
            "templateData": "<table mat-table [dataSource]=\"dataSource\" matSort aria-label=\"Table with sort function\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by name\">Name</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element['name'] }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by value\">Value</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element['value'] }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: columns\"></tr>\n</table>\n"
        },
        {
            "name": "TableStylesComponent",
            "id": "component-TableStylesComponent-56ed26ef392a89292a2c2262e8c73b41a1eef1070da8a3db99724c9e4389293340dce99c06e7ef40f3cb6022b8615f862ad28195e72697d5eaedc23d382740e5",
            "file": "table/src/lib/table-styles/table-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-table-styles",
            "styleUrls": [
                "./table-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies table styles globally</p>\n",
            "rawdescription": "\n\nApplies table styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies table styles globally\n */\n@Component({\n  selector: 'hra-table-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./table-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table[matSort] {\n  --mat-sort-arrow-color: var(--sys-secondary);\n  --mat-table-background-color: white;\n  --mat-table-header-container-height: 2rem;\n  --mat-table-row-item-container-height: 2rem;\n\n  th,\n  tr > td {\n    padding: 0 0.5rem;\n    font: var(--sys-label-medium);\n    letter-spacing: var(--sys-label-medium-tracking);\n  }\n\n  th {\n    color: var(--sys-secondary);\n    line-height: normal;\n  }\n\n  tr {\n    color: black;\n  }\n\n  .mat-sort-header-container {\n    height: 1.5rem;\n    border-bottom: 0.0625rem solid transparent;\n    max-width: 4.375rem;\n\n    &:focus-visible {\n      border-color: var(--sys-secondary);\n    }\n\n    .mat-sort-header-arrow {\n      margin-right: 0.375rem;\n\n      .mat-sort-header-stem {\n        border-radius: 0.25rem;\n        height: 0.75rem;\n      }\n\n      .mat-sort-header-pointer-left,\n      .mat-sort-header-pointer-right {\n        width: 0.4375rem;\n      }\n\n      .mat-sort-header-pointer-left {\n        left: -0.0625rem;\n        border-radius: 0.25rem 0 0 0.25rem;\n      }\n\n      .mat-sort-header-pointer-right {\n        right: -0.0625rem;\n        border-radius: 0 0.25rem 0.25rem 0;\n      }\n\n      .mat-sort-header-pointer-middle {\n        border-radius: 0.25rem;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./table-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TooltipCardComponent",
            "id": "component-TooltipCardComponent-2dc5235a7f3eded06be211afb956e283cb85aa2b150a601c8acfe34d8604280e55c464ade42fa61cd3e0c538877e1ecb523bba58969aaf82e417d3cb62e72189",
            "file": "tooltip-card/src/lib/tooltip-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-tooltip-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "input.required<TooltipContent[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for the card</p>\n",
                    "line": 28,
                    "rawdescription": "\nInput for the card",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "small",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Flag to decide whether the card is small</p>\n",
                    "line": 31,
                    "rawdescription": "\nFlag to decide whether the card is small",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Tooltip Card component</p>\n",
            "rawdescription": "\n\nTooltip Card component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { booleanAttribute, ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n/** Interface for Tooltip Card Content */\nexport interface TooltipContent {\n  /** Title of the card */\n  title?: string;\n  /** Description of the card */\n  description: string;\n}\n\n/**\n * Tooltip Card component\n */\n@Component({\n  selector: 'hra-tooltip-card',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './tooltip-card.component.html',\n  styleUrl: './tooltip-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.small]': 'small()',\n  },\n})\nexport class TooltipCardComponent {\n  /** Input for the card */\n  readonly content = input.required<TooltipContent[]>();\n\n  /** Flag to decide whether the card is small */\n  readonly small = input(false, { transform: booleanAttribute });\n}\n",
            "styleUrl": "./tooltip-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for (item of content(); track item) {\n  <section class=\"section\">\n    @if (item.title) {\n      <h4 class=\"title\">{{ item.title }}</h4>\n    }\n    <p class=\"description\">{{ item.description }}</p>\n  </section>\n}\n"
        },
        {
            "name": "TreeDemoComponent",
            "id": "component-TreeDemoComponent-a14fced1e66ffb8c2d58bdea2c689fd37e00fef4b565a351776986dff01b260348e5f15a696ab02e0e2ed8a9f4f0e20081e9672dc3c1ba40ec473c21deacc257",
            "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-tree-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "tree-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "childrenAccessor",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gets the children of a node</p>\n",
                    "line": 54,
                    "rawdescription": "\nGets the children of a node"
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new ArrayDataSource<NestedNode>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Data source</p>\n",
                    "line": 48,
                    "rawdescription": "\nData source"
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>If the node has a child</p>\n",
                    "line": 57,
                    "rawdescription": "\nIf the node has a child"
                },
                {
                    "name": "padding",
                    "defaultValue": "computed(() => PADDING[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Padding indents</p>\n",
                    "line": 45,
                    "rawdescription": "\nPadding indents",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "selectedNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NestedNode",
                    "optional": true,
                    "description": "<p>Current selected node</p>\n",
                    "line": 51,
                    "rawdescription": "\nCurrent selected node"
                },
                {
                    "name": "size",
                    "defaultValue": "input<TreeSize>('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Size of tree to use</p>\n",
                    "line": 42,
                    "rawdescription": "\nSize of tree to use",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTree<NestedNode>",
                    "optional": false,
                    "description": "<p>ViewChild for tree component</p>\n",
                    "line": 36,
                    "rawdescription": "\nViewChild for tree component",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTree"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "treeData",
                    "defaultValue": "input<NestedNode[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Tree node data</p>\n",
                    "line": 39,
                    "rawdescription": "\nTree node data",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "shouldRender",
                    "args": [
                        {
                            "name": "node",
                            "type": "NestedNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRenders node if it is a root node or if all of its ancestors are expanded",
                    "description": "<p>Renders node if it is a root node or if all of its ancestors are expanded</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NestedNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTreeModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "TreeSizeDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Angular Material nested tree component with HRA styles</p>\n",
            "rawdescription": "\n\nAngular Material nested tree component with HRA styles\n",
            "type": "component",
            "sourceCode": "import { ArrayDataSource } from '@angular/cdk/collections';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, computed, input, ViewChild } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTree, MatTreeModule } from '@angular/material/tree';\n\nimport { TreeSize, TreeSizeDirective } from '../tree-size/tree-size.directive';\n\n/** Nested tree node data */\nexport interface NestedNode {\n  /** Name of node */\n  name: string;\n  /** List of child nodes */\n  children?: NestedNode[];\n}\n\n/** Padding indents for each tree size (px) */\nconst PADDING: Record<TreeSize, number> = {\n  small: 32,\n  medium: 36,\n  large: 40,\n};\n\n/**\n * Angular Material nested tree component with HRA styles\n */\n@Component({\n  selector: 'hra-tree-demo',\n  templateUrl: 'tree-demo.component.html',\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, TreeSizeDirective],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeDemoComponent implements AfterViewInit {\n  /** ViewChild for tree component */\n  @ViewChild(MatTree) tree!: MatTree<NestedNode>;\n\n  /** Tree node data */\n  readonly treeData = input<NestedNode[]>([]);\n\n  /** Size of tree to use */\n  readonly size = input<TreeSize>('medium');\n\n  /** Padding indents */\n  protected readonly padding = computed(() => PADDING[this.size()]);\n\n  /** Data source */\n  dataSource = new ArrayDataSource<NestedNode>([]);\n\n  /** Current selected node */\n  selectedNode?: NestedNode;\n\n  /** Gets the children of a node */\n  childrenAccessor = (dataNode: NestedNode) => dataNode.children ?? [];\n\n  /** If the node has a child */\n  hasChild = (_: number, node: NestedNode) => !!node.children?.length;\n\n  /** Sets dataSource data after view init */\n  ngAfterViewInit() {\n    this.dataSource = new ArrayDataSource<NestedNode>(this.treeData());\n  }\n\n  /** Renders node if it is a root node or if all of its ancestors are expanded */\n  shouldRender(node: NestedNode): boolean {\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n\n  /** Gets parent of a node */\n  private getParentNode(node: NestedNode): NestedNode | undefined {\n    for (const parent of this.treeData()) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n    return undefined;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<mat-tree #tree [dataSource]=\"dataSource\" [childrenAccessor]=\"childrenAccessor\" [hraTreeSize]=\"size()\">\n  <mat-tree-node\n    *matTreeNodeDef=\"let node\"\n    matTreeNodePadding\n    [matTreeNodePaddingIndent]=\"padding()\"\n    [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n    [isDisabled]=\"!shouldRender(node)\"\n    (activation)=\"selectedNode = node\"\n    (click)=\"selectedNode = node\"\n  >\n    <div class=\"node-content leaf\" [class.selected]=\"selectedNode === node\">\n      {{ node.name }}\n    </div>\n  </mat-tree-node>\n\n  <mat-tree-node\n    *matTreeNodeDef=\"let node; when: hasChild\"\n    matTreeNodeToggle\n    matTreeNodePadding\n    [matTreeNodePaddingIndent]=\"padding()\"\n    [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n    [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n    [isDisabled]=\"!shouldRender(node)\"\n    [isExpandable]=\"true\"\n  >\n    <div class=\"node-content\">\n      <button mat-icon-button matTreeNodeToggle disableRipple [attr.aria-label]=\"'Toggle ' + node.name\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{ tree.isExpanded(node) ? 'expand_more' : 'expand_less' }}\n        </mat-icon>\n      </button>\n      {{ node.name }}\n    </div>\n  </mat-tree-node>\n</mat-tree>\n"
        },
        {
            "name": "TreeStylesComponent",
            "id": "component-TreeStylesComponent-86a7e005716c46fb54dc207110b98a26f36bafca306c4af360e1e5b0259ad8f2e2e2be501a43adddcd38779782ed1c8d48264b6de88c546fdd7d4a6cc151cdc3",
            "file": "tree/src/lib/tree-styles/tree-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-tree-styles",
            "styleUrls": [
                "./tree-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies mat tree styles globally</p>\n",
            "rawdescription": "\n\nApplies mat tree styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies mat tree styles globally\n */\n@Component({\n  selector: 'hra-tree-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./tree-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-tree-node {\n  --mat-tree-node-text-font: var(--sys-label-medium-font);\n  --mat-tree-node-text-weight: var(--sys-label-medium-weight);\n  --mat-tree-node-text-color: var(--sys-secondary);\n\n  letter-spacing: var(--sys-label-medium-tracking);\n  cursor: pointer;\n  user-select: none;\n  outline: none;\n\n  &:focus-visible .node-content {\n    border-color: var(--sys-tertiary);\n  }\n}\n\n.node-content {\n  button {\n    --mat-icon-button-hover-state-layer-opacity: 0;\n    --mat-icon-button-pressed-state-layer-opacity: 0;\n  }\n\n  display: flex;\n  height: var(--mat-tree-node-min-height);\n  line-height: var(--mat-tree-node-min-height);\n  border-radius: 0.25rem;\n  width: 100%;\n  border-width: 1px;\n  border-style: solid;\n  border-color: transparent;\n\n  &.leaf {\n    padding-left: 0.5rem;\n  }\n\n  &:hover {\n    background: rgb(from var(--sys-secondary) r g b / 0.04);\n  }\n\n  &:active {\n    background: rgb(from var(--sys-secondary) r g b / 0.08);\n    border-color: transparent;\n  }\n\n  &.selected {\n    background: var(--sys-tertiary);\n    color: var(--sys-on-tertiary);\n  }\n}\n",
                    "styleUrl": "./tree-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-a47b123ab05987a11a562cfd45eb5d2eef93ec6b252461785f1673324b4070ea003e0450ebc633feb1600c9ef58e981808b349b23b703cb488eb4de230195c81",
            "description": "<p>Module exporting button and related utilities</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "button/src/lib/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\nimport { ButtonSizeDirective } from './button-size/button-size.directive';\nimport { CallToActionButtonDirective } from './directives/call-to-action-button.directive';\nimport { NavigationCategoryButtonDirective } from './directives/navigation-category-button.directive';\nimport { PrimaryButtonDirective } from './directives/primary-button.directive';\nimport { SecondaryButtonDirective } from './directives/secondary-button.directive';\n\n/** Module exporting button and related utilities */\n@NgModule({\n  imports: [\n    CallToActionButtonDirective,\n    PrimaryButtonDirective,\n    SecondaryButtonDirective,\n    NavigationCategoryButtonDirective,\n    ButtonSizeDirective,\n  ],\n  exports: [\n    MatButtonModule,\n    MatButtonToggleModule,\n    CallToActionButtonDirective,\n    PrimaryButtonDirective,\n    SecondaryButtonDirective,\n    NavigationCategoryButtonDirective,\n    ButtonSizeDirective,\n  ],\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonSizeDirective"
                        },
                        {
                            "name": "CallToActionButtonDirective"
                        },
                        {
                            "name": "NavigationCategoryButtonDirective"
                        },
                        {
                            "name": "PrimaryButtonDirective"
                        },
                        {
                            "name": "SecondaryButtonDirective"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonSizeDirective"
                        },
                        {
                            "name": "CallToActionButtonDirective"
                        },
                        {
                            "name": "NavigationCategoryButtonDirective"
                        },
                        {
                            "name": "PrimaryButtonDirective"
                        },
                        {
                            "name": "SecondaryButtonDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScrollingModule",
            "id": "module-ScrollingModule-0e5609eb9c1a950be135886a19896dcf9b158c1a2332a21d6fecbd1fa4aafa2d36c7fdaa442e84af865990334197a7dec16b3a3e8c6512283ce8f2b7df54e161",
            "description": "<p>Module exporting ng-scrollbar and related scrolling utilities</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "scrolling/src/lib/scrolling.module.ts",
            "methods": [],
            "sourceCode": "import { EnvironmentProviders, NgModule, makeEnvironmentProviders } from '@angular/core';\nimport { getCurrentScriptBasePath } from '@hra-ui/cdk/app-href';\nimport { provideStyleComponents } from '@hra-ui/cdk/styling';\nimport {\n  NgScrollbarModule,\n  NgScrollbarOptions,\n  provideScrollbarOptions,\n  provideScrollbarPolyfill,\n} from 'ngx-scrollbar';\nimport { ScrollOverflowFadeDirective } from './scroll-overflow-fade/scroll-overflow-fade.directive';\nimport { ScrollbarStylesComponent } from './scrollbar-styles/scrollbar-styles.component';\n\n/** Scrolling configuration */\nexport interface ScollingOptions extends NgScrollbarOptions {\n  /** Url to the scroll timeline polyfill script */\n  polyfillUrl?: string;\n}\n\n/** Default scroll timeline polyfill url */\nconst DEFAULT_POLYFILL_URL = 'assets/polyfills/scroll-timeline-polyfill.js';\n\n/**\n * Provide scrolling functionality to an application.\n *\n * @param options Scrollbar options\n * @returns An environment provider\n */\nexport function provideScrolling(options?: ScollingOptions): EnvironmentProviders {\n  const polyfillUrl = getCurrentScriptBasePath() + (options?.polyfillUrl ?? DEFAULT_POLYFILL_URL);\n\n  return makeEnvironmentProviders([\n    provideStyleComponents(ScrollbarStylesComponent),\n    provideScrollbarPolyfill(polyfillUrl),\n    provideScrollbarOptions({\n      visibility: 'hover',\n      appearance: 'compact',\n      trackClass: 'hra-scrollbar-track',\n      thumbClass: 'hra-scrollbar-thumb',\n      ...options,\n    }),\n  ]);\n}\n\n/** Module exporting ng-scrollbar and related scrolling utilities */\n@NgModule({\n  imports: [ScrollOverflowFadeDirective],\n  exports: [NgScrollbarModule, ScrollOverflowFadeDirective],\n})\nexport class ScrollingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ScrollOverflowFadeDirective"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScrollOverflowFadeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BREADCRUMB_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<BreadcrumbSize, BreadcrumbConfig>",
                "defaultValue": "{\n  small: {\n    height: 1.5,\n    font: '--sys-label-small',\n  },\n  medium: {\n    height: 1.5,\n    font: '--sys-label-medium',\n  },\n  large: {\n    height: 1.75,\n    font: '--sys-label-large',\n  },\n}",
                "rawdescription": "Breadcrumb size config (numbers in rem)",
                "description": "<p>Breadcrumb size config (numbers in rem)</p>\n"
            },
            {
                "name": "BUTTON_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconButtonSize, ButtonToggleConfig>",
                "defaultValue": "{\n  medium: {\n    lineHeight: 21,\n    font: '--sys-label-medium',\n  },\n  large: {\n    lineHeight: 24,\n    font: '--sys-label-large',\n  },\n}",
                "rawdescription": "Record of button sizes (number in rem)",
                "description": "<p>Record of button sizes (number in rem)</p>\n"
            },
            {
                "name": "BUTTON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconButtonSize, number>",
                "defaultValue": "{\n  small: 1.5,\n  medium: 2.25,\n  large: 2.5,\n}",
                "rawdescription": "Record of button sizes (number in rem)",
                "description": "<p>Record of button sizes (number in rem)</p>\n"
            },
            {
                "name": "DEFAULT_POLYFILL_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scrolling.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'assets/polyfills/scroll-timeline-polyfill.js'",
                "rawdescription": "Default scroll timeline polyfill url",
                "description": "<p>Default scroll timeline polyfill url</p>\n"
            },
            {
                "name": "FONT_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 0.75,\n  medium: 0.875,\n  large: 1,\n}",
                "rawdescription": "Font sizes for each tree size (rem)",
                "description": "<p>Font sizes for each tree size (rem)</p>\n"
            },
            {
                "name": "GRADIENT_BOTTOM_KEYFRAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Keyframe[]",
                "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n]",
                "rawdescription": "Keyframes for the bottom gradient",
                "description": "<p>Keyframes for the bottom gradient</p>\n"
            },
            {
                "name": "GRADIENT_TOP_KEYFRAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Keyframe[]",
                "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n]",
                "rawdescription": "Keyframes for the top gradient",
                "description": "<p>Keyframes for the top gradient</p>\n"
            },
            {
                "name": "HUBMAP_CARDS_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/apps-sidenav-demo/apps-sidenav-demo.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    category: 'About',\n    cards: [\n      {\n        name: 'HuBMAP Consortium',\n        icon: 'assets/logo/hubmap.svg',\n        title: 'HuBMAP Consortium',\n        description:\n          'HuBMAP all access: Learn about us, our policies, data, and tools. Explore our publications and how to work with us.',\n        link: 'https://hubmapconsortium.org/',\n      },\n    ],\n  },\n  {\n    category: 'Data',\n    cards: [\n      {\n        name: 'HubMAP Data Portal',\n        icon: 'assets/logo/data_portal.svg',\n        title: 'HuBMAP Data Portal',\n        description:\n          'Explore, visualize and download consortium-generated spatial and single cell data for the human body.',\n        link: 'https://portal.hubmapconsortium.org/',\n      },\n      {\n        name: 'Data Portal Workspaces',\n        icon: 'assets/logo/data_portal.svg',\n        title: 'Data Portal Workspaces',\n        description:\n          'Access HuBMAP data in a lightweight exploration platform and perform analyses directly within the portal.',\n        link: 'https://portal.hubmapconsortium.org/workspaces',\n      },\n    ],\n  },\n  {\n    category: 'Atlas',\n    cards: [\n      {\n        name: 'Human Reference Atlas',\n        icon: 'assets/logo/hra_small.svg',\n        title: 'Human Reference Atlas',\n        description:\n          'Use the HRA Portal to access atlas data, explore atlas functionality, and contribute to the Human Reference Atlas.',\n        link: 'https://humanatlas.io/',\n      },\n      {\n        name: 'Exploration User Interface',\n        icon: 'assets/logo/eui.svg',\n        title: 'Exploration User Interface',\n        description:\n          'Explore and validate spatially registered single-cell datasets in three-dimensions across organs.',\n        link: 'https://apps.humanatlas.io/eui/',\n      },\n      {\n        name: 'ASCT+B Reporter',\n        icon: 'assets/logo/asctb-reporter.svg',\n        title: 'ASCT+B Reporter',\n        description:\n          'Explore and compare ASCT+B tables and construct validated panels for multiplexed antibody-based imaging (OMAPs) tables.',\n        link: 'https://hubmapconsortium.github.io/ccf-asct-reporter/',\n      },\n    ],\n  },\n  {\n    category: 'Analytics Tools',\n    cards: [\n      {\n        name: 'Azimuth',\n        icon: 'assets/logo/azimuth.svg',\n        title: 'Azimuth',\n        description:\n          'Azimuth uses a reference dataset to process, analyze, and interpret single-cell RNA-seq or ATAC-seq experiments.',\n        link: 'https://azimuth.hubmapconsortium.org/',\n      },\n      {\n        name: 'FUSION',\n        icon: 'assets/logo/fusion.svg',\n        title: 'FUSION',\n        description: 'Functional Unit State Identification and Navigation with WSI.',\n        link: 'http://fusion.hubmapconsortium.org/?utm_source=hubmap',\n      },\n      {\n        name: 'Antibody Validation Reports',\n        icon: 'assets/logo/antibody-validation-reports.svg',\n        title: 'Antibody Validation Reports',\n        description:\n          'Provide antibody details for multiplex imaging assays and capture data requested by journals for manuscript submission.',\n        link: 'https://avr.hubmapconsortium.org/',\n      },\n    ],\n  },\n]",
                "rawdescription": "HuBMAP cards data",
                "description": "<p>HuBMAP cards data</p>\n"
            },
            {
                "name": "ICON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconButtonSize, number>",
                "defaultValue": "{\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n}",
                "rawdescription": "Record of icon sizes (number in rem)",
                "description": "<p>Record of icon sizes (number in rem)</p>\n"
            },
            {
                "name": "ICON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n}",
                "rawdescription": "Icon sizes for each tree size (rem)",
                "description": "<p>Icon sizes for each tree size (rem)</p>\n"
            },
            {
                "name": "NODE_HEIGHTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 1.5,\n  medium: 1.75,\n  large: 2,\n}",
                "rawdescription": "Node heights for each tree size (rem)",
                "description": "<p>Node heights for each tree size (rem)</p>\n"
            },
            {
                "name": "PADDING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 32,\n  medium: 36,\n  large: 40,\n}",
                "rawdescription": "Padding indents for each tree size (px)",
                "description": "<p>Padding indents for each tree size (px)</p>\n"
            },
            {
                "name": "SCROLL_TIMELINE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Signal<ScrollTimelineFunc | null>>('SCROLL_TIMELINE', {\n  providedIn: 'root',\n  factory: () => {\n    type WindowWithScrollTimeline = { ScrollTimeline: ScrollTimelineFunc };\n    const window = inject(DOCUMENT).defaultView as WindowWithScrollTimeline | null;\n    if (!isPlatformBrowser(inject(PLATFORM_ID)) || !window) {\n      return signal(null);\n    }\n\n    const isAvailable = () => 'ScrollTimeline' in window && typeof window.ScrollTimeline === 'function';\n    if (isAvailable()) {\n      return signal(window['ScrollTimeline']);\n    }\n\n    const scrollTimeline$ = inject(SCROLL_TIMELINE_QUERY_INTERVAL).pipe(\n      takeWhile(() => !isAvailable()),\n      ignoreElements(),\n      endWith(null),\n      map(() => window.ScrollTimeline),\n    );\n\n    return toSignal(scrollTimeline$, { initialValue: null });\n  },\n})",
                "rawdescription": "Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.",
                "description": "<p>Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.</p>\n"
            },
            {
                "name": "SCROLL_TIMELINE_QUERY_INTERVAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Observable<number>>('SCROLL_TIMELINE_QUERY_INTERVAL', {\n  providedIn: 'root',\n  factory: () => interval(100),\n})",
                "rawdescription": "Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.",
                "description": "<p>Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.</p>\n"
            },
            {
                "name": "SOCIAL_LINKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "social-media-button/src/lib/social-media-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<SocialMediaName, string>",
                "defaultValue": "{\n  x: 'https://twitter.com/cnscenter',\n  facebook: 'https://www.facebook.com/cnscenter/',\n  instagram: 'https://www.instagram.com/cns_at_iu/',\n  youtube: 'https://www.youtube.com/@CNSCenter/',\n  linkedin: 'https://www.linkedin.com/company/cns-indiana-university-bloomington',\n  email: 'mailto:infoccf@iu.edu',\n}",
                "rawdescription": "All CNS links",
                "description": "<p>All CNS links</p>\n"
            }
        ],
        "functions": [
            {
                "name": "colorEquals",
                "file": "color-picker/src/lib/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Compares two RGB colors for equality</p>\n",
                "args": [
                    {
                        "name": "color1",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color2",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "color1",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color2",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hexToRgb",
                "file": "color-picker/src/lib/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Converts a hexadecimal color string to an RGB color</p>\n",
                "args": [
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Rgb",
                "jsdoctags": [
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideButtons",
                "file": "button/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for button</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideButtonToggle",
                "file": "button-toggle/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for button toggle</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideDesignSystem",
                "file": "src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns design system providers</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideIconButtons",
                "file": "icon-button/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for icon buttons</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideInput",
                "file": "input/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for Input</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideMenu",
                "file": "menu/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for menu</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideScrolling",
                "file": "scrolling/src/lib/scrolling.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provide scrolling functionality to an application.</p>\n",
                "args": [
                    {
                        "name": "options",
                        "type": "ScollingOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 905,
                            "end": 912,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "options"
                        },
                        "type": "ScollingOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 899,
                            "end": 904,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Scrollbar options</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 935,
                            "end": 942,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>An environment provider</p>\n"
                    }
                ]
            },
            {
                "name": "provideSelect",
                "file": "select/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for select</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideTable",
                "file": "table/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for table</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideTrees",
                "file": "tree/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for tree</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "rgbToHex",
                "file": "color-picker/src/lib/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Converts an RGB color to its hexadecimal string representation</p>\n",
                "args": [
                    {
                        "name": "rgb",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "rgb",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setupScrollTesting",
                "file": "scrolling/testing/src/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Setup the testing environment for scrolling to work.\nAdds global mocks for functions used by scrolling if they don&#39;t exist.</p>\n",
                "args": [],
                "returnType": "void"
            }
        ],
        "typealiases": [
            {
                "name": "AppLogosVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"fixed\"",
                "file": "app-logos/src/lib/app-logos.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "BreadcrumbSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for breadcrumb size</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"start\" | \"end\"",
                "file": "snackbar/src/lib/snackbar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for button position</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "button/src/lib/button-size/button-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for icon button size</p>\n",
                "kind": 192
            },
            {
                "name": "IconButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"medium\" | \"large\"",
                "file": "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for icon button size</p>\n",
                "kind": 192
            },
            {
                "name": "IconButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for icon button size</p>\n",
                "kind": 192
            },
            {
                "name": "MicroTooltipSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\"",
                "file": "micro-tooltip/src/micro-tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type of Tooltip size</p>\n",
                "kind": 192
            },
            {
                "name": "Rgb",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[, , ]",
                "file": "color-picker/src/lib/color-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type representing an RGB color as a tuple of three numbers</p>\n",
                "kind": 189
            },
            {
                "name": "ScrollTimelineFunc",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Basic signature of the ScrollTimeline constructor</p>\n",
                "kind": 185
            },
            {
                "name": "SelectSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "select/src/lib/select-size/select-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for select size</p>\n",
                "kind": 192
            },
            {
                "name": "SnackbarConfig",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<MatSnackBarConfig | \"data\" | \"panelClass\">",
                "file": "snackbar/src/lib/snackbar.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "SocialMediaButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "social-media-button/src/lib/social-media-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Button size type</p>\n",
                "kind": 192
            },
            {
                "name": "SocialMediaName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"x\" | \"facebook\" | \"instagram\" | \"youtube\" | \"linkedin\" | \"email\"",
                "file": "social-media-button/src/lib/social-media-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Social media name type</p>\n",
                "kind": 192
            },
            {
                "name": "TreeSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for each tree size</p>\n",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts": [
                {
                    "name": "BREADCRUMB_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<BreadcrumbSize, BreadcrumbConfig>",
                    "defaultValue": "{\n  small: {\n    height: 1.5,\n    font: '--sys-label-small',\n  },\n  medium: {\n    height: 1.5,\n    font: '--sys-label-medium',\n  },\n  large: {\n    height: 1.75,\n    font: '--sys-label-large',\n  },\n}",
                    "rawdescription": "Breadcrumb size config (numbers in rem)",
                    "description": "<p>Breadcrumb size config (numbers in rem)</p>\n"
                }
            ],
            "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts": [
                {
                    "name": "BUTTON_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconButtonSize, ButtonToggleConfig>",
                    "defaultValue": "{\n  medium: {\n    lineHeight: 21,\n    font: '--sys-label-medium',\n  },\n  large: {\n    lineHeight: 24,\n    font: '--sys-label-large',\n  },\n}",
                    "rawdescription": "Record of button sizes (number in rem)",
                    "description": "<p>Record of button sizes (number in rem)</p>\n"
                }
            ],
            "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts": [
                {
                    "name": "BUTTON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconButtonSize, number>",
                    "defaultValue": "{\n  small: 1.5,\n  medium: 2.25,\n  large: 2.5,\n}",
                    "rawdescription": "Record of button sizes (number in rem)",
                    "description": "<p>Record of button sizes (number in rem)</p>\n"
                },
                {
                    "name": "ICON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconButtonSize, number>",
                    "defaultValue": "{\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n}",
                    "rawdescription": "Record of icon sizes (number in rem)",
                    "description": "<p>Record of icon sizes (number in rem)</p>\n"
                }
            ],
            "scrolling/src/lib/scrolling.module.ts": [
                {
                    "name": "DEFAULT_POLYFILL_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scrolling.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'assets/polyfills/scroll-timeline-polyfill.js'",
                    "rawdescription": "Default scroll timeline polyfill url",
                    "description": "<p>Default scroll timeline polyfill url</p>\n"
                }
            ],
            "tree/src/lib/tree-size/tree-size.directive.ts": [
                {
                    "name": "FONT_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 0.75,\n  medium: 0.875,\n  large: 1,\n}",
                    "rawdescription": "Font sizes for each tree size (rem)",
                    "description": "<p>Font sizes for each tree size (rem)</p>\n"
                },
                {
                    "name": "ICON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n}",
                    "rawdescription": "Icon sizes for each tree size (rem)",
                    "description": "<p>Icon sizes for each tree size (rem)</p>\n"
                },
                {
                    "name": "NODE_HEIGHTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 1.5,\n  medium: 1.75,\n  large: 2,\n}",
                    "rawdescription": "Node heights for each tree size (rem)",
                    "description": "<p>Node heights for each tree size (rem)</p>\n"
                }
            ],
            "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts": [
                {
                    "name": "GRADIENT_BOTTOM_KEYFRAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Keyframe[]",
                    "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n]",
                    "rawdescription": "Keyframes for the bottom gradient",
                    "description": "<p>Keyframes for the bottom gradient</p>\n"
                },
                {
                    "name": "GRADIENT_TOP_KEYFRAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Keyframe[]",
                    "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n]",
                    "rawdescription": "Keyframes for the top gradient",
                    "description": "<p>Keyframes for the top gradient</p>\n"
                }
            ],
            "src/lib/apps-sidenav-demo/apps-sidenav-demo.component.ts": [
                {
                    "name": "HUBMAP_CARDS_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/apps-sidenav-demo/apps-sidenav-demo.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    category: 'About',\n    cards: [\n      {\n        name: 'HuBMAP Consortium',\n        icon: 'assets/logo/hubmap.svg',\n        title: 'HuBMAP Consortium',\n        description:\n          'HuBMAP all access: Learn about us, our policies, data, and tools. Explore our publications and how to work with us.',\n        link: 'https://hubmapconsortium.org/',\n      },\n    ],\n  },\n  {\n    category: 'Data',\n    cards: [\n      {\n        name: 'HubMAP Data Portal',\n        icon: 'assets/logo/data_portal.svg',\n        title: 'HuBMAP Data Portal',\n        description:\n          'Explore, visualize and download consortium-generated spatial and single cell data for the human body.',\n        link: 'https://portal.hubmapconsortium.org/',\n      },\n      {\n        name: 'Data Portal Workspaces',\n        icon: 'assets/logo/data_portal.svg',\n        title: 'Data Portal Workspaces',\n        description:\n          'Access HuBMAP data in a lightweight exploration platform and perform analyses directly within the portal.',\n        link: 'https://portal.hubmapconsortium.org/workspaces',\n      },\n    ],\n  },\n  {\n    category: 'Atlas',\n    cards: [\n      {\n        name: 'Human Reference Atlas',\n        icon: 'assets/logo/hra_small.svg',\n        title: 'Human Reference Atlas',\n        description:\n          'Use the HRA Portal to access atlas data, explore atlas functionality, and contribute to the Human Reference Atlas.',\n        link: 'https://humanatlas.io/',\n      },\n      {\n        name: 'Exploration User Interface',\n        icon: 'assets/logo/eui.svg',\n        title: 'Exploration User Interface',\n        description:\n          'Explore and validate spatially registered single-cell datasets in three-dimensions across organs.',\n        link: 'https://apps.humanatlas.io/eui/',\n      },\n      {\n        name: 'ASCT+B Reporter',\n        icon: 'assets/logo/asctb-reporter.svg',\n        title: 'ASCT+B Reporter',\n        description:\n          'Explore and compare ASCT+B tables and construct validated panels for multiplexed antibody-based imaging (OMAPs) tables.',\n        link: 'https://hubmapconsortium.github.io/ccf-asct-reporter/',\n      },\n    ],\n  },\n  {\n    category: 'Analytics Tools',\n    cards: [\n      {\n        name: 'Azimuth',\n        icon: 'assets/logo/azimuth.svg',\n        title: 'Azimuth',\n        description:\n          'Azimuth uses a reference dataset to process, analyze, and interpret single-cell RNA-seq or ATAC-seq experiments.',\n        link: 'https://azimuth.hubmapconsortium.org/',\n      },\n      {\n        name: 'FUSION',\n        icon: 'assets/logo/fusion.svg',\n        title: 'FUSION',\n        description: 'Functional Unit State Identification and Navigation with WSI.',\n        link: 'http://fusion.hubmapconsortium.org/?utm_source=hubmap',\n      },\n      {\n        name: 'Antibody Validation Reports',\n        icon: 'assets/logo/antibody-validation-reports.svg',\n        title: 'Antibody Validation Reports',\n        description:\n          'Provide antibody details for multiplex imaging assays and capture data requested by journals for manuscript submission.',\n        link: 'https://avr.hubmapconsortium.org/',\n      },\n    ],\n  },\n]",
                    "rawdescription": "HuBMAP cards data",
                    "description": "<p>HuBMAP cards data</p>\n"
                }
            ],
            "tree/src/lib/tree-demo/tree-demo.component.ts": [
                {
                    "name": "PADDING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 32,\n  medium: 36,\n  large: 40,\n}",
                    "rawdescription": "Padding indents for each tree size (px)",
                    "description": "<p>Padding indents for each tree size (px)</p>\n"
                }
            ],
            "scrolling/src/lib/scroll-timeline/scroll-timeline.ts": [
                {
                    "name": "SCROLL_TIMELINE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Signal<ScrollTimelineFunc | null>>('SCROLL_TIMELINE', {\n  providedIn: 'root',\n  factory: () => {\n    type WindowWithScrollTimeline = { ScrollTimeline: ScrollTimelineFunc };\n    const window = inject(DOCUMENT).defaultView as WindowWithScrollTimeline | null;\n    if (!isPlatformBrowser(inject(PLATFORM_ID)) || !window) {\n      return signal(null);\n    }\n\n    const isAvailable = () => 'ScrollTimeline' in window && typeof window.ScrollTimeline === 'function';\n    if (isAvailable()) {\n      return signal(window['ScrollTimeline']);\n    }\n\n    const scrollTimeline$ = inject(SCROLL_TIMELINE_QUERY_INTERVAL).pipe(\n      takeWhile(() => !isAvailable()),\n      ignoreElements(),\n      endWith(null),\n      map(() => window.ScrollTimeline),\n    );\n\n    return toSignal(scrollTimeline$, { initialValue: null });\n  },\n})",
                    "rawdescription": "Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.",
                    "description": "<p>Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.</p>\n"
                },
                {
                    "name": "SCROLL_TIMELINE_QUERY_INTERVAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Observable<number>>('SCROLL_TIMELINE_QUERY_INTERVAL', {\n  providedIn: 'root',\n  factory: () => interval(100),\n})",
                    "rawdescription": "Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.",
                    "description": "<p>Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.</p>\n"
                }
            ],
            "social-media-button/src/lib/social-media-button.component.ts": [
                {
                    "name": "SOCIAL_LINKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "social-media-button/src/lib/social-media-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<SocialMediaName, string>",
                    "defaultValue": "{\n  x: 'https://twitter.com/cnscenter',\n  facebook: 'https://www.facebook.com/cnscenter/',\n  instagram: 'https://www.instagram.com/cns_at_iu/',\n  youtube: 'https://www.youtube.com/@CNSCenter/',\n  linkedin: 'https://www.linkedin.com/company/cns-indiana-university-bloomington',\n  email: 'mailto:infoccf@iu.edu',\n}",
                    "rawdescription": "All CNS links",
                    "description": "<p>All CNS links</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "color-picker/src/lib/color-utils.ts": [
                {
                    "name": "colorEquals",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Compares two RGB colors for equality</p>\n",
                    "args": [
                        {
                            "name": "color1",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color2",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "color1",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color2",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hexToRgb",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Converts a hexadecimal color string to an RGB color</p>\n",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Rgb",
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rgbToHex",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Converts an RGB color to its hexadecimal string representation</p>\n",
                    "args": [
                        {
                            "name": "rgb",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "rgb",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "button/src/lib/providers.ts": [
                {
                    "name": "provideButtons",
                    "file": "button/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for button</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "button-toggle/src/lib/providers.ts": [
                {
                    "name": "provideButtonToggle",
                    "file": "button-toggle/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for button toggle</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "src/lib/providers.ts": [
                {
                    "name": "provideDesignSystem",
                    "file": "src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns design system providers</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "icon-button/src/lib/providers.ts": [
                {
                    "name": "provideIconButtons",
                    "file": "icon-button/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for icon buttons</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "input/src/lib/providers.ts": [
                {
                    "name": "provideInput",
                    "file": "input/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for Input</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "menu/src/lib/providers.ts": [
                {
                    "name": "provideMenu",
                    "file": "menu/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for menu</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "scrolling/src/lib/scrolling.module.ts": [
                {
                    "name": "provideScrolling",
                    "file": "scrolling/src/lib/scrolling.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provide scrolling functionality to an application.</p>\n",
                    "args": [
                        {
                            "name": "options",
                            "type": "ScollingOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 905,
                                "end": 912,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "options"
                            },
                            "type": "ScollingOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 899,
                                "end": 904,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scrollbar options</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 935,
                                "end": 942,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An environment provider</p>\n"
                        }
                    ]
                }
            ],
            "select/src/lib/providers.ts": [
                {
                    "name": "provideSelect",
                    "file": "select/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for select</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "table/src/lib/providers.ts": [
                {
                    "name": "provideTable",
                    "file": "table/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for table</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "tree/src/lib/providers.ts": [
                {
                    "name": "provideTrees",
                    "file": "tree/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for tree</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "scrolling/testing/src/index.ts": [
                {
                    "name": "setupScrollTesting",
                    "file": "scrolling/testing/src/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Setup the testing environment for scrolling to work.\nAdds global mocks for functions used by scrolling if they don&#39;t exist.</p>\n",
                    "args": [],
                    "returnType": "void"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "app-logos/src/lib/app-logos.component.ts": [
                {
                    "name": "AppLogosVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"fixed\"",
                    "file": "app-logos/src/lib/app-logos.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts": [
                {
                    "name": "BreadcrumbSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "breadcrumbs/src/lib/breadcrumbs-size/breadcrumbs-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for breadcrumb size</p>\n",
                    "kind": 192
                }
            ],
            "snackbar/src/lib/snackbar.component.ts": [
                {
                    "name": "ButtonPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"start\" | \"end\"",
                    "file": "snackbar/src/lib/snackbar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for button position</p>\n",
                    "kind": 192
                }
            ],
            "button/src/lib/button-size/button-size.directive.ts": [
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "button/src/lib/button-size/button-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for icon button size</p>\n",
                    "kind": 192
                }
            ],
            "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts": [
                {
                    "name": "IconButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"medium\" | \"large\"",
                    "file": "button-toggle/src/lib/button-toggle-size/button-toggle-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for icon button size</p>\n",
                    "kind": 192
                }
            ],
            "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts": [
                {
                    "name": "IconButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for icon button size</p>\n",
                    "kind": 192
                }
            ],
            "micro-tooltip/src/micro-tooltip.directive.ts": [
                {
                    "name": "MicroTooltipSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\"",
                    "file": "micro-tooltip/src/micro-tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type of Tooltip size</p>\n",
                    "kind": 192
                }
            ],
            "color-picker/src/lib/color-utils.ts": [
                {
                    "name": "Rgb",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[, , ]",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type representing an RGB color as a tuple of three numbers</p>\n",
                    "kind": 189
                }
            ],
            "scrolling/src/lib/scroll-timeline/scroll-timeline.ts": [
                {
                    "name": "ScrollTimelineFunc",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Basic signature of the ScrollTimeline constructor</p>\n",
                    "kind": 185
                }
            ],
            "select/src/lib/select-size/select-size.directive.ts": [
                {
                    "name": "SelectSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "select/src/lib/select-size/select-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for select size</p>\n",
                    "kind": 192
                }
            ],
            "snackbar/src/lib/snackbar.service.ts": [
                {
                    "name": "SnackbarConfig",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<MatSnackBarConfig | \"data\" | \"panelClass\">",
                    "file": "snackbar/src/lib/snackbar.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "social-media-button/src/lib/social-media-button.component.ts": [
                {
                    "name": "SocialMediaButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "social-media-button/src/lib/social-media-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Button size type</p>\n",
                    "kind": 192
                },
                {
                    "name": "SocialMediaName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"x\" | \"facebook\" | \"instagram\" | \"youtube\" | \"linkedin\" | \"email\"",
                    "file": "social-media-button/src/lib/social-media-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Social media name type</p>\n",
                    "kind": 192
                }
            ],
            "tree/src/lib/tree-size/tree-size.directive.ts": [
                {
                    "name": "TreeSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for each tree size</p>\n",
                    "kind": 192
                }
            ]
        }
    }
}