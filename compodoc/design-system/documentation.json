{
    "pipes": [],
    "interfaces": [
        {
            "name": "BreadcrumbItem",
            "id": "interface-BreadcrumbItem-56ac05f544b545db7c1098e4a37552985041323d8713926d117028c6e04166e63309b6c086d2dbaff7e06cbd93f0e7730cf71f4e650e230982b1d72aa585b2f8",
            "file": "buttons/breadcrumbs/src/lib/breadcrumbs.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { TextHyperlinkDirective } from '@hra-ui/design-system/buttons/text-hyperlink';\n\n/** Breadcrumb item */\nexport interface BreadcrumbItem {\n  /** Name of item */\n  name: string;\n  /** Route to page */\n  route?: string;\n}\n\n/**\n * Component used to help the user understand their location within websites\n */\n@Component({\n  selector: 'hra-breadcrumbs',\n  imports: [CommonModule, RouterModule, MatIconModule, TextHyperlinkDirective],\n  templateUrl: './breadcrumbs.component.html',\n  styleUrl: './breadcrumbs.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbsComponent {\n  /** Crumbs to display */\n  readonly crumbs = input<BreadcrumbItem[]>([]);\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of item</p>\n",
                    "line": 10,
                    "rawdescription": "\nName of item"
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Route to page</p>\n",
                    "line": 12,
                    "rawdescription": "\nRoute to page"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Breadcrumb item</p>\n",
            "rawdescription": "\nBreadcrumb item",
            "methods": [],
            "extends": []
        },
        {
            "name": "CardData",
            "id": "interface-CardData-a850dba1dd07f42be528800fd9e506b4362a6337a3764ee05a324689ea57f01c4fc08ca0f695d3eb880750ab780557787899370ab2c1ffd166c2e5f590a5b778",
            "file": "nav-header/src/lib/nav-header.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { AppNavButtonComponent } from '@hra-ui/design-system/buttons/app-nav-button';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\nimport { NavHeaderButtonsComponent, NavHeaderButtonsVariant } from '@hra-ui/design-system/nav-header-buttons';\nimport { ScrollingModule } from '@hra-ui/design-system/scrolling';\nimport { SoftwareStatus } from '@hra-ui/design-system/software-status-indicator';\n\n/** Sidenav card data */\nexport interface CardData {\n  /** Name of card category */\n  category: string;\n  /** Info for apps in category */\n  cards: {\n    /** Name of app */\n    name: string;\n    /** Icon path */\n    icon: string;\n    /** App title */\n    title: string;\n    /** App description */\n    description: string;\n    /** Link to app */\n    link: string;\n  }[];\n}\n\n/**\n * Navigation Header Component\n */\n@Component({\n  selector: 'hra-nav-header',\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    NavHeaderButtonsComponent,\n    IconButtonSizeDirective,\n    MatSidenavModule,\n    AppNavButtonComponent,\n    ScrollingModule,\n    AssetUrlPipe,\n  ],\n  templateUrl: './nav-header.component.html',\n  styleUrl: './nav-header.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavHeaderComponent {\n  /** Variant of the header */\n  readonly variant = input<NavHeaderButtonsVariant>('basic');\n  /** Link to the app */\n  readonly link = input.required<string>();\n  /** Current app */\n  readonly app = input.required<string>();\n  /** Name of the app */\n  readonly tagline = input.required<string>();\n  /** Status of the app */\n  readonly status = input<SoftwareStatus>();\n  /** Data to display in sidenav */\n  readonly navigationCategories = input.required<CardData[]>();\n}\n",
            "properties": [
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Info for apps in category</p>\n",
                    "line": 18,
                    "rawdescription": "\nInfo for apps in category"
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of card category</p>\n",
                    "line": 16,
                    "rawdescription": "\nName of card category"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Sidenav card data</p>\n",
            "rawdescription": "\nSidenav card data",
            "methods": [],
            "extends": []
        },
        {
            "name": "CtaConfig",
            "id": "interface-CtaConfig-9ca3cf39d95f4f482bf64940708c4a5a9c2a635b4639ccbdda0ca35981f0d125793bec935501ee2e9cec3c27c7d583d7fe7e789113ea06e301fc4f37df8a149c",
            "file": "navigation/header/src/lib/header.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CdkConnectedOverlay, ConnectedPosition, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  effect,\n  ElementRef,\n  inject,\n  input,\n  signal,\n  viewChild,\n} from '@angular/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule, ProgressBarMode } from '@angular/material/progress-bar';\nimport { Breakpoints, watchBreakpoint } from '@hra-ui/cdk/breakpoints';\nimport { BrandModule } from '@hra-ui/design-system/brand';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { BreadcrumbItem } from '@hra-ui/design-system/buttons/breadcrumbs';\nimport { CtaBarComponent } from '@hra-ui/design-system/navigation/cta-bar';\nimport { explicitEffect } from 'ngxtension/explicit-effect';\nimport { DesktopMenuComponent } from './desktop-menu/desktop-menu.component';\nimport { MobileMenuComponent } from './mobile-menu/mobile-menu.component';\nimport { HUBMAP_MENU, MENUS } from './static-data/parsed';\nimport { Menu } from './types/menus.schema';\n\n/** Call to action configuration */\nexport interface CtaConfig {\n  /** Action text */\n  action: string;\n  /** Action description */\n  description: string;\n  /** Action url */\n  url: string;\n}\n\n/** Position of the mobile menu overlay */\nconst MOBILE_MENU_POSITIONS: ConnectedPosition[] = [\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n];\n/** Position of the desktop menu overlay */\nconst DESKTOP_MENU_POSITIONS: ConnectedPosition[] = [\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetX: -16, offsetY: 16 },\n];\n\n/**\n * Global navigation header.\n * Includes a call to action bar, navigation menus, breadcrumbs, and a progress bar.\n */\n@Component({\n  selector: 'hra-header',\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatDividerModule,\n    MatIconModule,\n    MatProgressBarModule,\n    BrandModule,\n    ButtonsModule,\n    CtaBarComponent,\n    DesktopMenuComponent,\n    MobileMenuComponent,\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderComponent {\n  /** Call to action configuration */\n  readonly cta = input<CtaConfig>();\n  /** Hubmap menu data */\n  readonly hubmapMenu = input(HUBMAP_MENU);\n  /** All other menus */\n  readonly menus = input(MENUS);\n  /** Breadcrumb items */\n  readonly breadcrumbs = input<BreadcrumbItem[]>([]);\n  /**\n   * Progress bar progress.\n   * Use `true` for an indeterminate bar and values between `0` and `100` for a determinate bar.\n   * Using false disables and hides the progress bar.\n   */\n  readonly progress = input<boolean | number>(false);\n\n  /** Whether the user has dismissed the call to action */\n  protected readonly ctaDismissed = signal(false);\n  /** Progress bar mode */\n  protected readonly progressMode = computed((): ProgressBarMode => {\n    return typeof this.progress() === 'boolean' ? 'indeterminate' : 'determinate';\n  });\n\n  /** Whether the screen is currently mobile sized */\n  protected readonly isMobile = watchBreakpoint(Breakpoints.Mobile);\n  /** Reference to this component's html element */\n  private readonly elementRef = inject<ElementRef<Element>>(ElementRef);\n\n  /** Overlay positions for the mobile menu */\n  protected readonly mobileMenuPositions = MOBILE_MENU_POSITIONS;\n  /** Overlay positions for the desktop menu */\n  protected readonly desktopMenuPositions = DESKTOP_MENU_POSITIONS;\n  /** Blocking overlay scroll strategy */\n  protected readonly mobileMenuBlockScroll = inject(Overlay).scrollStrategies.block();\n  /** Offset from top to the menu. Used to calculate menu heights and max heights */\n  protected readonly menuOffsetPx = signal<number>(0);\n  /** Mobile menu height. Fills the entire screen */\n  protected readonly mobileMenuHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px)`);\n  /** Desktop menu max height */\n  protected readonly desktopMenuMaxHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px - 16px)`);\n  /** Mobile menu overlay origin */\n  private readonly mobileMenuOrigin = viewChild.required('mobileMenuOrigin', { read: ElementRef });\n  /** Desktop menu overlay origin */\n  private readonly desktopMenuOrigin = viewChild.required('desktopMenuOrigin', { read: ElementRef });\n  /** Reference to the mobile overlay */\n  private readonly mobileMenuOverlay = viewChild('mobileMenuOverlay', { read: CdkConnectedOverlay });\n  /** Currently open menu or undefined */\n  private readonly activeMenu = signal<Menu | 'main' | undefined>(undefined);\n\n  /** Initialize the header */\n  constructor() {\n    effect((cleanup) => {\n      if (this.activeMenu() !== undefined) {\n        const observer = this.attachResizeObserver();\n        cleanup(() => observer.disconnect());\n      }\n    });\n\n    explicitEffect([this.menuOffsetPx], () => this.updateMenuPositions(), { defer: true });\n  }\n\n  /**\n   * Determine whether the specified menu is open\n   *\n   * @param menu The menu to check\n   * @returns true if the menu is open, false otherwise\n   */\n  isMenuActive(menu: Menu | 'main'): boolean {\n    return this.activeMenu() === menu;\n  }\n\n  /**\n   * Toggles a menu open or close\n   *\n   * @param menu Menu to toggle\n   */\n  toggleMenu(menu: Menu | 'main'): void {\n    this.activeMenu.update((current) => (menu !== current ? menu : undefined));\n  }\n\n  /**\n   * Closes any active menu\n   */\n  closeMenu(): void {\n    this.activeMenu.set(undefined);\n  }\n\n  /**\n   * Creates and attaches a resize observer that updates the menu offset\n   * whenever the header size changes\n   *\n   * @returns The resize observer\n   */\n  private attachResizeObserver(): ResizeObserver {\n    const observer = new ResizeObserver(() => this.updateMenuOffset());\n    observer.observe(this.elementRef.nativeElement, { box: 'border-box' });\n    this.updateMenuOffset();\n    return observer;\n  }\n\n  /**\n   * Computes the bounding box for the menu's overlay origin element\n   *\n   * @returns The computed bounding box\n   */\n  private getMenuOriginBbox(): DOMRect {\n    const origin = this.isMobile() ? this.mobileMenuOrigin() : this.desktopMenuOrigin();\n    return (origin.nativeElement as Element).getBoundingClientRect();\n  }\n\n  /**\n   * Updates the menu offset based on the overlay origin's bounding box\n   */\n  private updateMenuOffset(): void {\n    const { bottom } = this.getMenuOriginBbox();\n    this.menuOffsetPx.set(bottom);\n  }\n\n  /**\n   * Notify menu overlays of position changes\n   */\n  private updateMenuPositions(): void {\n    /* istanbul ignore next */\n    this.mobileMenuOverlay()?.overlayRef?.updatePosition();\n  }\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Action text</p>\n",
                    "line": 31,
                    "rawdescription": "\nAction text"
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Action description</p>\n",
                    "line": 33,
                    "rawdescription": "\nAction description"
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Action url</p>\n",
                    "line": 35,
                    "rawdescription": "\nAction url"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Call to action configuration</p>\n",
            "rawdescription": "\nCall to action configuration",
            "methods": [],
            "extends": []
        },
        {
            "name": "DataItem",
            "id": "interface-DataItem-604f39c5cba08234cbee318cec0535940a5d48ef158e5c60010270b159251a9abf22c311829653216bbc78a6100aaa150ddb1f9b7601585b9dd3f9aaeff2aace",
            "file": "info-modal/src/lib/info-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\n\n/** An item which defines a string label and a string value */\nexport interface DataItem {\n  /** A string property that represents the label */\n  label: string;\n  /** A string property that represents the value */\n  value: string;\n}\n\n/** Info modal variants */\nexport type InfoModalVariant = 'tabular' | 'center';\n\n/**\n * Modal to display all available information about specific areas of a dataset.\n */\n@Component({\n  selector: 'hra-info-modal',\n  imports: [CommonModule, MatTableModule, MatIconModule, MatButtonModule],\n  templateUrl: './info-modal.component.html',\n  styleUrl: './info-modal.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.center]': 'variant() == \"center\"',\n  },\n})\nexport class InfoModalComponent {\n  /** List of data items to display */\n  data = input<DataItem[]>([]);\n\n  /** Variant of info modal to use */\n  variant = input<InfoModalVariant>('tabular');\n\n  /** Title of modal */\n  title = input.required<string>();\n\n  /** Emits when close icon clicked */\n  close = output<void>();\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A string property that represents the label</p>\n",
                    "line": 10,
                    "rawdescription": "\nA string property that represents the label"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A string property that represents the value</p>\n",
                    "line": 12,
                    "rawdescription": "\nA string property that represents the value"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>An item which defines a string label and a string value</p>\n",
            "rawdescription": "\nAn item which defines a string label and a string value",
            "methods": [],
            "extends": []
        },
        {
            "name": "DesignSystemOptions",
            "id": "interface-DesignSystemOptions-b0cb8d82f00fa209c8e19133e088bcd58ca4847cd816809857444a633b0576376f242d7d21d866a9b8e64472b3c0b652e12a1a53777259764b9ef839d8abdd6a",
            "file": "src/lib/providers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OverlayContainer } from '@angular/cdk/overlay';\nimport { HttpFeature, HttpFeatureKind, provideHttpClient } from '@angular/common/http';\nimport { EnvironmentProviders, inject, makeEnvironmentProviders, provideAppInitializer } from '@angular/core';\nimport { provideAnimations } from '@angular/platform-browser/animations';\nimport { provideIcons } from '@hra-ui/cdk/icons';\nimport { provideButtons } from '@hra-ui/design-system/buttons';\nimport { provideCheckboxes } from '@hra-ui/design-system/checkbox';\nimport { provideIconButtons } from '@hra-ui/design-system/icon-button';\nimport { provideInput } from '@hra-ui/design-system/input';\nimport { provideMenu } from '@hra-ui/design-system/menu';\nimport { provideScrolling, ScrollingOptions } from '@hra-ui/design-system/scrolling';\nimport { provideSelect } from '@hra-ui/design-system/select';\nimport { provideTable } from '@hra-ui/design-system/table';\nimport { provideTrees } from '@hra-ui/design-system/tree';\n\n/** Design system provider options */\nexport interface DesignSystemOptions {\n  /** Http features */\n  http?: HttpFeature<HttpFeatureKind>[];\n  /** Scrolling options */\n  scrolling?: ScrollingOptions;\n}\n\n/** Get the providers shared between prod and testing */\nexport function provideDesignSystemCommon(options?: DesignSystemOptions) {\n  return [\n    provideAppInitializer(() => {\n      const overlayContainer = inject(OverlayContainer);\n      overlayContainer.getContainerElement().classList.add('hra-app');\n    }),\n    provideIcons({\n      fontIcons: {\n        defaultClasses: ['material-symbols-rounded'],\n      },\n    }),\n    provideButtons(),\n    provideIconButtons(),\n    provideTrees(),\n    provideScrolling(options?.scrolling),\n    provideMenu(),\n    provideTable(),\n    provideSelect(),\n    provideInput(),\n    provideCheckboxes(),\n  ];\n}\n\n/**\n * Returns design system providers\n */\nexport function provideDesignSystem(options?: DesignSystemOptions): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    provideHttpClient(...(options?.http ?? [])),\n    provideAnimations(),\n    ...provideDesignSystemCommon(options),\n  ]);\n}\n",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpFeature<HttpFeatureKind>[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Http features</p>\n",
                    "line": 19,
                    "rawdescription": "\nHttp features"
                },
                {
                    "name": "scrolling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollingOptions",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Scrolling options</p>\n",
                    "line": 21,
                    "rawdescription": "\nScrolling options"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Design system provider options</p>\n",
            "rawdescription": "\nDesign system provider options",
            "methods": [],
            "extends": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-1d41a9b160020a7c8b2d2f7d05799c18544d74061f100e9491630758c5fcd832185f5e614fbfda8a91a43a1777483dc6607aad8d2f48b7732a90f84bc344898d",
            "file": "dialog/src/lib/notice/notice.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Interface for Dialog Data */\nexport interface DialogData {\n  /** Title of the dialog */\n  title: string;\n  /** Message of the dialog */\n  message: string;\n  /** Action Button Object */\n  action?: {\n    /** Label for the action button */\n    label: string;\n    /** Callback function for the action button */\n    callback: () => void;\n  };\n}\n\n/** Notice Component */\n@Component({\n  selector: 'hra-notice',\n  imports: [\n    CommonModule,\n    IconButtonSizeDirective,\n    MatIconModule,\n    ButtonsModule,\n    MatButtonModule,\n    MatDialogActions,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogClose,\n  ],\n  templateUrl: './notice.component.html',\n  styleUrl: './notice.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NoticeComponent {\n  /** Instance of Mat Dialog Data */\n  protected readonly data: DialogData = inject(MAT_DIALOG_DATA);\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Action Button Object</p>\n",
                    "line": 22,
                    "rawdescription": "\nAction Button Object"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Message of the dialog</p>\n",
                    "line": 20,
                    "rawdescription": "\nMessage of the dialog"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of the dialog</p>\n",
                    "line": 18,
                    "rawdescription": "\nTitle of the dialog"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for Dialog Data</p>\n",
            "rawdescription": "\nInterface for Dialog Data",
            "methods": [],
            "extends": []
        },
        {
            "name": "MenuDemoOption",
            "id": "interface-MenuDemoOption-c9c532fdb1bc7b08b78bdec7f5aad68c649d1f2815db67a6ae79a0e6e8f5a201f5e984978aadb693e582578b25bcfb5f9f3386fafd4c8722fe7bc26a737cd9d0",
            "file": "menu/src/lib/menu-demo/menu-demo.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, ViewEncapsulation } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\n\n/** Menu option interface */\nexport interface MenuDemoOption {\n  /** Name of option */\n  name: string;\n  /** Material icon name */\n  icon: string;\n  /** Options to open in a second menu */\n  expandedOptions?: MenuDemoOption[];\n}\n\n/**\n * Nested Angular Material menu component\n */\n@Component({\n  selector: 'hra-menu',\n  imports: [MatButtonModule, MatMenuModule, MatIconModule, MatRippleModule],\n  templateUrl: './menu-demo.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuDemoComponent {\n  /** List of menu options */\n  readonly menuOptions = input<MenuDemoOption[]>([]);\n\n  /** List of suboptions to display in the second menu */\n  suboptions: MenuDemoOption[] = [];\n}\n",
            "properties": [
                {
                    "name": "expandedOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDemoOption[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Options to open in a second menu</p>\n",
                    "line": 14,
                    "rawdescription": "\nOptions to open in a second menu"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Material icon name</p>\n",
                    "line": 12,
                    "rawdescription": "\nMaterial icon name"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of option</p>\n",
                    "line": 10,
                    "rawdescription": "\nName of option"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Menu option interface</p>\n",
            "rawdescription": "\nMenu option interface",
            "methods": [],
            "extends": []
        },
        {
            "name": "NestedNode",
            "id": "interface-NestedNode-f6e1ecb463b0582e37ef566a3316d1f3a3901aa9ae6518426712986e465c9b3d96c4987fec8f541fa20e1654be5108d4ab5ff1deaeb87166a337b4bf05714b50",
            "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ArrayDataSource } from '@angular/cdk/collections';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, computed, input, ViewChild } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTree, MatTreeModule } from '@angular/material/tree';\n\nimport { TreeSize, TreeSizeDirective } from '../tree-size/tree-size.directive';\n\n/** Nested tree node data */\nexport interface NestedNode {\n  /** Name of node */\n  name: string;\n  /** List of child nodes */\n  children?: NestedNode[];\n}\n\n/** Padding indents for each tree size (px) */\nconst PADDING: Record<TreeSize, number> = {\n  small: 32,\n  medium: 36,\n  large: 40,\n};\n\n/**\n * Angular Material nested tree component with HRA styles\n */\n@Component({\n  selector: 'hra-tree-demo',\n  templateUrl: 'tree-demo.component.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, TreeSizeDirective],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeDemoComponent implements AfterViewInit {\n  /** ViewChild for tree component */\n  @ViewChild(MatTree) tree!: MatTree<NestedNode>;\n\n  /** Tree node data */\n  readonly treeData = input<NestedNode[]>([]);\n\n  /** Size of tree to use */\n  readonly size = input<TreeSize>('medium');\n\n  /** Padding indents */\n  protected readonly padding = computed(() => PADDING[this.size()]);\n\n  /** Data source */\n  dataSource = new ArrayDataSource<NestedNode>([]);\n\n  /** Current selected node */\n  selectedNode?: NestedNode;\n\n  /** Gets the children of a node */\n  childrenAccessor = (dataNode: NestedNode) => dataNode.children ?? [];\n\n  /** If the node has a child */\n  hasChild = (_: number, node: NestedNode) => !!node.children?.length;\n\n  /** Sets dataSource data after view init */\n  ngAfterViewInit() {\n    this.dataSource = new ArrayDataSource<NestedNode>(this.treeData());\n  }\n\n  /** Renders node if it is a root node or if all of its ancestors are expanded */\n  shouldRender(node: NestedNode): boolean {\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n\n  /** Gets parent of a node */\n  private getParentNode(node: NestedNode): NestedNode | undefined {\n    for (const parent of this.treeData()) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n    return undefined;\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NestedNode[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>List of child nodes</p>\n",
                    "line": 14,
                    "rawdescription": "\nList of child nodes"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of node</p>\n",
                    "line": 12,
                    "rawdescription": "\nName of node"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Nested tree node data</p>\n",
            "rawdescription": "\nNested tree node data",
            "methods": [],
            "extends": []
        },
        {
            "name": "ScrollingGlobals",
            "id": "interface-ScrollingGlobals-c96a7556bfc0c42b46a8ec9cf620e92dcd858b881cbed8518c731034dcd8fd0fb25b648c2fce95a5d7e14588e028a315dbed1eba0244c0afca861ae001881bb6",
            "file": "scrolling/testing/src/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import type { ScrollTimelineFunc } from '@hra-ui/design-system/scrolling';\n\n/** Globals used by scrolling */\ninterface ScrollingGlobals {\n  /** Scroll timeline constructor */\n  ScrollTimeline?: ScrollTimelineFunc;\n}\n\n/**\n * Setup the testing environment for scrolling to work.\n * Adds global mocks for functions used by scrolling if they don't exist.\n */\nexport function setupScrollTesting(): void {\n  const globals = globalThis as ScrollingGlobals;\n  if (typeof globals.ScrollTimeline !== 'function') {\n    globals.ScrollTimeline = jest.fn();\n  }\n\n  if (typeof HTMLElement.prototype.animate !== 'function') {\n    HTMLElement.prototype.animate = jest.fn(\n      () =>\n        ({\n          cancel: jest.fn(),\n        }) as unknown as Animation,\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "ScrollTimeline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollTimelineFunc",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Scroll timeline constructor</p>\n",
                    "line": 7,
                    "rawdescription": "\nScroll timeline constructor"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Globals used by scrolling</p>\n",
            "rawdescription": "\nGlobals used by scrolling",
            "methods": [],
            "extends": []
        },
        {
            "name": "ScrollingOptions",
            "id": "interface-ScrollingOptions-be92df704ab4f4a4523b66effa747b28adbcd4019d314eb5d936bc3c0fcb004ad347b57d224ea9715e389f15b61ce0bf4f8dd875fed05a827cd767ba1ce12c35",
            "file": "scrolling/src/lib/scrolling.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EnvironmentProviders, NgModule, makeEnvironmentProviders } from '@angular/core';\nimport { getCurrentScriptBasePath } from '@hra-ui/cdk/app-href';\nimport { provideStyleComponents } from '@hra-ui/cdk/styling';\nimport {\n  NgScrollbarModule,\n  NgScrollbarOptions,\n  provideScrollbarOptions,\n  provideScrollbarPolyfill,\n} from 'ngx-scrollbar';\nimport { ScrollOverflowFadeDirective } from './scroll-overflow-fade/scroll-overflow-fade.directive';\nimport { ScrollbarStylesComponent } from './scrollbar-styles/scrollbar-styles.component';\n\n/** Scrolling configuration */\nexport interface ScrollingOptions extends NgScrollbarOptions {\n  /** Url to the scroll timeline polyfill script */\n  polyfillUrl?: string;\n}\n\n/** Default scroll timeline polyfill url */\nconst DEFAULT_POLYFILL_URL = 'assets/polyfills/scroll-timeline-polyfill.js';\n\n/**\n * Provide scrolling functionality to an application.\n *\n * @param options Scrollbar options\n * @returns An environment provider\n */\nexport function provideScrolling(options?: ScrollingOptions): EnvironmentProviders {\n  const polyfillUrl = getCurrentScriptBasePath() + (options?.polyfillUrl ?? DEFAULT_POLYFILL_URL);\n\n  return makeEnvironmentProviders([\n    provideStyleComponents(ScrollbarStylesComponent),\n    provideScrollbarPolyfill(polyfillUrl),\n    provideScrollbarOptions({\n      visibility: 'hover',\n      appearance: 'compact',\n      trackClass: 'hra-scrollbar-track',\n      thumbClass: 'hra-scrollbar-thumb',\n      ...options,\n    }),\n  ]);\n}\n\n/** Module exporting ng-scrollbar and related scrolling utilities */\n@NgModule({\n  imports: [ScrollOverflowFadeDirective],\n  exports: [NgScrollbarModule, ScrollOverflowFadeDirective],\n})\nexport class ScrollingModule {}\n",
            "properties": [
                {
                    "name": "polyfillUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Url to the scroll timeline polyfill script</p>\n",
                    "line": 16,
                    "rawdescription": "\nUrl to the scroll timeline polyfill script"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Scrolling configuration</p>\n",
            "rawdescription": "\nScrolling configuration",
            "methods": [],
            "extends": [
                "NgScrollbarOptions"
            ]
        },
        {
            "name": "SnackbarData",
            "id": "interface-SnackbarData-8766ca472d19d28a16082b84e9635c3c550326c77bdbd73a2af5c667444a6467f578fb6ca108847c730a1ac3a0006e5d18d5d75f8f8679f5896a6aac4e96db3c",
            "file": "snackbar/src/lib/snackbar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Type for button position */\nexport type ButtonPosition = 'start' | 'end';\n\n/** interface for snackbar data */\nexport interface SnackbarData {\n  /** Message in the snackbar */\n  message: string;\n  /** Action button */\n  action?: string;\n  /** Flag to show/hide the close button */\n  close?: boolean;\n  /** Position of the action button */\n  actionButtonPosition?: ButtonPosition;\n}\n\n/** Snackbar component */\n@Component({\n  selector: 'hra-snackbar',\n  imports: [CommonModule, MatIconModule, ButtonsModule, IconButtonSizeDirective, MatIconModule],\n  templateUrl: './snackbar.component.html',\n  styleUrl: './snackbar.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SnackbarComponent {\n  /** Reference to the MatSnackbarRef */\n  protected readonly snackbarRef = inject(MatSnackBarRef);\n\n  /** Injection token for the snackbar data*/\n  protected readonly data: SnackbarData = inject(MAT_SNACK_BAR_DATA);\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Action button</p>\n",
                    "line": 16,
                    "rawdescription": "\nAction button"
                },
                {
                    "name": "actionButtonPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonPosition",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Position of the action button</p>\n",
                    "line": 20,
                    "rawdescription": "\nPosition of the action button"
                },
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Flag to show/hide the close button</p>\n",
                    "line": 18,
                    "rawdescription": "\nFlag to show/hide the close button"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Message in the snackbar</p>\n",
                    "line": 14,
                    "rawdescription": "\nMessage in the snackbar"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>interface for snackbar data</p>\n",
            "rawdescription": "\ninterface for snackbar data",
            "methods": [],
            "extends": []
        },
        {
            "name": "TableDemoData",
            "id": "interface-TableDemoData-f712bbba5ae4b005f32490419bc0d30512fa6fe7689311634a0a5ae7682e9e3cb8575e7e13c2e6d0ccd9fdc4eb2d82efe36245f2c07dd246342622a6b82dd8bc",
            "file": "table/src/lib/table-demo/table-demo.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, effect, input, viewChild } from '@angular/core';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\n\n/** Type for row data */\nexport interface TableDemoData {\n  /** Name of item */\n  name: string;\n  /** Value of item*/\n  value: number;\n}\n\n/**\n * Angular Material table with with sort feature\n */\n@Component({\n  selector: 'hra-table-demo',\n  templateUrl: 'table-demo.component.html',\n  imports: [MatTableModule, MatSortModule, CommonModule],\n})\nexport class TableDemoComponent {\n  /** Unsorted data */\n  readonly data = input<TableDemoData[]>([]);\n\n  /** Columns in table */\n  readonly columns: string[] = ['name', 'value'];\n\n  /** Mat sort element */\n  readonly sort = viewChild.required(MatSort);\n\n  /** Table data source */\n  readonly dataSource = new MatTableDataSource<TableDemoData>([]);\n\n  /** Sort data on load */\n  constructor() {\n    effect(() => {\n      this.dataSource.data = this.data();\n      this.dataSource.sort = this.sort();\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of item</p>\n",
                    "line": 9,
                    "rawdescription": "\nName of item"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Value of item</p>\n",
                    "line": 11,
                    "rawdescription": "\nValue of item"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Type for row data</p>\n",
            "rawdescription": "\nType for row data",
            "methods": [],
            "extends": []
        },
        {
            "name": "TooltipContent",
            "id": "interface-TooltipContent-7193ef52483d069fc6a41fa3e1edfc82f9c2d8ab65ff0d1d72fc22d8f1ad27f4d7618c9475d46b7ed4e4d7d6680c1750ed780f63a83b9d2b4506ef53e5ca33c6",
            "file": "tooltip-card/src/lib/tooltip-card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { booleanAttribute, ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n/** Interface for Tooltip Card Content */\nexport interface TooltipContent {\n  /** Title of the card */\n  title?: string;\n  /** Description of the card */\n  description: string;\n}\n\n/**\n * Tooltip Card component\n */\n@Component({\n  selector: 'hra-tooltip-card',\n  imports: [CommonModule],\n  templateUrl: './tooltip-card.component.html',\n  styleUrl: './tooltip-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.small]': 'small()',\n  },\n})\nexport class TooltipCardComponent {\n  /** Input for the card */\n  readonly content = input.required<TooltipContent[]>();\n\n  /** Flag to decide whether the card is small */\n  readonly small = input(false, { transform: booleanAttribute });\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Description of the card</p>\n",
                    "line": 9,
                    "rawdescription": "\nDescription of the card"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Title of the card</p>\n",
                    "line": 7,
                    "rawdescription": "\nTitle of the card"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for Tooltip Card Content</p>\n",
            "rawdescription": "\nInterface for Tooltip Card Content",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-0ace45ae862d76523389909666d70c6ef45ad47f0884082316b823495cfe48cbf362341035d333a07ba5780780f42e13e7ce649467b1edeb04ccae26226baad7",
            "file": "dialog/src/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openNotice",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "DialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<NoticeComponent>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpens the dialog with necessary data and config",
                    "description": "<p>Opens the dialog with necessary data and config</p>\n",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "DialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service to open dialog</p>\n",
            "rawdescription": "\nService to open dialog",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, NoticeComponent } from './lib/notice/notice.component';\n\n/** Service to open dialog */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogService {\n  /** Instance of MatDialog */\n  private readonly matDialog = inject(MatDialog);\n\n  /** Opens the dialog with necessary data and config */\n  openNotice(title: string, message: string, action?: DialogData['action']): MatDialogRef<NoticeComponent> {\n    return this.matDialog.open(NoticeComponent, {\n      data: {\n        title,\n        message,\n        action,\n      } satisfies DialogData,\n      panelClass: 'hra-dialog-panel',\n    });\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-07a69536534bee9e9b2e8a53b0594798723a8a11398caae9faf867c3b26d90eaaaa255353ea14e02540323b5ae3abe547151d26587d6dc73c82123f43c22c74a",
            "file": "snackbar/src/lib/snackbar.service.ts",
            "properties": [
                {
                    "name": "matSnackbar",
                    "defaultValue": "inject(MatSnackBar)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Reference to the MatSnackbar</p>\n",
                    "line": 14,
                    "rawdescription": "\nReference to the MatSnackbar",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "close",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "actionButtonPosition",
                            "type": "ButtonPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'start'"
                        },
                        {
                            "name": "config",
                            "type": "SnackbarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "MatSnackBarRef<SnackbarComponent>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpens the snackbar with provided config",
                    "description": "<p>Opens the snackbar with provided config</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "close",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionButtonPosition",
                            "type": "ButtonPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'start'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "SnackbarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service for snackbar. Opens the snackbar and configures it</p>\n",
            "rawdescription": "\nService for snackbar. Opens the snackbar and configures it",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { ButtonPosition, SnackbarComponent, SnackbarData } from './snackbar.component';\n\n/** Snackbar configuration */\nexport type SnackbarConfig = Omit<MatSnackBarConfig, 'data' | 'panelClass'>;\n\n/** Service for snackbar. Opens the snackbar and configures it */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  /** Reference to the MatSnackbar */\n  readonly matSnackbar = inject(MatSnackBar);\n\n  /** Opens the snackbar with provided config */\n  open(\n    message: string,\n    action: string,\n    close = false,\n    actionButtonPosition: ButtonPosition = 'start',\n    config?: SnackbarConfig,\n  ): MatSnackBarRef<SnackbarComponent> {\n    return this.matSnackbar.openFromComponent(SnackbarComponent, {\n      announcementMessage: message,\n      ...config,\n      data: { message, action, close, actionButtonPosition } satisfies SnackbarData,\n      panelClass: ['hra-snackbar-panel'],\n    });\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "BaseButtonVariantDirective",
            "id": "directive-BaseButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749",
            "file": "buttons/button/src/lib/directives/variant.directive.ts",
            "type": "directive",
            "description": "<p>Base class for variant directives</p>\n",
            "rawdescription": "\nBase class for variant directives",
            "sourceCode": "import { computed, Directive, input, isSignal, Signal } from '@angular/core';\n\n/** Named button variants */\nexport type ButtonVariant = 'primary' | 'secondary';\n\n/** Base class for variant directives */\n@Directive({\n  standalone: true,\n  host: {\n    '[class]': 'variantClass()',\n  },\n})\nexport abstract class BaseButtonVariantDirective {\n  /** Button variant */\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\n\n  /** Variant class applied to the button */\n  protected readonly variantClass = computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  });\n}\n\n/** Style a mat-button to a specific named variant */\n@Directive({\n  selector: 'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]',\n  standalone: true,\n})\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  readonly variant = input.required<ButtonVariant>({ alias: 'hraButtonVariant' });\n}\n\n/** Style a mat-button as a primary variant button */\n@Directive({\n  selector: 'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]',\n  standalone: true,\n})\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'primary';\n}\n\n/** Style a mat-button as a secondary variant button */\n@Directive({\n  selector: 'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]',\n  standalone: true,\n})\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'secondary';\n}\n",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonVariant | Signal<ButtonVariant>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button variant</p>\n",
                    "line": 15,
                    "rawdescription": "\nButton variant",
                    "modifierKind": [
                        128,
                        148
                    ]
                },
                {
                    "name": "variantClass",
                    "defaultValue": "computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Variant class applied to the button</p>\n",
                    "line": 18,
                    "rawdescription": "\nVariant class applied to the button",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "ButtonSizeDirective",
            "id": "directive-ButtonSizeDirective-cb587df7e790784c6736261163c35b122f6c93dd7cb008443d49153498f0251dd16b6c92c4f47f7369d2255a275ade5155f9af02ef9c2d70a5dad2d951889268",
            "file": "buttons/button/src/lib/directives/size.directive.ts",
            "type": "directive",
            "description": "<p>Style a mat-button to a specific named size</p>\n",
            "rawdescription": "\nStyle a mat-button to a specific named size",
            "sourceCode": "import { Directive, input } from '@angular/core';\n\n/** Named button sizes */\nexport type ButtonSize = 'small' | 'medium';\n\n/** Style a mat-button to a specific named size */\n@Directive({\n  selector: 'button[mat-button][hraButtonSize], a[mat-button][hraButtonSize]',\n  standalone: true,\n  host: {\n    '[class]': '\"hra-button-size-\" + size()',\n  },\n})\nexport class ButtonSizeDirective {\n  /** Size of button */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  readonly size = input.required<ButtonSize>({ alias: 'hraButtonSize' });\n}\n",
            "selector": "button[mat-button][hraButtonSize], a[mat-button][hraButtonSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input.required<ButtonSize>({ alias: 'hraButtonSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of button</p>\n",
                    "line": 17,
                    "rawdescription": "\nSize of button",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "ButtonToggleSizeDirective",
            "id": "directive-ButtonToggleSizeDirective-79c713300388290d539070e5a22ea60aef8f1f824c3921933f261975d641b6c8a03d899d74428f72acce1985e9ab369f8973cc755c0ea8438f2623af1c2fde9e",
            "file": "buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts",
            "type": "directive",
            "description": "<p>Applies sizing to button toggle groups</p>\n",
            "rawdescription": "\nApplies sizing to button toggle groups",
            "sourceCode": "import { Directive, input } from '@angular/core';\n\n/** Button toggle size */\nexport type ButtonToggleSize = 'small' | 'medium' | 'large';\n\n/** Applies sizing to button toggle groups */\n@Directive({\n  selector: 'mat-button-toggle-group[hraButtonToggleSize]',\n  standalone: true,\n  host: {\n    '[class]': '\"hra-button-toggle-size-\" + size()',\n  },\n})\nexport class ButtonToggleSizeDirective {\n  /** Size of buttons */\n  readonly size = input.required<ButtonToggleSize>({ alias: 'hraButtonToggleSize' });\n}\n",
            "selector": "mat-button-toggle-group[hraButtonToggleSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input.required<ButtonToggleSize>({ alias: 'hraButtonToggleSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of buttons</p>\n",
                    "line": 16,
                    "rawdescription": "\nSize of buttons",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "ButtonVariantDirective",
            "id": "directive-ButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749",
            "file": "buttons/button/src/lib/directives/variant.directive.ts",
            "type": "directive",
            "description": "<p>Style a mat-button to a specific named variant</p>\n",
            "rawdescription": "\nStyle a mat-button to a specific named variant",
            "sourceCode": "import { computed, Directive, input, isSignal, Signal } from '@angular/core';\n\n/** Named button variants */\nexport type ButtonVariant = 'primary' | 'secondary';\n\n/** Base class for variant directives */\n@Directive({\n  standalone: true,\n  host: {\n    '[class]': 'variantClass()',\n  },\n})\nexport abstract class BaseButtonVariantDirective {\n  /** Button variant */\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\n\n  /** Variant class applied to the button */\n  protected readonly variantClass = computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  });\n}\n\n/** Style a mat-button to a specific named variant */\n@Directive({\n  selector: 'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]',\n  standalone: true,\n})\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  readonly variant = input.required<ButtonVariant>({ alias: 'hraButtonVariant' });\n}\n\n/** Style a mat-button as a primary variant button */\n@Directive({\n  selector: 'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]',\n  standalone: true,\n})\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'primary';\n}\n\n/** Style a mat-button as a secondary variant button */\n@Directive({\n  selector: 'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]',\n  standalone: true,\n})\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'secondary';\n}\n",
            "selector": "button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "variant",
                    "defaultValue": "input.required<ButtonVariant>({ alias: 'hraButtonVariant' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button variant</p>\n",
                    "line": 33,
                    "rawdescription": "\nButton variant",
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseButtonVariantDirective"
                    }
                },
                {
                    "name": "variantClass",
                    "defaultValue": "computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Variant class applied to the button</p>\n",
                    "line": 18,
                    "rawdescription": "\nVariant class applied to the button",
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseButtonVariantDirective"
                    }
                }
            ],
            "methodsClass": [],
            "extends": [
                "BaseButtonVariantDirective"
            ]
        },
        {
            "name": "CheckboxErrorVariantDirective",
            "id": "directive-CheckboxErrorVariantDirective-90041ffb12e9bd8a13c6ebd19641ae1df814f232181f45b94bc19725410dc7add9054eafb2a59dacd73986c01d2d0801f0959f9b1118f5e63700e038a93931d3",
            "file": "checkbox/src/lib/checkbox-error-variant/checkbox-error-variant-directive.ts",
            "type": "directive",
            "description": "<p>Directive for checkbox error variant</p>\n",
            "rawdescription": "\n\nDirective for checkbox error variant\n",
            "sourceCode": "import { Directive } from '@angular/core';\n\n/**\n * Directive for checkbox error variant\n */\n@Directive({\n  selector: '[hraCheckboxErrorVariant]',\n  standalone: true,\n  host: {\n    class: 'hra-checkbox-error-variant',\n  },\n})\nexport class CheckboxErrorVariantDirective {}\n",
            "selector": "[hraCheckboxErrorVariant]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "CtaButtonDirective",
            "id": "directive-CtaButtonDirective-780dc200a60cd0c8ca0a5cd31482a27b1b603799bb3539bbc7679a4535799acbb891053ab2d7d8fb11cec2d65d27e47acddca2078caa9e3aafbd0fe43b936790",
            "file": "buttons/button/src/lib/directives/cta.directive.ts",
            "type": "directive",
            "description": "<p>Turns a mat-button into a call-to-action styled button</p>\n",
            "rawdescription": "\nTurns a mat-button into a call-to-action styled button",
            "sourceCode": "import { Directive } from '@angular/core';\n\n/** Turns a mat-button into a call-to-action styled button */\n@Directive({\n  selector: 'button[mat-button][hraCtaButton], a[mat-button][hraCtaButton]',\n  standalone: true,\n  host: {\n    class: 'hra-cta-button',\n  },\n})\nexport class CtaButtonDirective {}\n",
            "selector": "button[mat-button][hraCtaButton], a[mat-button][hraCtaButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "FullscreenDirective",
            "id": "directive-FullscreenDirective-a918371e814faff4b1a12944eba618de311d95fdbf85263bd34b2fe5445e21aa36e2ac2f3009fe7d0c105c53f2e1b625e17b87783c4bc4acf712f562fce3cda5",
            "file": "fullscreen/src/lib/fullscreen.directive.ts",
            "type": "directive",
            "description": "<p>Fullscreen directive</p>\n",
            "rawdescription": "\nFullscreen directive",
            "sourceCode": "import { Directive, inject, output, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { FullscreenComponent } from './fullscreen/fullscreen.component';\n\n/** Fullscreen directive */\n@Directive({\n  selector: '[hraFullscreen]',\n  standalone: true,\n  exportAs: 'hraFullscreen',\n})\nexport class FullscreenDirective {\n  /** Output to emit when fullscreen is closed */\n  readonly closed = output<void>({ alias: 'hraFullscreenClosed' });\n\n  /** Returns the native element of the view reference */\n  get nativeElement(): HTMLElement {\n    return this.viewRef.rootNodes[0];\n  }\n\n  /** Reference to the mat dialog */\n  private readonly dialog = inject(MatDialog);\n  /** Reference to the template */\n  private readonly templateRef = inject(TemplateRef);\n  /** Reference to the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n  /** Create view reference using the template */\n  private readonly viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);\n\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\n  open(): void {\n    const { viewContainerRef, viewRef } = this;\n    const index = viewContainerRef.indexOf(viewRef);\n    viewContainerRef.detach(index);\n\n    const dialogRef = this.dialog.open(FullscreenComponent, {\n      data: viewRef,\n    });\n\n    const subs = new Subscription();\n    const sub1 = dialogRef.beforeClosed().subscribe(() => {\n      viewContainerRef.insert(viewRef);\n    });\n\n    const sub2 = dialogRef.afterClosed().subscribe(() => {\n      this.closed.emit();\n    });\n\n    subs.add(sub1);\n    subs.add(sub2);\n  }\n}\n",
            "selector": "[hraFullscreen]",
            "providers": [],
            "exportAs": "hraFullscreen",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "closed",
                    "defaultValue": "output<void>({ alias: 'hraFullscreenClosed' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Output to emit when fullscreen is closed</p>\n",
                    "line": 14,
                    "rawdescription": "\nOutput to emit when fullscreen is closed",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetaches the view from histogram module and attaches it to the view in the dialog",
                    "description": "<p>Detaches the view from histogram module and attaches it to the view in the dialog</p>\n"
                }
            ],
            "extends": [],
            "accessors": {
                "nativeElement": {
                    "name": "nativeElement",
                    "getSignature": {
                        "name": "nativeElement",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 17,
                        "rawdescription": "\nReturns the native element of the view reference",
                        "description": "<p>Returns the native element of the view reference</p>\n"
                    }
                }
            }
        },
        {
            "name": "HubmapMenuGroupDirective",
            "id": "directive-HubmapMenuGroupDirective-ffc247892ca9ef8218941c3dd25a5994f7bbbf37351adcc424d60de438e26494f803e106c51b52ab725883d3f2165333ae5d25f3017cc35b6fa8b1a8cefe138e",
            "file": "navigation/header/src/lib/hubmap-menu-content/hubmap-menu-content.component.ts",
            "type": "directive",
            "description": "<p>Directive used to type the context for menu group templates</p>\n",
            "rawdescription": "\nDirective used to type the context for menu group templates",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Directive, input } from '@angular/core';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { HubmapMenuGroup, HubmapMenuItem } from '../types/hubmap-menu.schema';\n\n/** Directive used to type the context for menu group templates */\n@Directive({\n  selector: 'ng-template[hraHubmapMenuGroup]',\n  standalone: true,\n})\nexport class HubmapMenuGroupDirective {\n  /** Types the context as `HubmapMenuGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: HubmapMenuGroupDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuGroup } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu item templates */\n@Directive({\n  selector: 'ng-template[hraHubmapMenuItem]',\n  standalone: true,\n})\nexport class HubmapMenuItemDirective {\n  /** Types the context as `HubmapMenuItem` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: HubmapMenuItemDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuItem } {\n    return true;\n  }\n}\n\n/**\n * Displays the content of a hubmap menu.\n * Works for both mobile and desktop size screens.\n */\n@Component({\n  selector: 'hra-hubmap-menu-content',\n  imports: [CommonModule, AssetUrlPipe, ButtonsModule, HubmapMenuGroupDirective, HubmapMenuItemDirective],\n  templateUrl: './hubmap-menu-content.component.html',\n  styleUrl: './hubmap-menu-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HubmapMenuContentComponent {\n  /** Menu data to display */\n  readonly menu = input.required<HubmapMenuGroup[]>();\n}\n",
            "selector": "ng-template[hraHubmapMenuGroup]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "_dir",
                            "type": "HubmapMenuGroupDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTypes the context as `HubmapMenuGroup`",
                    "description": "<p>Types the context as <code>HubmapMenuGroup</code></p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "_dir",
                            "type": "HubmapMenuGroupDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "HubmapMenuItemDirective",
            "id": "directive-HubmapMenuItemDirective-ffc247892ca9ef8218941c3dd25a5994f7bbbf37351adcc424d60de438e26494f803e106c51b52ab725883d3f2165333ae5d25f3017cc35b6fa8b1a8cefe138e",
            "file": "navigation/header/src/lib/hubmap-menu-content/hubmap-menu-content.component.ts",
            "type": "directive",
            "description": "<p>Directive used to type the context for menu item templates</p>\n",
            "rawdescription": "\nDirective used to type the context for menu item templates",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Directive, input } from '@angular/core';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { HubmapMenuGroup, HubmapMenuItem } from '../types/hubmap-menu.schema';\n\n/** Directive used to type the context for menu group templates */\n@Directive({\n  selector: 'ng-template[hraHubmapMenuGroup]',\n  standalone: true,\n})\nexport class HubmapMenuGroupDirective {\n  /** Types the context as `HubmapMenuGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: HubmapMenuGroupDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuGroup } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu item templates */\n@Directive({\n  selector: 'ng-template[hraHubmapMenuItem]',\n  standalone: true,\n})\nexport class HubmapMenuItemDirective {\n  /** Types the context as `HubmapMenuItem` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: HubmapMenuItemDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuItem } {\n    return true;\n  }\n}\n\n/**\n * Displays the content of a hubmap menu.\n * Works for both mobile and desktop size screens.\n */\n@Component({\n  selector: 'hra-hubmap-menu-content',\n  imports: [CommonModule, AssetUrlPipe, ButtonsModule, HubmapMenuGroupDirective, HubmapMenuItemDirective],\n  templateUrl: './hubmap-menu-content.component.html',\n  styleUrl: './hubmap-menu-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HubmapMenuContentComponent {\n  /** Menu data to display */\n  readonly menu = input.required<HubmapMenuGroup[]>();\n}\n",
            "selector": "ng-template[hraHubmapMenuItem]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "_dir",
                            "type": "HubmapMenuItemDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTypes the context as `HubmapMenuItem`",
                    "description": "<p>Types the context as <code>HubmapMenuItem</code></p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "_dir",
                            "type": "HubmapMenuItemDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "IconButtonSizeDirective",
            "id": "directive-IconButtonSizeDirective-cfdc2a22b611c289aa41f82dfad5046fe463a9eda6fcf42fbe790c809d95b310788144d3ae8fb0fb59896794b07362d53d81174034202bd54f575c6f62d7c56a",
            "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for icon buttons</p>\n",
            "rawdescription": "\n\nDirective for icon buttons\n",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for icon button size */\nexport type IconButtonSize = 'small' | 'large';\n\n/** Record of button sizes (number in rem) */\nconst BUTTON_SIZES: Record<IconButtonSize, number> = {\n  small: 1.5,\n  large: 2.5,\n};\n\n/** Record of icon sizes (number in rem) */\nconst ICON_SIZES: Record<IconButtonSize, number> = {\n  small: 1.25,\n  large: 1.5,\n};\n\n/**\n * Directive for icon buttons\n */\n@Directive({\n  selector: '[hraIconButtonSize]',\n  standalone: true,\n  host: {\n    '[style.--mdc-icon-button-state-layer-size.rem]': 'buttonSize()',\n    '[style.--mdc-icon-button-icon-size.rem]': 'iconSize()',\n  },\n})\nexport class IconButtonSizeDirective {\n  /** Size of icon button to use */\n  readonly size = input.required<IconButtonSize>({ alias: 'hraIconButtonSize' });\n\n  /** Gets size of button in rem */\n  protected readonly buttonSize = computed(() => BUTTON_SIZES[this.size()]);\n  /** Gets size of icon in rem */\n  protected readonly iconSize = computed(() => ICON_SIZES[this.size()]);\n}\n",
            "selector": "[hraIconButtonSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "buttonSize",
                    "defaultValue": "computed(() => BUTTON_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Gets size of button in rem</p>\n",
                    "line": 34,
                    "rawdescription": "\nGets size of button in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "iconSize",
                    "defaultValue": "computed(() => ICON_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Gets size of icon in rem</p>\n",
                    "line": 36,
                    "rawdescription": "\nGets size of icon in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input.required<IconButtonSize>({ alias: 'hraIconButtonSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of icon button to use</p>\n",
                    "line": 31,
                    "rawdescription": "\nSize of icon button to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "IconButtonVariantDirective",
            "id": "directive-IconButtonVariantDirective-33600bf1e618b5bd5444c3ae23a8298307152521cc96377350a193b3ad9a402b34225ac2158799a40e57bd2ecdce3987dc1fd007c10269d0fa6e4dcc515624fe",
            "file": "icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts",
            "type": "directive",
            "description": "<p>Directive for icon button variants (color)</p>\n",
            "rawdescription": "\n\nDirective for icon button variants (color)\n",
            "sourceCode": "import { Directive, input } from '@angular/core';\n\n/** Input options for icon button color */\nexport type IconButtonVariant = 'light' | 'dark' | 'color';\n\n/**\n * Directive for icon button variants (color)\n */\n@Directive({\n  selector: '[hraIconButtonVariant]',\n  standalone: true,\n  host: {\n    '[class]': '\"icon-button-variant-\" + variant()',\n  },\n})\nexport class IconButtonVariantDirective {\n  /** Input for icon button color variant */\n  readonly variant = input<IconButtonVariant>('dark', { alias: 'hraIconButtonVariant' });\n}\n",
            "selector": "[hraIconButtonVariant]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "variant",
                    "defaultValue": "input<IconButtonVariant>('dark', { alias: 'hraIconButtonVariant' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Input for icon button color variant</p>\n",
                    "line": 18,
                    "rawdescription": "\nInput for icon button color variant",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "MenuGroupDirective",
            "id": "directive-MenuGroupDirective-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1",
            "file": "navigation/header/src/lib/menu-content/menu-content.component.ts",
            "type": "directive",
            "description": "<p>Directive used to type the context for menu group templates</p>\n",
            "rawdescription": "\nDirective used to type the context for menu group templates",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Directive, input } from '@angular/core';\nimport { MatDivider } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from '../types/menus.schema';\n\n/** Display modes of the menu content component */\nexport type MenuContentVariant = 'desktop' | 'mobile';\n\n/** Directive used to type the context for menu group templates */\n@Directive({\n  selector: 'ng-template[hraMenuGroup]',\n  standalone: true,\n})\nexport class MenuGroupDirective {\n  /** Types the context as `MenuGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu item templates */\n@Directive({\n  selector: 'ng-template[hraMenuItem]',\n  standalone: true,\n})\nexport class MenuItemDirective {\n  /** Types the context as `MenuItem` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu subgroup templates */\n@Directive({\n  selector: 'ng-template[hraMenuSubGroup]',\n  standalone: true,\n})\nexport class MenuSubGroupDirective {\n  /** Types the context as `MenuSubGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\n    return true;\n  }\n}\n\n/**\n * Displays the content of a menu.\n * Has variants for both mobile and desktop size screens.\n */\n@Component({\n  selector: 'hra-menu-content',\n  imports: [\n    CommonModule,\n    MatDivider,\n    MatIconModule,\n    ButtonsModule,\n    MenuGroupDirective,\n    MenuItemDirective,\n    MenuSubGroupDirective,\n  ],\n  templateUrl: './menu-content.component.html',\n  styleUrl: './menu-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class]': '\"menu-content-variant-\" + variant()',\n  },\n})\nexport class MenuContentComponent {\n  /** Display mode */\n  readonly variant = input.required<MenuContentVariant>();\n  /** Menu data to display */\n  readonly menu = input.required<Menu>();\n}\n",
            "selector": "ng-template[hraMenuGroup]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "_dir",
                            "type": "MenuGroupDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTypes the context as `MenuGroup`",
                    "description": "<p>Types the context as <code>MenuGroup</code></p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "_dir",
                            "type": "MenuGroupDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "MenuItemDirective",
            "id": "directive-MenuItemDirective-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1",
            "file": "navigation/header/src/lib/menu-content/menu-content.component.ts",
            "type": "directive",
            "description": "<p>Directive used to type the context for menu item templates</p>\n",
            "rawdescription": "\nDirective used to type the context for menu item templates",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Directive, input } from '@angular/core';\nimport { MatDivider } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from '../types/menus.schema';\n\n/** Display modes of the menu content component */\nexport type MenuContentVariant = 'desktop' | 'mobile';\n\n/** Directive used to type the context for menu group templates */\n@Directive({\n  selector: 'ng-template[hraMenuGroup]',\n  standalone: true,\n})\nexport class MenuGroupDirective {\n  /** Types the context as `MenuGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu item templates */\n@Directive({\n  selector: 'ng-template[hraMenuItem]',\n  standalone: true,\n})\nexport class MenuItemDirective {\n  /** Types the context as `MenuItem` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu subgroup templates */\n@Directive({\n  selector: 'ng-template[hraMenuSubGroup]',\n  standalone: true,\n})\nexport class MenuSubGroupDirective {\n  /** Types the context as `MenuSubGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\n    return true;\n  }\n}\n\n/**\n * Displays the content of a menu.\n * Has variants for both mobile and desktop size screens.\n */\n@Component({\n  selector: 'hra-menu-content',\n  imports: [\n    CommonModule,\n    MatDivider,\n    MatIconModule,\n    ButtonsModule,\n    MenuGroupDirective,\n    MenuItemDirective,\n    MenuSubGroupDirective,\n  ],\n  templateUrl: './menu-content.component.html',\n  styleUrl: './menu-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class]': '\"menu-content-variant-\" + variant()',\n  },\n})\nexport class MenuContentComponent {\n  /** Display mode */\n  readonly variant = input.required<MenuContentVariant>();\n  /** Menu data to display */\n  readonly menu = input.required<Menu>();\n}\n",
            "selector": "ng-template[hraMenuItem]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "_dir",
                            "type": "MenuItemDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTypes the context as `MenuItem`",
                    "description": "<p>Types the context as <code>MenuItem</code></p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "_dir",
                            "type": "MenuItemDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "MenuSubGroupDirective",
            "id": "directive-MenuSubGroupDirective-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1",
            "file": "navigation/header/src/lib/menu-content/menu-content.component.ts",
            "type": "directive",
            "description": "<p>Directive used to type the context for menu subgroup templates</p>\n",
            "rawdescription": "\nDirective used to type the context for menu subgroup templates",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Directive, input } from '@angular/core';\nimport { MatDivider } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from '../types/menus.schema';\n\n/** Display modes of the menu content component */\nexport type MenuContentVariant = 'desktop' | 'mobile';\n\n/** Directive used to type the context for menu group templates */\n@Directive({\n  selector: 'ng-template[hraMenuGroup]',\n  standalone: true,\n})\nexport class MenuGroupDirective {\n  /** Types the context as `MenuGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu item templates */\n@Directive({\n  selector: 'ng-template[hraMenuItem]',\n  standalone: true,\n})\nexport class MenuItemDirective {\n  /** Types the context as `MenuItem` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu subgroup templates */\n@Directive({\n  selector: 'ng-template[hraMenuSubGroup]',\n  standalone: true,\n})\nexport class MenuSubGroupDirective {\n  /** Types the context as `MenuSubGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\n    return true;\n  }\n}\n\n/**\n * Displays the content of a menu.\n * Has variants for both mobile and desktop size screens.\n */\n@Component({\n  selector: 'hra-menu-content',\n  imports: [\n    CommonModule,\n    MatDivider,\n    MatIconModule,\n    ButtonsModule,\n    MenuGroupDirective,\n    MenuItemDirective,\n    MenuSubGroupDirective,\n  ],\n  templateUrl: './menu-content.component.html',\n  styleUrl: './menu-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class]': '\"menu-content-variant-\" + variant()',\n  },\n})\nexport class MenuContentComponent {\n  /** Display mode */\n  readonly variant = input.required<MenuContentVariant>();\n  /** Menu data to display */\n  readonly menu = input.required<Menu>();\n}\n",
            "selector": "ng-template[hraMenuSubGroup]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngTemplateContextGuard",
                    "args": [
                        {
                            "name": "_dir",
                            "type": "MenuSubGroupDirective",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTypes the context as `MenuSubGroup`",
                    "description": "<p>Types the context as <code>MenuSubGroup</code></p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "_dir",
                            "type": "MenuSubGroupDirective",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_ctx",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "MicroTooltipDirective",
            "id": "directive-MicroTooltipDirective-f93a9a4b0be3dcf5c8906b069ecfd7519dbe8b57555f87f93e82144d2348e930bbd880e1e6e0e1fc8f8e239e1698f0445a4e93a0d9a62f75f6800588145a91e3",
            "file": "micro-tooltip/src/micro-tooltip.directive.ts",
            "type": "directive",
            "description": "<p>Directive for Tooltip</p>\n",
            "rawdescription": "\nDirective for Tooltip",
            "sourceCode": "import { Directive, effect, inject, input } from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { registerStyleComponents } from '@hra-ui/cdk/styling';\nimport { MicroTooltipStylesComponent } from './micro-tooltip-styles/micro-tooltip-styles.component';\n\n/** Type of Tooltip size */\nexport type MicroTooltipSize = 'small' | 'medium';\n\n/** Directive for Tooltip */\n@Directive({\n  selector: '[hraMicroTooltip]',\n  standalone: true,\n  hostDirectives: [\n    {\n      directive: MatTooltip,\n      inputs: ['matTooltip: hraMicroTooltip', 'matTooltipPosition: hraMicroTooltipPosition'],\n    },\n  ],\n})\nexport class MicroTooltipDirective {\n  /** Size of the tooltip */\n  readonly size = input<MicroTooltipSize>('medium', { alias: 'hraMicroTooltipSize' });\n\n  /** Instance of MatTooltip */\n  protected readonly tooltip = inject(MatTooltip);\n\n  /** Registers the styles and sets class names for the tooltip container */\n  constructor() {\n    registerStyleComponents([MicroTooltipStylesComponent]);\n\n    effect(() => {\n      this.tooltip.tooltipClass = ['hra-micro-tooltip', `hra-micro-tooltip-${this.size()}`];\n    });\n  }\n}\n",
            "selector": "[hraMicroTooltip]",
            "providers": [],
            "hostDirectives": [
                {
                    "name": "MatTooltip",
                    "inputs": [
                        "matTooltip: hraMicroTooltip",
                        "matTooltipPosition: hraMicroTooltipPosition"
                    ],
                    "outputs": []
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input<MicroTooltipSize>('medium', { alias: 'hraMicroTooltipSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of the tooltip</p>\n",
                    "line": 22,
                    "rawdescription": "\nSize of the tooltip",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tooltip",
                    "defaultValue": "inject(MatTooltip)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Instance of MatTooltip</p>\n",
                    "line": 25,
                    "rawdescription": "\nInstance of MatTooltip",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Registers the styles and sets class names for the tooltip container</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25,
                "rawdescription": "\nRegisters the styles and sets class names for the tooltip container"
            }
        },
        {
            "name": "PrimaryButtonVariantDirective",
            "id": "directive-PrimaryButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749",
            "file": "buttons/button/src/lib/directives/variant.directive.ts",
            "type": "directive",
            "description": "<p>Style a mat-button as a primary variant button</p>\n",
            "rawdescription": "\nStyle a mat-button as a primary variant button",
            "sourceCode": "import { computed, Directive, input, isSignal, Signal } from '@angular/core';\n\n/** Named button variants */\nexport type ButtonVariant = 'primary' | 'secondary';\n\n/** Base class for variant directives */\n@Directive({\n  standalone: true,\n  host: {\n    '[class]': 'variantClass()',\n  },\n})\nexport abstract class BaseButtonVariantDirective {\n  /** Button variant */\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\n\n  /** Variant class applied to the button */\n  protected readonly variantClass = computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  });\n}\n\n/** Style a mat-button to a specific named variant */\n@Directive({\n  selector: 'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]',\n  standalone: true,\n})\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  readonly variant = input.required<ButtonVariant>({ alias: 'hraButtonVariant' });\n}\n\n/** Style a mat-button as a primary variant button */\n@Directive({\n  selector: 'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]',\n  standalone: true,\n})\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'primary';\n}\n\n/** Style a mat-button as a secondary variant button */\n@Directive({\n  selector: 'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]',\n  standalone: true,\n})\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'secondary';\n}\n",
            "selector": "button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button variant</p>\n",
                    "line": 43,
                    "rawdescription": "\nButton variant",
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseButtonVariantDirective"
                    }
                },
                {
                    "name": "variantClass",
                    "defaultValue": "computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Variant class applied to the button</p>\n",
                    "line": 18,
                    "rawdescription": "\nVariant class applied to the button",
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseButtonVariantDirective"
                    }
                }
            ],
            "methodsClass": [],
            "extends": [
                "BaseButtonVariantDirective"
            ]
        },
        {
            "name": "ScrollOverflowFadeDirective",
            "id": "directive-ScrollOverflowFadeDirective-5c069d94d9cda63486aa31c1f23d16a2e9d7563746326d99a1bebc6db1587495214db4c3ef234dcfc5e6a0a8302103131d976909000eb2f37ae90b65a07b6a0e",
            "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
            "type": "directive",
            "description": "<p>Directive that can be used along ng-scrollbar to apply a gradient\nto the top and bottom of the scroll area to indicate that there\nis additional content available through scrolling.</p>\n",
            "rawdescription": "\n\nDirective that can be used along ng-scrollbar to apply a gradient\nto the top and bottom of the scroll area to indicate that there\nis additional content available through scrolling.\n",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  Renderer2,\n  ViewEncapsulation,\n  effect,\n  inject,\n  input,\n  numberAttribute,\n} from '@angular/core';\nimport { registerStyleComponents } from '@hra-ui/cdk/styling';\nimport { NG_SCROLLBAR } from 'ngx-scrollbar';\nimport { SCROLL_TIMELINE, ScrollTimelineFunc } from '../scroll-timeline/scroll-timeline';\n\n/** Keyframes for the top gradient */\nconst GRADIENT_TOP_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n];\n\n/** Keyframes for the bottom gradient */\nconst GRADIENT_BOTTOM_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n];\n\n/** Scroll overflow fade global styles component */\n@Component({\n  selector: 'hra-scroll-overflow-fade-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./scroll-overflow-fade.directive.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollOverflowFadeStylesComponent {}\n\n/**\n * Directive that can be used along ng-scrollbar to apply a gradient\n * to the top and bottom of the scroll area to indicate that there\n * is additional content available through scrolling.\n */\n@Directive({\n  selector: '[hraScrollOverflowFade]',\n  standalone: true,\n  host: {\n    '[style.--hra-scroll-overflow-fade-offset.px]': 'scrollOverflowFadeOffset()',\n  },\n})\nexport class ScrollOverflowFadeDirective {\n  /**\n   * Additional offset to the gradient elements.\n   * Primarily useful when there are sticky headers on a table, etc.\n   */\n  readonly scrollOverflowFadeOffset = input(0, { transform: numberAttribute });\n\n  /** Renderer instance */\n  private readonly renderer = inject(Renderer2);\n  /** Nearest ng-scrollbar instance */\n  private readonly scrollbar = inject(NG_SCROLLBAR);\n  /** Signal providing access to ScrollTimeline though browser builtin or polyfill */\n  private readonly scrollTimeline = inject(SCROLL_TIMELINE);\n\n  /**\n   * Initializes the directive, adding the gradient elements to the scroll area.\n   */\n  constructor() {\n    registerStyleComponents([ScrollOverflowFadeStylesComponent]);\n\n    effect((onCleanup) => {\n      const scrollTimeline = this.scrollTimeline();\n      if (!this.scrollbar.viewport.initialized() || !scrollTimeline) {\n        return;\n      }\n\n      const viewport = this.scrollbar.viewport.nativeElement;\n      const cleanupFns = [\n        this.attachGradient(viewport, 'top', scrollTimeline, GRADIENT_TOP_KEYFRAMES),\n        this.attachGradient(viewport, 'bottom', scrollTimeline, GRADIENT_BOTTOM_KEYFRAMES),\n      ];\n\n      onCleanup(() => cleanupFns.forEach((fn) => fn()));\n    });\n  }\n\n  /**\n   * Creates and attaches a gradient element to a scroll area.\n   *\n   * @param viewport The scroll area viewport\n   * @param placement Whether to place the gradient on top or bottom\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param keyframes Keyframes used to animate/move the gradient\n   * @returns A cleanup function\n   */\n  private attachGradient(\n    viewport: HTMLElement,\n    placement: 'top' | 'bottom',\n    scrollTimeline: ScrollTimelineFunc,\n    keyframes: Keyframe[],\n  ): () => void {\n    const el = this.createGradientElement(placement);\n    this.renderer.appendChild(viewport, el);\n\n    const animation = this.animateGradient(scrollTimeline, el, viewport, keyframes);\n    return () => {\n      el.remove();\n      animation.cancel();\n    };\n  }\n\n  /**\n   * Creates a new gradient element.\n   *\n   * @param placement Whether it will be placed on the top or bottom\n   * @returns A new element\n   */\n  private createGradientElement(placement: 'top' | 'bottom'): HTMLElement {\n    const el: HTMLElement = this.renderer.createElement('div');\n    this.renderer.addClass(el, `hra-scroll-overflow-fade-gradient-${placement}`);\n    return el;\n  }\n\n  /**\n   * Animates a gradient element using a scroll timeline.\n   *\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param el Element to animate\n   * @param source Scroll container element\n   * @param keyframes Keyframe specification\n   * @returns An animation\n   */\n  private animateGradient(\n    scrollTimeline: ScrollTimelineFunc,\n    el: HTMLElement,\n    source: HTMLElement,\n    keyframes: Keyframe[],\n  ): Animation {\n    return el.animate(keyframes, {\n      fill: 'both',\n      easing: 'linear',\n      timeline: new scrollTimeline({ source, axis: 'y' }),\n    });\n  }\n}\n",
            "selector": "[hraScrollOverflowFade]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "scrollOverflowFadeOffset",
                    "defaultValue": "input(0, { transform: numberAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Additional offset to the gradient elements.\nPrimarily useful when there are sticky headers on a table, etc.</p>\n",
                    "line": 74,
                    "rawdescription": "\n\nAdditional offset to the gradient elements.\nPrimarily useful when there are sticky headers on a table, etc.\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Initializes the directive, adding the gradient elements to the scroll area.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 81,
                "rawdescription": "\n\nInitializes the directive, adding the gradient elements to the scroll area.\n"
            }
        },
        {
            "name": "SecondaryButtonVariantDirective",
            "id": "directive-SecondaryButtonVariantDirective-ead09327255e56e7a6a41bee76abcd841df9c6b6e19838b2470338743bc9012c6cdd17238e23ab0f4ef87fadd027c16aee3866d42f5a9617fda753bd7c14d749",
            "file": "buttons/button/src/lib/directives/variant.directive.ts",
            "type": "directive",
            "description": "<p>Style a mat-button as a secondary variant button</p>\n",
            "rawdescription": "\nStyle a mat-button as a secondary variant button",
            "sourceCode": "import { computed, Directive, input, isSignal, Signal } from '@angular/core';\n\n/** Named button variants */\nexport type ButtonVariant = 'primary' | 'secondary';\n\n/** Base class for variant directives */\n@Directive({\n  standalone: true,\n  host: {\n    '[class]': 'variantClass()',\n  },\n})\nexport abstract class BaseButtonVariantDirective {\n  /** Button variant */\n  abstract readonly variant: ButtonVariant | Signal<ButtonVariant>;\n\n  /** Variant class applied to the button */\n  protected readonly variantClass = computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  });\n}\n\n/** Style a mat-button to a specific named variant */\n@Directive({\n  selector: 'button[mat-button][hraButtonVariant], a[mat-button][hraButtonVariant]',\n  standalone: true,\n})\nexport class ButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  readonly variant = input.required<ButtonVariant>({ alias: 'hraButtonVariant' });\n}\n\n/** Style a mat-button as a primary variant button */\n@Directive({\n  selector: 'button[mat-button][hraPrimaryButton], a[mat-button][hraPrimaryButton]',\n  standalone: true,\n})\nexport class PrimaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'primary';\n}\n\n/** Style a mat-button as a secondary variant button */\n@Directive({\n  selector: 'button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]',\n  standalone: true,\n})\nexport class SecondaryButtonVariantDirective extends BaseButtonVariantDirective {\n  /** Button variant */\n  readonly variant = 'secondary';\n}\n",
            "selector": "button[mat-button][hraSecondaryButton], a[mat-button][hraSecondaryButton]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "variant",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button variant</p>\n",
                    "line": 53,
                    "rawdescription": "\nButton variant",
                    "modifierKind": [
                        148
                    ],
                    "inheritance": {
                        "file": "BaseButtonVariantDirective"
                    }
                },
                {
                    "name": "variantClass",
                    "defaultValue": "computed(() => {\n    const { variant } = this;\n    const variantValue = isSignal(variant) ? variant() : variant;\n    return `hra-button-variant-${variantValue}`;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Variant class applied to the button</p>\n",
                    "line": 18,
                    "rawdescription": "\nVariant class applied to the button",
                    "modifierKind": [
                        124,
                        148
                    ],
                    "inheritance": {
                        "file": "BaseButtonVariantDirective"
                    }
                }
            ],
            "methodsClass": [],
            "extends": [
                "BaseButtonVariantDirective"
            ]
        },
        {
            "name": "SoftwareStatusSizeDirective",
            "id": "directive-SoftwareStatusSizeDirective-0be27dfb48026e433e77109088c47a918fe2b0fc0bf7a976e4938db7a1a588a848ca69d07d313889c2ad8fb95992cf59b07b844ba9fd1a0c43e9f794069d11df",
            "file": "software-status-indicator/src/lib/software-status-indicator-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for icon buttons</p>\n",
            "rawdescription": "\n\nDirective for icon buttons\n",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for Software status size */\nexport type SoftwareStatusSize = 'small' | 'medium' | 'large';\n\n/** Record of button fonts */\nconst STATUS_FONTS: Record<SoftwareStatusSize, string> = {\n  small: 'var(--mat-sys-label-micro)',\n  medium: 'var(--mat-sys-label-medium)',\n  large: 'var(--mat-sys-label-large)',\n};\n\n/**\n * Directive for icon buttons\n */\n@Directive({\n  selector: '[hraSoftwareStatusSize]',\n  standalone: true,\n  host: {\n    '[style.font]': 'font()',\n  },\n})\nexport class SoftwareStatusSizeDirective {\n  /** Size of icon button to use */\n  readonly size = input.required<SoftwareStatusSize>({ alias: 'hraSoftwareStatusSize' });\n\n  /** Font */\n  protected readonly font = computed(() => STATUS_FONTS[this.size()]);\n}\n",
            "selector": "[hraSoftwareStatusSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "font",
                    "defaultValue": "computed(() => STATUS_FONTS[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Font</p>\n",
                    "line": 28,
                    "rawdescription": "\nFont",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input.required<SoftwareStatusSize>({ alias: 'hraSoftwareStatusSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of icon button to use</p>\n",
                    "line": 25,
                    "rawdescription": "\nSize of icon button to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "TextHyperlinkDirective",
            "id": "directive-TextHyperlinkDirective-ec5e5b7fc9c3e189c77815ce30aaafdeada32321e386a649abb3fa0be26d51f822a0cc8d48bbbf7c1f9f650f77d71964603802e5a83a2ffeb079b29b8aae111c",
            "file": "buttons/text-hyperlink/src/lib/text-hyperlink.directive.ts",
            "type": "directive",
            "description": "<p>Applies hyperlink styles when placed on an <a> tag</p>\n",
            "rawdescription": "\nApplies hyperlink styles when placed on an <a> tag",
            "sourceCode": "import { Directive } from '@angular/core';\n\n/** Applies hyperlink styles when placed on an <a> tag */\n@Directive({\n  selector: 'a[hraHyperlink]',\n  standalone: true,\n  host: {\n    class: 'hra-text-hyperlink',\n  },\n})\nexport class TextHyperlinkDirective {}\n",
            "selector": "a[hraHyperlink]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "TreeSizeDirective",
            "id": "directive-TreeSizeDirective-08d21392cbcaab6b2b4c885a4cefdb26b3c1ace1f2284843dcca2a852c1fd65457bf3860553cf287c0052c09d5cfa50ce6e1fc6b65da68b66907dea95c0756b9",
            "file": "tree/src/lib/tree-size/tree-size.directive.ts",
            "type": "directive",
            "description": "<p>Directive for hra tree component size</p>\n",
            "rawdescription": "\n\nDirective for hra tree component size\n",
            "sourceCode": "import { computed, Directive, input } from '@angular/core';\n\n/** Input options for each tree size */\nexport type TreeSize = 'small' | 'medium' | 'large';\n\n/** Icon sizes for each tree size (rem) */\nconst ICON_SIZES: Record<TreeSize, number> = {\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n};\n\n/** Font sizes for each tree size (rem) */\nconst FONT_SIZES: Record<TreeSize, number> = {\n  small: 0.75,\n  medium: 0.875,\n  large: 1,\n};\n\n/** Node heights for each tree size (rem) */\nconst NODE_HEIGHTS: Record<TreeSize, number> = {\n  small: 1.5,\n  medium: 1.75,\n  large: 2,\n};\n\n/**\n * Directive for hra tree component size\n */\n@Directive({\n  selector: '[hraTreeSize]',\n  standalone: true,\n  host: {\n    '[style.--mat-tree-node-text-size.rem]': 'fontSize()',\n    '[style.--mat-tree-node-min-height.rem]': 'nodeHeight()',\n    '[style.--mdc-icon-button-state-layer-size.rem]': 'nodeHeight()',\n    '[style.--mdc-icon-button-icon-size.rem]': 'iconSize()',\n  },\n})\nexport class TreeSizeDirective {\n  /** Size of tree to use */\n  readonly size = input.required<TreeSize>({ alias: 'hraTreeSize' });\n\n  /** Gets font size of tree in rem */\n  protected readonly iconSize = computed(() => ICON_SIZES[this.size()]);\n\n  /** Gets font size of tree in rem */\n  protected readonly fontSize = computed(() => FONT_SIZES[this.size()]);\n\n  /** Node heights */\n  protected readonly nodeHeight = computed(() => NODE_HEIGHTS[this.size()]);\n}\n",
            "selector": "[hraTreeSize]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "fontSize",
                    "defaultValue": "computed(() => FONT_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Gets font size of tree in rem</p>\n",
                    "line": 48,
                    "rawdescription": "\nGets font size of tree in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "iconSize",
                    "defaultValue": "computed(() => ICON_SIZES[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Gets font size of tree in rem</p>\n",
                    "line": 45,
                    "rawdescription": "\nGets font size of tree in rem",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "nodeHeight",
                    "defaultValue": "computed(() => NODE_HEIGHTS[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Node heights</p>\n",
                    "line": 51,
                    "rawdescription": "\nNode heights",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input.required<TreeSize>({ alias: 'hraTreeSize' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of tree to use</p>\n",
                    "line": 42,
                    "rawdescription": "\nSize of tree to use",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": []
        },
        {
            "name": "ViewOutletDirective",
            "id": "directive-ViewOutletDirective-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd",
            "file": "fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts",
            "type": "directive",
            "description": "<p>View outlet directive</p>\n",
            "rawdescription": "\nView outlet directive",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  DestroyRef,\n  Directive,\n  effect,\n  inject,\n  input,\n  output,\n  TemplateRef,\n  viewChild,\n  ViewContainerRef,\n  ViewRef,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { ExpansionPanelModule } from '@hra-ui/design-system/expansion-panel';\nimport { filter, MonoTypeOperatorFunction, pipe } from 'rxjs';\n\n/** View outlet directive */\n@Directive({\n  selector: '[hraViewOutlet]',\n  standalone: true,\n})\nexport class ViewOutletDirective {\n  /** view reference input */\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: 'hraViewOutlet' });\n\n  /** Reference of the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Attaches the view */\n  constructor() {\n    effect(() => this.attach());\n  }\n\n  /** Attaches the view to the view container */\n  attach(): void {\n    const viewRef = this.viewRef();\n    if (viewRef) {\n      this.viewContainerRef.insert(viewRef);\n    }\n  }\n  /** Detaches the view from the view container */\n  detach(): void {\n    const viewRef = this.viewRef();\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\n    if (index >= 0) {\n      this.viewContainerRef.detach(index);\n    }\n  }\n}\n\n/** Fullscreen actions component */\n@Component({\n  selector: 'hra-fullscreen-actions',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      flex-direction: row;\n      align-items: center;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenActionsComponent {}\n\n/** Fullscreen portal content component */\n@Component({\n  selector: 'hra-fullscreen-portal-content',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalContentComponent {}\n\n/** Fullscreen Component */\n@Component({\n  selector: 'hra-fullscreen-portal',\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\n  templateUrl: './fullscreen-portal.component.html',\n  styleUrl: './fullscreen-portal.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalComponent {\n  /** Heading of the dialog */\n  readonly tagline = input.required<string>();\n\n  /** Classes to apply to the dialog panel in fullscreen mode */\n  readonly panelClass = input<string | string[]>();\n\n  /** Event for before the dialog is opened */\n  readonly beforeOpened = output<void>();\n  /** Event for when the dialog is opened */\n  readonly opened = output<void>();\n  /** Event for before the dialog is closed */\n  readonly beforeClosed = output<void>();\n  /** Event for when the dialog is closed */\n  readonly closed = output<void>();\n\n  /** Creates embedded view using template */\n  readonly viewRef = computed(() => {\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\n  });\n\n  /** Rootnodes of the view reference */\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\n\n  /** Reference to the mat dialog */\n  private readonly dialogService = inject(MatDialog);\n\n  /** Reference to the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Reference to the destroy ref */\n  private readonly destroyRef = inject(DestroyRef);\n\n  /** Reference to the view outlet directive */\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\n\n  /** Reference to the view content template */\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>('contentTemplate');\n\n  /** Reference to the view dialog template */\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>('dialogTemplate');\n\n  /** Reference to the mat dialog */\n  private dialogRef?: MatDialogRef<void>;\n\n  /** Destroys the view */\n  constructor() {\n    this.destroyRef.onDestroy(() => {\n      const dialogRef = this.dialogRef;\n      this.dialogRef = undefined;\n      dialogRef?.close();\n      this.viewRef().destroy();\n    });\n  }\n\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\n  open(): void {\n    if (this.dialogRef !== undefined) {\n      return;\n    }\n\n    const { dialogService, dialogTemplateRef } = this;\n    const panelClass = this.panelClass() ?? [];\n    const normalizedPanelClass = typeof panelClass === 'string' ? panelClass.split(' ') : panelClass;\n\n    this.beforeOpened.emit();\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\n      panelClass: [...normalizedPanelClass, 'fullscreen-panel'],\n    }));\n\n    dialogRef\n      .afterOpened()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.opened.emit();\n      });\n\n    dialogRef\n      .beforeClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.beforeClosed.emit();\n        this.viewOutlet().attach();\n      });\n\n    dialogRef\n      .afterClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.dialogRef = undefined;\n        this.closed.emit();\n      });\n  }\n\n  /** Closes the dialog */\n  close(): void {\n    this.dialogRef?.close();\n  }\n\n  /** Filters the dialog event based on provided dialog reference */\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\n    return pipe(\n      takeUntilDestroyed(this.destroyRef),\n      filter(() => this.dialogRef === dialogRef),\n    );\n  }\n}\n",
            "selector": "[hraViewOutlet]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewRef",
                    "defaultValue": "input<ViewRef | undefined>(undefined, { alias: 'hraViewOutlet' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>view reference input</p>\n",
                    "line": 30,
                    "rawdescription": "\nview reference input",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "attach",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAttaches the view to the view container",
                    "description": "<p>Attaches the view to the view container</p>\n"
                },
                {
                    "name": "detach",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetaches the view from the view container",
                    "description": "<p>Detaches the view from the view container</p>\n"
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Attaches the view</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33,
                "rawdescription": "\nAttaches the view"
            }
        }
    ],
    "components": [
        {
            "name": "AppNavButtonComponent",
            "id": "component-AppNavButtonComponent-e696bd41d143f97965b81ffa415e68bfc390a04bfc95766b7ee7ec4e281337dbfe10d8bc43b641db11427f3676f69fdb0e3680bce8bbf454b6131d9376fe860c",
            "file": "buttons/app-nav-button/src/lib/app-nav-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-app-nav-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app-nav-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Description of the card</p>\n",
                    "line": 19,
                    "rawdescription": "\nDescription of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>URL for the icon</p>\n",
                    "line": 15,
                    "rawdescription": "\nURL for the icon",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Link of the card</p>\n",
                    "line": 21,
                    "rawdescription": "\nLink of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of the card</p>\n",
                    "line": 17,
                    "rawdescription": "\nTitle of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Description of the card</p>\n",
                    "line": 19,
                    "rawdescription": "\nDescription of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>URL for the icon</p>\n",
                    "line": 15,
                    "rawdescription": "\nURL for the icon",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Link of the card</p>\n",
                    "line": 21,
                    "rawdescription": "\nLink of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of the card</p>\n",
                    "line": 17,
                    "rawdescription": "\nTitle of the card",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatRippleModule",
                    "type": "module"
                }
            ],
            "description": "<p>Apps Card Component</p>\n",
            "rawdescription": "\nApps Card Component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatRippleModule } from '@angular/material/core';\n\n/** Apps Card Component */\n@Component({\n  selector: 'hra-app-nav-button',\n  imports: [CommonModule, MatRippleModule],\n  templateUrl: './app-nav-button.component.html',\n  styleUrl: './app-nav-button.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppNavButtonComponent {\n  /** URL for the icon */\n  readonly icon = input.required<string>();\n  /** Title of the card */\n  readonly tagline = input.required<string>();\n  /** Description of the card */\n  readonly description = input.required<string>();\n  /** Link of the card */\n  readonly link = input.required<string>();\n}\n",
            "styleUrl": "./app-nav-button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a matRipple [attr.href]=\"link()\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img class=\"icon\" [attr.src]=\"icon()\" alt=\"\" />\n  <span class=\"tagline\">{{ tagline() }}</span>\n  <span class=\"description\">{{ description() }}</span>\n</a>\n"
        },
        {
            "name": "AppsSidenavDemoComponent",
            "id": "component-AppsSidenavDemoComponent-aa67c1bfd678752af1a783cd5ed2b1dc04a7646cbb530e7ea5c77f9cc9e3b297d9501904a87df259a6b78d2cd6d5019a296f9405ba3420a0af518ab4a4ffed46",
            "file": "src/lib/apps-sidenav-demo/apps-sidenav-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-apps-sidenav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./apps-sidenav-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      category: 'About',\n      cards: [\n        {\n          name: 'HuBMAP Consortium',\n          icon: 'assets/logo/hubmap.svg',\n          title: 'HuBMAP Consortium',\n          description:\n            'HuBMAP all access: Learn about us, our policies, data, and tools. Explore our publications and how to work with us.',\n          link: 'https://hubmapconsortium.org/',\n        },\n      ],\n    },\n    {\n      category: 'Data',\n      cards: [\n        {\n          name: 'HubMAP Data Portal',\n          icon: 'assets/logo/data_portal.svg',\n          title: 'HuBMAP Data Portal',\n          description:\n            'Explore, visualize and download consortium-generated spatial and single cell data for the human body.',\n          link: 'https://portal.hubmapconsortium.org/',\n        },\n        {\n          name: 'Data Portal Workspaces',\n          icon: 'assets/logo/data_portal.svg',\n          title: 'Data Portal Workspaces',\n          description:\n            'Access HuBMAP data in a lightweight exploration platform and perform analyses directly within the portal.',\n          link: 'https://portal.hubmapconsortium.org/workspaces',\n        },\n      ],\n    },\n    {\n      category: 'Atlas',\n      cards: [\n        {\n          name: 'Human Reference Atlas',\n          icon: 'assets/logo/hra_small.svg',\n          title: 'Human Reference Atlas',\n          description:\n            'Use the HRA Portal to access atlas data, explore atlas functionality, and contribute to the Human Reference Atlas.',\n          link: 'https://humanatlas.io/',\n        },\n        {\n          name: 'Exploration User Interface',\n          icon: 'assets/logo/hra_small.svg',\n          title: 'Exploration User Interface',\n          description:\n            'Explore and validate spatially registered single-cell datasets in three-dimensions across organs.',\n          link: 'https://apps.humanatlas.io/eui/',\n        },\n        {\n          name: 'ASCT+B Reporter',\n          icon: 'assets/logo/hra_small.svg',\n          title: 'ASCT+B Reporter',\n          description:\n            'Explore and compare ASCT+B tables and construct validated panels for multiplexed antibody-based imaging (OMAPs) tables.',\n          link: 'https://hubmapconsortium.github.io/ccf-asct-reporter/',\n        },\n      ],\n    },\n    {\n      category: 'Analytics Tools',\n      cards: [\n        {\n          name: 'Azimuth',\n          icon: 'assets/logo/azimuth.svg',\n          title: 'Azimuth',\n          description:\n            'Azimuth uses a reference dataset to process, analyze, and interpret single-cell RNA-seq or ATAC-seq experiments.',\n          link: 'https://azimuth.hubmapconsortium.org/',\n        },\n        {\n          name: 'FUSION',\n          icon: 'assets/logo/fusion.svg',\n          title: 'FUSION',\n          description: 'Functional Unit State Identification and Navigation with WSI.',\n          link: 'http://fusion.hubmapconsortium.org/?utm_source=hubmap',\n        },\n        {\n          name: 'Antibody Validation Reports',\n          icon: 'assets/logo/antibody-validation-reports.svg',\n          title: 'Antibody Validation Reports',\n          description:\n            'Provide antibody details for multiplex imaging assays and capture data requested by journals for manuscript submission.',\n          link: 'https://avr.hubmapconsortium.org/',\n        },\n      ],\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardData[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>data to render the cards inside the sidenav</p>\n",
                    "line": 20,
                    "rawdescription": "\ndata to render the cards inside the sidenav",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "AppNavButtonComponent",
                    "type": "component"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                }
            ],
            "description": "<p>Apps Sidenav component</p>\n",
            "rawdescription": "\nApps Sidenav component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { AppNavButtonComponent } from '../../../buttons/app-nav-button/src/index';\nimport { ScrollingModule } from '@hra-ui/design-system/scrolling';\nimport { CardData } from '@hra-ui/design-system/nav-header';\n\n/** Apps Sidenav component */\n@Component({\n  selector: 'hra-apps-sidenav',\n  imports: [CommonModule, MatSidenavModule, AppNavButtonComponent, MatIconModule, MatButtonModule, ScrollingModule],\n  templateUrl: './apps-sidenav-demo.component.html',\n  styleUrl: './apps-sidenav-demo.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppsSidenavDemoComponent {\n  /** data to render the cards inside the sidenav */\n  readonly data: CardData[] = [\n    {\n      category: 'About',\n      cards: [\n        {\n          name: 'HuBMAP Consortium',\n          icon: 'assets/logo/hubmap.svg',\n          title: 'HuBMAP Consortium',\n          description:\n            'HuBMAP all access: Learn about us, our policies, data, and tools. Explore our publications and how to work with us.',\n          link: 'https://hubmapconsortium.org/',\n        },\n      ],\n    },\n    {\n      category: 'Data',\n      cards: [\n        {\n          name: 'HubMAP Data Portal',\n          icon: 'assets/logo/data_portal.svg',\n          title: 'HuBMAP Data Portal',\n          description:\n            'Explore, visualize and download consortium-generated spatial and single cell data for the human body.',\n          link: 'https://portal.hubmapconsortium.org/',\n        },\n        {\n          name: 'Data Portal Workspaces',\n          icon: 'assets/logo/data_portal.svg',\n          title: 'Data Portal Workspaces',\n          description:\n            'Access HuBMAP data in a lightweight exploration platform and perform analyses directly within the portal.',\n          link: 'https://portal.hubmapconsortium.org/workspaces',\n        },\n      ],\n    },\n    {\n      category: 'Atlas',\n      cards: [\n        {\n          name: 'Human Reference Atlas',\n          icon: 'assets/logo/hra_small.svg',\n          title: 'Human Reference Atlas',\n          description:\n            'Use the HRA Portal to access atlas data, explore atlas functionality, and contribute to the Human Reference Atlas.',\n          link: 'https://humanatlas.io/',\n        },\n        {\n          name: 'Exploration User Interface',\n          icon: 'assets/logo/hra_small.svg',\n          title: 'Exploration User Interface',\n          description:\n            'Explore and validate spatially registered single-cell datasets in three-dimensions across organs.',\n          link: 'https://apps.humanatlas.io/eui/',\n        },\n        {\n          name: 'ASCT+B Reporter',\n          icon: 'assets/logo/hra_small.svg',\n          title: 'ASCT+B Reporter',\n          description:\n            'Explore and compare ASCT+B tables and construct validated panels for multiplexed antibody-based imaging (OMAPs) tables.',\n          link: 'https://hubmapconsortium.github.io/ccf-asct-reporter/',\n        },\n      ],\n    },\n    {\n      category: 'Analytics Tools',\n      cards: [\n        {\n          name: 'Azimuth',\n          icon: 'assets/logo/azimuth.svg',\n          title: 'Azimuth',\n          description:\n            'Azimuth uses a reference dataset to process, analyze, and interpret single-cell RNA-seq or ATAC-seq experiments.',\n          link: 'https://azimuth.hubmapconsortium.org/',\n        },\n        {\n          name: 'FUSION',\n          icon: 'assets/logo/fusion.svg',\n          title: 'FUSION',\n          description: 'Functional Unit State Identification and Navigation with WSI.',\n          link: 'http://fusion.hubmapconsortium.org/?utm_source=hubmap',\n        },\n        {\n          name: 'Antibody Validation Reports',\n          icon: 'assets/logo/antibody-validation-reports.svg',\n          title: 'Antibody Validation Reports',\n          description:\n            'Provide antibody details for multiplex imaging assays and capture data requested by journals for manuscript submission.',\n          link: 'https://avr.hubmapconsortium.org/',\n        },\n      ],\n    },\n  ];\n}\n",
            "styleUrl": "./apps-sidenav-demo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-sidenav-container class=\"container\">\n  <mat-sidenav #sidenav mode=\"over\" class=\"apps-sidenav\" position=\"end\" [fixedInViewport]=\"false\">\n    <div class=\"header\">\n      <span class=\"sidenav-title\"> HuBMAP Tools & Applications </span>\n      <div style=\"flex-grow: 1\"></div>\n      <button mat-icon-button hraIconButtonSize=\"large\" disableRipple (click)=\"sidenav.toggle()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <ng-scrollbar>\n      @for (item of data; track item) {\n        <div class=\"category\">\n          <div class=\"card-category\">{{ item.category }}</div>\n          @for (card of item.cards; track card) {\n            <hra-app-nav-button\n              [icon]=\"card.icon\"\n              [tagline]=\"card.name\"\n              [description]=\"card.description\"\n              [link]=\"card.link\"\n            ></hra-app-nav-button>\n          }\n        </div>\n      }\n    </ng-scrollbar>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <div class=\"main\">\n      Sidenav Demonstration\n      <div style=\"flex-grow: 1\"></div>\n      <button mat-icon-button hraIconButtonSize=\"large\" disableRipple (click)=\"sidenav.toggle()\">\n        <mat-icon>apps</mat-icon>\n      </button>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "BackButtonBarComponent",
            "id": "component-BackButtonBarComponent-bd9dc95083585034e9099454ce9df444284e8a6dc9eb7c343f0ea401973b8b40cd164ecf14a398fe84f4487377ee1bc5d64c6f1c68fd426298e61ed2bff8ae17",
            "file": "navigation/back-button-bar/src/lib/back-button-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-back-button-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./back-button-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "backClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Emits when the back button is clicked</p>\n",
                    "line": 16,
                    "rawdescription": "\nEmits when the back button is clicked",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "backClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Emits when the back button is clicked</p>\n",
                    "line": 16,
                    "rawdescription": "\nEmits when the back button is clicked",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                }
            ],
            "description": "<p>Back bar component used when an application is embedded</p>\n",
            "rawdescription": "\nBack bar component used when an application is embedded",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, output } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\n\n/** Back bar component used when an application is embedded */\n@Component({\n  selector: 'hra-back-button-bar',\n  imports: [MatCommonModule, MatIconModule, ButtonsModule],\n  templateUrl: './back-button-bar.component.html',\n  styleUrl: './back-button-bar.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BackButtonBarComponent {\n  /** Emits when the back button is clicked */\n  readonly backClick = output<void>();\n}\n",
            "styleUrl": "./back-button-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button mat-button (click)=\"backClick.emit()\">\n  <mat-icon>arrow_back</mat-icon>\n  Back\n</button>\n"
        },
        {
            "name": "BrandLogoComponent",
            "id": "component-BrandLogoComponent-0b4acb40c9f5ff12aeb181d1ff8594ca2933b2716e7a395c11323b6d2c64d5ef3698c320c23fc1262ca24aea63712d6714abb4cd072b7729b5ce930b223ad4da",
            "file": "brand/logo/src/lib/logo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-brand-logo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "computed(() => findOrThrow(LOGOS, ({ size }) => size === this.size()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Logo data</p>\n",
                    "line": 28,
                    "rawdescription": "\nLogo data",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "NEVER_EVAL_SCRIPTS",
                    "defaultValue": "SVGScriptEvalMode.NEVER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>SVG script eval mode</p>\n",
                    "line": 25,
                    "rawdescription": "\nSVG script eval mode",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "input<BrandLogoSize>('regular')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of the logo</p>\n",
                    "line": 22,
                    "rawdescription": "\nSize of the logo",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "InlineSVGModule",
                    "type": "module"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "<p>Brand Logo Component</p>\n",
            "rawdescription": "\nBrand Logo Component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { findOrThrow } from '@hra-ui/common/array-util';\nimport { InlineSVGModule, SVGScriptEvalMode } from 'ng-inline-svg-2';\nimport { LOGOS } from './static-data/parsed';\nimport { BrandLogoSize } from './types/logos.schema';\n\n/** Brand Logo Component */\n@Component({\n  selector: 'hra-brand-logo',\n  imports: [CommonModule, InlineSVGModule, AssetUrlPipe],\n  templateUrl: './logo.component.html',\n  styleUrl: './logo.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class]': '\"hra-brand-logo-size-\" + size()',\n  },\n})\nexport class BrandLogoComponent {\n  /** Size of the logo */\n  readonly size = input<BrandLogoSize>('regular');\n\n  /** SVG script eval mode */\n  protected readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\n\n  /** Logo data */\n  protected readonly data = computed(() => findOrThrow(LOGOS, ({ size }) => size === this.size()));\n}\n",
            "styleUrl": "./logo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  class=\"logo\"\n  [inlineSVG]=\"data().src | assetUrl\"\n  [evalScripts]=\"NEVER_EVAL_SCRIPTS\"\n  [style.width.px]=\"data().width\"\n  [style.height.px]=\"data().height\"\n  aria-label=\"Visit Human Reference Atlas\"\n  href=\"https://humanatlas.io/\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n</a>\n"
        },
        {
            "name": "BrandMarkComponent",
            "id": "component-BrandMarkComponent-85372be079e0db3452222a1909c25ebdb1e653bdbede9678d3783bbe365834301e80ddba56c32cd9620a6b6bf601322d5e1907903ab08b8770e923771679c655",
            "file": "brand/mark/src/lib/mark.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-brand-mark",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./mark.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "computed(() => findOrThrow(MARKS, ({ variant }) => variant === this.variant()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Mark data</p>\n",
                    "line": 27,
                    "rawdescription": "\nMark data",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "NEVER_EVAL_SCRIPTS",
                    "defaultValue": "SVGScriptEvalMode.NEVER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>SVG script eval mode</p>\n",
                    "line": 24,
                    "rawdescription": "\nSVG script eval mode",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "variant",
                    "defaultValue": "input<BrandMarkVariant>('default')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Mark variant</p>\n",
                    "line": 21,
                    "rawdescription": "\nMark variant",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "InlineSVGModule",
                    "type": "module"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "<p>HRA brandmark component</p>\n",
            "rawdescription": "\n\nHRA brandmark component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { findOrThrow } from '@hra-ui/common/array-util';\nimport { InlineSVGModule, SVGScriptEvalMode } from 'ng-inline-svg-2';\nimport { MARKS } from './static-data/parsed';\nimport { BrandMarkVariant } from './types/marks.schema';\n\n/**\n * HRA brandmark component\n */\n@Component({\n  selector: 'hra-brand-mark',\n  imports: [CommonModule, InlineSVGModule, AssetUrlPipe],\n  templateUrl: './mark.component.html',\n  styleUrl: './mark.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BrandMarkComponent {\n  /** Mark variant */\n  readonly variant = input<BrandMarkVariant>('default');\n\n  /** SVG script eval mode */\n  protected readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\n\n  /** Mark data */\n  protected readonly data = computed(() => findOrThrow(MARKS, ({ variant }) => variant === this.variant()));\n}\n",
            "styleUrl": "./mark.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"hra-brandmark\"\n  [inlineSVG]=\"data().src | assetUrl\"\n  [evalScripts]=\"NEVER_EVAL_SCRIPTS\"\n  [style.width.px]=\"data().width\"\n  [style.height.px]=\"data().height\"\n  aria-label=\"Human Reference Atlas brandmark\"\n></div>\n"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-56ac05f544b545db7c1098e4a37552985041323d8713926d117028c6e04166e63309b6c086d2dbaff7e06cbd93f0e7730cf71f4e650e230982b1d72aa585b2f8",
            "file": "buttons/breadcrumbs/src/lib/breadcrumbs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-breadcrumbs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "crumbs",
                    "defaultValue": "input<BreadcrumbItem[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Crumbs to display</p>\n",
                    "line": 27,
                    "rawdescription": "\nCrumbs to display",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "TextHyperlinkDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Component used to help the user understand their location within websites</p>\n",
            "rawdescription": "\n\nComponent used to help the user understand their location within websites\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { TextHyperlinkDirective } from '@hra-ui/design-system/buttons/text-hyperlink';\n\n/** Breadcrumb item */\nexport interface BreadcrumbItem {\n  /** Name of item */\n  name: string;\n  /** Route to page */\n  route?: string;\n}\n\n/**\n * Component used to help the user understand their location within websites\n */\n@Component({\n  selector: 'hra-breadcrumbs',\n  imports: [CommonModule, RouterModule, MatIconModule, TextHyperlinkDirective],\n  templateUrl: './breadcrumbs.component.html',\n  styleUrl: './breadcrumbs.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbsComponent {\n  /** Crumbs to display */\n  readonly crumbs = input<BreadcrumbItem[]>([]);\n}\n",
            "styleUrl": "./breadcrumbs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<nav class=\"navigation\">\n  <ol class=\"crumbs\">\n    @for (crumb of crumbs(); track $index) {\n      <li class=\"crumb\">\n        @if (crumb.route) {\n          <a hraHyperlink [routerLink]=\"crumb.route\">{{ crumb.name }}</a>\n        } @else {\n          {{ crumb.name }}\n        }\n\n        @if (!$last) {\n          <mat-icon class=\"icon\">chevron_right</mat-icon>\n        }\n      </li>\n    }\n  </ol>\n</nav>\n"
        },
        {
            "name": "ButtonGlobalStylesComponent",
            "id": "component-ButtonGlobalStylesComponent-a3bfc6a43497fd00b96485fca7462a1c76c561babc583cfc63986e0b4b1b061806f75e5eea0f1bdb229e0dcf1e645a870519efc9fc9f0ca87f58678802112011",
            "file": "buttons/button/src/lib/global-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-button-global-styles",
            "styleUrls": [
                "./global-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Global styles for standard buttons</p>\n",
            "rawdescription": "\nGlobal styles for standard buttons",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/** Global styles for standard buttons */\n@Component({\n  selector: 'hra-button-global-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./global-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonGlobalStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  :is(button, a).mdc-button {\n    @include utils.use-font(label, medium);\n\n    --mdc-text-button-label-text-color: var(--mat-sys-on-tertiary-fixed);\n    --mat-text-button-state-layer-color: var(--mat-sys-on-tertiary-fixed);\n    --mdc-text-button-disabled-label-text-color: #{utils.with-alpha(var(--mat-sys-secondary), 38%)};\n    --mat-text-button-ripple-color: #{utils.with-alpha(var(--mat-sys-secondary), 8%)};\n\n    --mdc-text-button-container-height: 2.5rem;\n    --mdc-text-button-container-shape: var(--mat-sys-corner-extra-small);\n    --mat-text-button-horizontal-padding: 1rem;\n    --mat-text-button-icon-offset: 0;\n\n    &:focus-visible {\n      --mdc-text-button-label-text-color: var(--mat-sys-secondary);\n      --mat-text-button-focus-state-layer-opacity: 0;\n      @include utils.inset-outline(var(--mat-sys-tertiary));\n    }\n\n    &.hra-button-variant-secondary.hra-cta-button {\n      --mdc-text-button-container-shape: var(--mat-sys-corner-none);\n    }\n\n    &.hra-button-variant-secondary:not(.hra-cta-button) {\n      --mdc-text-button-label-text-color: var(--mat-sys-secondary);\n      --mat-text-button-state-layer-color: var(--mat-sys-secondary);\n    }\n\n    &.hra-button-size-small {\n      @include utils.use-font(label, small);\n\n      --mdc-text-button-container-height: 1.75rem;\n      --mat-text-button-horizontal-padding: 0.5rem;\n    }\n  }\n\n  :is(button, a).mdc-button[mat-flat-button] {\n    --mdc-filled-button-label-text-color: var(--mat-sys-on-primary);\n    --mat-filled-button-state-layer-color: var(--mat-sys-on-primary);\n    --mdc-filled-button-container-color: var(--mat-sys-tertiary);\n    --mdc-filled-button-disabled-label-text-color: #{utils.with-alpha(var(--mat-sys-secondary), 38%)};\n    --mdc-filled-button-disabled-container-color: #{utils.with-alpha(var(--mat-sys-outline-variant), 38%)};\n    --mat-filled-button-ripple-color: #{utils.with-alpha(var(--mat-sys-secondary), 12%)};\n\n    --mdc-filled-button-container-height: 2.5rem;\n    --mdc-filled-button-container-shape: var(--mat-sys-corner-extra-small);\n    --mat-filled-button-horizontal-padding: 1rem;\n    --mat-filled-button-hover-state-layer-opacity: 0;\n    --mat-filled-button-icon-offset: 0;\n\n    &:hover:not(:active) {\n      box-shadow: 0.0625rem 0.125rem 1rem 0rem utils.with-alpha(var(--mat-sys-tertiary), 56%);\n    }\n\n    &:focus-visible {\n      --mdc-filled-button-label-text-color: var(--mat-sys-secondary);\n      --mdc-filled-button-container-color: transparent;\n      --mat-filled-button-focus-state-layer-opacity: 0;\n      @include utils.inset-outline(var(--mat-sys-tertiary));\n    }\n  }\n\n  :is(button, a).mdc-button.hra-cta-button:not(.hra-button-variant-secondary) {\n    $corner-width: 0.9375rem;\n    $corner-height: 0.8125rem;\n    $border-width: 0.15rem;\n    $x-multiplier: 0.373;\n    $y-multiplier: 0.4566;\n    /* Order of path: bottom left -> top left -> top right -> bottom right y-axis -> bottom right x-axis */\n    $background-clip-path: polygon(\n      0 100%,\n      0 0,\n      100% 0%,\n      100% calc(100% - #{$corner-height}),\n      calc(100% - #{$corner-width}) 100%\n    );\n    $overlay-clip-path: polygon(\n      $border-width calc(100% - $border-width),\n      $border-width $border-width,\n      calc(100% - $border-width) $border-width,\n      calc(100% - $border-width) calc(100% - $corner-height - $border-width * $y-multiplier),\n      calc(100% - $corner-width - $border-width * $x-multiplier) calc(100% - $border-width)\n    );\n\n    --mdc-text-button-label-text-color: var(--mat-sys-on-primary);\n    --mat-text-button-state-layer-color: var(--mat-sys-on-primary);\n    --mdc-text-button-disabled-label-text-color: #{utils.with-alpha(var(--mat-sys-secondary), 38%)};\n    --mat-text-button-ripple-color: #{utils.with-alpha(var(--mat-sys-secondary), 12%)};\n\n    --mdc-text-button-container-shape: var(--mat-sys-corner-none);\n    --mat-text-button-hover-state-layer-opacity: 0;\n\n    background-color: var(--mat-sys-tertiary);\n    clip-path: $background-clip-path;\n\n    &:disabled {\n      background-color: utils.with-alpha(var(--mat-sys-outline-variant), 38%);\n    }\n\n    &:hover:not(:active) {\n      background-color: transparent;\n      clip-path: unset;\n      box-shadow: unset;\n      filter: drop-shadow(0.0625rem 0.125rem 1rem utils.with-alpha(var(--mat-sys-tertiary), 56%));\n\n      &:before {\n        content: '';\n        position: absolute;\n        z-index: -1;\n        inset: 0;\n        background: var(--mat-sys-tertiary);\n        clip-path: $background-clip-path;\n      }\n    }\n\n    &:focus-visible {\n      --mdc-text-button-label-text-color: var(--mat-sys-secondary);\n      outline: unset;\n\n      &::after {\n        content: '';\n        position: absolute;\n        background-color: var(--mat-sys-on-primary);\n        inset: 0;\n        z-index: -1;\n        clip-path: $overlay-clip-path;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./global-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ButtonToggleGlobalStylesComponent",
            "id": "component-ButtonToggleGlobalStylesComponent-b0821542a8e70e9edf17b59296abf8367d76258f3c76fffa6e6159de5cca80922c47779b6a6fbd92bb9dc1b44f0cc180bda9f64eeb8c751b65a14363f7625a82",
            "file": "buttons/button-toggle/src/lib/global-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-button-toggle-global-styles",
            "styleUrls": [
                "./global-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Global styles for button toggles</p>\n",
            "rawdescription": "\nGlobal styles for button toggles",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/** Global styles for button toggles */\n@Component({\n  selector: 'hra-button-toggle-global-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./global-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonToggleGlobalStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  mat-button-toggle-group {\n    --mat-standard-button-toggle-height: var(--mat-standard-button-toggle-label-text-line-height);\n    --mat-standard-button-toggle-shape: var(--mat-sys-corner-extra-small);\n    --mat-standard-button-toggle-divider-color: var(--mat-sys-primary);\n\n    --mat-standard-button-toggle-selected-state-text-color: var(--mat-sys-secondary);\n    --mat-standard-button-toggle-selected-state-background-color: #{utils.with-alpha(var(--mat-sys-tertiary), 20%)};\n\n    &.hra-button-toggle-size-small {\n      --mat-standard-button-toggle-label-text-font: var(--mat-sys-label-small-font);\n      --mat-standard-button-toggle-label-text-size: var(--mat-sys-label-small-size);\n      --mat-standard-button-toggle-label-text-line-height: var(--mat-sys-label-small-line-height);\n      --mat-standard-button-toggle-label-text-weight: var(--mat-sys-label-small-weight);\n      --mat-standard-button-toggle-label-text-tracking: var(--mat-sys-label-small-tracking);\n\n      .mat-button-toggle-label-content {\n        padding: 0.3125rem 0.5rem;\n      }\n    }\n\n    &.hra-button-toggle-size-medium {\n      --mat-standard-button-toggle-label-text-font: var(--mat-sys-label-medium-font);\n      --mat-standard-button-toggle-label-text-size: var(--mat-sys-label-medium-size);\n      --mat-standard-button-toggle-label-text-line-height: var(--mat-sys-label-medium-line-height);\n      --mat-standard-button-toggle-label-text-weight: var(--mat-sys-label-medium-weight);\n      --mat-standard-button-toggle-label-text-tracking: var(--mat-sys-label-medium-tracking);\n\n      .mat-button-toggle-label-content {\n        padding: 0.3438rem 0.5rem;\n      }\n    }\n\n    &,\n    &.hra-button-toggle-size-large {\n      --mat-standard-button-toggle-label-text-font: var(--mat-sys-label-large-font);\n      --mat-standard-button-toggle-label-text-size: var(--mat-sys-label-large-size);\n      --mat-standard-button-toggle-label-text-line-height: var(--mat-sys-label-large-line-height);\n      --mat-standard-button-toggle-label-text-weight: var(--mat-sys-label-large-weight);\n      --mat-standard-button-toggle-label-text-tracking: var(--mat-sys-label-large-tracking);\n\n      .mat-button-toggle-label-content {\n        padding: 0.5rem 1rem;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./global-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CheckboxStylesComponent",
            "id": "component-CheckboxStylesComponent-02d70ee5a000854e525275f68c518e7ee808756f6cc722803b782f17b72afc3f0193651e2e5b3f2ef62684af3f67bc5e42d6f2a56715c04d8f9654223e0ae166",
            "file": "checkbox/src/lib/checkbox-styles/checkbox-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-checkbox-styles",
            "styleUrls": [
                "./checkbox-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies checkbox styles globally</p>\n",
            "rawdescription": "\n\nApplies checkbox styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies checkbox styles globally\n */\n@Component({\n  selector: 'hra-checkbox-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./checkbox-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckboxStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  mat-checkbox {\n    --mdc-checkbox-unselected-icon-color: var(--mat-sys-primary);\n    --mdc-checkbox-unselected-hover-icon-color: var(--mat-sys-secondary);\n    --mdc-checkbox-unselected-focus-icon-color: var(--mat-sys-secondary);\n\n    --mdc-checkbox-selected-icon-color: var(--mat-sys-on-tertiary-fixed);\n    --mdc-checkbox-selected-hover-icon-color: var(--mat-sys-on-tertiary-fixed);\n    --mdc-checkbox-selected-focus-icon-color: var(--mat-sys-on-tertiary-fixed);\n\n    --mdc-checkbox-unselected-hover-state-layer-color: var(--mat-sys-secondary);\n    --mdc-checkbox-unselected-focus-state-layer-color: var(--mat-sys-secondary);\n    --mdc-checkbox-unselected-pressed-state-layer-color: var(--mat-sys-secondary);\n\n    --mdc-checkbox-selected-hover-state-layer-color: var(--mat-sys-on-tertiary-fixed);\n    --mdc-checkbox-selected-focus-state-layer-color: var(--mat-sys-on-tertiary-fixed);\n    --mdc-checkbox-selected-pressed-state-layer-color: var(--mat-sys-on-tertiary-fixed);\n\n    &.hra-checkbox-error-variant {\n      --mdc-checkbox-unselected-icon-color: var(--mat-sys-error);\n      --mdc-checkbox-unselected-hover-icon-color: var(--mat-sys-error);\n      --mdc-checkbox-unselected-focus-icon-color: var(--mat-sys-error);\n\n      --mdc-checkbox-selected-icon-color: var(--mat-sys-error);\n      --mdc-checkbox-selected-hover-icon-color: var(--mat-sys-error);\n      --mdc-checkbox-selected-focus-icon-color: var(--mat-sys-error);\n\n      --mdc-checkbox-unselected-hover-state-layer-color: var(--mat-sys-error);\n      --mdc-checkbox-unselected-focus-state-layer-color: var(--mat-sys-error);\n      --mdc-checkbox-unselected-pressed-state-layer-color: var(--mat-sys-error);\n\n      --mdc-checkbox-selected-hover-state-layer-color: var(--mat-sys-error);\n      --mdc-checkbox-selected-focus-state-layer-color: var(--mat-sys-error);\n      --mdc-checkbox-selected-pressed-state-layer-color: var(--mat-sys-error);\n    }\n  }\n}\n",
                    "styleUrl": "./checkbox-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ColorPickerComponent",
            "id": "component-ColorPickerComponent-93ddee140f4551fc1b76cf374856d66eb6d324d630131470a73c0022851f856def64425f017251da31acbd4358f2f3ab3b514cef269b658c7f54a879a386de35",
            "file": "color-picker/src/lib/color-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-color-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The RGB color value</p>\n",
                    "line": 16,
                    "rawdescription": "\nThe RGB color value",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The RGB color value</p>\n",
                    "line": 16,
                    "rawdescription": "\nThe RGB color value",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "colorPickerOpen",
                    "defaultValue": "output<ColorPickerDirective | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Emits when the color picker is opened or closed</p>\n",
                    "line": 19,
                    "rawdescription": "\nEmits when the color picker is opened or closed",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "hexColor",
                    "defaultValue": "signal('#000000')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Hex representation of the color</p>\n",
                    "line": 22,
                    "rawdescription": "\nHex representation of the color",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "selectColor",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect a new color from the color picker",
                    "description": "<p>Select a new color from the color picker</p>\n",
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ColorPickerModule",
                    "type": "module"
                }
            ],
            "description": "<p>Color Picker Component</p>\n",
            "rawdescription": "\nColor Picker Component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, model, output, signal } from '@angular/core';\nimport { colorEquals, hexToRgb, Rgb } from './color-utils';\nimport { ColorPickerDirective, ColorPickerModule } from 'ngx-color-picker';\n\n/** Color Picker Component */\n@Component({\n  selector: 'hra-color-picker',\n  imports: [CommonModule, ColorPickerModule],\n  templateUrl: './color-picker.component.html',\n  styleUrl: './color-picker.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ColorPickerComponent {\n  /** The RGB color value */\n  readonly color = model.required<Rgb>();\n\n  /** Emits when the color picker is opened or closed */\n  readonly colorPickerOpen = output<ColorPickerDirective | null>();\n\n  /** Hex representation of the color */\n  readonly hexColor = signal('#000000');\n\n  /** Select a new color from the color picker */\n  selectColor(hex: string): void {\n    const rgb = hexToRgb(hex);\n    if (!colorEquals(this.color(), rgb)) {\n      this.color.set(rgb);\n    }\n  }\n}\n",
            "styleUrl": "./color-picker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span\n  class=\"color-pick\"\n  [style.background]=\"hexColor()\"\n  [colorPicker]=\"hexColor()\"\n  cpWidth=\"252px\"\n  cpOutputFormat=\"hex\"\n  cpPositionOffset=\"-17%\"\n  [cpOKButton]=\"true\"\n  cpOKButtonClass=\"accept-button\"\n  cpOKButtonText=\"Accept\"\n  [cpCancelButton]=\"true\"\n  cpCancelButtonClass=\"cancel-button\"\n  cpAlphaChannel=\"always\"\n  [cpUseRootViewContainer]=\"true\"\n  (colorPickerOpen)=\"colorPickerOpen.emit(colorPicker)\"\n  (colorPickerClose)=\"colorPickerOpen.emit(null)\"\n  (colorPickerChange)=\"this.hexColor.set($event)\"\n  (colorPickerSelect)=\"selectColor($event)\"\n  data-testid=\"color-picker-button\"\n  #colorPicker=\"ngxColorPicker\"\n></span>\n"
        },
        {
            "name": "CtaBarComponent",
            "id": "component-CtaBarComponent-e27192fdd545c9d29c91c8da86dcddd01fc247e8f009cc7d7397be23fd90d1d9d139325e7c4bdf3ad5912a48d624145a38db93b80214eb54dbbb4bdcfc45d727",
            "file": "navigation/cta-bar/src/lib/cta-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-cta-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cta-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Action button text</p>\n",
                    "line": 16,
                    "rawdescription": "\nAction button text",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Action description</p>\n",
                    "line": 18,
                    "rawdescription": "\nAction description",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Url to visit when action button is clicked</p>\n",
                    "line": 20,
                    "rawdescription": "\nUrl to visit when action button is clicked",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "closeClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Emits when the close button is clicked</p>\n",
                    "line": 22,
                    "rawdescription": "\nEmits when the close button is clicked",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Action button text</p>\n",
                    "line": 16,
                    "rawdescription": "\nAction button text",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "closeClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Emits when the close button is clicked</p>\n",
                    "line": 22,
                    "rawdescription": "\nEmits when the close button is clicked",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Action description</p>\n",
                    "line": 18,
                    "rawdescription": "\nAction description",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Url to visit when action button is clicked</p>\n",
                    "line": 20,
                    "rawdescription": "\nUrl to visit when action button is clicked",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                }
            ],
            "description": "<p>A call to action bar that can be displayed at top of the page</p>\n",
            "rawdescription": "\nA call to action bar that can be displayed at top of the page",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\n\n/** A call to action bar that can be displayed at top of the page */\n@Component({\n  selector: 'hra-cta-bar',\n  imports: [CommonModule, MatIconModule, ButtonsModule],\n  templateUrl: './cta-bar.component.html',\n  styleUrl: './cta-bar.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CtaBarComponent {\n  /** Action button text */\n  readonly action = input.required<string>();\n  /** Action description */\n  readonly description = input.required<string>();\n  /** Url to visit when action button is clicked */\n  readonly url = input.required<string>();\n  /** Emits when the close button is clicked */\n  readonly closeClick = output();\n}\n",
            "styleUrl": "./cta-bar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"content\">\n  <span class=\"description\">{{ description() }}</span>\n  <a hraHyperlink class=\"action\" [attr.href]=\"url()\" target=\"_blank\" rel=\"noopener noreferrer\">\n    {{ action() }}\n    <mat-icon>arrow_forwards</mat-icon>\n  </a>\n</div>\n\n<button mat-icon-button class=\"close\" aria-label=\"Hide the call to action bar\" (click)=\"closeClick.emit()\">\n  <mat-icon>close</mat-icon>\n</button>\n"
        },
        {
            "name": "DeleteFileButtonComponent",
            "id": "component-DeleteFileButtonComponent-1e95a146fd9a0a3c9a2e0e04bcd305a4a088679166a6b9c429f67bfbfe3ad95275b64d42de199a897cb2aae78ce7b091bdb92560585287405fa5384c77ae51ff",
            "file": "buttons/delete-file-button/src/lib/delete-file-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-delete-file-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./delete-file-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>File name</p>\n",
                    "line": 19,
                    "rawdescription": "\nFile name",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelLoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Cancels load</p>\n",
                    "line": 22,
                    "rawdescription": "\nCancels load",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "cancelLoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Cancels load</p>\n",
                    "line": 22,
                    "rawdescription": "\nCancels load",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>File name</p>\n",
                    "line": 19,
                    "rawdescription": "\nFile name",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Button to give users an option to delete their file if they upload the wrong file</p>\n",
            "rawdescription": "\n\nButton to give users an option to delete their file if they upload the wrong file\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/**\n * Button to give users an option to delete their file if they upload the wrong file\n */\n@Component({\n  selector: 'hra-delete-file-button',\n  imports: [CommonModule, MatButtonModule, MatIconModule, IconButtonSizeDirective],\n  templateUrl: './delete-file-button.component.html',\n  styleUrl: './delete-file-button.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeleteFileButtonComponent {\n  /** File name */\n  readonly fileName = input.required<string>();\n\n  /** Cancels load */\n  readonly cancelLoad = output<void>();\n}\n",
            "styleUrl": "./delete-file-button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span class=\"file-name\">{{ fileName() }}</span>\n<button mat-icon-button hraIconButtonSize=\"large\" aria-label=\"Delete file\" (click)=\"cancelLoad.emit()\">\n  <mat-icon>delete</mat-icon>\n</button>\n"
        },
        {
            "name": "DeprecatedWorkflowCardComponent",
            "id": "component-DeprecatedWorkflowCardComponent-3a129d3e50cc5058946b0e23e26fe5022e6dd03a346cf036563d1768fde089e7e124d5b2c095be1a3103b354d7d4b4fe08c951160213f317b16c269034d55a0b",
            "file": "workflow-card/src/lib/deprecated/workflow-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-workflow-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./workflow-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allowUpload",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the card allows uploading of files</p>\n",
                    "line": 21,
                    "rawdescription": "\nWhether the card allows uploading of files",
                    "required": false
                },
                {
                    "name": "loadProgress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current data load progress</p>\n",
                    "line": 18,
                    "rawdescription": "\nCurrent data load progress",
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allowUpload",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the card allows uploading of files</p>\n",
                    "line": 21,
                    "rawdescription": "\nWhether the card allows uploading of files",
                    "required": false
                },
                {
                    "name": "loadProgress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current data load progress</p>\n",
                    "line": 18,
                    "rawdescription": "\nCurrent data load progress",
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": true,
            "deprecationMessage": "Use [WorkflowCardComponent](../workflow-card.component.ts) instead",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component that appears when users are completing a workflow process</p>\n",
            "rawdescription": "\n\nComponent that appears when users are completing a workflow process\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\n\n/**\n * Component that appears when users are completing a workflow process\n * @deprecated Use [WorkflowCardComponent](../workflow-card.component.ts) instead\n */\n@Component({\n  selector: 'hra-workflow-card',\n  imports: [CommonModule, MatProgressBarModule],\n  templateUrl: './workflow-card.component.html',\n  styleUrl: './workflow-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeprecatedWorkflowCardComponent {\n  /** Current data load progress */\n  loadProgress = input<number>(0);\n\n  /** Whether the card allows uploading of files */\n  allowUpload = input<boolean>(false);\n}\n",
            "styleUrl": "./workflow-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"content\" [class.allow-upload]=\"allowUpload()\">\n  <ng-content></ng-content>\n</div>\n@if (allowUpload()) {\n  <mat-progress-bar\n    mode=\"determinate\"\n    [class.ready]=\"loadProgress() === 0\"\n    [class.fully-loaded]=\"loadProgress() === 1\"\n    [value]=\"loadProgress() * 100\"\n  ></mat-progress-bar>\n}\n"
        },
        {
            "name": "DesktopMenuComponent",
            "id": "component-DesktopMenuComponent-e81d0652fb3ad1d8fba133d5930f5c6056e04c02787ac9eb972065749b6391f4a54ff0bccdb7504b70999b27aae039f5e52befb6764cfa3c82c987c807fc0ef7",
            "file": "navigation/header/src/lib/desktop-menu/desktop-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-desktop-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./desktop-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "defaultValue": "input.required<Menu | HubmapMenuGroup[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Menu to display</p>\n",
                    "line": 21,
                    "rawdescription": "\nMenu to display",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "typedMenu",
                    "defaultValue": "computed(() => {\n    const menu = this.menu();\n    return Array.isArray(menu) ? { type: 'hubmap' as const, menu } : { type: 'menu' as const, menu };\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Menu object along with whether it is a hubmap or regular menu type</p>\n",
                    "line": 24,
                    "rawdescription": "\nMenu object along with whether it is a hubmap or regular menu type",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                },
                {
                    "name": "HubmapMenuContentComponent",
                    "type": "component"
                },
                {
                    "name": "MenuContentComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Display a menu for desktop sized screens</p>\n",
            "rawdescription": "\n\nDisplay a menu for desktop sized screens\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { ScrollingModule } from '@hra-ui/design-system/scrolling';\nimport { HubmapMenuContentComponent } from '../hubmap-menu-content/hubmap-menu-content.component';\nimport { MenuContentComponent } from '../menu-content/menu-content.component';\nimport { HubmapMenuGroup } from '../types/hubmap-menu.schema';\nimport { Menu } from '../types/menus.schema';\n\n/**\n * Display a menu for desktop sized screens\n */\n@Component({\n  selector: 'hra-desktop-menu',\n  imports: [CommonModule, ScrollingModule, HubmapMenuContentComponent, MenuContentComponent],\n  templateUrl: './desktop-menu.component.html',\n  styleUrl: './desktop-menu.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DesktopMenuComponent {\n  /** Menu to display */\n  readonly menu = input.required<Menu | HubmapMenuGroup[]>();\n\n  /** Menu object along with whether it is a hubmap or regular menu type */\n  protected typedMenu = computed(() => {\n    const menu = this.menu();\n    return Array.isArray(menu) ? { type: 'hubmap' as const, menu } : { type: 'menu' as const, menu };\n  });\n}\n",
            "styleUrl": "./desktop-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-scrollbar>\n  @let typed = typedMenu();\n  @if (typed.type === 'menu') {\n    <hra-menu-content variant=\"desktop\" [menu]=\"typed.menu\"></hra-menu-content>\n  } @else {\n    <hra-hubmap-menu-content [menu]=\"typed.menu\"></hra-hubmap-menu-content>\n  }\n</ng-scrollbar>\n"
        },
        {
            "name": "ErrorIndicatorComponent",
            "id": "component-ErrorIndicatorComponent-80f720ec959c5fb7f8dd65d625b60c005097e2276086fe7da9fbd399ab05195ae8782d10250b2c17310200293f7096cf7134c496c4a4ed91ac703633de9ac534",
            "file": "error-indicator/src/lib/error-indicator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-error-indicator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./error-indicator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "defaultValue": "input<string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of errors to be shown in the indicator</p>\n",
                    "line": 15,
                    "rawdescription": "\nList of errors to be shown in the indicator",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "<p>Error Indicator component</p>\n",
            "rawdescription": "\nError Indicator component",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\n/** Error Indicator component */\n@Component({\n  selector: 'hra-error-indicator',\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './error-indicator.component.html',\n  styleUrl: './error-indicator.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ErrorIndicatorComponent {\n  /** List of errors to be shown in the indicator */\n  readonly errors = input<string[]>();\n}\n",
            "styleUrl": "./error-indicator.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-icon>error</mat-icon>\n<div class=\"errors\">\n  @for (error of errors(); track error) {\n    <div class=\"error\">{{ error }}</div>\n  }\n</div>\n"
        },
        {
            "name": "ExpansionPanelActionsComponent",
            "id": "component-ExpansionPanelActionsComponent-bf4a38562564fd2cc9169c7f172cfaa48f8e7f615217f8556fb2eb116f31d49f3dc77613a38ed54deb154b2438fb498abe555eb0a70b445c1e5b00338b08c6c0",
            "file": "expansion-panel/src/lib/expansion-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-expansion-panel-actions",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Expansion panel actions component</p>\n",
            "rawdescription": "\nExpansion panel actions component",
            "type": "component",
            "sourceCode": "import { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\nimport {\n  ANIMATION_MODULE_TYPE,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  ElementRef,\n  inject,\n  input,\n  Renderer2,\n  viewChild,\n} from '@angular/core';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BODY_EXPANSION } from './expansion-panel-animations';\nimport { MicroTooltipDirective } from '@hra-ui/design-system/micro-tooltip';\n\n/** Counter to keep track of distinct panels */\nlet idCounter = 0;\n\n/** Expansion panel actions component */\n@Component({\n  selector: 'hra-expansion-panel-actions',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelActionsComponent {}\n\n/** Expansion panel header content component */\n@Component({\n  selector: 'hra-expansion-panel-header-content',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelHeaderContentComponent {}\n\n/** Expansion panel component */\n@Component({\n  selector: 'hra-expansion-panel',\n  imports: [CdkAccordionModule, MatIconButton, MatIconModule, MicroTooltipDirective],\n  animations: [BODY_EXPANSION],\n  templateUrl: './expansion-panel.component.html',\n  styleUrl: './expansion-panel.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelComponent {\n  /** Title of the expansion panel */\n  readonly tagline = input.required<string>();\n\n  /** Flag to check if the body is expanded */\n  readonly expanded = input(true, { transform: booleanAttribute });\n\n  /** Flag to denote panel as disabled */\n  readonly disabled = input(false, { transform: booleanAttribute });\n\n  /** Tooltip for header title */\n  readonly tooltip = input<string>();\n\n  /** Increments the counter on every declaration */\n  protected readonly id = idCounter++;\n\n  /** Id attribute for title based on current id counter */\n  protected readonly taglineId = `expansion-panel-tagline-${this.id}`;\n\n  /** Id attribute for body based on current id counter */\n  protected readonly bodyId = `expansion-panel-body-${this.id}`;\n\n  /** Instance of renderer */\n  private readonly renderer = inject(Renderer2);\n\n  /** Instance of body element */\n  private readonly bodyElementRef = viewChild.required<ElementRef<HTMLElement>>('body');\n\n  /** Actual body element */\n  private readonly body = computed(() => this.bodyElementRef().nativeElement);\n\n  /** Disable animations based on module type */\n  private readonly animationsDisabled = inject(ANIMATION_MODULE_TYPE) === 'NoopAnimations';\n\n  /** Sets attribute based on event state */\n  protected animationStart(event: AnimationEvent): void {\n    if (event.fromState !== 'void' && !this.animationsDisabled) {\n      this.renderer.setAttribute(this.body(), 'inert', '');\n    }\n  }\n\n  /** Removes attribute based on event state */\n  protected animationDone(event: AnimationEvent): void {\n    if (event.fromState !== 'void' && !this.animationsDisabled) {\n      this.renderer.removeAttribute(this.body(), 'inert');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ExpansionPanelComponent",
            "id": "component-ExpansionPanelComponent-bf4a38562564fd2cc9169c7f172cfaa48f8e7f615217f8556fb2eb116f31d49f3dc77613a38ed54deb154b2438fb498abe555eb0a70b445c1e5b00338b08c6c0",
            "file": "expansion-panel/src/lib/expansion-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-expansion-panel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./expansion-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of the expansion panel</p>\n",
                    "line": 52,
                    "rawdescription": "\nTitle of the expansion panel",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Tooltip for header title</p>\n",
                    "line": 61,
                    "rawdescription": "\nTooltip for header title",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyId",
                    "defaultValue": "`expansion-panel-body-${this.id}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Id attribute for body based on current id counter</p>\n",
                    "line": 70,
                    "rawdescription": "\nId attribute for body based on current id counter",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Flag to denote panel as disabled</p>\n",
                    "line": 58,
                    "rawdescription": "\nFlag to denote panel as disabled",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "expanded",
                    "defaultValue": "input(true, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Flag to check if the body is expanded</p>\n",
                    "line": 55,
                    "rawdescription": "\nFlag to check if the body is expanded",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "idCounter++",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Increments the counter on every declaration</p>\n",
                    "line": 64,
                    "rawdescription": "\nIncrements the counter on every declaration",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of the expansion panel</p>\n",
                    "line": 52,
                    "rawdescription": "\nTitle of the expansion panel",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "taglineId",
                    "defaultValue": "`expansion-panel-tagline-${this.id}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Id attribute for title based on current id counter</p>\n",
                    "line": 67,
                    "rawdescription": "\nId attribute for title based on current id counter",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Tooltip for header title</p>\n",
                    "line": 61,
                    "rawdescription": "\nTooltip for header title",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "methodsClass": [
                {
                    "name": "animationDone",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemoves attribute based on event state",
                    "description": "<p>Removes attribute based on event state</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "animationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSets attribute based on event state",
                    "description": "<p>Sets attribute based on event state</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CdkAccordionModule",
                    "type": "module"
                },
                {
                    "name": "MatIconButton"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MicroTooltipDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Expansion panel component</p>\n",
            "rawdescription": "\nExpansion panel component",
            "type": "component",
            "sourceCode": "import { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\nimport {\n  ANIMATION_MODULE_TYPE,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  ElementRef,\n  inject,\n  input,\n  Renderer2,\n  viewChild,\n} from '@angular/core';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BODY_EXPANSION } from './expansion-panel-animations';\nimport { MicroTooltipDirective } from '@hra-ui/design-system/micro-tooltip';\n\n/** Counter to keep track of distinct panels */\nlet idCounter = 0;\n\n/** Expansion panel actions component */\n@Component({\n  selector: 'hra-expansion-panel-actions',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelActionsComponent {}\n\n/** Expansion panel header content component */\n@Component({\n  selector: 'hra-expansion-panel-header-content',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelHeaderContentComponent {}\n\n/** Expansion panel component */\n@Component({\n  selector: 'hra-expansion-panel',\n  imports: [CdkAccordionModule, MatIconButton, MatIconModule, MicroTooltipDirective],\n  animations: [BODY_EXPANSION],\n  templateUrl: './expansion-panel.component.html',\n  styleUrl: './expansion-panel.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelComponent {\n  /** Title of the expansion panel */\n  readonly tagline = input.required<string>();\n\n  /** Flag to check if the body is expanded */\n  readonly expanded = input(true, { transform: booleanAttribute });\n\n  /** Flag to denote panel as disabled */\n  readonly disabled = input(false, { transform: booleanAttribute });\n\n  /** Tooltip for header title */\n  readonly tooltip = input<string>();\n\n  /** Increments the counter on every declaration */\n  protected readonly id = idCounter++;\n\n  /** Id attribute for title based on current id counter */\n  protected readonly taglineId = `expansion-panel-tagline-${this.id}`;\n\n  /** Id attribute for body based on current id counter */\n  protected readonly bodyId = `expansion-panel-body-${this.id}`;\n\n  /** Instance of renderer */\n  private readonly renderer = inject(Renderer2);\n\n  /** Instance of body element */\n  private readonly bodyElementRef = viewChild.required<ElementRef<HTMLElement>>('body');\n\n  /** Actual body element */\n  private readonly body = computed(() => this.bodyElementRef().nativeElement);\n\n  /** Disable animations based on module type */\n  private readonly animationsDisabled = inject(ANIMATION_MODULE_TYPE) === 'NoopAnimations';\n\n  /** Sets attribute based on event state */\n  protected animationStart(event: AnimationEvent): void {\n    if (event.fromState !== 'void' && !this.animationsDisabled) {\n      this.renderer.setAttribute(this.body(), 'inert', '');\n    }\n  }\n\n  /** Removes attribute based on event state */\n  protected animationDone(event: AnimationEvent): void {\n    if (event.fromState !== 'void' && !this.animationsDisabled) {\n      this.renderer.removeAttribute(this.body(), 'inert');\n    }\n  }\n}\n",
            "styleUrl": "./expansion-panel.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<cdk-accordion>\n  <cdk-accordion-item\n    #accordionItem=\"cdkAccordionItem\"\n    tabindex=\"0\"\n    [attr.aria-expanded]=\"accordionItem.expanded\"\n    [attr.aria-controls]=\"bodyId\"\n    [expanded]=\"expanded\"\n  >\n    <div class=\"header\">\n      @if (!disabled()) {\n        <button mat-icon-button data-testid=\"toggle\" (click)=\"accordionItem.toggle()\">\n          <mat-icon [hraMicroTooltip]=\"accordionItem.expanded ? 'Collapse' : 'Expand'\">\n            {{ accordionItem.expanded ? 'remove' : 'add' }}\n          </mat-icon>\n        </button>\n      }\n\n      <span class=\"title\" [attr.id]=\"taglineId\" [hraMicroTooltip]=\"tooltip()\">\n        {{ tagline() }}\n      </span>\n\n      <span>\n        <ng-content select=\"hra-expansion-panel-actions\"> </ng-content>\n      </span>\n      <div class=\"filler\"></div>\n      <span>\n        <ng-content select=\"hra-expansion-panel-header-content\"></ng-content>\n      </span>\n    </div>\n    <div\n      role=\"region\"\n      class=\"content\"\n      [attr.id]=\"bodyId\"\n      [attr.aria-labelledby]=\"taglineId\"\n      #body\n      [@bodyExpansion]=\"accordionItem.expanded ? 'expanded' : 'collapsed'\"\n      (@bodyExpansion.start)=\"animationStart($event)\"\n      (@bodyExpansion.done)=\"animationDone($event)\"\n      data-testid=\"body\"\n    >\n      <div class=\"expansion-body\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </cdk-accordion-item>\n</cdk-accordion>\n"
        },
        {
            "name": "ExpansionPanelHeaderContentComponent",
            "id": "component-ExpansionPanelHeaderContentComponent-bf4a38562564fd2cc9169c7f172cfaa48f8e7f615217f8556fb2eb116f31d49f3dc77613a38ed54deb154b2438fb498abe555eb0a70b445c1e5b00338b08c6c0",
            "file": "expansion-panel/src/lib/expansion-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-expansion-panel-header-content",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Expansion panel header content component</p>\n",
            "rawdescription": "\nExpansion panel header content component",
            "type": "component",
            "sourceCode": "import { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\nimport {\n  ANIMATION_MODULE_TYPE,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  ElementRef,\n  inject,\n  input,\n  Renderer2,\n  viewChild,\n} from '@angular/core';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BODY_EXPANSION } from './expansion-panel-animations';\nimport { MicroTooltipDirective } from '@hra-ui/design-system/micro-tooltip';\n\n/** Counter to keep track of distinct panels */\nlet idCounter = 0;\n\n/** Expansion panel actions component */\n@Component({\n  selector: 'hra-expansion-panel-actions',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelActionsComponent {}\n\n/** Expansion panel header content component */\n@Component({\n  selector: 'hra-expansion-panel-header-content',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelHeaderContentComponent {}\n\n/** Expansion panel component */\n@Component({\n  selector: 'hra-expansion-panel',\n  imports: [CdkAccordionModule, MatIconButton, MatIconModule, MicroTooltipDirective],\n  animations: [BODY_EXPANSION],\n  templateUrl: './expansion-panel.component.html',\n  styleUrl: './expansion-panel.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExpansionPanelComponent {\n  /** Title of the expansion panel */\n  readonly tagline = input.required<string>();\n\n  /** Flag to check if the body is expanded */\n  readonly expanded = input(true, { transform: booleanAttribute });\n\n  /** Flag to denote panel as disabled */\n  readonly disabled = input(false, { transform: booleanAttribute });\n\n  /** Tooltip for header title */\n  readonly tooltip = input<string>();\n\n  /** Increments the counter on every declaration */\n  protected readonly id = idCounter++;\n\n  /** Id attribute for title based on current id counter */\n  protected readonly taglineId = `expansion-panel-tagline-${this.id}`;\n\n  /** Id attribute for body based on current id counter */\n  protected readonly bodyId = `expansion-panel-body-${this.id}`;\n\n  /** Instance of renderer */\n  private readonly renderer = inject(Renderer2);\n\n  /** Instance of body element */\n  private readonly bodyElementRef = viewChild.required<ElementRef<HTMLElement>>('body');\n\n  /** Actual body element */\n  private readonly body = computed(() => this.bodyElementRef().nativeElement);\n\n  /** Disable animations based on module type */\n  private readonly animationsDisabled = inject(ANIMATION_MODULE_TYPE) === 'NoopAnimations';\n\n  /** Sets attribute based on event state */\n  protected animationStart(event: AnimationEvent): void {\n    if (event.fromState !== 'void' && !this.animationsDisabled) {\n      this.renderer.setAttribute(this.body(), 'inert', '');\n    }\n  }\n\n  /** Removes attribute based on event state */\n  protected animationDone(event: AnimationEvent): void {\n    if (event.fromState !== 'void' && !this.animationsDisabled) {\n      this.renderer.removeAttribute(this.body(), 'inert');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-7b9cc604e575efeae1b8d15e7d7d9069e00aee54109600298551a8f531e9a938e4c3cbf5d77d84e9b661a2a48f0349bbc7a9dd4d5b072f3ade79c37cb68226f1",
            "file": "navigation/footer/src/lib/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "funders",
                    "defaultValue": "FUNDER_IDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of funders to show</p>\n",
                    "line": 22,
                    "rawdescription": "\nList of funders to show",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "socials",
                    "defaultValue": "SOCIAL_IDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of social media link to show</p>\n",
                    "line": 24,
                    "rawdescription": "\nList of social media link to show",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "funders",
                    "defaultValue": "FUNDER_IDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of funders to show</p>\n",
                    "line": 22,
                    "rawdescription": "\nList of funders to show",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "socials",
                    "defaultValue": "SOCIAL_IDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of social media link to show</p>\n",
                    "line": 24,
                    "rawdescription": "\nList of social media link to show",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "BrandModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "FundingComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Global footer component</p>\n",
            "rawdescription": "\n\nGlobal footer component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BrandModule } from '@hra-ui/design-system/brand';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { SOCIAL_IDS } from '@hra-ui/design-system/buttons/social-media-button';\nimport { FundingComponent } from './funding/funding.component';\nimport { FUNDER_IDS } from './static-data/parsed';\n\n/**\n * Global footer component\n */\n@Component({\n  selector: 'hra-footer',\n  imports: [CommonModule, MatIconModule, BrandModule, ButtonsModule, FundingComponent],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterComponent {\n  /** List of funders to show */\n  readonly funders = input(FUNDER_IDS);\n  /** List of social media link to show */\n  readonly socials = input(SOCIAL_IDS);\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"left\">\n  <div class=\"content\">\n    <hra-brand-logo class=\"logo\"></hra-brand-logo>\n    <span class=\"copyright\">\n      <mat-icon fontSet=\"material-symbols-outlined\">copyright</mat-icon>\n      2024 CNS at Indiana University\n    </span>\n    <div class=\"socials\">\n      @for (id of socials(); track id) {\n        <hra-social-media-button [id]=\"$any(id)\" size=\"large\" variant=\"light\"></hra-social-media-button>\n      }\n    </div>\n  </div>\n</div>\n\n<div class=\"right\">\n  <div class=\"content\">\n    <hra-funding [funders]=\"funders()\"></hra-funding>\n    <p class=\"disclaimer\">\n      Medical Disclaimer: This resource is intended for research purposes only. It should not be used for emergencies or\n      medical or professional advice.\n    </p>\n    <p class=\"data-notice\">\n      HuBMAP data is managed and published in the Data Portal and HRA according to FAIR principles, including\n      standardized processing with reproducible pipelines. HuBMAP data may also be processed by other methods in\n      scientific results published by HuBMAP consortium collaborations.\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "FullscreenActionsComponent",
            "id": "component-FullscreenActionsComponent-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd",
            "file": "fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-fullscreen-actions",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      flex-direction: row;\n      align-items: center;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Fullscreen actions component</p>\n",
            "rawdescription": "\nFullscreen actions component",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  DestroyRef,\n  Directive,\n  effect,\n  inject,\n  input,\n  output,\n  TemplateRef,\n  viewChild,\n  ViewContainerRef,\n  ViewRef,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { ExpansionPanelModule } from '@hra-ui/design-system/expansion-panel';\nimport { filter, MonoTypeOperatorFunction, pipe } from 'rxjs';\n\n/** View outlet directive */\n@Directive({\n  selector: '[hraViewOutlet]',\n  standalone: true,\n})\nexport class ViewOutletDirective {\n  /** view reference input */\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: 'hraViewOutlet' });\n\n  /** Reference of the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Attaches the view */\n  constructor() {\n    effect(() => this.attach());\n  }\n\n  /** Attaches the view to the view container */\n  attach(): void {\n    const viewRef = this.viewRef();\n    if (viewRef) {\n      this.viewContainerRef.insert(viewRef);\n    }\n  }\n  /** Detaches the view from the view container */\n  detach(): void {\n    const viewRef = this.viewRef();\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\n    if (index >= 0) {\n      this.viewContainerRef.detach(index);\n    }\n  }\n}\n\n/** Fullscreen actions component */\n@Component({\n  selector: 'hra-fullscreen-actions',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      flex-direction: row;\n      align-items: center;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenActionsComponent {}\n\n/** Fullscreen portal content component */\n@Component({\n  selector: 'hra-fullscreen-portal-content',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalContentComponent {}\n\n/** Fullscreen Component */\n@Component({\n  selector: 'hra-fullscreen-portal',\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\n  templateUrl: './fullscreen-portal.component.html',\n  styleUrl: './fullscreen-portal.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalComponent {\n  /** Heading of the dialog */\n  readonly tagline = input.required<string>();\n\n  /** Classes to apply to the dialog panel in fullscreen mode */\n  readonly panelClass = input<string | string[]>();\n\n  /** Event for before the dialog is opened */\n  readonly beforeOpened = output<void>();\n  /** Event for when the dialog is opened */\n  readonly opened = output<void>();\n  /** Event for before the dialog is closed */\n  readonly beforeClosed = output<void>();\n  /** Event for when the dialog is closed */\n  readonly closed = output<void>();\n\n  /** Creates embedded view using template */\n  readonly viewRef = computed(() => {\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\n  });\n\n  /** Rootnodes of the view reference */\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\n\n  /** Reference to the mat dialog */\n  private readonly dialogService = inject(MatDialog);\n\n  /** Reference to the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Reference to the destroy ref */\n  private readonly destroyRef = inject(DestroyRef);\n\n  /** Reference to the view outlet directive */\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\n\n  /** Reference to the view content template */\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>('contentTemplate');\n\n  /** Reference to the view dialog template */\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>('dialogTemplate');\n\n  /** Reference to the mat dialog */\n  private dialogRef?: MatDialogRef<void>;\n\n  /** Destroys the view */\n  constructor() {\n    this.destroyRef.onDestroy(() => {\n      const dialogRef = this.dialogRef;\n      this.dialogRef = undefined;\n      dialogRef?.close();\n      this.viewRef().destroy();\n    });\n  }\n\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\n  open(): void {\n    if (this.dialogRef !== undefined) {\n      return;\n    }\n\n    const { dialogService, dialogTemplateRef } = this;\n    const panelClass = this.panelClass() ?? [];\n    const normalizedPanelClass = typeof panelClass === 'string' ? panelClass.split(' ') : panelClass;\n\n    this.beforeOpened.emit();\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\n      panelClass: [...normalizedPanelClass, 'fullscreen-panel'],\n    }));\n\n    dialogRef\n      .afterOpened()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.opened.emit();\n      });\n\n    dialogRef\n      .beforeClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.beforeClosed.emit();\n        this.viewOutlet().attach();\n      });\n\n    dialogRef\n      .afterClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.dialogRef = undefined;\n        this.closed.emit();\n      });\n  }\n\n  /** Closes the dialog */\n  close(): void {\n    this.dialogRef?.close();\n  }\n\n  /** Filters the dialog event based on provided dialog reference */\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\n    return pipe(\n      takeUntilDestroyed(this.destroyRef),\n      filter(() => this.dialogRef === dialogRef),\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      flex-direction: row;\n      align-items: center;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "FullscreenPortalComponent",
            "id": "component-FullscreenPortalComponent-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd",
            "file": "fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-fullscreen-portal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fullscreen-portal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Heading of the dialog</p>\n",
                    "line": 100,
                    "rawdescription": "\nHeading of the dialog",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "beforeClosed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for before the dialog is closed</p>\n",
                    "line": 110,
                    "rawdescription": "\nEvent for before the dialog is closed",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "beforeOpened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for before the dialog is opened</p>\n",
                    "line": 106,
                    "rawdescription": "\nEvent for before the dialog is opened",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for when the dialog is closed</p>\n",
                    "line": 112,
                    "rawdescription": "\nEvent for when the dialog is closed",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for when the dialog is opened</p>\n",
                    "line": 108,
                    "rawdescription": "\nEvent for when the dialog is opened",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "beforeClosed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for before the dialog is closed</p>\n",
                    "line": 110,
                    "rawdescription": "\nEvent for before the dialog is closed",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "beforeOpened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for before the dialog is opened</p>\n",
                    "line": 106,
                    "rawdescription": "\nEvent for before the dialog is opened",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for when the dialog is closed</p>\n",
                    "line": 112,
                    "rawdescription": "\nEvent for when the dialog is closed",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "opened",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Event for when the dialog is opened</p>\n",
                    "line": 108,
                    "rawdescription": "\nEvent for when the dialog is opened",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "panelClass",
                    "defaultValue": "input<string | string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Classes to apply to the dialog panel in fullscreen mode</p>\n",
                    "line": 103,
                    "rawdescription": "\nClasses to apply to the dialog panel in fullscreen mode",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "rootNodes",
                    "defaultValue": "computed(() => this.viewRef().rootNodes)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Rootnodes of the view reference</p>\n",
                    "line": 120,
                    "rawdescription": "\nRootnodes of the view reference",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Heading of the dialog</p>\n",
                    "line": 100,
                    "rawdescription": "\nHeading of the dialog",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "viewRef",
                    "defaultValue": "computed(() => {\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Creates embedded view using template</p>\n",
                    "line": 115,
                    "rawdescription": "\nCreates embedded view using template",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCloses the dialog",
                    "description": "<p>Closes the dialog</p>\n"
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDetaches the view from histogram module and attaches it to the view in the dialog",
                    "description": "<p>Detaches the view from histogram module and attaches it to the view in the dialog</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "ExpansionPanelModule",
                    "type": "module"
                },
                {
                    "name": "ViewOutletDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Fullscreen Component</p>\n",
            "rawdescription": "\nFullscreen Component",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  DestroyRef,\n  Directive,\n  effect,\n  inject,\n  input,\n  output,\n  TemplateRef,\n  viewChild,\n  ViewContainerRef,\n  ViewRef,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { ExpansionPanelModule } from '@hra-ui/design-system/expansion-panel';\nimport { filter, MonoTypeOperatorFunction, pipe } from 'rxjs';\n\n/** View outlet directive */\n@Directive({\n  selector: '[hraViewOutlet]',\n  standalone: true,\n})\nexport class ViewOutletDirective {\n  /** view reference input */\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: 'hraViewOutlet' });\n\n  /** Reference of the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Attaches the view */\n  constructor() {\n    effect(() => this.attach());\n  }\n\n  /** Attaches the view to the view container */\n  attach(): void {\n    const viewRef = this.viewRef();\n    if (viewRef) {\n      this.viewContainerRef.insert(viewRef);\n    }\n  }\n  /** Detaches the view from the view container */\n  detach(): void {\n    const viewRef = this.viewRef();\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\n    if (index >= 0) {\n      this.viewContainerRef.detach(index);\n    }\n  }\n}\n\n/** Fullscreen actions component */\n@Component({\n  selector: 'hra-fullscreen-actions',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      flex-direction: row;\n      align-items: center;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenActionsComponent {}\n\n/** Fullscreen portal content component */\n@Component({\n  selector: 'hra-fullscreen-portal-content',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalContentComponent {}\n\n/** Fullscreen Component */\n@Component({\n  selector: 'hra-fullscreen-portal',\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\n  templateUrl: './fullscreen-portal.component.html',\n  styleUrl: './fullscreen-portal.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalComponent {\n  /** Heading of the dialog */\n  readonly tagline = input.required<string>();\n\n  /** Classes to apply to the dialog panel in fullscreen mode */\n  readonly panelClass = input<string | string[]>();\n\n  /** Event for before the dialog is opened */\n  readonly beforeOpened = output<void>();\n  /** Event for when the dialog is opened */\n  readonly opened = output<void>();\n  /** Event for before the dialog is closed */\n  readonly beforeClosed = output<void>();\n  /** Event for when the dialog is closed */\n  readonly closed = output<void>();\n\n  /** Creates embedded view using template */\n  readonly viewRef = computed(() => {\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\n  });\n\n  /** Rootnodes of the view reference */\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\n\n  /** Reference to the mat dialog */\n  private readonly dialogService = inject(MatDialog);\n\n  /** Reference to the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Reference to the destroy ref */\n  private readonly destroyRef = inject(DestroyRef);\n\n  /** Reference to the view outlet directive */\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\n\n  /** Reference to the view content template */\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>('contentTemplate');\n\n  /** Reference to the view dialog template */\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>('dialogTemplate');\n\n  /** Reference to the mat dialog */\n  private dialogRef?: MatDialogRef<void>;\n\n  /** Destroys the view */\n  constructor() {\n    this.destroyRef.onDestroy(() => {\n      const dialogRef = this.dialogRef;\n      this.dialogRef = undefined;\n      dialogRef?.close();\n      this.viewRef().destroy();\n    });\n  }\n\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\n  open(): void {\n    if (this.dialogRef !== undefined) {\n      return;\n    }\n\n    const { dialogService, dialogTemplateRef } = this;\n    const panelClass = this.panelClass() ?? [];\n    const normalizedPanelClass = typeof panelClass === 'string' ? panelClass.split(' ') : panelClass;\n\n    this.beforeOpened.emit();\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\n      panelClass: [...normalizedPanelClass, 'fullscreen-panel'],\n    }));\n\n    dialogRef\n      .afterOpened()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.opened.emit();\n      });\n\n    dialogRef\n      .beforeClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.beforeClosed.emit();\n        this.viewOutlet().attach();\n      });\n\n    dialogRef\n      .afterClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.dialogRef = undefined;\n        this.closed.emit();\n      });\n  }\n\n  /** Closes the dialog */\n  close(): void {\n    this.dialogRef?.close();\n  }\n\n  /** Filters the dialog event based on provided dialog reference */\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\n    return pipe(\n      takeUntilDestroyed(this.destroyRef),\n      filter(() => this.dialogRef === dialogRef),\n    );\n  }\n}\n",
            "styleUrl": "./fullscreen-portal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Destroys the view</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 141,
                "rawdescription": "\nDestroys the view"
            },
            "extends": [],
            "templateData": "<ng-template [hraViewOutlet]=\"viewRef()\"> </ng-template>\n\n<ng-template #contentTemplate>\n  <ng-content select=\"hra-fullscreen-portal-content\"></ng-content>\n</ng-template>\n\n<ng-template #dialogTemplate>\n  <hra-expansion-panel [tagline]=\"tagline()\" disabled>\n    <hra-expansion-panel-actions>\n      <ng-content select=\"hra-fullscreen-actions\"></ng-content>\n    </hra-expansion-panel-actions>\n\n    <hra-expansion-panel-header-content>\n      <button mat-icon-button mat-dialog-close>\n        <mat-icon class=\"material-symbols-rounded\"> close </mat-icon>\n      </button>\n    </hra-expansion-panel-header-content>\n\n    <ng-template [hraViewOutlet]=\"viewRef()\" data-testid=\"fullscreen-outlet\"></ng-template>\n  </hra-expansion-panel>\n</ng-template>\n"
        },
        {
            "name": "FullscreenPortalContentComponent",
            "id": "component-FullscreenPortalContentComponent-9ea95e9d6d243231b5315b9d0267ead09bbaf6e24e5bd51f6bbc4deac3d2d9134ef02f76e5c7050368dc423ec139bab3e96c952ca1a4e5dc67e2b10ce0090bbd",
            "file": "fullscreen/src/lib/fullscreen-portal/fullscreen-portal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-fullscreen-portal-content",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n  "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Fullscreen portal content component</p>\n",
            "rawdescription": "\nFullscreen portal content component",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  DestroyRef,\n  Directive,\n  effect,\n  inject,\n  input,\n  output,\n  TemplateRef,\n  viewChild,\n  ViewContainerRef,\n  ViewRef,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { ExpansionPanelModule } from '@hra-ui/design-system/expansion-panel';\nimport { filter, MonoTypeOperatorFunction, pipe } from 'rxjs';\n\n/** View outlet directive */\n@Directive({\n  selector: '[hraViewOutlet]',\n  standalone: true,\n})\nexport class ViewOutletDirective {\n  /** view reference input */\n  readonly viewRef = input<ViewRef | undefined>(undefined, { alias: 'hraViewOutlet' });\n\n  /** Reference of the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Attaches the view */\n  constructor() {\n    effect(() => this.attach());\n  }\n\n  /** Attaches the view to the view container */\n  attach(): void {\n    const viewRef = this.viewRef();\n    if (viewRef) {\n      this.viewContainerRef.insert(viewRef);\n    }\n  }\n  /** Detaches the view from the view container */\n  detach(): void {\n    const viewRef = this.viewRef();\n    const index = viewRef ? this.viewContainerRef.indexOf(viewRef) : -1;\n    if (index >= 0) {\n      this.viewContainerRef.detach(index);\n    }\n  }\n}\n\n/** Fullscreen actions component */\n@Component({\n  selector: 'hra-fullscreen-actions',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      flex-direction: row;\n      align-items: center;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenActionsComponent {}\n\n/** Fullscreen portal content component */\n@Component({\n  selector: 'hra-fullscreen-portal-content',\n  standalone: true,\n  template: `<ng-content></ng-content>`,\n  styles: `\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalContentComponent {}\n\n/** Fullscreen Component */\n@Component({\n  selector: 'hra-fullscreen-portal',\n  imports: [MatDialogModule, MatIconModule, ButtonsModule, ExpansionPanelModule, ViewOutletDirective],\n  templateUrl: './fullscreen-portal.component.html',\n  styleUrl: './fullscreen-portal.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenPortalComponent {\n  /** Heading of the dialog */\n  readonly tagline = input.required<string>();\n\n  /** Classes to apply to the dialog panel in fullscreen mode */\n  readonly panelClass = input<string | string[]>();\n\n  /** Event for before the dialog is opened */\n  readonly beforeOpened = output<void>();\n  /** Event for when the dialog is opened */\n  readonly opened = output<void>();\n  /** Event for before the dialog is closed */\n  readonly beforeClosed = output<void>();\n  /** Event for when the dialog is closed */\n  readonly closed = output<void>();\n\n  /** Creates embedded view using template */\n  readonly viewRef = computed(() => {\n    return this.viewContainerRef.createEmbeddedView(this.contentTemplateRef());\n  });\n\n  /** Rootnodes of the view reference */\n  readonly rootNodes = computed(() => this.viewRef().rootNodes);\n\n  /** Reference to the mat dialog */\n  private readonly dialogService = inject(MatDialog);\n\n  /** Reference to the view container */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Reference to the destroy ref */\n  private readonly destroyRef = inject(DestroyRef);\n\n  /** Reference to the view outlet directive */\n  private readonly viewOutlet = viewChild.required(ViewOutletDirective);\n\n  /** Reference to the view content template */\n  private readonly contentTemplateRef = viewChild.required<TemplateRef<void>>('contentTemplate');\n\n  /** Reference to the view dialog template */\n  private readonly dialogTemplateRef = viewChild.required<TemplateRef<void>>('dialogTemplate');\n\n  /** Reference to the mat dialog */\n  private dialogRef?: MatDialogRef<void>;\n\n  /** Destroys the view */\n  constructor() {\n    this.destroyRef.onDestroy(() => {\n      const dialogRef = this.dialogRef;\n      this.dialogRef = undefined;\n      dialogRef?.close();\n      this.viewRef().destroy();\n    });\n  }\n\n  /** Detaches the view from histogram module and attaches it to the view in the dialog */\n  open(): void {\n    if (this.dialogRef !== undefined) {\n      return;\n    }\n\n    const { dialogService, dialogTemplateRef } = this;\n    const panelClass = this.panelClass() ?? [];\n    const normalizedPanelClass = typeof panelClass === 'string' ? panelClass.split(' ') : panelClass;\n\n    this.beforeOpened.emit();\n    const dialogRef = (this.dialogRef = dialogService.open(dialogTemplateRef(), {\n      panelClass: [...normalizedPanelClass, 'fullscreen-panel'],\n    }));\n\n    dialogRef\n      .afterOpened()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.opened.emit();\n      });\n\n    dialogRef\n      .beforeClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.beforeClosed.emit();\n        this.viewOutlet().attach();\n      });\n\n    dialogRef\n      .afterClosed()\n      .pipe(this.filterDialogEvents(dialogRef))\n      .subscribe(() => {\n        this.dialogRef = undefined;\n        this.closed.emit();\n      });\n  }\n\n  /** Closes the dialog */\n  close(): void {\n    this.dialogRef?.close();\n  }\n\n  /** Filters the dialog event based on provided dialog reference */\n  private filterDialogEvents<T>(dialogRef: MatDialogRef<void>): MonoTypeOperatorFunction<T> {\n    return pipe(\n      takeUntilDestroyed(this.destroyRef),\n      filter(() => this.dialogRef === dialogRef),\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "FundingComponent",
            "id": "component-FundingComponent-533a33c5844a5ecd15c1a2315eedf6254c421544929ccf359a4bc9463b02fe723845de8a54c2a3680bb6a9a457c0105b792e65d3805387d5d1c2d224ba30a7b1",
            "file": "navigation/footer/src/lib/funding/funding.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-funding",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./funding.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "funders",
                    "defaultValue": "input.required<FunderId[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Funders to display</p>\n",
                    "line": 17,
                    "rawdescription": "\nFunders to display",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "fundersData",
                    "defaultValue": "computed(() => {\n    const ids = new Set(this.funders());\n    return FUNDERS.filter((item) => ids.has(item.id));\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Associated data for each funder displayed</p>\n",
                    "line": 20,
                    "rawdescription": "\nAssociated data for each funder displayed",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "<p>Displays a list of funders</p>\n",
            "rawdescription": "\nDisplays a list of funders",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { FUNDERS } from '../static-data/parsed';\nimport { FunderId } from '../types/funders.schema';\n\n/** Displays a list of funders */\n@Component({\n  selector: 'hra-funding',\n  imports: [CommonModule, AssetUrlPipe],\n  templateUrl: './funding.component.html',\n  styleUrl: './funding.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FundingComponent {\n  /** Funders to display */\n  readonly funders = input.required<FunderId[]>();\n\n  /** Associated data for each funder displayed */\n  protected readonly fundersData = computed(() => {\n    const ids = new Set(this.funders());\n    return FUNDERS.filter((item) => ids.has(item.id));\n  });\n}\n",
            "styleUrl": "./funding.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span class=\"title\">Funded By:</span>\n<div class=\"funders\">\n  @for (funder of fundersData(); track funder.name) {\n    <a class=\"funder\" [attr.href]=\"funder.link\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <img [attr.src]=\"funder.image | assetUrl\" alt=\"\" />\n      <span>{{ funder.name }}</span>\n    </a>\n  }\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-9ca3cf39d95f4f482bf64940708c4a5a9c2a635b4639ccbdda0ca35981f0d125793bec935501ee2e9cec3c27c7d583d7fe7e789113ea06e301fc4f37df8a149c",
            "file": "navigation/header/src/lib/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Call to action configuration</p>\n",
                    "line": 71,
                    "rawdescription": "\nCall to action configuration",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "hubmapMenu",
                    "defaultValue": "HUBMAP_MENU",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Hubmap menu data</p>\n",
                    "line": 73,
                    "rawdescription": "\nHubmap menu data",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "menus",
                    "defaultValue": "MENUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>All other menus</p>\n",
                    "line": 75,
                    "rawdescription": "\nAll other menus",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "input<BreadcrumbItem[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Breadcrumb items</p>\n",
                    "line": 77,
                    "rawdescription": "\nBreadcrumb items",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "cta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Call to action configuration</p>\n",
                    "line": 71,
                    "rawdescription": "\nCall to action configuration",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "ctaDismissed",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the user has dismissed the call to action</p>\n",
                    "line": 86,
                    "rawdescription": "\nWhether the user has dismissed the call to action",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "desktopMenuMaxHeight",
                    "defaultValue": "computed(() => `calc(100vh - ${this.menuOffsetPx()}px - 16px)`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Desktop menu max height</p>\n",
                    "line": 108,
                    "rawdescription": "\nDesktop menu max height",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "desktopMenuPositions",
                    "defaultValue": "DESKTOP_MENU_POSITIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Overlay positions for the desktop menu</p>\n",
                    "line": 100,
                    "rawdescription": "\nOverlay positions for the desktop menu",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "hubmapMenu",
                    "defaultValue": "HUBMAP_MENU",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Hubmap menu data</p>\n",
                    "line": 73,
                    "rawdescription": "\nHubmap menu data",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "isMobile",
                    "defaultValue": "watchBreakpoint(Breakpoints.Mobile)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the screen is currently mobile sized</p>\n",
                    "line": 93,
                    "rawdescription": "\nWhether the screen is currently mobile sized",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "menuOffsetPx",
                    "defaultValue": "signal<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Offset from top to the menu. Used to calculate menu heights and max heights</p>\n",
                    "line": 104,
                    "rawdescription": "\nOffset from top to the menu. Used to calculate menu heights and max heights",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "menus",
                    "defaultValue": "MENUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>All other menus</p>\n",
                    "line": 75,
                    "rawdescription": "\nAll other menus",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "mobileMenuBlockScroll",
                    "defaultValue": "inject(Overlay).scrollStrategies.block()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Blocking overlay scroll strategy</p>\n",
                    "line": 102,
                    "rawdescription": "\nBlocking overlay scroll strategy",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "mobileMenuHeight",
                    "defaultValue": "computed(() => `calc(100vh - ${this.menuOffsetPx()}px)`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Mobile menu height. Fills the entire screen</p>\n",
                    "line": 106,
                    "rawdescription": "\nMobile menu height. Fills the entire screen",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "mobileMenuPositions",
                    "defaultValue": "MOBILE_MENU_POSITIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Overlay positions for the mobile menu</p>\n",
                    "line": 98,
                    "rawdescription": "\nOverlay positions for the mobile menu",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "progress",
                    "defaultValue": "input<boolean | number>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Progress bar progress.\nUse <code>true</code> for an indeterminate bar and values between <code>0</code> and <code>100</code> for a determinate bar.\nUsing false disables and hides the progress bar.</p>\n",
                    "line": 83,
                    "rawdescription": "\n\nProgress bar progress.\nUse `true` for an indeterminate bar and values between `0` and `100` for a determinate bar.\nUsing false disables and hides the progress bar.\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "progressMode",
                    "defaultValue": "computed((): ProgressBarMode => {\n    return typeof this.progress() === 'boolean' ? 'indeterminate' : 'determinate';\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Progress bar mode</p>\n",
                    "line": 88,
                    "rawdescription": "\nProgress bar mode",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses any active menu\n",
                    "description": "<p>Closes any active menu</p>\n"
                },
                {
                    "name": "isMenuActive",
                    "args": [
                        {
                            "name": "menu",
                            "type": "Menu | \"main\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermine whether the specified menu is open\n\n",
                    "description": "<p>Determine whether the specified menu is open</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5121,
                                "end": 5125,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "menu"
                            },
                            "type": "Menu | \"main\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5115,
                                "end": 5120,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The menu to check</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5150,
                                "end": 5157,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the menu is open, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [
                        {
                            "name": "menu",
                            "type": "Menu | \"main\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles a menu open or close\n\n",
                    "description": "<p>Toggles a menu open or close</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5354,
                                "end": 5358,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "menu"
                            },
                            "type": "Menu | \"main\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5348,
                                "end": 5353,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Menu to toggle</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "OverlayModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "BrandModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "CtaBarComponent",
                    "type": "component"
                },
                {
                    "name": "DesktopMenuComponent",
                    "type": "component"
                },
                {
                    "name": "MobileMenuComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Global navigation header.\nIncludes a call to action bar, navigation menus, breadcrumbs, and a progress bar.</p>\n",
            "rawdescription": "\n\nGlobal navigation header.\nIncludes a call to action bar, navigation menus, breadcrumbs, and a progress bar.\n",
            "type": "component",
            "sourceCode": "import { CdkConnectedOverlay, ConnectedPosition, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  effect,\n  ElementRef,\n  inject,\n  input,\n  signal,\n  viewChild,\n} from '@angular/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule, ProgressBarMode } from '@angular/material/progress-bar';\nimport { Breakpoints, watchBreakpoint } from '@hra-ui/cdk/breakpoints';\nimport { BrandModule } from '@hra-ui/design-system/brand';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { BreadcrumbItem } from '@hra-ui/design-system/buttons/breadcrumbs';\nimport { CtaBarComponent } from '@hra-ui/design-system/navigation/cta-bar';\nimport { explicitEffect } from 'ngxtension/explicit-effect';\nimport { DesktopMenuComponent } from './desktop-menu/desktop-menu.component';\nimport { MobileMenuComponent } from './mobile-menu/mobile-menu.component';\nimport { HUBMAP_MENU, MENUS } from './static-data/parsed';\nimport { Menu } from './types/menus.schema';\n\n/** Call to action configuration */\nexport interface CtaConfig {\n  /** Action text */\n  action: string;\n  /** Action description */\n  description: string;\n  /** Action url */\n  url: string;\n}\n\n/** Position of the mobile menu overlay */\nconst MOBILE_MENU_POSITIONS: ConnectedPosition[] = [\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n];\n/** Position of the desktop menu overlay */\nconst DESKTOP_MENU_POSITIONS: ConnectedPosition[] = [\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetX: -16, offsetY: 16 },\n];\n\n/**\n * Global navigation header.\n * Includes a call to action bar, navigation menus, breadcrumbs, and a progress bar.\n */\n@Component({\n  selector: 'hra-header',\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatDividerModule,\n    MatIconModule,\n    MatProgressBarModule,\n    BrandModule,\n    ButtonsModule,\n    CtaBarComponent,\n    DesktopMenuComponent,\n    MobileMenuComponent,\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderComponent {\n  /** Call to action configuration */\n  readonly cta = input<CtaConfig>();\n  /** Hubmap menu data */\n  readonly hubmapMenu = input(HUBMAP_MENU);\n  /** All other menus */\n  readonly menus = input(MENUS);\n  /** Breadcrumb items */\n  readonly breadcrumbs = input<BreadcrumbItem[]>([]);\n  /**\n   * Progress bar progress.\n   * Use `true` for an indeterminate bar and values between `0` and `100` for a determinate bar.\n   * Using false disables and hides the progress bar.\n   */\n  readonly progress = input<boolean | number>(false);\n\n  /** Whether the user has dismissed the call to action */\n  protected readonly ctaDismissed = signal(false);\n  /** Progress bar mode */\n  protected readonly progressMode = computed((): ProgressBarMode => {\n    return typeof this.progress() === 'boolean' ? 'indeterminate' : 'determinate';\n  });\n\n  /** Whether the screen is currently mobile sized */\n  protected readonly isMobile = watchBreakpoint(Breakpoints.Mobile);\n  /** Reference to this component's html element */\n  private readonly elementRef = inject<ElementRef<Element>>(ElementRef);\n\n  /** Overlay positions for the mobile menu */\n  protected readonly mobileMenuPositions = MOBILE_MENU_POSITIONS;\n  /** Overlay positions for the desktop menu */\n  protected readonly desktopMenuPositions = DESKTOP_MENU_POSITIONS;\n  /** Blocking overlay scroll strategy */\n  protected readonly mobileMenuBlockScroll = inject(Overlay).scrollStrategies.block();\n  /** Offset from top to the menu. Used to calculate menu heights and max heights */\n  protected readonly menuOffsetPx = signal<number>(0);\n  /** Mobile menu height. Fills the entire screen */\n  protected readonly mobileMenuHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px)`);\n  /** Desktop menu max height */\n  protected readonly desktopMenuMaxHeight = computed(() => `calc(100vh - ${this.menuOffsetPx()}px - 16px)`);\n  /** Mobile menu overlay origin */\n  private readonly mobileMenuOrigin = viewChild.required('mobileMenuOrigin', { read: ElementRef });\n  /** Desktop menu overlay origin */\n  private readonly desktopMenuOrigin = viewChild.required('desktopMenuOrigin', { read: ElementRef });\n  /** Reference to the mobile overlay */\n  private readonly mobileMenuOverlay = viewChild('mobileMenuOverlay', { read: CdkConnectedOverlay });\n  /** Currently open menu or undefined */\n  private readonly activeMenu = signal<Menu | 'main' | undefined>(undefined);\n\n  /** Initialize the header */\n  constructor() {\n    effect((cleanup) => {\n      if (this.activeMenu() !== undefined) {\n        const observer = this.attachResizeObserver();\n        cleanup(() => observer.disconnect());\n      }\n    });\n\n    explicitEffect([this.menuOffsetPx], () => this.updateMenuPositions(), { defer: true });\n  }\n\n  /**\n   * Determine whether the specified menu is open\n   *\n   * @param menu The menu to check\n   * @returns true if the menu is open, false otherwise\n   */\n  isMenuActive(menu: Menu | 'main'): boolean {\n    return this.activeMenu() === menu;\n  }\n\n  /**\n   * Toggles a menu open or close\n   *\n   * @param menu Menu to toggle\n   */\n  toggleMenu(menu: Menu | 'main'): void {\n    this.activeMenu.update((current) => (menu !== current ? menu : undefined));\n  }\n\n  /**\n   * Closes any active menu\n   */\n  closeMenu(): void {\n    this.activeMenu.set(undefined);\n  }\n\n  /**\n   * Creates and attaches a resize observer that updates the menu offset\n   * whenever the header size changes\n   *\n   * @returns The resize observer\n   */\n  private attachResizeObserver(): ResizeObserver {\n    const observer = new ResizeObserver(() => this.updateMenuOffset());\n    observer.observe(this.elementRef.nativeElement, { box: 'border-box' });\n    this.updateMenuOffset();\n    return observer;\n  }\n\n  /**\n   * Computes the bounding box for the menu's overlay origin element\n   *\n   * @returns The computed bounding box\n   */\n  private getMenuOriginBbox(): DOMRect {\n    const origin = this.isMobile() ? this.mobileMenuOrigin() : this.desktopMenuOrigin();\n    return (origin.nativeElement as Element).getBoundingClientRect();\n  }\n\n  /**\n   * Updates the menu offset based on the overlay origin's bounding box\n   */\n  private updateMenuOffset(): void {\n    const { bottom } = this.getMenuOriginBbox();\n    this.menuOffsetPx.set(bottom);\n  }\n\n  /**\n   * Notify menu overlays of position changes\n   */\n  private updateMenuPositions(): void {\n    /* istanbul ignore next */\n    this.mobileMenuOverlay()?.overlayRef?.updatePosition();\n  }\n}\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Initialize the header</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 116,
                "rawdescription": "\nInitialize the header"
            },
            "extends": [],
            "templateData": "@let ctaConfig = cta();\n@if (ctaConfig && !ctaDismissed()) {\n  <hra-cta-bar\n    [action]=\"ctaConfig.action\"\n    [description]=\"ctaConfig.description\"\n    [url]=\"ctaConfig.url\"\n    (closeClick)=\"ctaDismissed.set(true)\"\n  >\n  </hra-cta-bar>\n}\n\n<header\n  class=\"header\"\n  cdkOverlayOrigin\n  [class.mobile-menu-open]=\"isMobile() && isMenuActive('main')\"\n  #mobileMenuOrigin=\"cdkOverlayOrigin\"\n  data-testid=\"header\"\n>\n  <div class=\"menus\" #desktopMenuOrigin>\n    <hra-brand-logo size=\"small\"></hra-brand-logo>\n\n    <div class=\"filler\"></div>\n\n    @if (!isMobile()) {\n      @for (menu of menus(); track menu.id) {\n        <hra-navigation-category-toggle\n          cdkOverlayOrigin\n          [toggled]=\"isMenuActive(menu)\"\n          (toggledChange)=\"toggleMenu(menu)\"\n          #navigationCategoryMenuOrigin=\"cdkOverlayOrigin\"\n        >\n          {{ menu.label }}\n        </hra-navigation-category-toggle>\n\n        <ng-template\n          cdkConnectedOverlay\n          cdkConnectedOverlayHasBackdrop=\"false\"\n          cdkConnectedOverlayLockPosition=\"true\"\n          cdkConnectedOverlayPush=\"true\"\n          [cdkConnectedOverlayOpen]=\"isMenuActive(menu)\"\n          [cdkConnectedOverlayOrigin]=\"navigationCategoryMenuOrigin\"\n          [cdkConnectedOverlayPositions]=\"desktopMenuPositions\"\n          (overlayOutsideClick)=\"closeMenu()\"\n        >\n          <hra-desktop-menu [menu]=\"menu\" [style.max-height]=\"desktopMenuMaxHeight()\"></hra-desktop-menu>\n        </ng-template>\n      }\n    }\n\n    <button\n      mat-icon-button\n      cdkOverlayOrigin\n      aria-label=\"Open the main navigation menu\"\n      (click)=\"toggleMenu('main')\"\n      #mainMenuOrigin=\"cdkOverlayOrigin\"\n    >\n      <mat-icon>\n        @if (isMenuActive('main')) {\n          close\n        } @else if (isMobile()) {\n          menu\n        } @else {\n          apps\n        }\n      </mat-icon>\n    </button>\n\n    @if (isMobile()) {\n      <ng-template\n        cdkConnectedOverlay\n        cdkConnectedOverlayDisposeOnNavigation=\"true\"\n        cdkConnectedOverlayHasBackdrop=\"false\"\n        cdkConnectedOverlayLockPosition=\"true\"\n        [cdkConnectedOverlayOpen]=\"isMenuActive('main')\"\n        [cdkConnectedOverlayOrigin]=\"mobileMenuOrigin\"\n        [cdkConnectedOverlayPositions]=\"mobileMenuPositions\"\n        [cdkConnectedOverlayScrollStrategy]=\"mobileMenuBlockScroll\"\n        [cdkConnectedOverlayHeight]=\"mobileMenuHeight()\"\n        [cdkConnectedOverlayWidth]=\"'100%'\"\n        #mobileMenuOverlay\n      >\n        <hra-mobile-menu [hubmapMenu]=\"hubmapMenu()\" [menus]=\"menus()\"></hra-mobile-menu>\n      </ng-template>\n    } @else {\n      <ng-template\n        cdkConnectedOverlay\n        cdkConnectedOverlayHasBackdrop=\"false\"\n        cdkConnectedOverlayLockPosition=\"true\"\n        cdkConnectedOverlayPush=\"true\"\n        [cdkConnectedOverlayOpen]=\"isMenuActive('main')\"\n        [cdkConnectedOverlayOrigin]=\"mainMenuOrigin\"\n        [cdkConnectedOverlayPositions]=\"desktopMenuPositions\"\n        (overlayOutsideClick)=\"closeMenu()\"\n      >\n        <hra-desktop-menu [menu]=\"hubmapMenu()\" [style.max-height]=\"desktopMenuMaxHeight()\"></hra-desktop-menu>\n      </ng-template>\n    }\n  </div>\n\n  @if (breadcrumbs().length > 0) {\n    <mat-divider></mat-divider>\n\n    <div class=\"navigation\">\n      <hra-breadcrumbs [crumbs]=\"breadcrumbs()\"> </hra-breadcrumbs>\n      <div class=\"filler\"></div>\n      <ng-content></ng-content>\n    </div>\n  }\n</header>\n\n@if (progress() !== false) {\n  <mat-progress-bar class=\"progress-bar\" [mode]=\"progressMode()\" [value]=\"progress()\"></mat-progress-bar>\n}\n"
        },
        {
            "name": "HubmapMenuContentComponent",
            "id": "component-HubmapMenuContentComponent-ffc247892ca9ef8218941c3dd25a5994f7bbbf37351adcc424d60de438e26494f803e106c51b52ab725883d3f2165333ae5d25f3017cc35b6fa8b1a8cefe138e",
            "file": "navigation/header/src/lib/hubmap-menu-content/hubmap-menu-content.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-hubmap-menu-content",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./hubmap-menu-content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "defaultValue": "input.required<HubmapMenuGroup[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Menu data to display</p>\n",
                    "line": 46,
                    "rawdescription": "\nMenu data to display",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "HubmapMenuGroupDirective",
                    "type": "directive"
                },
                {
                    "name": "HubmapMenuItemDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Displays the content of a hubmap menu.\nWorks for both mobile and desktop size screens.</p>\n",
            "rawdescription": "\n\nDisplays the content of a hubmap menu.\nWorks for both mobile and desktop size screens.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Directive, input } from '@angular/core';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { HubmapMenuGroup, HubmapMenuItem } from '../types/hubmap-menu.schema';\n\n/** Directive used to type the context for menu group templates */\n@Directive({\n  selector: 'ng-template[hraHubmapMenuGroup]',\n  standalone: true,\n})\nexport class HubmapMenuGroupDirective {\n  /** Types the context as `HubmapMenuGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: HubmapMenuGroupDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuGroup } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu item templates */\n@Directive({\n  selector: 'ng-template[hraHubmapMenuItem]',\n  standalone: true,\n})\nexport class HubmapMenuItemDirective {\n  /** Types the context as `HubmapMenuItem` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: HubmapMenuItemDirective, _ctx: unknown): _ctx is { $implicit: HubmapMenuItem } {\n    return true;\n  }\n}\n\n/**\n * Displays the content of a hubmap menu.\n * Works for both mobile and desktop size screens.\n */\n@Component({\n  selector: 'hra-hubmap-menu-content',\n  imports: [CommonModule, AssetUrlPipe, ButtonsModule, HubmapMenuGroupDirective, HubmapMenuItemDirective],\n  templateUrl: './hubmap-menu-content.component.html',\n  styleUrl: './hubmap-menu-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HubmapMenuContentComponent {\n  /** Menu data to display */\n  readonly menu = input.required<HubmapMenuGroup[]>();\n}\n",
            "styleUrl": "./hubmap-menu-content.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for (group of menu(); track $index) {\n  <ng-container *ngTemplateOutlet=\"groupTemplate; context: { $implicit: group }\"></ng-container>\n}\n\n<ng-template hraHubmapMenuGroup let-group #groupTemplate>\n  <div class=\"group-label\">\n    {{ group.label }}\n  </div>\n\n  <div class=\"group-items\">\n    @for (item of group.items; track $index) {\n      <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item }\"></ng-container>\n    }\n  </div>\n</ng-template>\n\n<ng-template hraHubmapMenuItem let-item #itemTemplate>\n  <hra-app-nav-button\n    class=\"item-button\"\n    [tagline]=\"item.label\"\n    [description]=\"item.description\"\n    [icon]=\"item.icon | assetUrl\"\n    [link]=\"item.url\"\n  >\n  </hra-app-nav-button>\n</ng-template>\n"
        },
        {
            "name": "IconButtonStylesComponent",
            "id": "component-IconButtonStylesComponent-94a1a6eb1c2e74616269d445654201ae718b6594f4f6a2b598ef4e6f2a0e85dd7bdf976b40a47ad61f631507144341e285196283bad4979a91bb0c6b1a5758d3",
            "file": "icon-button/src/lib/icon-button-styles/icon-button-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-icon-button-styles",
            "styleUrls": [
                "./icon-button-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies mat icon button styles globally</p>\n",
            "rawdescription": "\n\nApplies mat icon button styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies mat icon button styles globally\n */\n@Component({\n  selector: 'hra-icon-button-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./icon-button-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconButtonStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  button[mat-icon-button],\n  a[mat-icon-button] {\n    --mat-icon-button-hover-state-layer-opacity: 0.08;\n    --mat-icon-button-pressed-state-layer-opacity: 0.12;\n    --mat-icon-button-focus-state-layer-opacity: 0;\n    --mdc-icon-button-icon-color: var(--mat-sys-secondary);\n    --mat-icon-button-state-layer-color: var(--mat-sys-secondary);\n\n    mat-icon {\n      height: var(--mdc-icon-button-icon-size);\n      width: var(--mdc-icon-button-icon-size);\n      font-size: var(--mdc-icon-button-icon-size);\n    }\n\n    &.icon-button-variant-light {\n      --mdc-icon-button-icon-color: var(--mat-sys-on-primary);\n      --mat-icon-button-state-layer-color: var(--mat-sys-on-primary);\n    }\n\n    &.icon-button-variant-dark {\n      --mdc-icon-button-icon-color: var(--mat-sys-secondary);\n      --mat-icon-button-state-layer-color: var(--mat-sys-secondary);\n    }\n\n    &.icon-button-variant-color {\n      --mdc-icon-button-icon-color: var(--mat-sys-on-tertiary-fixed);\n      --mat-icon-button-state-layer-color: var(--mat-sys-on-tertiary-fixed);\n    }\n\n    &:focus-visible {\n      --mdc-icon-button-icon-color: var(--mat-sys-secondary);\n      outline: 2px solid var(--mat-sys-tertiary);\n    }\n  }\n}\n",
                    "styleUrl": "./icon-button-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InfoModalComponent",
            "id": "component-InfoModalComponent-604f39c5cba08234cbee318cec0535940a5d48ef158e5c60010270b159251a9abf22c311829653216bbc78a6100aaa150ddb1f9b7601585b9dd3f9aaeff2aace",
            "file": "info-modal/src/lib/info-modal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-info-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./info-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of modal</p>\n",
                    "line": 39,
                    "rawdescription": "\nTitle of modal",
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Emits when close icon clicked</p>\n",
                    "line": 42,
                    "rawdescription": "\nEmits when close icon clicked",
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Emits when close icon clicked</p>\n",
                    "line": 42,
                    "rawdescription": "\nEmits when close icon clicked",
                    "required": false
                },
                {
                    "name": "data",
                    "defaultValue": "input<DataItem[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of data items to display</p>\n",
                    "line": 33,
                    "rawdescription": "\nList of data items to display"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of modal</p>\n",
                    "line": 39,
                    "rawdescription": "\nTitle of modal",
                    "required": true
                },
                {
                    "name": "variant",
                    "defaultValue": "input<InfoModalVariant>('tabular')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Variant of info modal to use</p>\n",
                    "line": 36,
                    "rawdescription": "\nVariant of info modal to use"
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Modal to display all available information about specific areas of a dataset.</p>\n",
            "rawdescription": "\n\nModal to display all available information about specific areas of a dataset.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTableModule } from '@angular/material/table';\n\n/** An item which defines a string label and a string value */\nexport interface DataItem {\n  /** A string property that represents the label */\n  label: string;\n  /** A string property that represents the value */\n  value: string;\n}\n\n/** Info modal variants */\nexport type InfoModalVariant = 'tabular' | 'center';\n\n/**\n * Modal to display all available information about specific areas of a dataset.\n */\n@Component({\n  selector: 'hra-info-modal',\n  imports: [CommonModule, MatTableModule, MatIconModule, MatButtonModule],\n  templateUrl: './info-modal.component.html',\n  styleUrl: './info-modal.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.center]': 'variant() == \"center\"',\n  },\n})\nexport class InfoModalComponent {\n  /** List of data items to display */\n  data = input<DataItem[]>([]);\n\n  /** Variant of info modal to use */\n  variant = input<InfoModalVariant>('tabular');\n\n  /** Title of modal */\n  title = input.required<string>();\n\n  /** Emits when close icon clicked */\n  close = output<void>();\n}\n",
            "styleUrl": "./info-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h2 class=\"header\">\n  <mat-icon class=\"info\"> info </mat-icon>\n  <span class=\"card-title\">{{ title() }}</span>\n  <div class=\"filler\"></div>\n  <button class=\"close\" mat-icon-button (click)=\"close.emit()\">\n    <mat-icon>close</mat-icon>\n  </button>\n</h2>\n\n<div class=\"table-container\">\n  <table mat-table [dataSource]=\"data()\" aria-label=\"info table\">\n    <!-- Label Column -->\n    <ng-container matColumnDef=\"label\">\n      <th class=\"sr-only\" mat-header-cell *matHeaderCellDef>Item Label</th>\n      <td class=\"label\" mat-cell *matCellDef=\"let element\">\n        {{ element.label }}\n      </td>\n    </ng-container>\n\n    <!-- Value Column -->\n    <ng-container matColumnDef=\"value\">\n      <th class=\"sr-only\" mat-header-cell *matHeaderCellDef>Item Value</th>\n      <td class=\"value\" mat-cell *matCellDef=\"let element\">\n        {{ element.value }}\n      </td>\n    </ng-container>\n\n    <tr mat-row *matRowDef=\"let row; columns: ['label', 'value']\"></tr>\n  </table>\n</div>\n"
        },
        {
            "name": "InputStylesComponent",
            "id": "component-InputStylesComponent-251104d876cf1dcf5f0210e18fc46a9e6a1d530e03523354a8680e4312a19a3461b03bc9d60e00ae9cf4eb4a92bd17a7e5268ae64e058b113d8ab96f692befc2",
            "file": "input/src/lib/input-styles/input-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-input-styles",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Applies input styles globally</p>\n",
            "rawdescription": "\n\nApplies input styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Applies input styles globally\n */\n@Component({\n  selector: 'hra-input-styles',\n  imports: [CommonModule],\n  template: '',\n  styleUrl: './input-styles.component.scss',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputStylesComponent {}\n",
            "styleUrl": "./input-styles.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MenuContentComponent",
            "id": "component-MenuContentComponent-7bd3541584c95f4962f943943de05902e2826924c7b6c780e17cf0a63630dbcb37c81d0e19a26d4d9e8e100b6c172a2265f8866140fff51e8be8398472c7b8b1",
            "file": "navigation/header/src/lib/menu-content/menu-content.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-menu-content",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Menu data to display</p>\n",
                    "line": 76,
                    "rawdescription": "\nMenu data to display",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Display mode</p>\n",
                    "line": 74,
                    "rawdescription": "\nDisplay mode",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Menu data to display</p>\n",
                    "line": 76,
                    "rawdescription": "\nMenu data to display",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Display mode</p>\n",
                    "line": 74,
                    "rawdescription": "\nDisplay mode",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDivider"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "MenuGroupDirective",
                    "type": "directive"
                },
                {
                    "name": "MenuItemDirective",
                    "type": "directive"
                },
                {
                    "name": "MenuSubGroupDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Displays the content of a menu.\nHas variants for both mobile and desktop size screens.</p>\n",
            "rawdescription": "\n\nDisplays the content of a menu.\nHas variants for both mobile and desktop size screens.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Directive, input } from '@angular/core';\nimport { MatDivider } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { Menu, MenuGroup, MenuItem, MenuSubGroup } from '../types/menus.schema';\n\n/** Display modes of the menu content component */\nexport type MenuContentVariant = 'desktop' | 'mobile';\n\n/** Directive used to type the context for menu group templates */\n@Directive({\n  selector: 'ng-template[hraMenuGroup]',\n  standalone: true,\n})\nexport class MenuGroupDirective {\n  /** Types the context as `MenuGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuGroup } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu item templates */\n@Directive({\n  selector: 'ng-template[hraMenuItem]',\n  standalone: true,\n})\nexport class MenuItemDirective {\n  /** Types the context as `MenuItem` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuItemDirective, _ctx: unknown): _ctx is { $implicit: MenuItem } {\n    return true;\n  }\n}\n\n/** Directive used to type the context for menu subgroup templates */\n@Directive({\n  selector: 'ng-template[hraMenuSubGroup]',\n  standalone: true,\n})\nexport class MenuSubGroupDirective {\n  /** Types the context as `MenuSubGroup` */\n  /* istanbul ignore next */\n  static ngTemplateContextGuard(_dir: MenuSubGroupDirective, _ctx: unknown): _ctx is { $implicit: MenuSubGroup } {\n    return true;\n  }\n}\n\n/**\n * Displays the content of a menu.\n * Has variants for both mobile and desktop size screens.\n */\n@Component({\n  selector: 'hra-menu-content',\n  imports: [\n    CommonModule,\n    MatDivider,\n    MatIconModule,\n    ButtonsModule,\n    MenuGroupDirective,\n    MenuItemDirective,\n    MenuSubGroupDirective,\n  ],\n  templateUrl: './menu-content.component.html',\n  styleUrl: './menu-content.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class]': '\"menu-content-variant-\" + variant()',\n  },\n})\nexport class MenuContentComponent {\n  /** Display mode */\n  readonly variant = input.required<MenuContentVariant>();\n  /** Menu data to display */\n  readonly menu = input.required<Menu>();\n}\n",
            "styleUrl": "./menu-content.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@let isDesktop = variant() === 'desktop';\n@for (item of menu().items; track $index) {\n  @if (item.type === 'group') {\n    <ng-container *ngTemplateOutlet=\"groupTemplate; context: { $implicit: item }\"></ng-container>\n  } @else if (isDesktop) {\n    <mat-divider class=\"divider\"></mat-divider>\n  }\n}\n\n<ng-template hraMenuGroup let-group #groupTemplate>\n  <a mat-button class=\"group-label\" [attr.href]=\"group.url\" target=\"_blank\" rel=\"noopener noreferrer\">\n    {{ group.label }}\n    <mat-icon iconPositionEnd>arrow_right_alt</mat-icon>\n  </a>\n\n  @if (group.description) {\n    <div class=\"group-description\">\n      {{ group.description }}\n    </div>\n  }\n\n  @let items = group.items ?? [];\n  @if (items.length > 0) {\n    @if (isDesktop) {\n      <mat-divider class=\"divider\"></mat-divider>\n    }\n\n    @for (item of items; track $index) {\n      @let template = item.type === 'subgroup' ? subgroupTemplate : itemTemplate;\n      <ng-container *ngTemplateOutlet=\"template; context: { $implicit: item }\"></ng-container>\n    }\n  }\n</ng-template>\n\n<ng-template hraMenuSubGroup let-subgroup #subgroupTemplate>\n  <div class=\"subgroup-label\">\n    {{ subgroup.label }}\n  </div>\n  <div class=\"subgroup-items\">\n    @for (item of subgroup.items; track $index) {\n      <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item }\"></ng-container>\n    }\n  </div>\n</ng-template>\n\n<ng-template hraMenuItem let-item #itemTemplate>\n  <a mat-button hraSecondaryButton class=\"item-label\" [attr.href]=\"item.url\" target=\"_blank\" rel=\"noopener noreferrer\">\n    {{ item.label }}\n  </a>\n</ng-template>\n"
        },
        {
            "name": "MenuDemoComponent",
            "id": "component-MenuDemoComponent-c9c532fdb1bc7b08b78bdec7f5aad68c649d1f2815db67a6ae79a0e6e8f5a201f5e984978aadb693e582578b25bcfb5f9f3386fafd4c8722fe7bc26a737cd9d0",
            "file": "menu/src/lib/menu-demo/menu-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./menu-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuOptions",
                    "defaultValue": "input<MenuDemoOption[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of menu options</p>\n",
                    "line": 29,
                    "rawdescription": "\nList of menu options",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "suboptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDemoOption[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of suboptions to display in the second menu</p>\n",
                    "line": 32,
                    "rawdescription": "\nList of suboptions to display in the second menu"
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatRippleModule",
                    "type": "module"
                }
            ],
            "description": "<p>Nested Angular Material menu component</p>\n",
            "rawdescription": "\n\nNested Angular Material menu component\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, ViewEncapsulation } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\n\n/** Menu option interface */\nexport interface MenuDemoOption {\n  /** Name of option */\n  name: string;\n  /** Material icon name */\n  icon: string;\n  /** Options to open in a second menu */\n  expandedOptions?: MenuDemoOption[];\n}\n\n/**\n * Nested Angular Material menu component\n */\n@Component({\n  selector: 'hra-menu',\n  imports: [MatButtonModule, MatMenuModule, MatIconModule, MatRippleModule],\n  templateUrl: './menu-demo.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuDemoComponent {\n  /** List of menu options */\n  readonly menuOptions = input<MenuDemoOption[]>([]);\n\n  /** List of suboptions to display in the second menu */\n  suboptions: MenuDemoOption[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button mat-icon-button [matMenuTriggerFor]=\"options\" aria-label=\"Icon to open nested menu\">\n  <mat-icon>more_vert</mat-icon>\n</button>\n\n<mat-menu #options=\"matMenu\">\n  @for (option of menuOptions(); track option) {\n    @if (option.expandedOptions) {\n      <button\n        class=\"expanded\"\n        mat-menu-item\n        matRipple\n        matRippleColor=\"#201E3D14\"\n        [matMenuTriggerFor]=\"submenu\"\n        (mouseover)=\"suboptions = option.expandedOptions\"\n      >\n        <mat-icon>{{ option.icon }}</mat-icon>\n        {{ option.name }}\n        <mat-icon class=\"expand-arrow\">arrow_right</mat-icon>\n      </button>\n    } @else {\n      <button mat-menu-item>\n        <mat-icon>{{ option.icon }}</mat-icon>\n        {{ option.name }}\n      </button>\n    }\n  }\n</mat-menu>\n\n<mat-menu #submenu=\"matMenu\">\n  @for (suboption of suboptions; track suboption) {\n    <button mat-menu-item>\n      <mat-icon>{{ suboption.icon }}</mat-icon>\n      <span>{{ suboption.name }}</span>\n    </button>\n  }\n</mat-menu>\n"
        },
        {
            "name": "MenuStylesComponent",
            "id": "component-MenuStylesComponent-d875ece8998bcac5f368d5dda1e17ed7e75a6768cdaf1c7576d9917049327c958e8591c565406d63ba192ff90fd455eee07833dfa82e3249528046c1790e1336",
            "file": "menu/src/lib/menu-styles/menu-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-menu-styles",
            "styleUrls": [
                "./menu-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies menu styles globally</p>\n",
            "rawdescription": "\n\nApplies menu styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies menu styles globally\n */\n@Component({\n  selector: 'hra-menu-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./menu-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  .mat-mdc-menu-panel {\n    --mat-menu-container-shape: 0.5rem;\n    --mat-app-elevation-shadow-level-2: 0rem 0.3125rem 1rem 0rem rgb(from var(--mat-sys-shadow) r g b / 0.16);\n    --mat-menu-item-with-icon-leading-spacing: 1rem;\n    --mat-menu-item-with-icon-trailing-spacing: 1rem;\n\n    --mat-menu-item-label-text-color: var(--mat-sys-secondary);\n    --mat-menu-item-icon-color: var(--mat-sys-secondary);\n\n    --mat-menu-container-color: var(--mat-sys-surface-container-low);\n    --mat-menu-item-hover-state-layer-color: rgb(from var(--mat-sys-secondary) r g b / 0.08); // hovered state\n    --mat-menu-item-focus-state-layer-color: rgb(from var(--mat-sys-tertiary) r g b / 0.2); // selected state\n\n    --mat-menu-item-label-text-tracking: var(--mat-sys-label-medium-tracking);\n    --mat-menu-item-label-text-weight: var(--mat-sys-label-medium-weight);\n    --mat-menu-item-label-text-size: var(--mat-sys-label-medium-size);\n    --mat-menu-item-label-text-line-height: var(--mat-sys-label-medium-line-height);\n\n    button {\n      min-width: 12rem;\n      border: 0.125rem solid transparent;\n    }\n\n    .expand-arrow {\n      --mat-menu-item-spacing: 1rem;\n      position: absolute;\n      right: 0;\n    }\n\n    .mat-mdc-menu-submenu-icon {\n      display: none;\n    }\n\n    // focused state\n    .cdk-keyboard-focused {\n      background-color: var(--mat-sys-on-primary) !important;\n      border: 0.125rem solid var(--mat-sys-tertiary);\n    }\n\n    // selected state\n    .mat-mdc-menu-item-highlighted {\n      background-color: rgb(from var(--mat-sys-tertiary) r g b / 0.2);\n    }\n  }\n}\n",
                    "styleUrl": "./menu-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MicroTooltipStylesComponent",
            "id": "component-MicroTooltipStylesComponent-e49779f451d7cb23a01d21c0bb5fa384223f1412490d7fa6f79e85c9442e49e971517660dd8c73f73053916e845e9e1a25dd39f187d469d0db68bc0450effaed",
            "file": "micro-tooltip/src/micro-tooltip-styles/micro-tooltip-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-micro-tooltip-styles",
            "styleUrls": [
                "./micro-tooltip-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies micro tooltip styles globally</p>\n",
            "rawdescription": "\n\nApplies micro tooltip styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies micro tooltip styles globally\n */\n@Component({\n  selector: 'hra-micro-tooltip-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./micro-tooltip-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MicroTooltipStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles/utils';\n\n@include utils.global-styles() {\n  .hra-micro-tooltip {\n    --mdc-plain-tooltip-supporting-text-color: var(--mat-sys-on-primary);\n    --mdc-plain-tooltip-container-color: color-mix(in srgb, var(--mat-sys-secondary) 96%, transparent);\n\n    .mat-mdc-tooltip-surface {\n      padding: 0.25rem 0.5rem;\n      letter-spacing: unset;\n    }\n  }\n\n  .hra-micro-tooltip-medium {\n    .mat-mdc-tooltip-surface {\n      font: var(--mat-sys-label-medium);\n    }\n  }\n\n  .hra-micro-tooltip-small {\n    .mat-mdc-tooltip-surface {\n      font: var(--mat-sys-label-small);\n    }\n  }\n}\n",
                    "styleUrl": "./micro-tooltip-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MobileMenuComponent",
            "id": "component-MobileMenuComponent-9eec90fd2b12e278625f820f5d643c6cd737a32e65b72978e2c3aca58f5a56cb4f905c408cc16aaf168b06621d458e95e937b7066c4e1f42047301730dee2116",
            "file": "navigation/header/src/lib/mobile-menu/mobile-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-mobile-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./mobile-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hubmapMenu",
                    "defaultValue": "input.required<HubmapMenuGroup[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Hubmap menu</p>\n",
                    "line": 32,
                    "rawdescription": "\nHubmap menu",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "menus",
                    "defaultValue": "input.required<Menu[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>All other menus</p>\n",
                    "line": 34,
                    "rawdescription": "\nAll other menus",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                },
                {
                    "name": "HubmapMenuContentComponent",
                    "type": "component"
                },
                {
                    "name": "MenuContentComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Display a menu for mobile sized screens</p>\n",
            "rawdescription": "\n\nDisplay a menu for mobile sized screens\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ScrollingModule } from '@hra-ui/design-system/scrolling';\nimport { HubmapMenuContentComponent } from '../hubmap-menu-content/hubmap-menu-content.component';\nimport { MenuContentComponent } from '../menu-content/menu-content.component';\nimport { HubmapMenuGroup } from '../types/hubmap-menu.schema';\nimport { Menu } from '../types/menus.schema';\n\n/**\n * Display a menu for mobile sized screens\n */\n@Component({\n  selector: 'hra-mobile-menu',\n  imports: [\n    CommonModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatIconModule,\n    ScrollingModule,\n    HubmapMenuContentComponent,\n    MenuContentComponent,\n  ],\n  templateUrl: './mobile-menu.component.html',\n  styleUrl: './mobile-menu.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MobileMenuComponent {\n  /** Hubmap menu */\n  readonly hubmapMenu = input.required<HubmapMenuGroup[]>();\n  /** All other menus */\n  readonly menus = input.required<Menu[]>();\n}\n",
            "styleUrl": "./mobile-menu.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-divider> </mat-divider>\n<ng-scrollbar>\n  <mat-accordion displayMode=\"flat\" multi=\"false\">\n    @for (menu of menus(); track $index) {\n      <mat-expansion-panel class=\"panel\" hideToggle>\n        <mat-expansion-panel-header class=\"header\">\n          <mat-panel-title>\n            {{ menu.label }}\n            <mat-icon class=\"toggle-icon\"> </mat-icon>\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <hra-menu-content class=\"content\" variant=\"mobile\" [menu]=\"menu\"></hra-menu-content>\n      </mat-expansion-panel>\n\n      <mat-divider> </mat-divider>\n    }\n\n    <mat-expansion-panel class=\"panel\" hideToggle>\n      <mat-expansion-panel-header class=\"header\">\n        <mat-panel-title>\n          HuBMAP Tools & Applications\n          <mat-icon class=\"toggle-icon\"> </mat-icon>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n\n      <hra-hubmap-menu-content class=\"content\" [menu]=\"hubmapMenu()\"> </hra-hubmap-menu-content>\n    </mat-expansion-panel>\n\n    <mat-divider> </mat-divider>\n  </mat-accordion>\n</ng-scrollbar>\n"
        },
        {
            "name": "NavHeaderButtonsComponent",
            "id": "component-NavHeaderButtonsComponent-293797678f8065c1b89a751d33da2d32697ef2efa6f348157a4bd81a9b5bdb8c33f42b7fbe71eca6d0d6a8cef8bb20da8e638b025c34d1972a23d2e6e5816532",
            "file": "nav-header-buttons/src/lib/nav-header-buttons.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-nav-header-buttons",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-header-buttons.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "app",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current app</p>\n",
                    "line": 37,
                    "rawdescription": "\nCurrent app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Link to app home page</p>\n",
                    "line": 39,
                    "rawdescription": "\nLink to app home page",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>App software status</p>\n",
                    "line": 33,
                    "rawdescription": "\nApp software status",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "appTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>App title</p>\n",
                    "line": 41,
                    "rawdescription": "\nApp title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "brandmark",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether to show the HRA brandmark</p>\n",
                    "line": 35,
                    "rawdescription": "\nWhether to show the HRA brandmark",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "app",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current app</p>\n",
                    "line": 37,
                    "rawdescription": "\nCurrent app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Link to app home page</p>\n",
                    "line": 39,
                    "rawdescription": "\nLink to app home page",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "appStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>App software status</p>\n",
                    "line": 33,
                    "rawdescription": "\nApp software status",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "appTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>App title</p>\n",
                    "line": 41,
                    "rawdescription": "\nApp title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "brandmark",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether to show the HRA brandmark</p>\n",
                    "line": 35,
                    "rawdescription": "\nWhether to show the HRA brandmark",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "variant",
                    "defaultValue": "input<NavHeaderButtonsVariant>('basic')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Variant of logo component</p>\n",
                    "line": 31,
                    "rawdescription": "\nVariant of logo component",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonToggleModule",
                    "type": "module"
                },
                {
                    "name": "BrandMarkComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "ProductLogoComponent",
                    "type": "component"
                },
                {
                    "name": "SoftwareStatusIndicatorComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Logo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.</p>\n",
            "rawdescription": "\n\nLogo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { BrandMarkComponent } from '@hra-ui/design-system/brand/mark';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { ProductLogoComponent } from '@hra-ui/design-system/product-logo';\nimport { SoftwareStatus, SoftwareStatusIndicatorComponent } from '@hra-ui/design-system/software-status-indicator';\n\n/** Variant of nav header button */\nexport type NavHeaderButtonsVariant = 'basic' | 'sidenav';\n\n/**\n * Logo buttons used in webpage navigation headers, side navigation menus, and application header toolbars.\n */\n@Component({\n  selector: 'hra-nav-header-buttons',\n  imports: [\n    CommonModule,\n    MatButtonToggleModule,\n    BrandMarkComponent,\n    ButtonsModule,\n    ProductLogoComponent,\n    SoftwareStatusIndicatorComponent,\n  ],\n  templateUrl: './nav-header-buttons.component.html',\n  styleUrl: './nav-header-buttons.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavHeaderButtonsComponent {\n  /** Variant of logo component */\n  readonly variant = input<NavHeaderButtonsVariant>('basic');\n  /** App software status */\n  readonly appStatus = input<SoftwareStatus>();\n  /** Whether to show the HRA brandmark */\n  readonly brandmark = input<boolean>(true);\n  /** Current app */\n  readonly app = input.required<string>();\n  /** Link to app home page */\n  readonly appLink = input.required<string>();\n  /** App title */\n  readonly appTitle = input.required<string>();\n}\n",
            "styleUrl": "./nav-header-buttons.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (brandmark()) {\n  <a\n    class=\"hra-logo\"\n    href=\"https://humanatlas.io\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    aria-label=\"Visit Human Reference Atlas\"\n  >\n    <hra-brand-mark variant=\"small\"></hra-brand-mark>\n  </a>\n}\n<a class=\"app-logo\" [href]=\"appLink()\" [attr.alt]=\"appTitle() + ' logo'\">\n  <hra-product-logo [name]=\"app()\" size=\"small\"></hra-product-logo>\n</a>\n\n<span class=\"logos-text\">\n  @if (variant() === 'sidenav') {\n    <mat-button-toggle class=\"app-name-nav\" value=\"bold\" disableRipple>\n      <span class=\"label\">{{ appTitle() }}</span>\n    </mat-button-toggle>\n  } @else {\n    <a class=\"app-name\" [href]=\"appLink()\" aria-label=\"Return to app home\">\n      <span class=\"app-label\">{{ appTitle() }}</span>\n    </a>\n  }\n  @if (appStatus()) {\n    <hra-software-status-indicator [status]=\"appStatus()!\" size=\"small\"></hra-software-status-indicator>\n  }\n</span>\n"
        },
        {
            "name": "NavHeaderComponent",
            "id": "component-NavHeaderComponent-a850dba1dd07f42be528800fd9e506b4362a6337a3764ee05a324689ea57f01c4fc08ca0f695d3eb880750ab780557787899370ab2c1ffd166c2e5f590a5b778",
            "file": "nav-header/src/lib/nav-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-nav-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./nav-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "app",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current app</p>\n",
                    "line": 58,
                    "rawdescription": "\nCurrent app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Link to the app</p>\n",
                    "line": 56,
                    "rawdescription": "\nLink to the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Status of the app</p>\n",
                    "line": 62,
                    "rawdescription": "\nStatus of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of the app</p>\n",
                    "line": 60,
                    "rawdescription": "\nName of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "app",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current app</p>\n",
                    "line": 58,
                    "rawdescription": "\nCurrent app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Link to the app</p>\n",
                    "line": 56,
                    "rawdescription": "\nLink to the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "navigationCategories",
                    "defaultValue": "input.required<CardData[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Data to display in sidenav</p>\n",
                    "line": 64,
                    "rawdescription": "\nData to display in sidenav",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Status of the app</p>\n",
                    "line": 62,
                    "rawdescription": "\nStatus of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of the app</p>\n",
                    "line": 60,
                    "rawdescription": "\nName of the app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "variant",
                    "defaultValue": "input<NavHeaderButtonsVariant>('basic')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Variant of the header</p>\n",
                    "line": 54,
                    "rawdescription": "\nVariant of the header",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "NavHeaderButtonsComponent",
                    "type": "component"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "AppNavButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ScrollingModule",
                    "type": "module"
                },
                {
                    "name": "AssetUrlPipe",
                    "type": "pipe"
                }
            ],
            "description": "<p>Navigation Header Component</p>\n",
            "rawdescription": "\n\nNavigation Header Component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { AssetUrlPipe } from '@hra-ui/cdk/app-href';\nimport { AppNavButtonComponent } from '@hra-ui/design-system/buttons/app-nav-button';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\nimport { NavHeaderButtonsComponent, NavHeaderButtonsVariant } from '@hra-ui/design-system/nav-header-buttons';\nimport { ScrollingModule } from '@hra-ui/design-system/scrolling';\nimport { SoftwareStatus } from '@hra-ui/design-system/software-status-indicator';\n\n/** Sidenav card data */\nexport interface CardData {\n  /** Name of card category */\n  category: string;\n  /** Info for apps in category */\n  cards: {\n    /** Name of app */\n    name: string;\n    /** Icon path */\n    icon: string;\n    /** App title */\n    title: string;\n    /** App description */\n    description: string;\n    /** Link to app */\n    link: string;\n  }[];\n}\n\n/**\n * Navigation Header Component\n */\n@Component({\n  selector: 'hra-nav-header',\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    NavHeaderButtonsComponent,\n    IconButtonSizeDirective,\n    MatSidenavModule,\n    AppNavButtonComponent,\n    ScrollingModule,\n    AssetUrlPipe,\n  ],\n  templateUrl: './nav-header.component.html',\n  styleUrl: './nav-header.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavHeaderComponent {\n  /** Variant of the header */\n  readonly variant = input<NavHeaderButtonsVariant>('basic');\n  /** Link to the app */\n  readonly link = input.required<string>();\n  /** Current app */\n  readonly app = input.required<string>();\n  /** Name of the app */\n  readonly tagline = input.required<string>();\n  /** Status of the app */\n  readonly status = input<SoftwareStatus>();\n  /** Data to display in sidenav */\n  readonly navigationCategories = input.required<CardData[]>();\n}\n",
            "styleUrl": "./nav-header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-sidenav-container class=\"container\">\n  <mat-sidenav #sidenav mode=\"over\" class=\"apps-sidenav\" position=\"end\" [fixedInViewport]=\"false\">\n    <div class=\"header\">\n      <span class=\"sidenav-title\"> HuBMAP Tools & Applications </span>\n      <div style=\"flex-grow: 1\"></div>\n      <button mat-icon-button hraIconButtonSize=\"large\" disableRipple (click)=\"sidenav.toggle()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <ng-scrollbar>\n      @for (item of navigationCategories(); track item) {\n        <div class=\"category\">\n          <div class=\"card-category\">{{ item.category }}</div>\n          @for (card of item.cards; track card) {\n            <hra-app-nav-button\n              [icon]=\"card.icon\"\n              [tagline]=\"card.name\"\n              [description]=\"card.description\"\n              [link]=\"card.link\"\n            ></hra-app-nav-button>\n          }\n        </div>\n      }\n    </ng-scrollbar>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <div class=\"main\">\n      <hra-nav-header-buttons\n        [variant]=\"variant()\"\n        [appLink]=\"link()\"\n        [app]=\"app()\"\n        [appTitle]=\"tagline()\"\n        [appStatus]=\"status()\"\n      ></hra-nav-header-buttons>\n      <div style=\"flex-grow: 1\"></div>\n      <button mat-icon-button hraIconButtonSize=\"large\" disableRipple (click)=\"sidenav.toggle()\">\n        <mat-icon>apps</mat-icon>\n      </button>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "NavigationCategoryToggleComponent",
            "id": "component-NavigationCategoryToggleComponent-8183dabdc506b283b055ede6a9dbbb502f4c404790ae73c2891c3fd71093c4627c5685814de68fd4e8b7938004736c37db5e84cbeb7c09d88663dd8c426e9621",
            "file": "buttons/navigation-category-toggle/src/lib/navigation-category-toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-navigation-category-toggle",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-category-toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "toggled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the button is toggled on/off</p>\n",
                    "line": 16,
                    "rawdescription": "\nWhether the button is toggled on/off",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "toggled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the button is toggled on/off</p>\n",
                    "line": 16,
                    "rawdescription": "\nWhether the button is toggled on/off",
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonToggleModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "<p>Navigation toggle button</p>\n",
            "rawdescription": "\nNavigation toggle button",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, model } from '@angular/core';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatIconModule } from '@angular/material/icon';\n\n/** Navigation toggle button */\n@Component({\n  selector: 'hra-navigation-category-toggle',\n  imports: [CommonModule, MatButtonToggleModule, MatIconModule],\n  templateUrl: './navigation-category-toggle.component.html',\n  styleUrl: './navigation-category-toggle.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationCategoryToggleComponent {\n  /** Whether the button is toggled on/off */\n  readonly toggled = model(false);\n}\n",
            "styleUrl": "./navigation-category-toggle.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-button-toggle class=\"toggle\" [checked]=\"toggled()\" (change)=\"toggled.set($event.source.checked)\">\n  <span class=\"text\">\n    <ng-content></ng-content>\n  </span>\n\n  <mat-icon class=\"icon\">\n    @if (toggled()) {\n      expand_less\n    } @else {\n      expand_more\n    }\n  </mat-icon>\n</mat-button-toggle>\n"
        },
        {
            "name": "NoticeComponent",
            "id": "component-NoticeComponent-1d41a9b160020a7c8b2d2f7d05799c18544d74061f100e9491630758c5fcd832185f5e614fbfda8a91a43a1777483dc6607aad8d2f48b7732a90f84bc344898d",
            "file": "dialog/src/lib/notice/notice.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-notice",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./notice.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "inject(MAT_DIALOG_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Instance of Mat Dialog Data</p>\n",
                    "line": 50,
                    "rawdescription": "\nInstance of Mat Dialog Data",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogActions"
                },
                {
                    "name": "MatDialogTitle"
                },
                {
                    "name": "MatDialogContent"
                },
                {
                    "name": "MatDialogClose"
                }
            ],
            "description": "<p>Notice Component</p>\n",
            "rawdescription": "\nNotice Component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Interface for Dialog Data */\nexport interface DialogData {\n  /** Title of the dialog */\n  title: string;\n  /** Message of the dialog */\n  message: string;\n  /** Action Button Object */\n  action?: {\n    /** Label for the action button */\n    label: string;\n    /** Callback function for the action button */\n    callback: () => void;\n  };\n}\n\n/** Notice Component */\n@Component({\n  selector: 'hra-notice',\n  imports: [\n    CommonModule,\n    IconButtonSizeDirective,\n    MatIconModule,\n    ButtonsModule,\n    MatButtonModule,\n    MatDialogActions,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogClose,\n  ],\n  templateUrl: './notice.component.html',\n  styleUrl: './notice.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NoticeComponent {\n  /** Instance of Mat Dialog Data */\n  protected readonly data: DialogData = inject(MAT_DIALOG_DATA);\n}\n",
            "styleUrl": "./notice.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div mat-dialog-title>\n  <div class=\"title\">\n    {{ data.title }}\n  </div>\n  <button mat-icon-button mat-dialog-close disableRipple hraIconButtonSize=\"large\" data-testid=\"close-icon\">\n    <mat-icon class=\"material-symbols-rounded\">close</mat-icon>\n  </button>\n</div>\n<mat-dialog-content>{{ data.message }}</mat-dialog-content>\n<mat-dialog-actions>\n  @if (data.action) {\n    <button mat-button disableRipple hraButtonSize=\"medium\" class=\"action\" (click)=\"data.action.callback()\">\n      {{ data.action.label }}\n    </button>\n  }\n  <button mat-button disableRipple mat-dialog-close hraButtonSize=\"medium\" class=\"dismiss\">Dismiss</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "ProductLogoComponent",
            "id": "component-ProductLogoComponent-e37bc2cfd7de3873f7ade311d20c5b923da05bad5ba773f42c0f39816bd0fe8738d65062450d9f0868a905765dea978e8ef85a98f5426cfc10897d32d8701b6b",
            "file": "product-logo/src/lib/product-logo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-product-logo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./product-logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button name</p>\n",
                    "line": 20,
                    "rawdescription": "\nButton name",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button size</p>\n",
                    "line": 23,
                    "rawdescription": "\nButton size",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "defaultValue": "computed(() => `products:${this.name()}${this.size() === 'large' ? '_large' : ''}`)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Icon to display</p>\n",
                    "line": 26,
                    "rawdescription": "\nIcon to display",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button name</p>\n",
                    "line": 20,
                    "rawdescription": "\nButton name",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button size</p>\n",
                    "line": 23,
                    "rawdescription": "\nButton size",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "<p>HRA product logos</p>\n",
            "rawdescription": "\n\nHRA product logos\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\n\n/** Button size type */\nexport type ProductLogoSize = 'small' | 'large';\n\n/**\n * HRA product logos\n */\n@Component({\n  selector: 'hra-product-logo',\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './product-logo.component.html',\n  styleUrl: './product-logo.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductLogoComponent {\n  /** Button name */\n  readonly name = input.required<string>();\n\n  /** Button size */\n  readonly size = input.required<ProductLogoSize>();\n\n  /** Icon to display */\n  protected readonly icon = computed(() => `products:${this.name()}${this.size() === 'large' ? '_large' : ''}`);\n}\n",
            "styleUrl": "./product-logo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-icon [class.small]=\"size() === 'small'\" [svgIcon]=\"icon()\" data-testid=\"product-logo\"></mat-icon>\n"
        },
        {
            "name": "ScrollbarStylesComponent",
            "id": "component-ScrollbarStylesComponent-98b2470766cfc5e02f5528d424eab1b1b48f8a7ec5e51329e60e5c8af8042b617927f1d34f21b9e7f94bb3a558514571ebd540fc3a9f1e378ac1bdfdca0dd40d",
            "file": "scrolling/src/lib/scrollbar-styles/scrollbar-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-scrollbar-styles",
            "styleUrls": [
                "./scrollbar-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>ng-scrollbar global styles component</p>\n",
            "rawdescription": "\nng-scrollbar global styles component",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/** ng-scrollbar global styles component */\n@Component({\n  selector: 'hra-scrollbar-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./scrollbar-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollbarStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  --scrollbar-thumb-color: rgb(from var(--mat-sys-primary) r g b / 0.72);\n  --scrollbar-border-radius: 1rem;\n  --scrollbar-thickness: 8;\n}\n",
                    "styleUrl": "./scrollbar-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ScrollOverflowFadeStylesComponent",
            "id": "component-ScrollOverflowFadeStylesComponent-5c069d94d9cda63486aa31c1f23d16a2e9d7563746326d99a1bebc6db1587495214db4c3ef234dcfc5e6a0a8302103131d976909000eb2f37ae90b65a07b6a0e",
            "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-scroll-overflow-fade-styles",
            "styleUrls": [
                "./scroll-overflow-fade.directive.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Scroll overflow fade global styles component</p>\n",
            "rawdescription": "\nScroll overflow fade global styles component",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  Renderer2,\n  ViewEncapsulation,\n  effect,\n  inject,\n  input,\n  numberAttribute,\n} from '@angular/core';\nimport { registerStyleComponents } from '@hra-ui/cdk/styling';\nimport { NG_SCROLLBAR } from 'ngx-scrollbar';\nimport { SCROLL_TIMELINE, ScrollTimelineFunc } from '../scroll-timeline/scroll-timeline';\n\n/** Keyframes for the top gradient */\nconst GRADIENT_TOP_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n];\n\n/** Keyframes for the bottom gradient */\nconst GRADIENT_BOTTOM_KEYFRAMES: Keyframe[] = [\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n];\n\n/** Scroll overflow fade global styles component */\n@Component({\n  selector: 'hra-scroll-overflow-fade-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./scroll-overflow-fade.directive.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScrollOverflowFadeStylesComponent {}\n\n/**\n * Directive that can be used along ng-scrollbar to apply a gradient\n * to the top and bottom of the scroll area to indicate that there\n * is additional content available through scrolling.\n */\n@Directive({\n  selector: '[hraScrollOverflowFade]',\n  standalone: true,\n  host: {\n    '[style.--hra-scroll-overflow-fade-offset.px]': 'scrollOverflowFadeOffset()',\n  },\n})\nexport class ScrollOverflowFadeDirective {\n  /**\n   * Additional offset to the gradient elements.\n   * Primarily useful when there are sticky headers on a table, etc.\n   */\n  readonly scrollOverflowFadeOffset = input(0, { transform: numberAttribute });\n\n  /** Renderer instance */\n  private readonly renderer = inject(Renderer2);\n  /** Nearest ng-scrollbar instance */\n  private readonly scrollbar = inject(NG_SCROLLBAR);\n  /** Signal providing access to ScrollTimeline though browser builtin or polyfill */\n  private readonly scrollTimeline = inject(SCROLL_TIMELINE);\n\n  /**\n   * Initializes the directive, adding the gradient elements to the scroll area.\n   */\n  constructor() {\n    registerStyleComponents([ScrollOverflowFadeStylesComponent]);\n\n    effect((onCleanup) => {\n      const scrollTimeline = this.scrollTimeline();\n      if (!this.scrollbar.viewport.initialized() || !scrollTimeline) {\n        return;\n      }\n\n      const viewport = this.scrollbar.viewport.nativeElement;\n      const cleanupFns = [\n        this.attachGradient(viewport, 'top', scrollTimeline, GRADIENT_TOP_KEYFRAMES),\n        this.attachGradient(viewport, 'bottom', scrollTimeline, GRADIENT_BOTTOM_KEYFRAMES),\n      ];\n\n      onCleanup(() => cleanupFns.forEach((fn) => fn()));\n    });\n  }\n\n  /**\n   * Creates and attaches a gradient element to a scroll area.\n   *\n   * @param viewport The scroll area viewport\n   * @param placement Whether to place the gradient on top or bottom\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param keyframes Keyframes used to animate/move the gradient\n   * @returns A cleanup function\n   */\n  private attachGradient(\n    viewport: HTMLElement,\n    placement: 'top' | 'bottom',\n    scrollTimeline: ScrollTimelineFunc,\n    keyframes: Keyframe[],\n  ): () => void {\n    const el = this.createGradientElement(placement);\n    this.renderer.appendChild(viewport, el);\n\n    const animation = this.animateGradient(scrollTimeline, el, viewport, keyframes);\n    return () => {\n      el.remove();\n      animation.cancel();\n    };\n  }\n\n  /**\n   * Creates a new gradient element.\n   *\n   * @param placement Whether it will be placed on the top or bottom\n   * @returns A new element\n   */\n  private createGradientElement(placement: 'top' | 'bottom'): HTMLElement {\n    const el: HTMLElement = this.renderer.createElement('div');\n    this.renderer.addClass(el, `hra-scroll-overflow-fade-gradient-${placement}`);\n    return el;\n  }\n\n  /**\n   * Animates a gradient element using a scroll timeline.\n   *\n   * @param scrollTimeline Reference to ScrollTimeline\n   * @param el Element to animate\n   * @param source Scroll container element\n   * @param keyframes Keyframe specification\n   * @returns An animation\n   */\n  private animateGradient(\n    scrollTimeline: ScrollTimelineFunc,\n    el: HTMLElement,\n    source: HTMLElement,\n    keyframes: Keyframe[],\n  ): Animation {\n    return el.animate(keyframes, {\n      fill: 'both',\n      easing: 'linear',\n      timeline: new scrollTimeline({ source, axis: 'y' }),\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hra-scroll-overflow-fade-gradient-top,\n.hra-scroll-overflow-fade-gradient-bottom {\n  --_hra-scroll-overflow-fade-height: var(--hra-scroll-overflow-fade-height, 32px);\n  --_hra-scroll-overflow-fade-color: var(--hra-scroll-overflow-fade-color, #ffffff);\n\n  display: block;\n  position: absolute;\n  pointer-events: none;\n  z-index: 99;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: var(--_hra-scroll-overflow-fade-height);\n}\n\n.hra-scroll-overflow-fade-gradient-top {\n  --_hra-scroll-overflow-fade-gradient-top-start: var(--hra-scroll-overflow-fade-offset);\n  --_hra-scroll-overflow-fade-gradient-top-end: calc(\n    (var(--content-height) - var(--viewport-height)) * 1px + 2 * var(--hra-scroll-overflow-fade-offset) - 1px\n  );\n\n  top: calc(-1 * var(--_hra-scroll-overflow-fade-height));\n  background: linear-gradient(to bottom, var(--_hra-scroll-overflow-fade-color), transparent);\n}\n\n.hra-scroll-overflow-fade-gradient-bottom {\n  --_hra-scroll-overflow-fade-gradient-bottom-start: calc(\n    var(--viewport-height) * 1px - var(--_hra-scroll-overflow-fade-height)\n  );\n  --_hra-scroll-overflow-fade-gradient-bottom-end: calc(\n    var(--content-height) * 1px - var(--_hra-scroll-overflow-fade-height) + var(--hra-scroll-overflow-fade-offset)\n  );\n\n  top: 100%;\n  background: linear-gradient(to top, var(--_hra-scroll-overflow-fade-color), transparent);\n}\n\nng-scrollbar[isVerticallyScrollable='false'] {\n  & .hra-scroll-overflow-fade-gradient-top,\n  & .hra-scroll-overflow-fade-gradient-bottom {\n    display: none;\n  }\n}\n",
                    "styleUrl": "./scroll-overflow-fade.directive.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SelectStylesComponent",
            "id": "component-SelectStylesComponent-6387c0c4477ef2415f19058821e3ea0283565c70a8f173dc578c48db8b9aff149fdfb0dc4ca67088b46e0bc18073afdaaf01be13655b5b8fec12ad7a03e98261",
            "file": "select/src/lib/select-styles/select-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-select-styles",
            "styleUrls": [
                "./select-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies select styles globally</p>\n",
            "rawdescription": "\n\nApplies select styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies select styles globally\n */\n@Component({\n  selector: 'hra-select-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./select-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  mat-form-field.mat-mdc-form-field-type-mat-select {\n    --mdc-filled-text-field-container-color: var(--mat-sys-surface-container);\n    --mat-select-focused-arrow-color: var(--mat-sys-tertiary);\n\n    --mat-form-field-container-height: 3rem;\n    --mat-form-field-filled-with-label-container-padding-top: 1.25rem;\n    --mat-form-field-filled-with-label-container-padding-bottom: 0.25rem;\n\n    mat-label {\n      font: var(--mat-sys-label-small);\n      letter-spacing: var(--mat-sys-label-small-tracking);\n      color: var(--mat-sys-primary-fixed);\n    }\n\n    &.mat-focused {\n      mat-label {\n        color: var(--mat-sys-tertiary);\n      }\n\n      .mdc-line-ripple::after {\n        --mdc-filled-text-field-focus-active-indicator-color: var(--mat-sys-tertiary);\n      }\n\n      mat-select {\n        .mat-mdc-select-value-text .mat-mdc-select-min-line {\n          color: var(--mat-sys-primary-fixed);\n          letter-spacing: var(--mat-sys-label-medium-tracking);\n        }\n      }\n    }\n\n    mat-select {\n      .mat-mdc-select-value-text .mat-mdc-select-min-line {\n        font: var(--mat-sys-label-medium);\n        letter-spacing: var(--mat-sys-label-medium-tracking);\n      }\n    }\n\n    &.mat-form-field-disabled {\n      mat-label {\n        color: var(--mdc-filled-text-field-disabled-label-text-color);\n      }\n    }\n  }\n\n  .options-container {\n    --mat-select-panel-background-color: var(--mat-sys-on-primary);\n    --mat-option-selected-state-label-text-color: var(--mat-sys-secondary);\n    --mat-option-hover-state-layer-color: color-mix(in srgb, var(--mat-sys-on-surface) 4%, transparent);\n    --mat-select-container-elevation-shadow: 0px 5px 4px 0px rgb(from var(--mat-sys-shadow) r g b / 0.16);\n    --mat-option-label-text-color: var(--mat-sys-primary-container);\n    --mat-option-focus-state-layer-color: color-mix(in srgb, var(--mat-sys-on-surface) 4%, transparent);\n\n    mat-option.mat-mdc-option {\n      font: var(--mat-sys-label-large);\n      margin-bottom: 0.5px;\n      min-height: 3.5rem;\n\n      &:active {\n        --mat-option-hover-state-layer-color: color-mix(in srgb, var(--mat-sys-on-surface) 8%, transparent);\n      }\n\n      &:focus-visible {\n        outline: 2px solid var(--mat-sys-tertiary);\n      }\n\n      &.mdc-list-item--selected.mat-mdc-option-active {\n        --mat-minimal-pseudo-checkbox-selected-checkmark-color: var(--mat-sys-on-tertiary-container);\n        background-color: color-mix(in srgb, var(--mat-sys-on-tertiary-container) 8%, transparent);\n      }\n\n      &.mat-mdc-option-active {\n        outline: 1px solid color-mix(in srgb, var(--mat-sys-on-surface) 32%, transparent);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./select-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SnackbarComponent",
            "id": "component-SnackbarComponent-8766ca472d19d28a16082b84e9635c3c550326c77bdbd73a2af5c667444a6467f578fb6ca108847c730a1ac3a0006e5d18d5d75f8f8679f5896a6aac4e96db3c",
            "file": "snackbar/src/lib/snackbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-snackbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./snackbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "inject(MAT_SNACK_BAR_DATA)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnackbarData",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Injection token for the snackbar data</p>\n",
                    "line": 36,
                    "rawdescription": "\nInjection token for the snackbar data",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "snackbarRef",
                    "defaultValue": "inject(MatSnackBarRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Reference to the MatSnackbarRef</p>\n",
                    "line": 33,
                    "rawdescription": "\nReference to the MatSnackbarRef",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "IconButtonSizeDirective",
                    "type": "directive"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "<p>Snackbar component</p>\n",
            "rawdescription": "\nSnackbar component",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\nimport { IconButtonSizeDirective } from '@hra-ui/design-system/icon-button';\n\n/** Type for button position */\nexport type ButtonPosition = 'start' | 'end';\n\n/** interface for snackbar data */\nexport interface SnackbarData {\n  /** Message in the snackbar */\n  message: string;\n  /** Action button */\n  action?: string;\n  /** Flag to show/hide the close button */\n  close?: boolean;\n  /** Position of the action button */\n  actionButtonPosition?: ButtonPosition;\n}\n\n/** Snackbar component */\n@Component({\n  selector: 'hra-snackbar',\n  imports: [CommonModule, MatIconModule, ButtonsModule, IconButtonSizeDirective, MatIconModule],\n  templateUrl: './snackbar.component.html',\n  styleUrl: './snackbar.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SnackbarComponent {\n  /** Reference to the MatSnackbarRef */\n  protected readonly snackbarRef = inject(MatSnackBarRef);\n\n  /** Injection token for the snackbar data*/\n  protected readonly data: SnackbarData = inject(MAT_SNACK_BAR_DATA);\n}\n",
            "styleUrl": "./snackbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span matSnackbarLabel class=\"label\">{{ data.message }}</span>\n<div style=\"flex-grow: 1\"></div>\n<div class=\"actions\">\n  @if (data.action) {\n    <span matSnackBarActions [class.position-end]=\"data.actionButtonPosition === 'end'\">\n      <button\n        mat-button\n        disableRipple\n        hraButtonSize=\"medium\"\n        matSnackBarAction\n        (click)=\"snackbarRef.dismissWithAction()\"\n      >\n        {{ data.action }}\n      </button>\n    </span>\n  }\n  @if (data.close) {\n    <button mat-icon-button hraIconButtonSize=\"large\" (click)=\"snackbarRef.dismiss()\" data-testid=\"close-btn\">\n      <mat-icon> close </mat-icon>\n    </button>\n  }\n</div>\n"
        },
        {
            "name": "SocialMediaButtonComponent",
            "id": "component-SocialMediaButtonComponent-b02ffea8f9352d2b912d3211f28fc9111d4a06f4d124fde2eeaae1f3700c97c83fe6f1e5346a426ea30f898f92235d3b31137b8d4cf97c8d14da5992d836cfa9",
            "file": "buttons/social-media-button/src/lib/social-media-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-social-media-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./social-media-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Social media to display</p>\n",
                    "line": 18,
                    "rawdescription": "\nSocial media to display",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "computed(() => {\n    const item = SOCIALS.find(({ id }) => this.id() === id);\n    if (!item) {\n      throw new Error(`No social media with id '${this.id()}'`);\n    }\n\n    return item;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Social media button data</p>\n",
                    "line": 27,
                    "rawdescription": "\nSocial media button data",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Social media to display</p>\n",
                    "line": 18,
                    "rawdescription": "\nSocial media to display",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "size",
                    "defaultValue": "input<IconButtonSize>('large')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button size</p>\n",
                    "line": 21,
                    "rawdescription": "\nButton size",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "variant",
                    "defaultValue": "input<IconButtonVariant>('dark')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button variant</p>\n",
                    "line": 24,
                    "rawdescription": "\nButton variant",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IconButtonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Social media buttons for HRA apps</p>\n",
            "rawdescription": "\n\nSocial media buttons for HRA apps\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, computed, input } from '@angular/core';\nimport { IconButtonModule, IconButtonSize, IconButtonVariant } from '@hra-ui/design-system/icon-button';\nimport { SocialMediaId } from './types/social-media.schema';\nimport { SOCIALS } from './static-data/parsed';\n\n/**\n * Social media buttons for HRA apps\n */\n@Component({\n  selector: 'hra-social-media-button',\n  imports: [CommonModule, IconButtonModule],\n  templateUrl: './social-media-button.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SocialMediaButtonComponent {\n  /** Social media to display */\n  readonly id = input.required<SocialMediaId>();\n\n  /** Button size */\n  readonly size = input<IconButtonSize>('large');\n\n  /** Button variant */\n  readonly variant = input<IconButtonVariant>('dark');\n\n  /** Social media button data */\n  protected readonly data = computed(() => {\n    const item = SOCIALS.find(({ id }) => this.id() === id);\n    if (!item) {\n      throw new Error(`No social media with id '${this.id()}'`);\n    }\n\n    return item;\n  });\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a\n  mat-icon-button\n  [hraIconButtonVariant]=\"variant()\"\n  [hraIconButtonSize]=\"size()\"\n  [href]=\"data().link\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n  @if (data().isFontIcon) {\n    <mat-icon [fontIcon]=\"data().icon\"></mat-icon>\n  } @else {\n    <mat-icon [svgIcon]=\"data().icon\"></mat-icon>\n  }\n</a>\n"
        },
        {
            "name": "SoftwareStatusIndicatorComponent",
            "id": "component-SoftwareStatusIndicatorComponent-ffd96787be9d7856104f834160ecafeb5072be68b23c0e7c7a25e12a82d4e7a9605392ce1ebaf89ba69b635a7568617e0c1c7f83792920f31891b64310c0954f",
            "file": "software-status-indicator/src/lib/software-status-indicator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-software-status-indicator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./software-status-indicator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current status of app</p>\n",
                    "line": 24,
                    "rawdescription": "\nCurrent status of app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "input<SoftwareStatusSize>('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of indicator</p>\n",
                    "line": 27,
                    "rawdescription": "\nSize of indicator",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current status of app</p>\n",
                    "line": 24,
                    "rawdescription": "\nCurrent status of app",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "tooltips",
                    "defaultValue": "{\n    Preview: 'Earliest development stage: Core features are under construction and evolving.',\n    Alpha: 'Early testing stage: Features may change. Expect bugs and incomplete functionality.',\n    Beta: 'Near-final stage: Most features are ready, fewer bugs, and more feedback is needed.',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<SoftwareStatus | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Tooltips corresponding to software status</p>\n",
                    "line": 30,
                    "rawdescription": "\nTooltips corresponding to software status",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MicroTooltipDirective",
                    "type": "directive"
                },
                {
                    "name": "SoftwareStatusSizeDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Indicator to display software status in nav header</p>\n",
            "rawdescription": "\n\nIndicator to display software status in nav header\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { MicroTooltipDirective } from '@hra-ui/design-system/micro-tooltip';\nimport { SoftwareStatusSizeDirective } from './software-status-indicator-size.directive';\n\n/** Software status options */\nexport type SoftwareStatus = 'Preview' | 'Alpha' | 'Beta';\n\n/** Software status size options */\nexport type SoftwareStatusSize = 'small' | 'medium' | 'large';\n\n/**\n * Indicator to display software status in nav header\n */\n@Component({\n  selector: 'hra-software-status-indicator',\n  imports: [CommonModule, MicroTooltipDirective, SoftwareStatusSizeDirective],\n  templateUrl: './software-status-indicator.component.html',\n  styleUrl: './software-status-indicator.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SoftwareStatusIndicatorComponent {\n  /** Current status of app */\n  readonly status = input.required<SoftwareStatus>();\n\n  /** Size of indicator */\n  readonly size = input<SoftwareStatusSize>('medium');\n\n  /** Tooltips corresponding to software status */\n  readonly tooltips: Record<SoftwareStatus, string> = {\n    Preview: 'Earliest development stage: Core features are under construction and evolving.',\n    Alpha: 'Early testing stage: Features may change. Expect bugs and incomplete functionality.',\n    Beta: 'Near-final stage: Most features are ready, fewer bugs, and more feedback is needed.',\n  };\n}\n",
            "styleUrl": "./software-status-indicator.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"app-description\"\n  [hraSoftwareStatusSize]=\"size()\"\n  [hraMicroTooltip]=\"tooltips[status()]\"\n  hraMicroTooltipSize=\"small\"\n>\n  {{ status() }}\n</div>\n"
        },
        {
            "name": "StepIndicatorComponent",
            "id": "component-StepIndicatorComponent-c3fd0426a16869f76450b109415bf25717d4fa40652d15ddc42f4025ff1b7d5674c4f5829e216d14e1cba08a2aca688ad35d455a09af940bf26cdbbb69a21244",
            "file": "step-indicator/src/lib/step-indicator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-step-indicator",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./step-indicator.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Step value</p>\n",
                    "line": 16,
                    "rawdescription": "\nStep value",
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Step value</p>\n",
                    "line": 16,
                    "rawdescription": "\nStep value",
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Step indicator for module components that have multiple steps</p>\n",
            "rawdescription": "\n\nStep indicator for module components that have multiple steps\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n/**\n * Step indicator for module components that have multiple steps\n */\n@Component({\n  selector: 'hra-step-indicator',\n  imports: [CommonModule],\n  templateUrl: './step-indicator.component.html',\n  styleUrl: './step-indicator.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StepIndicatorComponent {\n  /** Step value */\n  value = input.required<number>();\n}\n",
            "styleUrl": "./step-indicator.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span class=\"step-number\">{{ value() }}</span>\n"
        },
        {
            "name": "TableDemoComponent",
            "id": "component-TableDemoComponent-f712bbba5ae4b005f32490419bc0d30512fa6fe7689311634a0a5ae7682e9e3cb8575e7e13c2e6d0ccd9fdc4eb2d82efe36245f2c07dd246342622a6b82dd8bc",
            "file": "table/src/lib/table-demo/table-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-table-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "table-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "['name', 'value']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Columns in table</p>\n",
                    "line": 27,
                    "rawdescription": "\nColumns in table",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "input<TableDemoData[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Unsorted data</p>\n",
                    "line": 24,
                    "rawdescription": "\nUnsorted data",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<TableDemoData>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Table data source</p>\n",
                    "line": 33,
                    "rawdescription": "\nTable data source",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "sort",
                    "defaultValue": "viewChild.required(MatSort)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Mat sort element</p>\n",
                    "line": 30,
                    "rawdescription": "\nMat sort element",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Angular Material table with with sort feature</p>\n",
            "rawdescription": "\n\nAngular Material table with with sort feature\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, effect, input, viewChild } from '@angular/core';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\n\n/** Type for row data */\nexport interface TableDemoData {\n  /** Name of item */\n  name: string;\n  /** Value of item*/\n  value: number;\n}\n\n/**\n * Angular Material table with with sort feature\n */\n@Component({\n  selector: 'hra-table-demo',\n  templateUrl: 'table-demo.component.html',\n  imports: [MatTableModule, MatSortModule, CommonModule],\n})\nexport class TableDemoComponent {\n  /** Unsorted data */\n  readonly data = input<TableDemoData[]>([]);\n\n  /** Columns in table */\n  readonly columns: string[] = ['name', 'value'];\n\n  /** Mat sort element */\n  readonly sort = viewChild.required(MatSort);\n\n  /** Table data source */\n  readonly dataSource = new MatTableDataSource<TableDemoData>([]);\n\n  /** Sort data on load */\n  constructor() {\n    effect(() => {\n      this.dataSource.data = this.data();\n      this.dataSource.sort = this.sort();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Sort data on load</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33,
                "rawdescription": "\nSort data on load"
            },
            "extends": [],
            "templateData": "<table mat-table [dataSource]=\"dataSource\" matSort aria-label=\"Table with sort function\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by name\">Name</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element['name'] }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by value\">Value</th>\n    <td mat-cell *matCellDef=\"let element\">{{ element['value'] }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: columns\"></tr>\n</table>\n"
        },
        {
            "name": "TableStylesComponent",
            "id": "component-TableStylesComponent-56ed26ef392a89292a2c2262e8c73b41a1eef1070da8a3db99724c9e4389293340dce99c06e7ef40f3cb6022b8615f862ad28195e72697d5eaedc23d382740e5",
            "file": "table/src/lib/table-styles/table-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-table-styles",
            "styleUrls": [
                "./table-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies table styles globally</p>\n",
            "rawdescription": "\n\nApplies table styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies table styles globally\n */\n@Component({\n  selector: 'hra-table-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./table-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  table[matSort] {\n    --mat-sort-arrow-color: var(--mat-sys-secondary);\n    --mat-table-background-color: var(--mat-sys-surface-container-low);\n    --mat-table-header-container-height: 2rem;\n    --mat-table-row-item-container-height: 2rem;\n\n    th,\n    tr > td {\n      padding: 0 0.5rem;\n      font: var(--mat-sys-label-medium);\n      letter-spacing: var(--mat-sys-label-medium-tracking);\n    }\n\n    th {\n      color: var(--mat-sys-secondary);\n      line-height: normal;\n    }\n\n    tr {\n      color: black;\n    }\n\n    .mat-sort-header-container {\n      height: 1.5rem;\n      border-bottom: 0.0625rem solid transparent;\n      max-width: 4.375rem;\n\n      &:focus-visible {\n        border-color: var(--mat-sys-secondary);\n      }\n\n      .mat-sort-header-arrow {\n        margin-right: 0.375rem;\n\n        .mat-sort-header-stem {\n          border-radius: 0.25rem;\n          height: 0.75rem;\n        }\n\n        .mat-sort-header-pointer-left,\n        .mat-sort-header-pointer-right {\n          width: 0.4375rem;\n        }\n\n        .mat-sort-header-pointer-left {\n          left: -0.0625rem;\n          border-radius: 0.25rem 0 0 0.25rem;\n        }\n\n        .mat-sort-header-pointer-right {\n          right: -0.0625rem;\n          border-radius: 0 0.25rem 0.25rem 0;\n        }\n\n        .mat-sort-header-pointer-middle {\n          border-radius: 0.25rem;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./table-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TextHyperlinkGlobalStylesComponent",
            "id": "component-TextHyperlinkGlobalStylesComponent-f215f1d34a89e13dbb13eabe6019e87af07c908bdd1288070bea07b8d10571167d062f33b32d64dc8339160e5ee377ff61a0a73ed58f41c09cec818fd42c2b6c",
            "file": "buttons/text-hyperlink/src/lib/global-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-text-hyperlink-global-styles",
            "styleUrls": [
                "./global-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Global styles for text hyperlinks</p>\n",
            "rawdescription": "\nGlobal styles for text hyperlinks",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/** Global styles for text hyperlinks */\n@Component({\n  selector: 'hra-text-hyperlink-global-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./global-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TextHyperlinkGlobalStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  a:not(.hra-text-hyperlink) {\n    text-decoration: none;\n  }\n\n  a.hra-text-hyperlink {\n    text-decoration: none;\n\n    &:link,\n    &:link mat-icon {\n      color: var(--mat-sys-on-tertiary-fixed);\n    }\n\n    &:visited,\n    &:visited mat-icon {\n      color: var(--mat-sys-tertiary-fixed);\n    }\n\n    &:focus-visible,\n    &:hover,\n    &:active {\n      text-decoration: underline solid currentColor 0.0625rem;\n      text-underline-offset: 0.125rem;\n    }\n\n    &:focus-visible {\n      color: var(--mat-sys-secondary);\n      outline: 0.125rem solid var(--mat-sys-tertiary);\n      border-radius: 0.25rem;\n\n      & mat-icon {\n        color: var(--mat-sys-secondary);\n      }\n    }\n\n    &:hover,\n    &:hover mat-icon {\n      color: var(--mat-sys-on-tertiary-fixed);\n    }\n\n    &:active,\n    &:active mat-icon {\n      color: var(--mat-sys-on-tertiary-fixed-variant);\n    }\n  }\n}\n",
                    "styleUrl": "./global-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TooltipCardComponent",
            "id": "component-TooltipCardComponent-7193ef52483d069fc6a41fa3e1edfc82f9c2d8ab65ff0d1d72fc22d8f1ad27f4d7618c9475d46b7ed4e4d7d6680c1750ed780f63a83b9d2b4506ef53e5ca33c6",
            "file": "tooltip-card/src/lib/tooltip-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-tooltip-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "input.required<TooltipContent[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Input for the card</p>\n",
                    "line": 27,
                    "rawdescription": "\nInput for the card",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "small",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Flag to decide whether the card is small</p>\n",
                    "line": 30,
                    "rawdescription": "\nFlag to decide whether the card is small",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Tooltip Card component</p>\n",
            "rawdescription": "\n\nTooltip Card component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { booleanAttribute, ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n/** Interface for Tooltip Card Content */\nexport interface TooltipContent {\n  /** Title of the card */\n  title?: string;\n  /** Description of the card */\n  description: string;\n}\n\n/**\n * Tooltip Card component\n */\n@Component({\n  selector: 'hra-tooltip-card',\n  imports: [CommonModule],\n  templateUrl: './tooltip-card.component.html',\n  styleUrl: './tooltip-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.small]': 'small()',\n  },\n})\nexport class TooltipCardComponent {\n  /** Input for the card */\n  readonly content = input.required<TooltipContent[]>();\n\n  /** Flag to decide whether the card is small */\n  readonly small = input(false, { transform: booleanAttribute });\n}\n",
            "styleUrl": "./tooltip-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for (item of content(); track item) {\n  <section class=\"section\">\n    @if (item.title) {\n      <h4 class=\"title\">{{ item.title }}</h4>\n    }\n    <p class=\"description\">{{ item.description }}</p>\n  </section>\n}\n"
        },
        {
            "name": "TreeDemoComponent",
            "id": "component-TreeDemoComponent-f6e1ecb463b0582e37ef566a3316d1f3a3901aa9ae6518426712986e465c9b3d96c4987fec8f541fa20e1654be5108d4ab5ff1deaeb87166a337b4bf05714b50",
            "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-tree-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "tree-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "childrenAccessor",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Gets the children of a node</p>\n",
                    "line": 53,
                    "rawdescription": "\nGets the children of a node"
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new ArrayDataSource<NestedNode>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Data source</p>\n",
                    "line": 47,
                    "rawdescription": "\nData source"
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>If the node has a child</p>\n",
                    "line": 56,
                    "rawdescription": "\nIf the node has a child"
                },
                {
                    "name": "padding",
                    "defaultValue": "computed(() => PADDING[this.size()])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Padding indents</p>\n",
                    "line": 44,
                    "rawdescription": "\nPadding indents",
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "selectedNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NestedNode",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Current selected node</p>\n",
                    "line": 50,
                    "rawdescription": "\nCurrent selected node"
                },
                {
                    "name": "size",
                    "defaultValue": "input<TreeSize>('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Size of tree to use</p>\n",
                    "line": 41,
                    "rawdescription": "\nSize of tree to use",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTree<NestedNode>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>ViewChild for tree component</p>\n",
                    "line": 35,
                    "rawdescription": "\nViewChild for tree component",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTree"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "treeData",
                    "defaultValue": "input<NestedNode[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Tree node data</p>\n",
                    "line": 38,
                    "rawdescription": "\nTree node data",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "shouldRender",
                    "args": [
                        {
                            "name": "node",
                            "type": "NestedNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRenders node if it is a root node or if all of its ancestors are expanded",
                    "description": "<p>Renders node if it is a root node or if all of its ancestors are expanded</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NestedNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatTreeModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "TreeSizeDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Angular Material nested tree component with HRA styles</p>\n",
            "rawdescription": "\n\nAngular Material nested tree component with HRA styles\n",
            "type": "component",
            "sourceCode": "import { ArrayDataSource } from '@angular/cdk/collections';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, computed, input, ViewChild } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTree, MatTreeModule } from '@angular/material/tree';\n\nimport { TreeSize, TreeSizeDirective } from '../tree-size/tree-size.directive';\n\n/** Nested tree node data */\nexport interface NestedNode {\n  /** Name of node */\n  name: string;\n  /** List of child nodes */\n  children?: NestedNode[];\n}\n\n/** Padding indents for each tree size (px) */\nconst PADDING: Record<TreeSize, number> = {\n  small: 32,\n  medium: 36,\n  large: 40,\n};\n\n/**\n * Angular Material nested tree component with HRA styles\n */\n@Component({\n  selector: 'hra-tree-demo',\n  templateUrl: 'tree-demo.component.html',\n  imports: [MatTreeModule, MatButtonModule, MatIconModule, TreeSizeDirective],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeDemoComponent implements AfterViewInit {\n  /** ViewChild for tree component */\n  @ViewChild(MatTree) tree!: MatTree<NestedNode>;\n\n  /** Tree node data */\n  readonly treeData = input<NestedNode[]>([]);\n\n  /** Size of tree to use */\n  readonly size = input<TreeSize>('medium');\n\n  /** Padding indents */\n  protected readonly padding = computed(() => PADDING[this.size()]);\n\n  /** Data source */\n  dataSource = new ArrayDataSource<NestedNode>([]);\n\n  /** Current selected node */\n  selectedNode?: NestedNode;\n\n  /** Gets the children of a node */\n  childrenAccessor = (dataNode: NestedNode) => dataNode.children ?? [];\n\n  /** If the node has a child */\n  hasChild = (_: number, node: NestedNode) => !!node.children?.length;\n\n  /** Sets dataSource data after view init */\n  ngAfterViewInit() {\n    this.dataSource = new ArrayDataSource<NestedNode>(this.treeData());\n  }\n\n  /** Renders node if it is a root node or if all of its ancestors are expanded */\n  shouldRender(node: NestedNode): boolean {\n    const parent = this.getParentNode(node);\n    return !parent || (!!this.tree?.isExpanded(parent) && this.shouldRender(parent));\n  }\n\n  /** Gets parent of a node */\n  private getParentNode(node: NestedNode): NestedNode | undefined {\n    for (const parent of this.treeData()) {\n      if (parent.children?.includes(node)) {\n        return parent;\n      }\n    }\n    return undefined;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<mat-tree #tree [dataSource]=\"dataSource\" [childrenAccessor]=\"childrenAccessor\" [hraTreeSize]=\"size()\">\n  <mat-tree-node\n    *matTreeNodeDef=\"let node\"\n    matTreeNodePadding\n    [matTreeNodePaddingIndent]=\"padding()\"\n    [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n    [isDisabled]=\"!shouldRender(node)\"\n    (activation)=\"selectedNode = node\"\n    (click)=\"selectedNode = node\"\n  >\n    <div class=\"node-content leaf\" [class.selected]=\"selectedNode === node\">\n      {{ node.name }}\n    </div>\n  </mat-tree-node>\n\n  <mat-tree-node\n    *matTreeNodeDef=\"let node; when: hasChild\"\n    matTreeNodeToggle\n    matTreeNodePadding\n    [matTreeNodePaddingIndent]=\"padding()\"\n    [cdkTreeNodeTypeaheadLabel]=\"node.name\"\n    [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n    [isDisabled]=\"!shouldRender(node)\"\n    [isExpandable]=\"true\"\n  >\n    <div class=\"node-content\">\n      <button mat-icon-button matTreeNodeToggle disableRipple [attr.aria-label]=\"'Toggle ' + node.name\">\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{ tree.isExpanded(node) ? 'expand_more' : 'expand_less' }}\n        </mat-icon>\n      </button>\n      {{ node.name }}\n    </div>\n  </mat-tree-node>\n</mat-tree>\n"
        },
        {
            "name": "TreeStylesComponent",
            "id": "component-TreeStylesComponent-86a7e005716c46fb54dc207110b98a26f36bafca306c4af360e1e5b0259ad8f2e2e2be501a43adddcd38779782ed1c8d48264b6de88c546fdd7d4a6cc151cdc3",
            "file": "tree/src/lib/tree-styles/tree-styles.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-tree-styles",
            "styleUrls": [
                "./tree-styles.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Applies mat tree styles globally</p>\n",
            "rawdescription": "\n\nApplies mat tree styles globally\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n/**\n * Applies mat tree styles globally\n */\n@Component({\n  selector: 'hra-tree-styles',\n  standalone: true,\n  template: '',\n  styleUrls: ['./tree-styles.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TreeStylesComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles/utils';\n\n@include utils.global-styles() {\n  mat-tree {\n    --mat-tree-container-background-color: var(--mat-sys-on-primary);\n  }\n\n  mat-tree-node {\n    --mat-tree-node-text-font: var(--mat-sys-label-medium-font);\n    --mat-tree-node-text-weight: var(--mat-sys-label-medium-weight);\n    --mat-tree-node-text-color: var(--mat-sys-secondary);\n\n    letter-spacing: var(--mat-sys-label-medium-tracking);\n    cursor: pointer;\n    user-select: none;\n    outline: none;\n\n    &:focus-visible .node-content {\n      border-color: var(--mat-sys-tertiary);\n    }\n  }\n\n  .node-content {\n    button {\n      --mat-icon-button-hover-state-layer-opacity: 0;\n      --mat-icon-button-pressed-state-layer-opacity: 0;\n    }\n\n    display: flex;\n    height: var(--mat-tree-node-min-height);\n    line-height: var(--mat-tree-node-min-height);\n    border-radius: 0.25rem;\n    width: 100%;\n    border-width: 2px;\n    border-style: solid;\n    border-color: transparent;\n\n    &.leaf {\n      padding-left: 0.5rem;\n    }\n\n    &:hover {\n      background: rgb(from var(--mat-sys-secondary) r g b / 0.08);\n    }\n\n    &:active {\n      background: rgb(from var(--mat-sys-secondary) r g b / 0.16);\n      border-color: transparent;\n    }\n\n    &.selected {\n      background: rgb(from var(--mat-sys-tertiary) r g b / 0.2);\n    }\n  }\n}\n",
                    "styleUrl": "./tree-styles.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "WebComponentCardComponent",
            "id": "component-WebComponentCardComponent-18ace894449bbbf6e8cd073c2dcff7ad95a3216fe230a00faeacda2a6969c3c78f3bec37cfee33095e196767c970240c78687d87d9bbca6d9a2e6838934c9c3c",
            "file": "web-component-card/src/lib/web-component-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-web-component-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./web-component-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Description</p>\n",
                    "line": 25,
                    "rawdescription": "\nDescription",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Image url</p>\n",
                    "line": 19,
                    "rawdescription": "\nImage url",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "productTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Product title</p>\n",
                    "line": 21,
                    "rawdescription": "\nProduct title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Description</p>\n",
                    "line": 25,
                    "rawdescription": "\nDescription",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Image url</p>\n",
                    "line": 19,
                    "rawdescription": "\nImage url",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "productTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Product title</p>\n",
                    "line": 21,
                    "rawdescription": "\nProduct title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "webComponentName",
                    "defaultValue": "input<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Web Component Name</p>\n",
                    "line": 23,
                    "rawdescription": "\nWeb Component Name",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component representing a web component card.\nDisplays an image, product title, web component name, and description.</p>\n",
            "rawdescription": "\n\nComponent representing a web component card.\nDisplays an image, product title, web component name, and description.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { ButtonsModule } from '@hra-ui/design-system/buttons';\n\n/**\n * Component representing a web component card.\n * Displays an image, product title, web component name, and description.\n */\n\n@Component({\n  selector: 'hra-web-component-card',\n  imports: [ButtonsModule, CommonModule],\n  templateUrl: './web-component-card.component.html',\n  styleUrl: './web-component-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WebComponentCardComponent {\n  /** Image url */\n  readonly imageUrl = input.required<string>();\n  /** Product title */\n  readonly productTitle = input.required<string>();\n  /** Web Component Name */\n  readonly webComponentName = input<string | undefined>();\n  /** Description */\n  readonly description = input.required<string>();\n}\n",
            "styleUrl": "./web-component-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<img alt=\"\" [src]=\"imageUrl()\" />\n<div class=\"card-content\">\n  @if (webComponentName()) {\n    <h2 class=\"product-title\">{{ productTitle() }}</h2>\n    <h1 class=\"web-component-name\">{{ webComponentName() }}</h1>\n  } @else {\n    <h2 class=\"product-title\">{{ productTitle() }}</h2>\n  }\n  <span class=\"description\">{{ description() }}</span>\n</div>\n\n<div class=\"card-footer\">\n  <button mat-button hraPrimaryButton hraButtonSize=\"medium\">Use App</button>\n  <button mat-flat-button hraPrimaryButton hraButtonSize=\"medium\">Embed</button>\n</div>\n"
        },
        {
            "name": "WorkflowCardActionsComponent",
            "id": "component-WorkflowCardActionsComponent-56c68e59c6fd4b015c806b786fed8f1831c0040456756b51181966bdbe627b2a3dc835245da6bc22af1f17622fe78bcaa5b92d6316679039aad7128e657173fb",
            "file": "workflow-card/src/lib/workflow-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-workflow-card-actions",
            "styleUrls": [],
            "styles": [
                ":host { display: flex; gap: 0.75rem; }"
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Actions placed next to the card title</p>\n",
            "rawdescription": "\nActions placed next to the card title",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, numberAttribute } from '@angular/core';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { StepIndicatorComponent } from '@hra-ui/design-system/step-indicator';\n\n/** Actions placed next to the card title */\n@Component({\n  selector: 'hra-workflow-card-actions',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  styles: ':host { display: flex; gap: 0.75rem; }',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardActionsComponent {}\n\n/** Additional content placed on very right side of the header */\n@Component({\n  selector: 'hra-workflow-card-extra',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  styles: ':host { display: flex; gap: 0.75rem; }',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardExtraComponent {}\n\n/**\n * Component that appears when users are completing a workflow process\n */\n@Component({\n  selector: 'hra-workflow-card',\n  imports: [MatProgressBarModule, StepIndicatorComponent],\n  templateUrl: './workflow-card.component.html',\n  styleUrl: './workflow-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardComponent {\n  /** Card title */\n  readonly tagline = input.required<string>();\n  /** Step indicator value */\n  readonly step = input(undefined, { transform: numberAttribute });\n  /** Load progress */\n  readonly progress = input<number | undefined>(undefined);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { display: flex; gap: 0.75rem; }\n",
            "extends": []
        },
        {
            "name": "WorkflowCardComponent",
            "id": "component-WorkflowCardComponent-56c68e59c6fd4b015c806b786fed8f1831c0040456756b51181966bdbe627b2a3dc835245da6bc22af1f17622fe78bcaa5b92d6316679039aad7128e657173fb",
            "file": "workflow-card/src/lib/workflow-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-workflow-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./workflow-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Card title</p>\n",
                    "line": 37,
                    "rawdescription": "\nCard title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progress",
                    "defaultValue": "input<number | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Load progress</p>\n",
                    "line": 41,
                    "rawdescription": "\nLoad progress",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "step",
                    "defaultValue": "input(undefined, { transform: numberAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Step indicator value</p>\n",
                    "line": 39,
                    "rawdescription": "\nStep indicator value",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Card title</p>\n",
                    "line": 37,
                    "rawdescription": "\nCard title",
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "StepIndicatorComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Component that appears when users are completing a workflow process</p>\n",
            "rawdescription": "\n\nComponent that appears when users are completing a workflow process\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, numberAttribute } from '@angular/core';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { StepIndicatorComponent } from '@hra-ui/design-system/step-indicator';\n\n/** Actions placed next to the card title */\n@Component({\n  selector: 'hra-workflow-card-actions',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  styles: ':host { display: flex; gap: 0.75rem; }',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardActionsComponent {}\n\n/** Additional content placed on very right side of the header */\n@Component({\n  selector: 'hra-workflow-card-extra',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  styles: ':host { display: flex; gap: 0.75rem; }',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardExtraComponent {}\n\n/**\n * Component that appears when users are completing a workflow process\n */\n@Component({\n  selector: 'hra-workflow-card',\n  imports: [MatProgressBarModule, StepIndicatorComponent],\n  templateUrl: './workflow-card.component.html',\n  styleUrl: './workflow-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardComponent {\n  /** Card title */\n  readonly tagline = input.required<string>();\n  /** Step indicator value */\n  readonly step = input(undefined, { transform: numberAttribute });\n  /** Load progress */\n  readonly progress = input<number | undefined>(undefined);\n}\n",
            "styleUrl": "./workflow-card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h2 class=\"header\">\n  @let stepValue = step();\n  @if (stepValue !== undefined) {\n    <hra-step-indicator [value]=\"stepValue\"> </hra-step-indicator>\n  }\n\n  <span>{{ tagline() }}</span>\n  <ng-content select=\"hra-workflow-card-actions\"> </ng-content>\n\n  <div class=\"filler\"></div>\n  <ng-content select=\"hra-workflow-card-extra\"> </ng-content>\n</h2>\n\n<div class=\"content\">\n  <ng-content></ng-content>\n</div>\n\n@let progressValue = progress();\n@if (progressValue !== undefined) {\n  <mat-progress-bar class=\"progress\" mode=\"determinate\" [value]=\"100 * progressValue\"> </mat-progress-bar>\n}\n"
        },
        {
            "name": "WorkflowCardExtraComponent",
            "id": "component-WorkflowCardExtraComponent-56c68e59c6fd4b015c806b786fed8f1831c0040456756b51181966bdbe627b2a3dc835245da6bc22af1f17622fe78bcaa5b92d6316679039aad7128e657173fb",
            "file": "workflow-card/src/lib/workflow-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-workflow-card-extra",
            "styleUrls": [],
            "styles": [
                ":host { display: flex; gap: 0.75rem; }"
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Additional content placed on very right side of the header</p>\n",
            "rawdescription": "\nAdditional content placed on very right side of the header",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, numberAttribute } from '@angular/core';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { StepIndicatorComponent } from '@hra-ui/design-system/step-indicator';\n\n/** Actions placed next to the card title */\n@Component({\n  selector: 'hra-workflow-card-actions',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  styles: ':host { display: flex; gap: 0.75rem; }',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardActionsComponent {}\n\n/** Additional content placed on very right side of the header */\n@Component({\n  selector: 'hra-workflow-card-extra',\n  standalone: true,\n  template: '<ng-content></ng-content>',\n  styles: ':host { display: flex; gap: 0.75rem; }',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardExtraComponent {}\n\n/**\n * Component that appears when users are completing a workflow process\n */\n@Component({\n  selector: 'hra-workflow-card',\n  imports: [MatProgressBarModule, StepIndicatorComponent],\n  templateUrl: './workflow-card.component.html',\n  styleUrl: './workflow-card.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WorkflowCardComponent {\n  /** Card title */\n  readonly tagline = input.required<string>();\n  /** Step indicator value */\n  readonly step = input(undefined, { transform: numberAttribute });\n  /** Load progress */\n  readonly progress = input<number | undefined>(undefined);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { display: flex; gap: 0.75rem; }\n",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "BrandModule",
            "id": "module-BrandModule-361ccf56811ca05e6706af49ba3a0367edcdff99f4608c226a3e0957bf1c2931d404c35a2572e04b2fc4343f85bf4bcbffc945a23242d665149cf8c9d2ee37e8",
            "description": "<p>Exports all brand components, modules, etc.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "brand/src/lib/brand.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrandLogoComponent } from '@hra-ui/design-system/brand/logo';\nimport { BrandMarkComponent } from '@hra-ui/design-system/brand/mark';\n\n/** All sub library components, module, etc. */\nconst REEXPORTS = [BrandLogoComponent, BrandMarkComponent];\n\n/** Exports all brand components, modules, etc. */\n@NgModule({\n  imports: REEXPORTS,\n  exports: REEXPORTS,\n})\nexport class BrandModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BrandLogoComponent"
                        },
                        {
                            "name": "BrandMarkComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BrandLogoComponent"
                        },
                        {
                            "name": "BrandMarkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonsModule",
            "id": "module-ButtonsModule-ea452ed24f55b877753066ad43cd21d4a6dcd6f29687bac504d45be0773516c05ffa2d577499fa4ceff8326de2227b5bf721407b4afa84bede3a5911b338df1a",
            "description": "<p>Packages up subpackage angular exports for easier use</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "buttons/src/lib/buttons.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { AppNavButtonComponent } from '@hra-ui/design-system/buttons/app-nav-button';\nimport { BreadcrumbsComponent } from '@hra-ui/design-system/buttons/breadcrumbs';\nimport {\n  ButtonSizeDirective,\n  ButtonVariantDirective,\n  CtaButtonDirective,\n  PrimaryButtonVariantDirective,\n  SecondaryButtonVariantDirective,\n} from '@hra-ui/design-system/buttons/button';\nimport { NavigationCategoryToggleComponent } from '@hra-ui/design-system/buttons/navigation-category-toggle';\nimport { SocialMediaButtonComponent } from '@hra-ui/design-system/buttons/social-media-button';\nimport { TextHyperlinkDirective } from '@hra-ui/design-system/buttons/text-hyperlink';\nimport { ButtonToggleSizeDirective } from '@hra-ui/design-system/buttons/button-toggle';\n\n/** All re-exported modules, components, directives, etc. */\nconst REEXPORTS = [\n  MatButtonModule,\n  MatButtonToggleModule,\n\n  AppNavButtonComponent,\n  BreadcrumbsComponent,\n  ButtonSizeDirective,\n  ButtonToggleSizeDirective,\n  ButtonVariantDirective,\n  CtaButtonDirective,\n  NavigationCategoryToggleComponent,\n  PrimaryButtonVariantDirective,\n  SecondaryButtonVariantDirective,\n  SocialMediaButtonComponent,\n  TextHyperlinkDirective,\n];\n\n/** Packages up subpackage angular exports for easier use */\n@NgModule({\n  imports: REEXPORTS,\n  exports: REEXPORTS,\n})\nexport class ButtonsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BrandLogoComponent"
                        },
                        {
                            "name": "BrandMarkComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BrandLogoComponent"
                        },
                        {
                            "name": "BrandMarkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExpansionPanelModule",
            "id": "module-ExpansionPanelModule-17d413bf76847d240a5f155d04a8a0984a5c9998bdfcaeef128b4242972a37b15fccc7931dbab683f5fd03f7310330a81c75ec7b81d5a8b46ce66eb3445dc685",
            "description": "<p>Expansion panel module</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "expansion-panel/src/lib/expansion-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  ExpansionPanelActionsComponent,\n  ExpansionPanelComponent,\n  ExpansionPanelHeaderContentComponent,\n} from './expansion-panel.component';\n\n/** Expansion panel module */\n@NgModule({\n  imports: [ExpansionPanelActionsComponent, ExpansionPanelHeaderContentComponent, ExpansionPanelComponent],\n  exports: [ExpansionPanelActionsComponent, ExpansionPanelHeaderContentComponent, ExpansionPanelComponent],\n})\nexport class ExpansionPanelModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ExpansionPanelActionsComponent"
                        },
                        {
                            "name": "ExpansionPanelComponent"
                        },
                        {
                            "name": "ExpansionPanelHeaderContentComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpansionPanelActionsComponent"
                        },
                        {
                            "name": "ExpansionPanelComponent"
                        },
                        {
                            "name": "ExpansionPanelHeaderContentComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconButtonModule",
            "id": "module-IconButtonModule-e73b1277b11d49efd817b47b3dc2d0f39a94adc58047dfb9cbfe072de3d28d676a42bb265f3d26fcd23bc91dbad3f6f6181240ea28058483e09dcb73ac8b8b16",
            "description": "<p>Module exporting icon button and related utilities</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "icon-button/src/lib/icon-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { IconButtonSizeDirective } from './icon-button-size/icon-button-size.directive';\nimport { IconButtonVariantDirective } from './icon-button-variant/icon-button-variant.directive';\n\n/** Module exporting icon button and related utilities */\n@NgModule({\n  imports: [IconButtonSizeDirective, IconButtonVariantDirective],\n  exports: [MatButtonModule, MatIconModule, IconButtonSizeDirective, IconButtonVariantDirective],\n})\nexport class IconButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconButtonSizeDirective"
                        },
                        {
                            "name": "IconButtonVariantDirective"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconButtonSizeDirective"
                        },
                        {
                            "name": "IconButtonVariantDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavigationModule",
            "id": "module-NavigationModule-14fafac66b3401f156d49ecd7e62089875419564247538eb51fe2d7cb837ff63d26346a0e0996b8ef0731993e54be9bb41d7b42f6cba54ab9e824cb52a5dcf96",
            "description": "<p>Exports all brand components, modules, etc.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "navigation/src/lib/navigation.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CtaBarComponent } from '@hra-ui/design-system/navigation/cta-bar';\nimport { FooterComponent } from '@hra-ui/design-system/navigation/footer';\nimport { HeaderComponent } from '@hra-ui/design-system/navigation/header';\n\n/** All sub library components, module, etc. */\nconst REEXPORTS = [CtaBarComponent, FooterComponent, HeaderComponent];\n\n/** Exports all brand components, modules, etc. */\n@NgModule({\n  imports: REEXPORTS,\n  exports: REEXPORTS,\n})\nexport class NavigationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BrandLogoComponent"
                        },
                        {
                            "name": "BrandMarkComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BrandLogoComponent"
                        },
                        {
                            "name": "BrandMarkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScrollingModule",
            "id": "module-ScrollingModule-be92df704ab4f4a4523b66effa747b28adbcd4019d314eb5d936bc3c0fcb004ad347b57d224ea9715e389f15b61ce0bf4f8dd875fed05a827cd767ba1ce12c35",
            "description": "<p>Module exporting ng-scrollbar and related scrolling utilities</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "scrolling/src/lib/scrolling.module.ts",
            "methods": [],
            "sourceCode": "import { EnvironmentProviders, NgModule, makeEnvironmentProviders } from '@angular/core';\nimport { getCurrentScriptBasePath } from '@hra-ui/cdk/app-href';\nimport { provideStyleComponents } from '@hra-ui/cdk/styling';\nimport {\n  NgScrollbarModule,\n  NgScrollbarOptions,\n  provideScrollbarOptions,\n  provideScrollbarPolyfill,\n} from 'ngx-scrollbar';\nimport { ScrollOverflowFadeDirective } from './scroll-overflow-fade/scroll-overflow-fade.directive';\nimport { ScrollbarStylesComponent } from './scrollbar-styles/scrollbar-styles.component';\n\n/** Scrolling configuration */\nexport interface ScrollingOptions extends NgScrollbarOptions {\n  /** Url to the scroll timeline polyfill script */\n  polyfillUrl?: string;\n}\n\n/** Default scroll timeline polyfill url */\nconst DEFAULT_POLYFILL_URL = 'assets/polyfills/scroll-timeline-polyfill.js';\n\n/**\n * Provide scrolling functionality to an application.\n *\n * @param options Scrollbar options\n * @returns An environment provider\n */\nexport function provideScrolling(options?: ScrollingOptions): EnvironmentProviders {\n  const polyfillUrl = getCurrentScriptBasePath() + (options?.polyfillUrl ?? DEFAULT_POLYFILL_URL);\n\n  return makeEnvironmentProviders([\n    provideStyleComponents(ScrollbarStylesComponent),\n    provideScrollbarPolyfill(polyfillUrl),\n    provideScrollbarOptions({\n      visibility: 'hover',\n      appearance: 'compact',\n      trackClass: 'hra-scrollbar-track',\n      thumbClass: 'hra-scrollbar-thumb',\n      ...options,\n    }),\n  ]);\n}\n\n/** Module exporting ng-scrollbar and related scrolling utilities */\n@NgModule({\n  imports: [ScrollOverflowFadeDirective],\n  exports: [NgScrollbarModule, ScrollOverflowFadeDirective],\n})\nexport class ScrollingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ScrollOverflowFadeDirective"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScrollOverflowFadeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WorkflowCardModule",
            "id": "module-WorkflowCardModule-d538998a7e86168fd6122c6dcf572323089bd5f6cec04f45e8b7802e8f7593435755961eed72538b47172fbfbb503e8855584b766b860a65fe406d0bcec4e6a9",
            "description": "<p>Main module</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "workflow-card/src/index.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  WorkflowCardActionsComponent,\n  WorkflowCardComponent,\n  WorkflowCardExtraComponent,\n} from './lib/workflow-card.component';\n\nexport * from './lib/deprecated/workflow-card.component';\nexport * from './lib/workflow-card.component';\n\n/** All components */\nconst COMPONENTS = [WorkflowCardComponent, WorkflowCardActionsComponent, WorkflowCardExtraComponent];\n\n/** Main module */\n@NgModule({\n  imports: COMPONENTS,\n  exports: COMPONENTS,\n})\nexport class WorkflowCardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "WorkflowCardActionsComponent"
                        },
                        {
                            "name": "WorkflowCardComponent"
                        },
                        {
                            "name": "WorkflowCardExtraComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WorkflowCardActionsComponent"
                        },
                        {
                            "name": "WorkflowCardComponent"
                        },
                        {
                            "name": "WorkflowCardExtraComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BODY_EXPANSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "expansion-panel/src/lib/expansion-panel-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('bodyExpansion', [\n  state('collapsed, void', style({ height: '0px', visibility: 'hidden', opacity: 0 })),\n  state('expanded', style({ height: '*', visibility: '', opacity: 1 })),\n  transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n])",
                "rawdescription": "Animation for Body Expansion",
                "description": "<p>Animation for Body Expansion</p>\n"
            },
            {
                "name": "BrandLogoSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/logo/src/lib/types/logos.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  size: BrandLogoSizeSchema,\n  src: z.string(),\n  width: z.number().positive(),\n  height: z.number().positive(),\n})",
                "rawdescription": "Schema for logo item",
                "description": "<p>Schema for logo item</p>\n"
            },
            {
                "name": "BrandLogoSizeSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/logo/src/lib/types/logos.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.enum(['small', 'regular'])",
                "rawdescription": "Schema for logo size",
                "description": "<p>Schema for logo size</p>\n"
            },
            {
                "name": "BrandLogosSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/logo/src/lib/types/logos.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  $schema: z.string(),\n  logos: BrandLogoSchema.array(),\n})",
                "rawdescription": "Schema for logos",
                "description": "<p>Schema for logos</p>\n"
            },
            {
                "name": "BrandMarkSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/mark/src/lib/types/marks.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  variant: BrandMarkVariantSchema,\n  src: z.string(),\n  width: z.number().positive(),\n  height: z.number().positive(),\n})",
                "rawdescription": "Schema for mark item",
                "description": "<p>Schema for mark item</p>\n"
            },
            {
                "name": "BrandMarksSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/mark/src/lib/types/marks.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  $schema: z.string(),\n  marks: BrandMarkSchema.array(),\n})",
                "rawdescription": "Schema for marks",
                "description": "<p>Schema for marks</p>\n"
            },
            {
                "name": "BrandMarkVariantSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/mark/src/lib/types/marks.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.enum(['default', 'contrast', 'small'])",
                "rawdescription": "Schema for mark variant",
                "description": "<p>Schema for mark variant</p>\n"
            },
            {
                "name": "BUTTON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconButtonSize, number>",
                "defaultValue": "{\n  small: 1.5,\n  large: 2.5,\n}",
                "rawdescription": "Record of button sizes (number in rem)",
                "description": "<p>Record of button sizes (number in rem)</p>\n"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "workflow-card/src/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[WorkflowCardComponent, WorkflowCardActionsComponent, WorkflowCardExtraComponent]",
                "rawdescription": "All components",
                "description": "<p>All components</p>\n"
            },
            {
                "name": "DEFAULT_POLYFILL_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scrolling.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'assets/polyfills/scroll-timeline-polyfill.js'",
                "rawdescription": "Default scroll timeline polyfill url",
                "description": "<p>Default scroll timeline polyfill url</p>\n"
            },
            {
                "name": "DESKTOP_MENU_POSITIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/header.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConnectedPosition[]",
                "defaultValue": "[\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetX: -16, offsetY: 16 },\n]",
                "rawdescription": "Position of the desktop menu overlay",
                "description": "<p>Position of the desktop menu overlay</p>\n"
            },
            {
                "name": "EXPANSION_PANEL_ANIMATION_TIMING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "expansion-panel/src/lib/expansion-panel-animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                "rawdescription": "Animation for the expansion panel",
                "description": "<p>Animation for the expansion panel</p>\n"
            },
            {
                "name": "FONT_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 0.75,\n  medium: 0.875,\n  large: 1,\n}",
                "rawdescription": "Font sizes for each tree size (rem)",
                "description": "<p>Font sizes for each tree size (rem)</p>\n"
            },
            {
                "name": "FUNDER_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/footer/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FUNDERS.map(({ id }) => id)",
                "rawdescription": "All available funder ids",
                "description": "<p>All available funder ids</p>\n"
            },
            {
                "name": "FUNDERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/footer/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "FundersSchema.parse(RAW_FUNDERS).funders",
                "rawdescription": "Parsed funders static data",
                "description": "<p>Parsed funders static data</p>\n"
            },
            {
                "name": "FunderSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/footer/src/lib/types/funders.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  id: z.string().brand<'FunderId'>(),\n  name: z.string(),\n  link: z.string().url(),\n  image: z.string(),\n})",
                "rawdescription": "Schema for a funder item",
                "description": "<p>Schema for a funder item</p>\n"
            },
            {
                "name": "FundersSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/footer/src/lib/types/funders.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  $schema: z.string(),\n  funders: FunderSchema.array(),\n})",
                "rawdescription": "Schema for multiple funders",
                "description": "<p>Schema for multiple funders</p>\n"
            },
            {
                "name": "GRADIENT_BOTTOM_KEYFRAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Keyframe[]",
                "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n]",
                "rawdescription": "Keyframes for the bottom gradient",
                "description": "<p>Keyframes for the bottom gradient</p>\n"
            },
            {
                "name": "GRADIENT_TOP_KEYFRAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Keyframe[]",
                "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n]",
                "rawdescription": "Keyframes for the top gradient",
                "description": "<p>Keyframes for the top gradient</p>\n"
            },
            {
                "name": "HUBMAP_MENU",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "HubmapMenuSchema.parse(RAW_HUBMAP_MENU).groups",
                "rawdescription": "Parsed hubmap menu object",
                "description": "<p>Parsed hubmap menu object</p>\n"
            },
            {
                "name": "HubmapMenuGroupSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  label: z.string(),\n  items: HubmapMenuItemSchema.array(),\n})",
                "rawdescription": "Schema for a hubmap menu group",
                "description": "<p>Schema for a hubmap menu group</p>\n"
            },
            {
                "name": "HubmapMenuItemSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  label: z.string(),\n  description: z.string(),\n  icon: z.string(),\n  url: z.string().url(),\n})",
                "rawdescription": "Schema for a hubmap menu item",
                "description": "<p>Schema for a hubmap menu item</p>\n"
            },
            {
                "name": "HubmapMenuSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  $schema: z.string(),\n  groups: HubmapMenuGroupSchema.array(),\n})",
                "rawdescription": "Schema for a humbap menu",
                "description": "<p>Schema for a humbap menu</p>\n"
            },
            {
                "name": "ICON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<IconButtonSize, number>",
                "defaultValue": "{\n  small: 1.25,\n  large: 1.5,\n}",
                "rawdescription": "Record of icon sizes (number in rem)",
                "description": "<p>Record of icon sizes (number in rem)</p>\n"
            },
            {
                "name": "ICON_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n}",
                "rawdescription": "Icon sizes for each tree size (rem)",
                "description": "<p>Icon sizes for each tree size (rem)</p>\n"
            },
            {
                "name": "idCounter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "expansion-panel/src/lib/expansion-panel.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0",
                "rawdescription": "Counter to keep track of distinct panels",
                "description": "<p>Counter to keep track of distinct panels</p>\n"
            },
            {
                "name": "LOGOS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/logo/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BrandLogosSchema.parse(RAW_LOGOS).logos",
                "rawdescription": "Data for all logos",
                "description": "<p>Data for all logos</p>\n"
            },
            {
                "name": "MARKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/mark/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "BrandMarksSchema.parse(RAW_MARKS).marks",
                "rawdescription": "All marks data",
                "description": "<p>All marks data</p>\n"
            },
            {
                "name": "MenuDividerSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal('divider'),\n})",
                "rawdescription": "Schema for a menu divider",
                "description": "<p>Schema for a menu divider</p>\n"
            },
            {
                "name": "MenuGroupSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal('group'),\n  label: z.string(),\n  description: z.string().optional(),\n  url: z.string().url(),\n  items: z.union([MenuSubGroupSchema, MenuItemSchema]).array().optional(),\n})",
                "rawdescription": "Schema for a menu group",
                "description": "<p>Schema for a menu group</p>\n"
            },
            {
                "name": "MenuItemSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal('item'),\n  label: z.string(),\n  url: z.string().url(),\n})",
                "rawdescription": "Schema for a menu item",
                "description": "<p>Schema for a menu item</p>\n"
            },
            {
                "name": "MENUS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MenusSchema.parse(RAW_MENUS).menus",
                "rawdescription": "Parsed menus object",
                "description": "<p>Parsed menus object</p>\n"
            },
            {
                "name": "MenuSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal('menu'),\n  id: z.string(),\n  label: z.string(),\n  items: z.union([MenuGroupSchema, MenuDividerSchema]).array(),\n})",
                "rawdescription": "Schema for a menu",
                "description": "<p>Schema for a menu</p>\n"
            },
            {
                "name": "MenusSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  $schema: z.string(),\n  menus: MenuSchema.array(),\n})",
                "rawdescription": "Schema for multiple menus",
                "description": "<p>Schema for multiple menus</p>\n"
            },
            {
                "name": "MenuSubGroupSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal('subgroup'),\n  label: z.string(),\n  items: MenuItemSchema.array(),\n})",
                "rawdescription": "Schema for a menu subgroup",
                "description": "<p>Schema for a menu subgroup</p>\n"
            },
            {
                "name": "MOBILE_MENU_POSITIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/header/src/lib/header.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConnectedPosition[]",
                "defaultValue": "[\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n]",
                "rawdescription": "Position of the mobile menu overlay",
                "description": "<p>Position of the mobile menu overlay</p>\n"
            },
            {
                "name": "NODE_HEIGHTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 1.5,\n  medium: 1.75,\n  large: 2,\n}",
                "rawdescription": "Node heights for each tree size (rem)",
                "description": "<p>Node heights for each tree size (rem)</p>\n"
            },
            {
                "name": "PADDING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<TreeSize, number>",
                "defaultValue": "{\n  small: 32,\n  medium: 36,\n  large: 40,\n}",
                "rawdescription": "Padding indents for each tree size (px)",
                "description": "<p>Padding indents for each tree size (px)</p>\n"
            },
            {
                "name": "REEXPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "brand/src/lib/brand.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[BrandLogoComponent, BrandMarkComponent]",
                "rawdescription": "All sub library components, module, etc.",
                "description": "<p>All sub library components, module, etc.</p>\n"
            },
            {
                "name": "REEXPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "buttons/src/lib/buttons.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatButtonModule,\n  MatButtonToggleModule,\n\n  AppNavButtonComponent,\n  BreadcrumbsComponent,\n  ButtonSizeDirective,\n  ButtonToggleSizeDirective,\n  ButtonVariantDirective,\n  CtaButtonDirective,\n  NavigationCategoryToggleComponent,\n  PrimaryButtonVariantDirective,\n  SecondaryButtonVariantDirective,\n  SocialMediaButtonComponent,\n  TextHyperlinkDirective,\n]",
                "rawdescription": "All re-exported modules, components, directives, etc.",
                "description": "<p>All re-exported modules, components, directives, etc.</p>\n"
            },
            {
                "name": "REEXPORTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "navigation/src/lib/navigation.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[CtaBarComponent, FooterComponent, HeaderComponent]",
                "rawdescription": "All sub library components, module, etc.",
                "description": "<p>All sub library components, module, etc.</p>\n"
            },
            {
                "name": "SCROLL_TIMELINE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Signal<ScrollTimelineFunc | null>>('SCROLL_TIMELINE', {\n  providedIn: 'root',\n  factory: () => {\n    type WindowWithScrollTimeline = { ScrollTimeline: ScrollTimelineFunc };\n    const window = inject(DOCUMENT).defaultView as unknown as WindowWithScrollTimeline | null;\n    if (!isPlatformBrowser(inject(PLATFORM_ID)) || !window) {\n      return signal(null);\n    }\n\n    const isAvailable = () => 'ScrollTimeline' in window && typeof window.ScrollTimeline === 'function';\n    if (isAvailable()) {\n      return signal(window['ScrollTimeline']);\n    }\n\n    const scrollTimeline$ = inject(SCROLL_TIMELINE_QUERY_INTERVAL).pipe(\n      takeWhile(() => !isAvailable()),\n      ignoreElements(),\n      endWith(null),\n      map(() => window.ScrollTimeline),\n    );\n\n    return toSignal(scrollTimeline$, { initialValue: null });\n  },\n})",
                "rawdescription": "Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.",
                "description": "<p>Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.</p>\n"
            },
            {
                "name": "SCROLL_TIMELINE_QUERY_INTERVAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Observable<number>>('SCROLL_TIMELINE_QUERY_INTERVAL', {\n  providedIn: 'root',\n  factory: () => interval(100),\n})",
                "rawdescription": "Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.",
                "description": "<p>Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.</p>\n"
            },
            {
                "name": "SOCIAL_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "buttons/social-media-button/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SOCIALS.map(({ id }) => id)",
                "rawdescription": "All available social ids",
                "description": "<p>All available social ids</p>\n"
            },
            {
                "name": "SocialMediaSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  id: z.string().brand<'SocialMediaId'>(),\n  icon: z.string(),\n  isFontIcon: z.boolean().optional(),\n  link: z.string(),\n})",
                "rawdescription": "Schema for social media item",
                "description": "<p>Schema for social media item</p>\n"
            },
            {
                "name": "SOCIALS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "buttons/social-media-button/src/lib/static-data/parsed.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SocialsSchema.parse(RAW_SOCIALS).socials",
                "rawdescription": "Parsed social media items",
                "description": "<p>Parsed social media items</p>\n"
            },
            {
                "name": "SocialsSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  $schema: z.string(),\n  socials: SocialMediaSchema.array(),\n})",
                "rawdescription": "Schema for social media items",
                "description": "<p>Schema for social media items</p>\n"
            },
            {
                "name": "STATUS_FONTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "software-status-indicator/src/lib/software-status-indicator-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<SoftwareStatusSize, string>",
                "defaultValue": "{\n  small: 'var(--mat-sys-label-micro)',\n  medium: 'var(--mat-sys-label-medium)',\n  large: 'var(--mat-sys-label-large)',\n}",
                "rawdescription": "Record of button fonts",
                "description": "<p>Record of button fonts</p>\n"
            }
        ],
        "functions": [
            {
                "name": "colorEquals",
                "file": "color-picker/src/lib/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Compares two RGB colors for equality</p>\n",
                "args": [
                    {
                        "name": "color1",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color2",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "color1",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color2",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hexToRgb",
                "file": "color-picker/src/lib/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Converts a hexadecimal color string to an RGB color</p>\n",
                "args": [
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Rgb",
                "jsdoctags": [
                    {
                        "name": "hex",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideButton",
                "file": "buttons/button/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Applies global styles to buttons</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 263,
                            "end": 270,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Button providers</p>\n"
                    }
                ]
            },
            {
                "name": "provideButtons",
                "file": "buttons/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Collects all subpackage providers into a single provider function.</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 400,
                            "end": 407,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Button providers</p>\n"
                    }
                ]
            },
            {
                "name": "provideButtonToggle",
                "file": "buttons/button-toggle/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Applies global styles to button toggles</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 392,
                            "end": 399,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Button toggle providers</p>\n"
                    }
                ]
            },
            {
                "name": "provideCheckboxes",
                "file": "checkbox/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for checkboxes</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideDesignSystem",
                "file": "src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns design system providers</p>\n",
                "args": [
                    {
                        "name": "options",
                        "type": "DesignSystemOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "DesignSystemOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideDesignSystemCommon",
                "file": "src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get the providers shared between prod and testing</p>\n",
                "args": [
                    {
                        "name": "options",
                        "type": "DesignSystemOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "DesignSystemOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideIconButtons",
                "file": "icon-button/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for icon buttons</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideInput",
                "file": "input/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for Input</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideMenu",
                "file": "menu/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for menu</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideScrolling",
                "file": "scrolling/src/lib/scrolling.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provide scrolling functionality to an application.</p>\n",
                "args": [
                    {
                        "name": "options",
                        "type": "ScrollingOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 906,
                            "end": 913,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "options"
                        },
                        "type": "ScrollingOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 900,
                            "end": 905,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Scrollbar options</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 936,
                            "end": 943,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>An environment provider</p>\n"
                    }
                ]
            },
            {
                "name": "provideSelect",
                "file": "select/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for select</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideTable",
                "file": "table/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for table</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "provideTextHyperlink",
                "file": "buttons/text-hyperlink/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provides the global styles for text hyperlink elements.</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 293,
                            "end": 300,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Text hyperlink providers</p>\n"
                    }
                ]
            },
            {
                "name": "provideTrees",
                "file": "tree/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns providers for tree</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders"
            },
            {
                "name": "rgbToHex",
                "file": "color-picker/src/lib/color-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Converts an RGB color to its hexadecimal string representation</p>\n",
                "args": [
                    {
                        "name": "rgb",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "rgb",
                        "type": "Rgb",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setupScrollTesting",
                "file": "scrolling/testing/src/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Setup the testing environment for scrolling to work.\nAdds global mocks for functions used by scrolling if they don&#39;t exist.</p>\n",
                "args": [],
                "returnType": "void"
            }
        ],
        "typealiases": [
            {
                "name": "BrandLogo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "brand/logo/src/lib/types/logos.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Logo item</p>\n",
                "kind": 183
            },
            {
                "name": "BrandLogos",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "brand/logo/src/lib/types/logos.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Logos</p>\n",
                "kind": 183
            },
            {
                "name": "BrandLogoSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "brand/logo/src/lib/types/logos.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Logo size</p>\n",
                "kind": 183
            },
            {
                "name": "BrandMark",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "brand/mark/src/lib/types/marks.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Mark item</p>\n",
                "kind": 183
            },
            {
                "name": "BrandMarks",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "brand/mark/src/lib/types/marks.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Marks</p>\n",
                "kind": 183
            },
            {
                "name": "BrandMarkVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "brand/mark/src/lib/types/marks.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Mark variant</p>\n",
                "kind": 183
            },
            {
                "name": "ButtonPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"start\" | \"end\"",
                "file": "snackbar/src/lib/snackbar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for button position</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\"",
                "file": "buttons/button/src/lib/directives/size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Named button sizes</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonToggleSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Button toggle size</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\"",
                "file": "buttons/button/src/lib/directives/variant.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Named button variants</p>\n",
                "kind": 192
            },
            {
                "name": "Funder",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/footer/src/lib/types/funders.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A funder item</p>\n",
                "kind": 183
            },
            {
                "name": "FunderId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Funder",
                "file": "navigation/footer/src/lib/types/funders.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Data id of a funder</p>\n",
                "kind": 199
            },
            {
                "name": "Funders",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/footer/src/lib/types/funders.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Multiple funders object</p>\n",
                "kind": 183
            },
            {
                "name": "HubmapMenu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A hubmap menu</p>\n",
                "kind": 183
            },
            {
                "name": "HubmapMenuGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A hubmap menu group</p>\n",
                "kind": 183
            },
            {
                "name": "HubmapMenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A hubmap menu item</p>\n",
                "kind": 183
            },
            {
                "name": "IconButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for icon button size</p>\n",
                "kind": 192
            },
            {
                "name": "IconButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\" | \"color\"",
                "file": "icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for icon button color</p>\n",
                "kind": 192
            },
            {
                "name": "InfoModalVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"tabular\" | \"center\"",
                "file": "info-modal/src/lib/info-modal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Info modal variants</p>\n",
                "kind": 192
            },
            {
                "name": "Menu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A menu</p>\n",
                "kind": 183
            },
            {
                "name": "MenuContentVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"desktop\" | \"mobile\"",
                "file": "navigation/header/src/lib/menu-content/menu-content.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Display modes of the menu content component</p>\n",
                "kind": 192
            },
            {
                "name": "MenuDivider",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A menu divider</p>\n",
                "kind": 183
            },
            {
                "name": "MenuGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A menu group</p>\n",
                "kind": 183
            },
            {
                "name": "MenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A menu item</p>\n",
                "kind": 183
            },
            {
                "name": "Menus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Multiple menus</p>\n",
                "kind": 183
            },
            {
                "name": "MenuSubGroup",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "navigation/header/src/lib/types/menus.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>A menu subgroup</p>\n",
                "kind": 183
            },
            {
                "name": "MicroTooltipSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\"",
                "file": "micro-tooltip/src/micro-tooltip.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type of Tooltip size</p>\n",
                "kind": 192
            },
            {
                "name": "NavHeaderButtonsVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"sidenav\"",
                "file": "nav-header-buttons/src/lib/nav-header-buttons.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Variant of nav header button</p>\n",
                "kind": 192
            },
            {
                "name": "ProductLogoSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "product-logo/src/lib/product-logo.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Button size type</p>\n",
                "kind": 192
            },
            {
                "name": "Rgb",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[, , ]",
                "file": "color-picker/src/lib/color-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type representing an RGB color as a tuple of three numbers</p>\n",
                "kind": 189
            },
            {
                "name": "ScrollTimelineFunc",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Basic signature of the ScrollTimeline constructor</p>\n",
                "kind": 185
            },
            {
                "name": "SnackbarConfig",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<MatSnackBarConfig | \"data\" | \"panelClass\">",
                "file": "snackbar/src/lib/snackbar.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Snackbar configuration</p>\n",
                "kind": 183
            },
            {
                "name": "SocialMedia",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Social media item</p>\n",
                "kind": 183
            },
            {
                "name": "SocialMediaId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SocialMedia",
                "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Social media id</p>\n",
                "kind": 199
            },
            {
                "name": "Socials",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Social media items</p>\n",
                "kind": 183
            },
            {
                "name": "SoftwareStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Preview\" | \"Alpha\" | \"Beta\"",
                "file": "software-status-indicator/src/lib/software-status-indicator.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Software status options</p>\n",
                "kind": 192
            },
            {
                "name": "SoftwareStatusSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "software-status-indicator/src/lib/software-status-indicator-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for Software status size</p>\n",
                "kind": 192
            },
            {
                "name": "SoftwareStatusSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "software-status-indicator/src/lib/software-status-indicator.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Software status size options</p>\n",
                "kind": 192
            },
            {
                "name": "TreeSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Input options for each tree size</p>\n",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "expansion-panel/src/lib/expansion-panel-animations.ts": [
                {
                    "name": "BODY_EXPANSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "expansion-panel/src/lib/expansion-panel-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('bodyExpansion', [\n  state('collapsed, void', style({ height: '0px', visibility: 'hidden', opacity: 0 })),\n  state('expanded', style({ height: '*', visibility: '', opacity: 1 })),\n  transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n])",
                    "rawdescription": "Animation for Body Expansion",
                    "description": "<p>Animation for Body Expansion</p>\n"
                },
                {
                    "name": "EXPANSION_PANEL_ANIMATION_TIMING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "expansion-panel/src/lib/expansion-panel-animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                    "rawdescription": "Animation for the expansion panel",
                    "description": "<p>Animation for the expansion panel</p>\n"
                }
            ],
            "brand/logo/src/lib/types/logos.schema.ts": [
                {
                    "name": "BrandLogoSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/logo/src/lib/types/logos.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  size: BrandLogoSizeSchema,\n  src: z.string(),\n  width: z.number().positive(),\n  height: z.number().positive(),\n})",
                    "rawdescription": "Schema for logo item",
                    "description": "<p>Schema for logo item</p>\n"
                },
                {
                    "name": "BrandLogoSizeSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/logo/src/lib/types/logos.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.enum(['small', 'regular'])",
                    "rawdescription": "Schema for logo size",
                    "description": "<p>Schema for logo size</p>\n"
                },
                {
                    "name": "BrandLogosSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/logo/src/lib/types/logos.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  $schema: z.string(),\n  logos: BrandLogoSchema.array(),\n})",
                    "rawdescription": "Schema for logos",
                    "description": "<p>Schema for logos</p>\n"
                }
            ],
            "brand/mark/src/lib/types/marks.schema.ts": [
                {
                    "name": "BrandMarkSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/mark/src/lib/types/marks.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  variant: BrandMarkVariantSchema,\n  src: z.string(),\n  width: z.number().positive(),\n  height: z.number().positive(),\n})",
                    "rawdescription": "Schema for mark item",
                    "description": "<p>Schema for mark item</p>\n"
                },
                {
                    "name": "BrandMarksSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/mark/src/lib/types/marks.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  $schema: z.string(),\n  marks: BrandMarkSchema.array(),\n})",
                    "rawdescription": "Schema for marks",
                    "description": "<p>Schema for marks</p>\n"
                },
                {
                    "name": "BrandMarkVariantSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/mark/src/lib/types/marks.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.enum(['default', 'contrast', 'small'])",
                    "rawdescription": "Schema for mark variant",
                    "description": "<p>Schema for mark variant</p>\n"
                }
            ],
            "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts": [
                {
                    "name": "BUTTON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconButtonSize, number>",
                    "defaultValue": "{\n  small: 1.5,\n  large: 2.5,\n}",
                    "rawdescription": "Record of button sizes (number in rem)",
                    "description": "<p>Record of button sizes (number in rem)</p>\n"
                },
                {
                    "name": "ICON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<IconButtonSize, number>",
                    "defaultValue": "{\n  small: 1.25,\n  large: 1.5,\n}",
                    "rawdescription": "Record of icon sizes (number in rem)",
                    "description": "<p>Record of icon sizes (number in rem)</p>\n"
                }
            ],
            "workflow-card/src/index.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "workflow-card/src/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[WorkflowCardComponent, WorkflowCardActionsComponent, WorkflowCardExtraComponent]",
                    "rawdescription": "All components",
                    "description": "<p>All components</p>\n"
                }
            ],
            "scrolling/src/lib/scrolling.module.ts": [
                {
                    "name": "DEFAULT_POLYFILL_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scrolling.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'assets/polyfills/scroll-timeline-polyfill.js'",
                    "rawdescription": "Default scroll timeline polyfill url",
                    "description": "<p>Default scroll timeline polyfill url</p>\n"
                }
            ],
            "navigation/header/src/lib/header.component.ts": [
                {
                    "name": "DESKTOP_MENU_POSITIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/header.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectedPosition[]",
                    "defaultValue": "[\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetX: -16, offsetY: 16 },\n]",
                    "rawdescription": "Position of the desktop menu overlay",
                    "description": "<p>Position of the desktop menu overlay</p>\n"
                },
                {
                    "name": "MOBILE_MENU_POSITIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/header.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectedPosition[]",
                    "defaultValue": "[\n  { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n]",
                    "rawdescription": "Position of the mobile menu overlay",
                    "description": "<p>Position of the mobile menu overlay</p>\n"
                }
            ],
            "tree/src/lib/tree-size/tree-size.directive.ts": [
                {
                    "name": "FONT_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 0.75,\n  medium: 0.875,\n  large: 1,\n}",
                    "rawdescription": "Font sizes for each tree size (rem)",
                    "description": "<p>Font sizes for each tree size (rem)</p>\n"
                },
                {
                    "name": "ICON_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 1.25,\n  medium: 1.5,\n  large: 1.5,\n}",
                    "rawdescription": "Icon sizes for each tree size (rem)",
                    "description": "<p>Icon sizes for each tree size (rem)</p>\n"
                },
                {
                    "name": "NODE_HEIGHTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 1.5,\n  medium: 1.75,\n  large: 2,\n}",
                    "rawdescription": "Node heights for each tree size (rem)",
                    "description": "<p>Node heights for each tree size (rem)</p>\n"
                }
            ],
            "navigation/footer/src/lib/static-data/parsed.ts": [
                {
                    "name": "FUNDER_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/footer/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FUNDERS.map(({ id }) => id)",
                    "rawdescription": "All available funder ids",
                    "description": "<p>All available funder ids</p>\n"
                },
                {
                    "name": "FUNDERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/footer/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "FundersSchema.parse(RAW_FUNDERS).funders",
                    "rawdescription": "Parsed funders static data",
                    "description": "<p>Parsed funders static data</p>\n"
                }
            ],
            "navigation/footer/src/lib/types/funders.schema.ts": [
                {
                    "name": "FunderSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/footer/src/lib/types/funders.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  id: z.string().brand<'FunderId'>(),\n  name: z.string(),\n  link: z.string().url(),\n  image: z.string(),\n})",
                    "rawdescription": "Schema for a funder item",
                    "description": "<p>Schema for a funder item</p>\n"
                },
                {
                    "name": "FundersSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/footer/src/lib/types/funders.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  $schema: z.string(),\n  funders: FunderSchema.array(),\n})",
                    "rawdescription": "Schema for multiple funders",
                    "description": "<p>Schema for multiple funders</p>\n"
                }
            ],
            "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts": [
                {
                    "name": "GRADIENT_BOTTOM_KEYFRAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Keyframe[]",
                    "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-start)',\n  },\n  {\n    offset: 0.98,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-bottom-end)',\n    opacity: 0,\n  },\n]",
                    "rawdescription": "Keyframes for the bottom gradient",
                    "description": "<p>Keyframes for the bottom gradient</p>\n"
                },
                {
                    "name": "GRADIENT_TOP_KEYFRAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-overflow-fade/scroll-overflow-fade.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Keyframe[]",
                    "defaultValue": "[\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-start)',\n    opacity: 0,\n  },\n  {\n    offset: 0.02,\n    opacity: 1,\n  },\n  {\n    top: 'var(--_hra-scroll-overflow-fade-gradient-top-end)',\n  },\n]",
                    "rawdescription": "Keyframes for the top gradient",
                    "description": "<p>Keyframes for the top gradient</p>\n"
                }
            ],
            "navigation/header/src/lib/static-data/parsed.ts": [
                {
                    "name": "HUBMAP_MENU",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "HubmapMenuSchema.parse(RAW_HUBMAP_MENU).groups",
                    "rawdescription": "Parsed hubmap menu object",
                    "description": "<p>Parsed hubmap menu object</p>\n"
                },
                {
                    "name": "MENUS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MenusSchema.parse(RAW_MENUS).menus",
                    "rawdescription": "Parsed menus object",
                    "description": "<p>Parsed menus object</p>\n"
                }
            ],
            "navigation/header/src/lib/types/hubmap-menu.schema.ts": [
                {
                    "name": "HubmapMenuGroupSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  label: z.string(),\n  items: HubmapMenuItemSchema.array(),\n})",
                    "rawdescription": "Schema for a hubmap menu group",
                    "description": "<p>Schema for a hubmap menu group</p>\n"
                },
                {
                    "name": "HubmapMenuItemSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  label: z.string(),\n  description: z.string(),\n  icon: z.string(),\n  url: z.string().url(),\n})",
                    "rawdescription": "Schema for a hubmap menu item",
                    "description": "<p>Schema for a hubmap menu item</p>\n"
                },
                {
                    "name": "HubmapMenuSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  $schema: z.string(),\n  groups: HubmapMenuGroupSchema.array(),\n})",
                    "rawdescription": "Schema for a humbap menu",
                    "description": "<p>Schema for a humbap menu</p>\n"
                }
            ],
            "expansion-panel/src/lib/expansion-panel.component.ts": [
                {
                    "name": "idCounter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "expansion-panel/src/lib/expansion-panel.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0",
                    "rawdescription": "Counter to keep track of distinct panels",
                    "description": "<p>Counter to keep track of distinct panels</p>\n"
                }
            ],
            "brand/logo/src/lib/static-data/parsed.ts": [
                {
                    "name": "LOGOS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/logo/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BrandLogosSchema.parse(RAW_LOGOS).logos",
                    "rawdescription": "Data for all logos",
                    "description": "<p>Data for all logos</p>\n"
                }
            ],
            "brand/mark/src/lib/static-data/parsed.ts": [
                {
                    "name": "MARKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/mark/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "BrandMarksSchema.parse(RAW_MARKS).marks",
                    "rawdescription": "All marks data",
                    "description": "<p>All marks data</p>\n"
                }
            ],
            "navigation/header/src/lib/types/menus.schema.ts": [
                {
                    "name": "MenuDividerSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal('divider'),\n})",
                    "rawdescription": "Schema for a menu divider",
                    "description": "<p>Schema for a menu divider</p>\n"
                },
                {
                    "name": "MenuGroupSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal('group'),\n  label: z.string(),\n  description: z.string().optional(),\n  url: z.string().url(),\n  items: z.union([MenuSubGroupSchema, MenuItemSchema]).array().optional(),\n})",
                    "rawdescription": "Schema for a menu group",
                    "description": "<p>Schema for a menu group</p>\n"
                },
                {
                    "name": "MenuItemSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal('item'),\n  label: z.string(),\n  url: z.string().url(),\n})",
                    "rawdescription": "Schema for a menu item",
                    "description": "<p>Schema for a menu item</p>\n"
                },
                {
                    "name": "MenuSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal('menu'),\n  id: z.string(),\n  label: z.string(),\n  items: z.union([MenuGroupSchema, MenuDividerSchema]).array(),\n})",
                    "rawdescription": "Schema for a menu",
                    "description": "<p>Schema for a menu</p>\n"
                },
                {
                    "name": "MenusSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  $schema: z.string(),\n  menus: MenuSchema.array(),\n})",
                    "rawdescription": "Schema for multiple menus",
                    "description": "<p>Schema for multiple menus</p>\n"
                },
                {
                    "name": "MenuSubGroupSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal('subgroup'),\n  label: z.string(),\n  items: MenuItemSchema.array(),\n})",
                    "rawdescription": "Schema for a menu subgroup",
                    "description": "<p>Schema for a menu subgroup</p>\n"
                }
            ],
            "tree/src/lib/tree-demo/tree-demo.component.ts": [
                {
                    "name": "PADDING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tree/src/lib/tree-demo/tree-demo.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<TreeSize, number>",
                    "defaultValue": "{\n  small: 32,\n  medium: 36,\n  large: 40,\n}",
                    "rawdescription": "Padding indents for each tree size (px)",
                    "description": "<p>Padding indents for each tree size (px)</p>\n"
                }
            ],
            "brand/src/lib/brand.module.ts": [
                {
                    "name": "REEXPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "brand/src/lib/brand.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[BrandLogoComponent, BrandMarkComponent]",
                    "rawdescription": "All sub library components, module, etc.",
                    "description": "<p>All sub library components, module, etc.</p>\n"
                }
            ],
            "buttons/src/lib/buttons.module.ts": [
                {
                    "name": "REEXPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "buttons/src/lib/buttons.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatButtonModule,\n  MatButtonToggleModule,\n\n  AppNavButtonComponent,\n  BreadcrumbsComponent,\n  ButtonSizeDirective,\n  ButtonToggleSizeDirective,\n  ButtonVariantDirective,\n  CtaButtonDirective,\n  NavigationCategoryToggleComponent,\n  PrimaryButtonVariantDirective,\n  SecondaryButtonVariantDirective,\n  SocialMediaButtonComponent,\n  TextHyperlinkDirective,\n]",
                    "rawdescription": "All re-exported modules, components, directives, etc.",
                    "description": "<p>All re-exported modules, components, directives, etc.</p>\n"
                }
            ],
            "navigation/src/lib/navigation.module.ts": [
                {
                    "name": "REEXPORTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "navigation/src/lib/navigation.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[CtaBarComponent, FooterComponent, HeaderComponent]",
                    "rawdescription": "All sub library components, module, etc.",
                    "description": "<p>All sub library components, module, etc.</p>\n"
                }
            ],
            "scrolling/src/lib/scroll-timeline/scroll-timeline.ts": [
                {
                    "name": "SCROLL_TIMELINE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Signal<ScrollTimelineFunc | null>>('SCROLL_TIMELINE', {\n  providedIn: 'root',\n  factory: () => {\n    type WindowWithScrollTimeline = { ScrollTimeline: ScrollTimelineFunc };\n    const window = inject(DOCUMENT).defaultView as unknown as WindowWithScrollTimeline | null;\n    if (!isPlatformBrowser(inject(PLATFORM_ID)) || !window) {\n      return signal(null);\n    }\n\n    const isAvailable = () => 'ScrollTimeline' in window && typeof window.ScrollTimeline === 'function';\n    if (isAvailable()) {\n      return signal(window['ScrollTimeline']);\n    }\n\n    const scrollTimeline$ = inject(SCROLL_TIMELINE_QUERY_INTERVAL).pipe(\n      takeWhile(() => !isAvailable()),\n      ignoreElements(),\n      endWith(null),\n      map(() => window.ScrollTimeline),\n    );\n\n    return toSignal(scrollTimeline$, { initialValue: null });\n  },\n})",
                    "rawdescription": "Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.",
                    "description": "<p>Provides ScrollTimeline as a signal.\nIf not natively implemented it will try to wait for a polyfill\nto provide the function.</p>\n"
                },
                {
                    "name": "SCROLL_TIMELINE_QUERY_INTERVAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Observable<number>>('SCROLL_TIMELINE_QUERY_INTERVAL', {\n  providedIn: 'root',\n  factory: () => interval(100),\n})",
                    "rawdescription": "Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.",
                    "description": "<p>Interval between scroll timeline availability checks.\nPrimarily used to simplify testing.</p>\n"
                }
            ],
            "buttons/social-media-button/src/lib/static-data/parsed.ts": [
                {
                    "name": "SOCIAL_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "buttons/social-media-button/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SOCIALS.map(({ id }) => id)",
                    "rawdescription": "All available social ids",
                    "description": "<p>All available social ids</p>\n"
                },
                {
                    "name": "SOCIALS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "buttons/social-media-button/src/lib/static-data/parsed.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SocialsSchema.parse(RAW_SOCIALS).socials",
                    "rawdescription": "Parsed social media items",
                    "description": "<p>Parsed social media items</p>\n"
                }
            ],
            "buttons/social-media-button/src/lib/types/social-media.schema.ts": [
                {
                    "name": "SocialMediaSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  id: z.string().brand<'SocialMediaId'>(),\n  icon: z.string(),\n  isFontIcon: z.boolean().optional(),\n  link: z.string(),\n})",
                    "rawdescription": "Schema for social media item",
                    "description": "<p>Schema for social media item</p>\n"
                },
                {
                    "name": "SocialsSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  $schema: z.string(),\n  socials: SocialMediaSchema.array(),\n})",
                    "rawdescription": "Schema for social media items",
                    "description": "<p>Schema for social media items</p>\n"
                }
            ],
            "software-status-indicator/src/lib/software-status-indicator-size.directive.ts": [
                {
                    "name": "STATUS_FONTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "software-status-indicator/src/lib/software-status-indicator-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<SoftwareStatusSize, string>",
                    "defaultValue": "{\n  small: 'var(--mat-sys-label-micro)',\n  medium: 'var(--mat-sys-label-medium)',\n  large: 'var(--mat-sys-label-large)',\n}",
                    "rawdescription": "Record of button fonts",
                    "description": "<p>Record of button fonts</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "color-picker/src/lib/color-utils.ts": [
                {
                    "name": "colorEquals",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Compares two RGB colors for equality</p>\n",
                    "args": [
                        {
                            "name": "color1",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color2",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "color1",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color2",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hexToRgb",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Converts a hexadecimal color string to an RGB color</p>\n",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Rgb",
                    "jsdoctags": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rgbToHex",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Converts an RGB color to its hexadecimal string representation</p>\n",
                    "args": [
                        {
                            "name": "rgb",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "rgb",
                            "type": "Rgb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "buttons/button/src/lib/providers.ts": [
                {
                    "name": "provideButton",
                    "file": "buttons/button/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Applies global styles to buttons</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 263,
                                "end": 270,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Button providers</p>\n"
                        }
                    ]
                }
            ],
            "buttons/src/lib/providers.ts": [
                {
                    "name": "provideButtons",
                    "file": "buttons/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Collects all subpackage providers into a single provider function.</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 400,
                                "end": 407,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Button providers</p>\n"
                        }
                    ]
                }
            ],
            "buttons/button-toggle/src/lib/providers.ts": [
                {
                    "name": "provideButtonToggle",
                    "file": "buttons/button-toggle/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Applies global styles to button toggles</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 392,
                                "end": 399,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Button toggle providers</p>\n"
                        }
                    ]
                }
            ],
            "checkbox/src/lib/providers.ts": [
                {
                    "name": "provideCheckboxes",
                    "file": "checkbox/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for checkboxes</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "src/lib/providers.ts": [
                {
                    "name": "provideDesignSystem",
                    "file": "src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns design system providers</p>\n",
                    "args": [
                        {
                            "name": "options",
                            "type": "DesignSystemOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DesignSystemOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "provideDesignSystemCommon",
                    "file": "src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get the providers shared between prod and testing</p>\n",
                    "args": [
                        {
                            "name": "options",
                            "type": "DesignSystemOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DesignSystemOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "icon-button/src/lib/providers.ts": [
                {
                    "name": "provideIconButtons",
                    "file": "icon-button/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for icon buttons</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "input/src/lib/providers.ts": [
                {
                    "name": "provideInput",
                    "file": "input/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for Input</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "menu/src/lib/providers.ts": [
                {
                    "name": "provideMenu",
                    "file": "menu/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for menu</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "scrolling/src/lib/scrolling.module.ts": [
                {
                    "name": "provideScrolling",
                    "file": "scrolling/src/lib/scrolling.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provide scrolling functionality to an application.</p>\n",
                    "args": [
                        {
                            "name": "options",
                            "type": "ScrollingOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 906,
                                "end": 913,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "options"
                            },
                            "type": "ScrollingOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 900,
                                "end": 905,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scrollbar options</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 936,
                                "end": 943,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An environment provider</p>\n"
                        }
                    ]
                }
            ],
            "select/src/lib/providers.ts": [
                {
                    "name": "provideSelect",
                    "file": "select/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for select</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "table/src/lib/providers.ts": [
                {
                    "name": "provideTable",
                    "file": "table/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for table</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "buttons/text-hyperlink/src/lib/providers.ts": [
                {
                    "name": "provideTextHyperlink",
                    "file": "buttons/text-hyperlink/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provides the global styles for text hyperlink elements.</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 293,
                                "end": 300,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Text hyperlink providers</p>\n"
                        }
                    ]
                }
            ],
            "tree/src/lib/providers.ts": [
                {
                    "name": "provideTrees",
                    "file": "tree/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns providers for tree</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders"
                }
            ],
            "scrolling/testing/src/index.ts": [
                {
                    "name": "setupScrollTesting",
                    "file": "scrolling/testing/src/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Setup the testing environment for scrolling to work.\nAdds global mocks for functions used by scrolling if they don&#39;t exist.</p>\n",
                    "args": [],
                    "returnType": "void"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "brand/logo/src/lib/types/logos.schema.ts": [
                {
                    "name": "BrandLogo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "brand/logo/src/lib/types/logos.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Logo item</p>\n",
                    "kind": 183
                },
                {
                    "name": "BrandLogos",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "brand/logo/src/lib/types/logos.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Logos</p>\n",
                    "kind": 183
                },
                {
                    "name": "BrandLogoSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "brand/logo/src/lib/types/logos.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Logo size</p>\n",
                    "kind": 183
                }
            ],
            "brand/mark/src/lib/types/marks.schema.ts": [
                {
                    "name": "BrandMark",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "brand/mark/src/lib/types/marks.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Mark item</p>\n",
                    "kind": 183
                },
                {
                    "name": "BrandMarks",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "brand/mark/src/lib/types/marks.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Marks</p>\n",
                    "kind": 183
                },
                {
                    "name": "BrandMarkVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "brand/mark/src/lib/types/marks.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Mark variant</p>\n",
                    "kind": 183
                }
            ],
            "snackbar/src/lib/snackbar.component.ts": [
                {
                    "name": "ButtonPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"start\" | \"end\"",
                    "file": "snackbar/src/lib/snackbar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for button position</p>\n",
                    "kind": 192
                }
            ],
            "buttons/button/src/lib/directives/size.directive.ts": [
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\"",
                    "file": "buttons/button/src/lib/directives/size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Named button sizes</p>\n",
                    "kind": 192
                }
            ],
            "buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts": [
                {
                    "name": "ButtonToggleSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "buttons/button-toggle/src/lib/directives/button-toggle-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Button toggle size</p>\n",
                    "kind": 192
                }
            ],
            "buttons/button/src/lib/directives/variant.directive.ts": [
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\"",
                    "file": "buttons/button/src/lib/directives/variant.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Named button variants</p>\n",
                    "kind": 192
                }
            ],
            "navigation/footer/src/lib/types/funders.schema.ts": [
                {
                    "name": "Funder",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/footer/src/lib/types/funders.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A funder item</p>\n",
                    "kind": 183
                },
                {
                    "name": "FunderId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Funder",
                    "file": "navigation/footer/src/lib/types/funders.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Data id of a funder</p>\n",
                    "kind": 199
                },
                {
                    "name": "Funders",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/footer/src/lib/types/funders.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Multiple funders object</p>\n",
                    "kind": 183
                }
            ],
            "navigation/header/src/lib/types/hubmap-menu.schema.ts": [
                {
                    "name": "HubmapMenu",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A hubmap menu</p>\n",
                    "kind": 183
                },
                {
                    "name": "HubmapMenuGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A hubmap menu group</p>\n",
                    "kind": 183
                },
                {
                    "name": "HubmapMenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/hubmap-menu.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A hubmap menu item</p>\n",
                    "kind": 183
                }
            ],
            "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts": [
                {
                    "name": "IconButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "icon-button/src/lib/icon-button-size/icon-button-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for icon button size</p>\n",
                    "kind": 192
                }
            ],
            "icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts": [
                {
                    "name": "IconButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\" | \"color\"",
                    "file": "icon-button/src/lib/icon-button-variant/icon-button-variant.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for icon button color</p>\n",
                    "kind": 192
                }
            ],
            "info-modal/src/lib/info-modal.component.ts": [
                {
                    "name": "InfoModalVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"tabular\" | \"center\"",
                    "file": "info-modal/src/lib/info-modal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Info modal variants</p>\n",
                    "kind": 192
                }
            ],
            "navigation/header/src/lib/types/menus.schema.ts": [
                {
                    "name": "Menu",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A menu</p>\n",
                    "kind": 183
                },
                {
                    "name": "MenuDivider",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A menu divider</p>\n",
                    "kind": 183
                },
                {
                    "name": "MenuGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A menu group</p>\n",
                    "kind": 183
                },
                {
                    "name": "MenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A menu item</p>\n",
                    "kind": 183
                },
                {
                    "name": "Menus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Multiple menus</p>\n",
                    "kind": 183
                },
                {
                    "name": "MenuSubGroup",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "navigation/header/src/lib/types/menus.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>A menu subgroup</p>\n",
                    "kind": 183
                }
            ],
            "navigation/header/src/lib/menu-content/menu-content.component.ts": [
                {
                    "name": "MenuContentVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"desktop\" | \"mobile\"",
                    "file": "navigation/header/src/lib/menu-content/menu-content.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Display modes of the menu content component</p>\n",
                    "kind": 192
                }
            ],
            "micro-tooltip/src/micro-tooltip.directive.ts": [
                {
                    "name": "MicroTooltipSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\"",
                    "file": "micro-tooltip/src/micro-tooltip.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type of Tooltip size</p>\n",
                    "kind": 192
                }
            ],
            "nav-header-buttons/src/lib/nav-header-buttons.component.ts": [
                {
                    "name": "NavHeaderButtonsVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"sidenav\"",
                    "file": "nav-header-buttons/src/lib/nav-header-buttons.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Variant of nav header button</p>\n",
                    "kind": 192
                }
            ],
            "product-logo/src/lib/product-logo.component.ts": [
                {
                    "name": "ProductLogoSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "product-logo/src/lib/product-logo.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Button size type</p>\n",
                    "kind": 192
                }
            ],
            "color-picker/src/lib/color-utils.ts": [
                {
                    "name": "Rgb",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[, , ]",
                    "file": "color-picker/src/lib/color-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type representing an RGB color as a tuple of three numbers</p>\n",
                    "kind": 189
                }
            ],
            "scrolling/src/lib/scroll-timeline/scroll-timeline.ts": [
                {
                    "name": "ScrollTimelineFunc",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "scrolling/src/lib/scroll-timeline/scroll-timeline.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Basic signature of the ScrollTimeline constructor</p>\n",
                    "kind": 185
                }
            ],
            "snackbar/src/lib/snackbar.service.ts": [
                {
                    "name": "SnackbarConfig",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<MatSnackBarConfig | \"data\" | \"panelClass\">",
                    "file": "snackbar/src/lib/snackbar.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Snackbar configuration</p>\n",
                    "kind": 183
                }
            ],
            "buttons/social-media-button/src/lib/types/social-media.schema.ts": [
                {
                    "name": "SocialMedia",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Social media item</p>\n",
                    "kind": 183
                },
                {
                    "name": "SocialMediaId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SocialMedia",
                    "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Social media id</p>\n",
                    "kind": 199
                },
                {
                    "name": "Socials",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "buttons/social-media-button/src/lib/types/social-media.schema.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Social media items</p>\n",
                    "kind": 183
                }
            ],
            "software-status-indicator/src/lib/software-status-indicator.component.ts": [
                {
                    "name": "SoftwareStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Preview\" | \"Alpha\" | \"Beta\"",
                    "file": "software-status-indicator/src/lib/software-status-indicator.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Software status options</p>\n",
                    "kind": 192
                },
                {
                    "name": "SoftwareStatusSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "software-status-indicator/src/lib/software-status-indicator.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Software status size options</p>\n",
                    "kind": 192
                }
            ],
            "software-status-indicator/src/lib/software-status-indicator-size.directive.ts": [
                {
                    "name": "SoftwareStatusSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "software-status-indicator/src/lib/software-status-indicator-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for Software status size</p>\n",
                    "kind": 192
                }
            ],
            "tree/src/lib/tree-size/tree-size.directive.ts": [
                {
                    "name": "TreeSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "tree/src/lib/tree-size/tree-size.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Input options for each tree size</p>\n",
                    "kind": 192
                }
            ]
        }
    }
}