{
    "pipes": [],
    "interfaces": [
        {
            "name": "ContactData",
            "id": "interface-ContactData-83d2d192b4ddd887555a995392f1dea6f9172a23dbd6a6695625fd1cec26ac76b2299be06e5dbb9a2dfea7a1ec92ec025e4141fb6ae9ebd38e0f52fd6276ab24",
            "file": "src/lib/contact-modal/contact-modal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from '@hra-ui/components/atoms';\nimport { produce } from 'immer';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/**\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\n */\nexport interface ContactData {\n  /**  The email address of the person submitting the form. */\n  email: string;\n  /** The subject line of the message being sent. */\n  subject: string;\n  /** The body of the message being sent. */\n  message: string;\n}\n\n/** Initial empty contact data */\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\n  email: undefined,\n  subject: undefined,\n  message: undefined,\n};\n\n/**\n * Contact modal component.\n */\n@Component({\n  selector: 'hra-contact-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    EmailInputComponent,\n    MarkdownModule,\n    RequiredTextboxComponent,\n    RequiredInputComponent,\n  ],\n  templateUrl: './contact-modal.component.html',\n  styleUrls: ['./contact-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactModalComponent {\n  /** Input for product logo URL to displayed on the left side. */\n  @Input() productLogoUrl = '';\n\n  /** Input for product title to displayed on the left side. */\n  @Input() productTitle = '';\n\n  /** Emits when the submit button is clicked and all the values are appropriate. */\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\n\n  /** Emits when the cancel button or close icon is clicked */\n  @Output() readonly closeClick = new EventEmitter<void>();\n\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\n  get disableSubmit(): boolean {\n    return Object.values(this.contactData).some((value) => value === undefined);\n  }\n\n  /** Asigns the undefined initially to all the input fields. */\n  contactData = EMPTY_CONTACT_DATA;\n\n  /** Default email address */\n  readonly defaultMail = 'infoccf@iu.edu';\n\n  /** Updates the contact data object with a new value for a given key. */\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\n    this.contactData = produce(this.contactData, (draft) => {\n      draft[key] = value;\n    });\n  }\n\n  /** It emits the updated value of contact data */\n  submit(): void {\n    this.submitClick.emit(this.contactData as ContactData);\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The email address of the person submitting the form.</p>\n",
                    "line": 14,
                    "rawdescription": "\nThe email address of the person submitting the form."
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The body of the message being sent.</p>\n",
                    "line": 18,
                    "rawdescription": "\nThe body of the message being sent."
                },
                {
                    "name": "subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The subject line of the message being sent.</p>\n",
                    "line": 16,
                    "rawdescription": "\nThe subject line of the message being sent."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>An interface representing contact data information which will be emitted if all the fields are in correct format.</p>\n",
            "rawdescription": "\n\nAn interface representing contact data information which will be emitted if all the fields are in correct format.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "DataItem",
            "id": "interface-DataItem-dba50a1e9cbac5f9733930bd6b04d1ac5fda31ee6342e13da75314f7b5dbbf46c436aab104bfc47abdc323e9ff42aeeb0047ee89577f639d3979c6964344bbd7",
            "file": "src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\n\n/** An item which defines a string label and a string value */\nexport interface DataItem {\n  /** A string property that represents the label */\n  label: string;\n  /** A string property that represents the value */\n  value: string;\n}\n\n/** An item which represents a section with a data item and an indicator for the last item in the section */\nexport interface SectionItem {\n  /** A number property that represents the section number */\n  section: number;\n  /** A DateItem property that represents a section and its data */\n  data: DataItem;\n  /** A boolean property that represents the last item of a section */\n  isLastItem: boolean;\n}\n\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\n@Component({\n  selector: 'hra-biomarker-table-data-card',\n  standalone: true,\n  imports: [CommonModule, MatTableModule],\n  templateUrl: './biomarker-table-data-card.component.html',\n  styleUrls: ['./biomarker-table-data-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerTableDataCardComponent implements OnChanges {\n  /** Nested list of DataItems for each section which is displayed to the user */\n  @Input() data: DataItem[][] = [];\n\n  /** Converted nested array of DataItem into Flat array of SectionItem */\n  sectionItems: SectionItem[] = [];\n\n  /** Triggers an update on sectionItems array when data is changed */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('data' in changes) {\n      this.updateSectionItems();\n    }\n  }\n\n  /** Updates sectionItems array when data is changed */\n  private updateSectionItems(): void {\n    const newSectionItems: SectionItem[] = [];\n\n    this.data.forEach((section, sectionIndex) => {\n      section.forEach((item, itemIndex) => {\n        newSectionItems.push({\n          data: item,\n          section: sectionIndex,\n          isLastItem: itemIndex === section.length - 1,\n        });\n      });\n    });\n\n    this.sectionItems = newSectionItems;\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A string property that represents the label</p>\n",
                    "line": 8,
                    "rawdescription": "\nA string property that represents the label"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A string property that represents the value</p>\n",
                    "line": 10,
                    "rawdescription": "\nA string property that represents the value"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>An item which defines a string label and a string value</p>\n",
            "rawdescription": "\nAn item which defines a string label and a string value",
            "methods": [],
            "extends": []
        },
        {
            "name": "DataNode",
            "id": "interface-DataNode-c78e5394de0d6c8f1d9e1e429499f409d52c934c5c2387c13559d6b24aeee7af41f255badc70750f063a293d9149221e041042381816d847c329eb815ef12f9d",
            "file": "src/lib/tissue-tree-list/tissue-tree-list.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FlatTreeControl } from '@angular/cdk/tree';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from '@angular/material/tree';\nimport { LinkDirective } from '@hra-ui/cdk';\nimport { LinkId } from '@hra-ui/cdk/state';\n\n/** Base node type */\nexport interface DataNode<K extends string> {\n  /** User readable label */\n  label: string;\n  /** Id to pass as a query parameter on navigation */\n  id?: string;\n  /** Link to navigate to on node click */\n  link?: LinkId;\n  /** Nested nodes */\n  children?: K[];\n}\n\n/**\n * Internal interface for flat tissue data hierarchy\n */\ninterface InternalNode<K extends string, T extends DataNode<K>> {\n  /** Displayed label */\n  label: string;\n  /** Whether the node can be expanded to display child nodes */\n  expandable: boolean;\n  /** Depth of node in the tree */\n  level: number;\n  /** Associated user node data */\n  data: T;\n}\n\n/**\n * Tabular View for hubMap tissue side-bar\n */\n@Component({\n  selector: 'hra-tissue-tree-list',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatTreeModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatRippleModule,\n    LinkDirective,\n  ],\n  templateUrl: './tissue-tree-list.component.html',\n  styleUrls: ['./tissue-tree-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\n  /**\n   * Input  of tissue tree list component\n   */\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\n\n  /**\n   * Node selected, to view the data associated with it\n   */\n  @Input() selected?: T = undefined;\n\n  /**\n   * Output  of tissue tree list component\n   */\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\n\n  /**\n   * Navigates to an illustration page\n   */\n  @Output() navigate = new EventEmitter();\n\n  /**\n   * Whether keyboard navigation is enabled\n   */\n  enableNav = true;\n\n  /**\n   * tree controller, used to control the nodes in the tree\n   */\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\n    (node) => node.level,\n    (node) => node.expandable,\n  );\n\n  /**\n   * Flattener of tissue tree list component, returns flat-data structure\n   */\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\n    (node, level) => ({\n      label: node.label,\n      expandable: (node.children?.length ?? 0) > 0,\n      level,\n      data: node,\n    }),\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children?.map((id) => this.nodes[id]),\n  );\n\n  /**\n   * Data source of tissue tree list component, defines the data in mat-tree\n   */\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\n\n  /**\n   * Take actions if any data changes\n   * @param changes changes in data\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('nodes' in changes) {\n      this.dataSource.data = this.findRootNodes();\n      this.control.expandAll();\n    }\n    if ('selected' in changes) {\n      if (!this.selected) {\n        this.control.expandAll();\n      }\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\n      const node = this.control.dataNodes.find((n) => n.data === changes['selected'].currentValue);\n      if (!node?.expandable) {\n        this.expandPath(path);\n      }\n    }\n  }\n\n  /**\n   * check if the current node has children\n   * @param node current selected node\n   * @returns boolean, which means if node has children\n   */\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\n    return node.expandable;\n  }\n\n  /**\n   * It selects the node, which is clicked.\n   * @param node Tissue Tree Item, which is clicked\n   */\n  selectNode(node: T): void {\n    if (this.selected !== node) {\n      this.selected = node;\n      this.selectedChange.emit(this.selected);\n    }\n  }\n\n  /**\n   * Resets selection and collapes all nodes of the tree.\n   */\n  resetSelection(): void {\n    this.selected = undefined;\n    this.control.collapseAll();\n  }\n\n  /**\n   * It creates a copy of the input nodes object.\n   * It iterates over it and removes all the children nodes from it.\n   * @returns remaining nodes which are root nodes.\n   */\n  private findRootNodes(): T[] {\n    const { nodes } = this;\n    const roots = { ...this.nodes };\n    for (const key in nodes) {\n      for (const child of nodes[key].children ?? []) {\n        delete roots[child];\n      }\n    }\n\n    return Object.values(roots);\n  }\n\n  /**\n   * expands the tree nodes based on the path provided.\n   * @param path is given as an input.\n   */\n  private expandPath(path: DataNode<K>[]): void {\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\n    nodes.forEach((node) => this.control.expand(node));\n  }\n\n  /**\n   * It used the logic of depth first search to find the target node.\n   * returns the path to the target node.\n   */\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\n    for (const node of nodes) {\n      path.push(node);\n      if (node === target) {\n        return path;\n      }\n\n      const savedLength = path.length;\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\n        return path;\n      }\n\n      path.pop();\n    }\n\n    return path;\n  }\n\n  /**\n   * Keyboard navigation for tissue tree list\n   * @param event Keyboard event\n   */\n  @HostListener('document:keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    if (!this.enableNav) {\n      return;\n    }\n    if (this.control) {\n      const nodes = this.control.dataNodes;\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\n\n      const currentNode = nodes[selectedIndex];\n      if (currentNode && currentNode.expandable) {\n        const expandableNodes = nodes.filter((node) => node.expandable);\n        const index = expandableNodes.indexOf(currentNode);\n        if (event.key === 'ArrowLeft') {\n          this.control.collapse(currentNode);\n        } else if (event.key === 'ArrowRight') {\n          this.control.expand(currentNode);\n        } else if (\n          event.key === 'ArrowDown' &&\n          index + 1 < expandableNodes.length &&\n          !this.control.isExpanded(currentNode)\n        ) {\n          this.selectNode(expandableNodes[index + 1].data);\n          return;\n        } else if (event.key === 'ArrowUp' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\n          this.selectNode(expandableNodes[index - 1].data);\n          return;\n        }\n      }\n      if (event.key === 'ArrowDown' && selectedIndex + 1 < nodes.length) {\n        this.selectNode(nodes[selectedIndex + 1].data);\n      }\n      if (event.key === 'ArrowUp' && selectedIndex - 1 >= 0) {\n        this.selectNode(nodes[selectedIndex - 1].data);\n      }\n      if (event.key === 'Enter' && !currentNode.expandable) {\n        this.navigate.emit(currentNode.data);\n      }\n    }\n  }\n\n  /**\n   * Disable keyboard nav on click\n   */\n  @HostListener('document:click')\n  handlePageClick(): void {\n    this.enableNav = false;\n  }\n\n  /**\n   * Enables keyboard nav only if the tissue tree list is clicked\n   * @param event Click event\n   */\n  @HostListener('click', ['$event'])\n  handleListClick(event: MouseEvent): void {\n    event.stopPropagation();\n    this.enableNav = true;\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "K[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Nested nodes</p>\n",
                    "line": 30,
                    "rawdescription": "\nNested nodes"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Id to pass as a query parameter on navigation</p>\n",
                    "line": 26,
                    "rawdescription": "\nId to pass as a query parameter on navigation"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>User readable label</p>\n",
                    "line": 24,
                    "rawdescription": "\nUser readable label"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkId",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Link to navigate to on node click</p>\n",
                    "line": 28,
                    "rawdescription": "\nLink to navigate to on node click"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Base node type</p>\n",
            "rawdescription": "\nBase node type",
            "methods": [],
            "extends": []
        },
        {
            "name": "DownloadFormat",
            "id": "interface-DownloadFormat-e51939d18d7ad9957936ab8a6d7e2d46a69d4ab3b4d6dc01ebe300c1f6f74a51217fa903cc64a3c7e02669e5c29afb929acea3e01f475c42012d25f8cde46b26",
            "file": "src/lib/footer/footer.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConnectedPosition, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { LinkDirective } from '@hra-ui/cdk';\nimport { EMPTY_LINK } from '@hra-ui/cdk/state';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\n\n/**\n * Base type for different download format options.\n */\nexport interface DownloadFormat {\n  /**\n   * User readable format label\n   */\n  label: string;\n}\n\n/**\n * Positioning value for the download list popup\n */\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\n  {\n    panelClass: 'above',\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n    offsetY: 0,\n  },\n  {\n    panelClass: 'below',\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n];\n\n/**\n * Component for footer that displays its content at the bottom of the page with different action buttons.\n */\n@Component({\n  selector: 'hra-footer',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\n  /** Host binding of footer component */\n  @HostBinding('class')\n  @Input()\n  size: 'small' | 'large' = 'large';\n\n  /** Input for product logo URL to displayed on the left side. */\n  @Input() productLogoUrl = '';\n\n  /** Input for product title to displayed on the left side. */\n  @Input() productTitle = '';\n\n  /** Input for Illustration metadata page link in HRA Portal */\n  @Input() illustrationMetadata = EMPTY_LINK;\n\n  /** Input for embed link in HRA Portal */\n  @Input() embed = EMPTY_LINK;\n\n  /** Different download formats options displayed to the user */\n  @Input() downloadFormats: T[] = [];\n\n  /** Input for about link */\n  @Input() aboutLink = EMPTY_LINK;\n\n  /** Emits the selected download format */\n  @Output() readonly download = new EventEmitter<T>();\n\n  /** Download list popup overlay positioning */\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\n\n  /** Gets whether the footer required is small */\n  get isSmall(): boolean {\n    return this.size === 'small';\n  }\n\n  /** Whether the download list panel is open */\n  downloadListOpen = false;\n\n  /** Emits when the contact button is clicked */\n  @Output() readonly contactClick = new EventEmitter<void>();\n\n  /** Google analytics tracking service */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /**\n   * Logs event when about button clicked\n   */\n  aboutClicked(): void {\n    this.ga.event('about_icon_click', 'link_click');\n  }\n\n  /**\n   * Ignore if button is clicked, otherwise close the download list panel\n   * @param event Mouse event\n   */\n  handleOutsideClick(event: MouseEvent): void {\n    const target = event.target as HTMLElement;\n    if (['download', 'download\\nDownload'].includes(target.innerText)) {\n      return;\n    } else {\n      this.downloadListOpen = false;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>User readable format label</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nUser readable format label\n"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Base type for different download format options.</p>\n",
            "rawdescription": "\n\nBase type for different download format options.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "InternalNode",
            "id": "interface-InternalNode-c78e5394de0d6c8f1d9e1e429499f409d52c934c5c2387c13559d6b24aeee7af41f255badc70750f063a293d9149221e041042381816d847c329eb815ef12f9d",
            "file": "src/lib/tissue-tree-list/tissue-tree-list.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FlatTreeControl } from '@angular/cdk/tree';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from '@angular/material/tree';\nimport { LinkDirective } from '@hra-ui/cdk';\nimport { LinkId } from '@hra-ui/cdk/state';\n\n/** Base node type */\nexport interface DataNode<K extends string> {\n  /** User readable label */\n  label: string;\n  /** Id to pass as a query parameter on navigation */\n  id?: string;\n  /** Link to navigate to on node click */\n  link?: LinkId;\n  /** Nested nodes */\n  children?: K[];\n}\n\n/**\n * Internal interface for flat tissue data hierarchy\n */\ninterface InternalNode<K extends string, T extends DataNode<K>> {\n  /** Displayed label */\n  label: string;\n  /** Whether the node can be expanded to display child nodes */\n  expandable: boolean;\n  /** Depth of node in the tree */\n  level: number;\n  /** Associated user node data */\n  data: T;\n}\n\n/**\n * Tabular View for hubMap tissue side-bar\n */\n@Component({\n  selector: 'hra-tissue-tree-list',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatTreeModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatRippleModule,\n    LinkDirective,\n  ],\n  templateUrl: './tissue-tree-list.component.html',\n  styleUrls: ['./tissue-tree-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\n  /**\n   * Input  of tissue tree list component\n   */\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\n\n  /**\n   * Node selected, to view the data associated with it\n   */\n  @Input() selected?: T = undefined;\n\n  /**\n   * Output  of tissue tree list component\n   */\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\n\n  /**\n   * Navigates to an illustration page\n   */\n  @Output() navigate = new EventEmitter();\n\n  /**\n   * Whether keyboard navigation is enabled\n   */\n  enableNav = true;\n\n  /**\n   * tree controller, used to control the nodes in the tree\n   */\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\n    (node) => node.level,\n    (node) => node.expandable,\n  );\n\n  /**\n   * Flattener of tissue tree list component, returns flat-data structure\n   */\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\n    (node, level) => ({\n      label: node.label,\n      expandable: (node.children?.length ?? 0) > 0,\n      level,\n      data: node,\n    }),\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children?.map((id) => this.nodes[id]),\n  );\n\n  /**\n   * Data source of tissue tree list component, defines the data in mat-tree\n   */\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\n\n  /**\n   * Take actions if any data changes\n   * @param changes changes in data\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('nodes' in changes) {\n      this.dataSource.data = this.findRootNodes();\n      this.control.expandAll();\n    }\n    if ('selected' in changes) {\n      if (!this.selected) {\n        this.control.expandAll();\n      }\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\n      const node = this.control.dataNodes.find((n) => n.data === changes['selected'].currentValue);\n      if (!node?.expandable) {\n        this.expandPath(path);\n      }\n    }\n  }\n\n  /**\n   * check if the current node has children\n   * @param node current selected node\n   * @returns boolean, which means if node has children\n   */\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\n    return node.expandable;\n  }\n\n  /**\n   * It selects the node, which is clicked.\n   * @param node Tissue Tree Item, which is clicked\n   */\n  selectNode(node: T): void {\n    if (this.selected !== node) {\n      this.selected = node;\n      this.selectedChange.emit(this.selected);\n    }\n  }\n\n  /**\n   * Resets selection and collapes all nodes of the tree.\n   */\n  resetSelection(): void {\n    this.selected = undefined;\n    this.control.collapseAll();\n  }\n\n  /**\n   * It creates a copy of the input nodes object.\n   * It iterates over it and removes all the children nodes from it.\n   * @returns remaining nodes which are root nodes.\n   */\n  private findRootNodes(): T[] {\n    const { nodes } = this;\n    const roots = { ...this.nodes };\n    for (const key in nodes) {\n      for (const child of nodes[key].children ?? []) {\n        delete roots[child];\n      }\n    }\n\n    return Object.values(roots);\n  }\n\n  /**\n   * expands the tree nodes based on the path provided.\n   * @param path is given as an input.\n   */\n  private expandPath(path: DataNode<K>[]): void {\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\n    nodes.forEach((node) => this.control.expand(node));\n  }\n\n  /**\n   * It used the logic of depth first search to find the target node.\n   * returns the path to the target node.\n   */\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\n    for (const node of nodes) {\n      path.push(node);\n      if (node === target) {\n        return path;\n      }\n\n      const savedLength = path.length;\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\n        return path;\n      }\n\n      path.pop();\n    }\n\n    return path;\n  }\n\n  /**\n   * Keyboard navigation for tissue tree list\n   * @param event Keyboard event\n   */\n  @HostListener('document:keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    if (!this.enableNav) {\n      return;\n    }\n    if (this.control) {\n      const nodes = this.control.dataNodes;\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\n\n      const currentNode = nodes[selectedIndex];\n      if (currentNode && currentNode.expandable) {\n        const expandableNodes = nodes.filter((node) => node.expandable);\n        const index = expandableNodes.indexOf(currentNode);\n        if (event.key === 'ArrowLeft') {\n          this.control.collapse(currentNode);\n        } else if (event.key === 'ArrowRight') {\n          this.control.expand(currentNode);\n        } else if (\n          event.key === 'ArrowDown' &&\n          index + 1 < expandableNodes.length &&\n          !this.control.isExpanded(currentNode)\n        ) {\n          this.selectNode(expandableNodes[index + 1].data);\n          return;\n        } else if (event.key === 'ArrowUp' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\n          this.selectNode(expandableNodes[index - 1].data);\n          return;\n        }\n      }\n      if (event.key === 'ArrowDown' && selectedIndex + 1 < nodes.length) {\n        this.selectNode(nodes[selectedIndex + 1].data);\n      }\n      if (event.key === 'ArrowUp' && selectedIndex - 1 >= 0) {\n        this.selectNode(nodes[selectedIndex - 1].data);\n      }\n      if (event.key === 'Enter' && !currentNode.expandable) {\n        this.navigate.emit(currentNode.data);\n      }\n    }\n  }\n\n  /**\n   * Disable keyboard nav on click\n   */\n  @HostListener('document:click')\n  handlePageClick(): void {\n    this.enableNav = false;\n  }\n\n  /**\n   * Enables keyboard nav only if the tissue tree list is clicked\n   * @param event Click event\n   */\n  @HostListener('click', ['$event'])\n  handleListClick(event: MouseEvent): void {\n    event.stopPropagation();\n    this.enableNav = true;\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Associated user node data</p>\n",
                    "line": 44,
                    "rawdescription": "\nAssociated user node data"
                },
                {
                    "name": "expandable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the node can be expanded to display child nodes</p>\n",
                    "line": 40,
                    "rawdescription": "\nWhether the node can be expanded to display child nodes"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Displayed label</p>\n",
                    "line": 38,
                    "rawdescription": "\nDisplayed label"
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Depth of node in the tree</p>\n",
                    "line": 42,
                    "rawdescription": "\nDepth of node in the tree"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Internal interface for flat tissue data hierarchy</p>\n",
            "rawdescription": "\n\nInternal interface for flat tissue data hierarchy\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "MetricItem",
            "id": "interface-MetricItem-6e3a4bad9dea0c0be10b197ab58639138abd5a1daf54d501bb2aa02864a0941b60580e69878578865cfd236b31a32ca86cf510c5241d8b6bd3f1128c73e47600",
            "file": "src/lib/metrics/metrics.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n  An interface representing a single metric with an icon, value and description.\n */\nexport interface MetricItem {\n  /** Represents the icon associated with the metric. */\n  icon: string;\n  /** Describes the numberical value of the metric. */\n  value: string;\n  /** Describes the type of metric. */\n  description: string;\n}\n/**\n * Describes the metrics for the HuBMAP project.\n */\n@Component({\n  selector: 'hra-metrics',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './metrics.component.html',\n  styleUrls: ['./metrics.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsComponent {\n  /** Main title of metrics component. */\n  @Input() title = '';\n\n  /** Logo of metrics component. */\n  @Input() logo = '';\n\n  /** List of metrics that will be shown to the user. */\n  @Input() metrics: MetricItem[] = [];\n\n  /** Base url */\n  @Input() baseHref = '';\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Describes the type of metric.</p>\n",
                    "line": 13,
                    "rawdescription": "\nDescribes the type of metric."
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Represents the icon associated with the metric.</p>\n",
                    "line": 9,
                    "rawdescription": "\nRepresents the icon associated with the metric."
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Describes the numberical value of the metric.</p>\n",
                    "line": 11,
                    "rawdescription": "\nDescribes the numberical value of the metric."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>An interface representing a single metric with an icon, value and description.</p>\n",
            "rawdescription": "\n\nAn interface representing a single metric with an icon, value and description.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "NodeMapEntry",
            "id": "interface-NodeMapEntry-0711015c1f391a7e92097035f32782c7f7c478300b1c248a0b77c6bbf4814b79173bb1a1276b156282c71fcf6711dffe41c7d57c0ec02a86a2d0fb393341fd2f",
            "file": "src/lib/interactive-svg/interactive-svg.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConnectedPosition, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { TooltipComponent } from '@hra-ui/components/atoms';\nimport { InlineSVGModule, SVGScriptEvalMode } from 'ng-inline-svg-2';\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from 'rxjs';\nimport { NodeEventHandler } from 'rxjs/internal/observable/fromEvent';\n\n/** Delay before tooltip becomes visible */\nconst HOVER_DELAY = 200;\n\n/** Tooltip position settings */\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center',\n    offsetX: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'end',\n    overlayY: 'center',\n    offsetX: -8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'top',\n    offsetY: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'bottom',\n    offsetY: -8,\n  },\n];\n\n/** Node tooltip data */\nexport interface NodeTooltipData {\n  /** Node name */\n  node: string;\n  /** Center point of hovered node in screen coordinates */\n  origin: { x: number; y: number };\n}\n\n/** Interface for node entries */\nexport interface NodeMapEntry {\n  /** Node label */\n  label: string;\n  /** Node id in svg */\n  id: string;\n  /** Node group id */\n  groupId: string;\n  /** Ontology id of cell type */\n  ontologyId: string;\n}\n\n/**\n * Interactive SVG component\n */\n@Component({\n  selector: 'hra-interactive-svg',\n  standalone: true,\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\n  templateUrl: './interactive-svg.component.html',\n  styleUrls: ['./interactive-svg.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\n  /** SVG url */\n  @Input() url?: string;\n\n  /** Mapping info */\n  @Input() mapping: T[] = [];\n\n  /** Highlighted ontology id */\n  @Input() highlightId?: string;\n\n  /** Emits node id when hovered */\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\n\n  /** Emits node id when clicked */\n  @Output() readonly nodeClick = new EventEmitter<T>();\n\n  /** SVG script eval mode */\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\n\n  /** Tooltip position settings */\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\n\n  /** Observable of node hover data or undefined when there is no active hover */\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\n\n  /** Observable of node hover with a timer */\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\n\n  /** Custom renderer */\n  private readonly renderer = inject(Renderer2);\n\n  /** Destroys */\n  private destroy$ = new Subject<void>();\n\n  /** Crosswalk element of svg */\n  private crosswalkEl?: Element;\n\n  /** List of highlighted svg elements */\n  private highlightedElements: Element[] = [];\n\n  /**\n   * Updates the highlighting based on current highlight id\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('highlightId' in changes) {\n      this.resetHighlight();\n      this.setHighlight();\n    }\n  }\n\n  /**\n   * Highlights cells that match highlightId\n   */\n  private setHighlight() {\n    const { mapping, highlightId, crosswalkEl } = this;\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\n    if (!entry || !crosswalkEl) {\n      return;\n    }\n\n    const encodedId = this.encodeId(entry.id);\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\n    if (!element) {\n      return;\n    }\n\n    const gElement = element.nodeName === 'g' ? element : (element.parentElement as Element);\n    const id = gElement.id;\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\n    this.highlightedElements = Array.from(elements);\n    elements.forEach((el) => el.classList.add('click-active'));\n  }\n\n  /**\n   * Resets all highlighted elements in the svg\n   */\n  private resetHighlight(): void {\n    for (const el of this.highlightedElements) {\n      el.classList.remove('click-active');\n    }\n    this.highlightedElements = [];\n  }\n\n  /**\n   * Clears observables on destroy\n   */\n  ngOnDestroy(): void {\n    this.clear();\n  }\n\n  /**\n   * Sets SVG element\n   * @param el SVG element\n   */\n  setSvgElement(el: SVGElement): void {\n    this.clear();\n    this.crosswalkEl = el.querySelector('[id^=\"Crosswalk\"]') ?? undefined;\n    if (this.crosswalkEl) {\n      // Move to front (i.e. last child in svg)\n      this.renderer.appendChild(el, this.crosswalkEl);\n      this.attachCrosswalkHover(this.crosswalkEl);\n      this.setHighlight();\n    }\n  }\n\n  /**\n   * Removes underscores from id\n   * @param name Node name\n   * @returns node name without underscores\n   */\n  formatNodeName(name: string): string {\n    return name.replace(/_/g, ' ');\n  }\n\n  /**\n   * Attaches crosswalk hover\n   * @param el element\n   */\n  private attachCrosswalkHover(el: Element): void {\n    this.attachEvent(el, 'mouseover').subscribe((event) => this.onCrosswalkHover(event));\n    this.attachEvent(el, 'mouseout').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\n    this.attachEvent(el, 'click').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\n  }\n\n  /**\n   * Finds matching node in data from a hovered element\n   * @param event Mouse event\n   */\n  private onCrosswalkHover(event: MouseEvent): void {\n    if (event) {\n      const node = this.getNode(event);\n      if (node) {\n        this.nodeHoverData$.next({\n          node: node.label,\n          origin: {\n            x: event.clientX,\n            y: event.clientY,\n          },\n        });\n        this.nodeHover.emit(node); //emits node entry\n      }\n    } else {\n      this.nodeHoverData$.next(undefined);\n      this.nodeHover.emit();\n    }\n  }\n\n  /**\n   * Clears observables\n   */\n  private clear(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.destroy$ = new Subject();\n  }\n\n  /**\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\n   * @param event Event\n   * @returns Node entry that matches the target id\n   */\n  private getNode(event: Event): T | undefined {\n    const targetId = (event.target as Element).id;\n    const parentId = (event.target as Element).parentElement?.id ?? '';\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? '';\n    const idCollection = [targetId, parentId, grandparentId];\n    for (const id of idCollection) {\n      const decodedID = this.decodeId(id);\n      const cellMatch = this.mapping.find(\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\n      );\n      if (cellMatch) {\n        return cellMatch;\n      } else {\n        const groupMatch = this.mapping.find(\n          (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\n        );\n        if (groupMatch) {\n          return groupMatch;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Decodes id into a normal string\n   * @param id Undecoded ID\n   * @returns id\n   */\n  private decodeId(id: string): string {\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\n    return id.replace(/_x([\\da-f]+)_/gi, replacer);\n  }\n\n  /**\n   * Turns normal string into decoded SVG id\n   * @param id id\n   * @returns Encoded id\n   */\n  private encodeId(id: string): string {\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\n    return id.replace(/[^a-z0-9-]/gi, replacer);\n  }\n\n  /**\n   * Attaches an event listener\n   * @template K\n   * @param el Element\n   * @param event Event\n   * @returns Observable\n   */\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\n    const { renderer, destroy$ } = this;\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\n  }\n}\n",
            "properties": [
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Node group id</p>\n",
                    "line": 71,
                    "rawdescription": "\nNode group id"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Node id in svg</p>\n",
                    "line": 69,
                    "rawdescription": "\nNode id in svg"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Node label</p>\n",
                    "line": 67,
                    "rawdescription": "\nNode label"
                },
                {
                    "name": "ontologyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Ontology id of cell type</p>\n",
                    "line": 73,
                    "rawdescription": "\nOntology id of cell type"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface for node entries</p>\n",
            "rawdescription": "\nInterface for node entries",
            "methods": [],
            "extends": []
        },
        {
            "name": "NodeTooltipData",
            "id": "interface-NodeTooltipData-0711015c1f391a7e92097035f32782c7f7c478300b1c248a0b77c6bbf4814b79173bb1a1276b156282c71fcf6711dffe41c7d57c0ec02a86a2d0fb393341fd2f",
            "file": "src/lib/interactive-svg/interactive-svg.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConnectedPosition, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { TooltipComponent } from '@hra-ui/components/atoms';\nimport { InlineSVGModule, SVGScriptEvalMode } from 'ng-inline-svg-2';\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from 'rxjs';\nimport { NodeEventHandler } from 'rxjs/internal/observable/fromEvent';\n\n/** Delay before tooltip becomes visible */\nconst HOVER_DELAY = 200;\n\n/** Tooltip position settings */\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center',\n    offsetX: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'end',\n    overlayY: 'center',\n    offsetX: -8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'top',\n    offsetY: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'bottom',\n    offsetY: -8,\n  },\n];\n\n/** Node tooltip data */\nexport interface NodeTooltipData {\n  /** Node name */\n  node: string;\n  /** Center point of hovered node in screen coordinates */\n  origin: { x: number; y: number };\n}\n\n/** Interface for node entries */\nexport interface NodeMapEntry {\n  /** Node label */\n  label: string;\n  /** Node id in svg */\n  id: string;\n  /** Node group id */\n  groupId: string;\n  /** Ontology id of cell type */\n  ontologyId: string;\n}\n\n/**\n * Interactive SVG component\n */\n@Component({\n  selector: 'hra-interactive-svg',\n  standalone: true,\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\n  templateUrl: './interactive-svg.component.html',\n  styleUrls: ['./interactive-svg.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\n  /** SVG url */\n  @Input() url?: string;\n\n  /** Mapping info */\n  @Input() mapping: T[] = [];\n\n  /** Highlighted ontology id */\n  @Input() highlightId?: string;\n\n  /** Emits node id when hovered */\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\n\n  /** Emits node id when clicked */\n  @Output() readonly nodeClick = new EventEmitter<T>();\n\n  /** SVG script eval mode */\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\n\n  /** Tooltip position settings */\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\n\n  /** Observable of node hover data or undefined when there is no active hover */\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\n\n  /** Observable of node hover with a timer */\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\n\n  /** Custom renderer */\n  private readonly renderer = inject(Renderer2);\n\n  /** Destroys */\n  private destroy$ = new Subject<void>();\n\n  /** Crosswalk element of svg */\n  private crosswalkEl?: Element;\n\n  /** List of highlighted svg elements */\n  private highlightedElements: Element[] = [];\n\n  /**\n   * Updates the highlighting based on current highlight id\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('highlightId' in changes) {\n      this.resetHighlight();\n      this.setHighlight();\n    }\n  }\n\n  /**\n   * Highlights cells that match highlightId\n   */\n  private setHighlight() {\n    const { mapping, highlightId, crosswalkEl } = this;\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\n    if (!entry || !crosswalkEl) {\n      return;\n    }\n\n    const encodedId = this.encodeId(entry.id);\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\n    if (!element) {\n      return;\n    }\n\n    const gElement = element.nodeName === 'g' ? element : (element.parentElement as Element);\n    const id = gElement.id;\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\n    this.highlightedElements = Array.from(elements);\n    elements.forEach((el) => el.classList.add('click-active'));\n  }\n\n  /**\n   * Resets all highlighted elements in the svg\n   */\n  private resetHighlight(): void {\n    for (const el of this.highlightedElements) {\n      el.classList.remove('click-active');\n    }\n    this.highlightedElements = [];\n  }\n\n  /**\n   * Clears observables on destroy\n   */\n  ngOnDestroy(): void {\n    this.clear();\n  }\n\n  /**\n   * Sets SVG element\n   * @param el SVG element\n   */\n  setSvgElement(el: SVGElement): void {\n    this.clear();\n    this.crosswalkEl = el.querySelector('[id^=\"Crosswalk\"]') ?? undefined;\n    if (this.crosswalkEl) {\n      // Move to front (i.e. last child in svg)\n      this.renderer.appendChild(el, this.crosswalkEl);\n      this.attachCrosswalkHover(this.crosswalkEl);\n      this.setHighlight();\n    }\n  }\n\n  /**\n   * Removes underscores from id\n   * @param name Node name\n   * @returns node name without underscores\n   */\n  formatNodeName(name: string): string {\n    return name.replace(/_/g, ' ');\n  }\n\n  /**\n   * Attaches crosswalk hover\n   * @param el element\n   */\n  private attachCrosswalkHover(el: Element): void {\n    this.attachEvent(el, 'mouseover').subscribe((event) => this.onCrosswalkHover(event));\n    this.attachEvent(el, 'mouseout').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\n    this.attachEvent(el, 'click').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\n  }\n\n  /**\n   * Finds matching node in data from a hovered element\n   * @param event Mouse event\n   */\n  private onCrosswalkHover(event: MouseEvent): void {\n    if (event) {\n      const node = this.getNode(event);\n      if (node) {\n        this.nodeHoverData$.next({\n          node: node.label,\n          origin: {\n            x: event.clientX,\n            y: event.clientY,\n          },\n        });\n        this.nodeHover.emit(node); //emits node entry\n      }\n    } else {\n      this.nodeHoverData$.next(undefined);\n      this.nodeHover.emit();\n    }\n  }\n\n  /**\n   * Clears observables\n   */\n  private clear(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.destroy$ = new Subject();\n  }\n\n  /**\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\n   * @param event Event\n   * @returns Node entry that matches the target id\n   */\n  private getNode(event: Event): T | undefined {\n    const targetId = (event.target as Element).id;\n    const parentId = (event.target as Element).parentElement?.id ?? '';\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? '';\n    const idCollection = [targetId, parentId, grandparentId];\n    for (const id of idCollection) {\n      const decodedID = this.decodeId(id);\n      const cellMatch = this.mapping.find(\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\n      );\n      if (cellMatch) {\n        return cellMatch;\n      } else {\n        const groupMatch = this.mapping.find(\n          (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\n        );\n        if (groupMatch) {\n          return groupMatch;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Decodes id into a normal string\n   * @param id Undecoded ID\n   * @returns id\n   */\n  private decodeId(id: string): string {\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\n    return id.replace(/_x([\\da-f]+)_/gi, replacer);\n  }\n\n  /**\n   * Turns normal string into decoded SVG id\n   * @param id id\n   * @returns Encoded id\n   */\n  private encodeId(id: string): string {\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\n    return id.replace(/[^a-z0-9-]/gi, replacer);\n  }\n\n  /**\n   * Attaches an event listener\n   * @template K\n   * @param el Element\n   * @param event Event\n   * @returns Observable\n   */\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\n    const { renderer, destroy$ } = this;\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\n  }\n}\n",
            "properties": [
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Node name</p>\n",
                    "line": 59,
                    "rawdescription": "\nNode name"
                },
                {
                    "name": "origin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Center point of hovered node in screen coordinates</p>\n",
                    "line": 61,
                    "rawdescription": "\nCenter point of hovered node in screen coordinates"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Node tooltip data</p>\n",
            "rawdescription": "\nNode tooltip data",
            "methods": [],
            "extends": []
        },
        {
            "name": "SectionItem",
            "id": "interface-SectionItem-dba50a1e9cbac5f9733930bd6b04d1ac5fda31ee6342e13da75314f7b5dbbf46c436aab104bfc47abdc323e9ff42aeeb0047ee89577f639d3979c6964344bbd7",
            "file": "src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\n\n/** An item which defines a string label and a string value */\nexport interface DataItem {\n  /** A string property that represents the label */\n  label: string;\n  /** A string property that represents the value */\n  value: string;\n}\n\n/** An item which represents a section with a data item and an indicator for the last item in the section */\nexport interface SectionItem {\n  /** A number property that represents the section number */\n  section: number;\n  /** A DateItem property that represents a section and its data */\n  data: DataItem;\n  /** A boolean property that represents the last item of a section */\n  isLastItem: boolean;\n}\n\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\n@Component({\n  selector: 'hra-biomarker-table-data-card',\n  standalone: true,\n  imports: [CommonModule, MatTableModule],\n  templateUrl: './biomarker-table-data-card.component.html',\n  styleUrls: ['./biomarker-table-data-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerTableDataCardComponent implements OnChanges {\n  /** Nested list of DataItems for each section which is displayed to the user */\n  @Input() data: DataItem[][] = [];\n\n  /** Converted nested array of DataItem into Flat array of SectionItem */\n  sectionItems: SectionItem[] = [];\n\n  /** Triggers an update on sectionItems array when data is changed */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('data' in changes) {\n      this.updateSectionItems();\n    }\n  }\n\n  /** Updates sectionItems array when data is changed */\n  private updateSectionItems(): void {\n    const newSectionItems: SectionItem[] = [];\n\n    this.data.forEach((section, sectionIndex) => {\n      section.forEach((item, itemIndex) => {\n        newSectionItems.push({\n          data: item,\n          section: sectionIndex,\n          isLastItem: itemIndex === section.length - 1,\n        });\n      });\n    });\n\n    this.sectionItems = newSectionItems;\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataItem",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A DateItem property that represents a section and its data</p>\n",
                    "line": 18,
                    "rawdescription": "\nA DateItem property that represents a section and its data"
                },
                {
                    "name": "isLastItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A boolean property that represents the last item of a section</p>\n",
                    "line": 20,
                    "rawdescription": "\nA boolean property that represents the last item of a section"
                },
                {
                    "name": "section",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A number property that represents the section number</p>\n",
                    "line": 16,
                    "rawdescription": "\nA number property that represents the section number"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>An item which represents a section with a data item and an indicator for the last item in the section</p>\n",
            "rawdescription": "\nAn item which represents a section with a data item and an indicator for the last item in the section",
            "methods": [],
            "extends": []
        },
        {
            "name": "SourceListItem",
            "id": "interface-SourceListItem-28f8adc647b19ac928622b4681cc5368b8a2980d1749200cd1d8681217c007c179c40cd49b2ab473c4e2467738a8935fa56e2a2a1287587911607a8b40626909",
            "file": "src/lib/source-list/source-list.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { HoverDirective } from '@hra-ui/cdk';\nimport { EmptyBiomarkerComponent, LabelBoxComponent } from '@hra-ui/components/atoms';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\n\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\nexport interface SourceListItem {\n  /** List of authors for the source */\n  authors: string[];\n  /** Year dataset was released */\n  year: number;\n  /** Title of the dataset in the SourceList */\n  title: string;\n  /** DOI of dataset */\n  doi: string;\n  /** Label of the dataset in the SourceList */\n  label: string;\n  /** Link to the dataset in the SourceList */\n  link: string;\n}\n\n/** This component shows list of sources with title and links to the datasets */\n@Component({\n  selector: 'hra-source-list',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatTableModule,\n    MatIconModule,\n    MatSortModule,\n    LabelBoxComponent,\n    EmptyBiomarkerComponent,\n    MatCheckboxModule,\n    HoverDirective,\n  ],\n  templateUrl: './source-list.component.html',\n  styleUrls: ['./source-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SourceListComponent<T extends SourceListItem> implements OnChanges {\n  /** List of sources with titles and links displayed to the user */\n  @Input() sources: T[] = [];\n\n  /** Text that appears in the empty biomarker collaborate button */\n  @Input() collaborateText = '';\n\n  /** Text that appears in the empty biomarker message */\n  @Input() message = '';\n\n  /** Whether to show the biomarker table */\n  showTable = true;\n\n  /** Current source selection */\n  selection = new SelectionModel<T>(true, []);\n\n  /** Data source for table */\n  dataSource = new MatTableDataSource<T>();\n\n  /** Columns to display in the sources list */\n  displayedColumns: string[] = ['select', 'authors', 'year', 'title', 'link'];\n\n  /** Emits when the contact button is clicked */\n  @Output() readonly collaborateClick = new EventEmitter<void>();\n\n  /** Emits when source selection changed */\n  @Output() readonly selectionChanged = new EventEmitter<T[]>();\n\n  /** Sorter for sources list */\n  @ViewChild(MatSort) set sort(sorter: MatSort) {\n    this.dataSource.sort = sorter || null;\n  }\n\n  /** Google analytics tracking service */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /** On sources change, resets selection and selects all sources */\n  ngOnChanges(changes: SimpleChanges) {\n    if ('sources' in changes) {\n      this.selection.clear();\n      this.dataSource.data = this.sources;\n      this.toggleAllRows();\n    }\n  }\n\n  /**\n   * It changes the value of showTable to false if value it true\n   * and vice versa\n   */\n  toggleTable(): void {\n    this.showTable = !this.showTable;\n    this.ga.event('source_table_toggle', this.showTable.toString());\n  }\n\n  /**\n   * Logs source link click\n   * @param item Source list item\n   */\n  sourceLinkClicked(item: SourceListItem): void {\n    this.ga.event('source_link_clicked', 'link_click', item.link);\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  toggleAllRows() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      this.selectionChanged.emit(this.selection.selected);\n      return;\n    }\n\n    this.dataSource.data.forEach((row) => this.selection.select(row));\n    this.selectionChanged.emit(this.selection.selected);\n  }\n\n  /** Toggles selection status of a row */\n  toggleRow(row: T) {\n    this.selection.toggle(row);\n    this.selectionChanged.emit(this.selection.selected);\n  }\n}\n",
            "properties": [
                {
                    "name": "authors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>List of authors for the source</p>\n",
                    "line": 26,
                    "rawdescription": "\nList of authors for the source"
                },
                {
                    "name": "doi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>DOI of dataset</p>\n",
                    "line": 32,
                    "rawdescription": "\nDOI of dataset"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Label of the dataset in the SourceList</p>\n",
                    "line": 34,
                    "rawdescription": "\nLabel of the dataset in the SourceList"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Link to the dataset in the SourceList</p>\n",
                    "line": 36,
                    "rawdescription": "\nLink to the dataset in the SourceList"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Title of the dataset in the SourceList</p>\n",
                    "line": 30,
                    "rawdescription": "\nTitle of the dataset in the SourceList"
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Year dataset was released</p>\n",
                    "line": 28,
                    "rawdescription": "\nYear dataset was released"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>SourceListItem interface contains title and link to the dataset for the SourceList</p>\n",
            "rawdescription": "\nSourceListItem interface contains title and link to the dataset for the SourceList",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "BiomarkerTableDataCardComponent",
            "id": "component-BiomarkerTableDataCardComponent-dba50a1e9cbac5f9733930bd6b04d1ac5fda31ee6342e13da75314f7b5dbbf46c436aab104bfc47abdc323e9ff42aeeb0047ee89577f639d3979c6964344bbd7",
            "file": "src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-biomarker-table-data-card",
            "styleUrls": [
                "./biomarker-table-data-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./biomarker-table-data-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nNested list of DataItems for each section which is displayed to the user",
                    "description": "<p>Nested list of DataItems for each section which is displayed to the user</p>\n",
                    "line": 34,
                    "type": "DataItem[][]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sectionItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SectionItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Converted nested array of DataItem into Flat array of SectionItem</p>\n",
                    "line": 37,
                    "rawdescription": "\nConverted nested array of DataItem into Flat array of SectionItem"
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                }
            ],
            "description": "<p>This component displays a table with sections, where each section contains a list of items with a label and a value.</p>\n",
            "rawdescription": "\nThis component displays a table with sections, where each section contains a list of items with a label and a value.",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\n\n/** An item which defines a string label and a string value */\nexport interface DataItem {\n  /** A string property that represents the label */\n  label: string;\n  /** A string property that represents the value */\n  value: string;\n}\n\n/** An item which represents a section with a data item and an indicator for the last item in the section */\nexport interface SectionItem {\n  /** A number property that represents the section number */\n  section: number;\n  /** A DateItem property that represents a section and its data */\n  data: DataItem;\n  /** A boolean property that represents the last item of a section */\n  isLastItem: boolean;\n}\n\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\n@Component({\n  selector: 'hra-biomarker-table-data-card',\n  standalone: true,\n  imports: [CommonModule, MatTableModule],\n  templateUrl: './biomarker-table-data-card.component.html',\n  styleUrls: ['./biomarker-table-data-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerTableDataCardComponent implements OnChanges {\n  /** Nested list of DataItems for each section which is displayed to the user */\n  @Input() data: DataItem[][] = [];\n\n  /** Converted nested array of DataItem into Flat array of SectionItem */\n  sectionItems: SectionItem[] = [];\n\n  /** Triggers an update on sectionItems array when data is changed */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('data' in changes) {\n      this.updateSectionItems();\n    }\n  }\n\n  /** Updates sectionItems array when data is changed */\n  private updateSectionItems(): void {\n    const newSectionItems: SectionItem[] = [];\n\n    this.data.forEach((section, sectionIndex) => {\n      section.forEach((item, itemIndex) => {\n        newSectionItems.push({\n          data: item,\n          section: sectionIndex,\n          isLastItem: itemIndex === section.length - 1,\n        });\n      });\n    });\n\n    this.sectionItems = newSectionItems;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'utils';\n@use 'variables' as vars;\n\n:host {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  background-color: vars.$primary-contrast-rgb;\n  font-family: Metropolis;\n\n  .mat-mdc-cell {\n    padding: 0.25rem 0rem;\n  }\n\n  .mat-mdc-row {\n    height: fit-content;\n  }\n\n  .no-border {\n    border: none;\n  }\n\n  .label {\n    color: rgba(vars.$primary);\n    padding-right: 3rem;\n    font-weight: 500;\n  }\n\n  .value {\n    color: rgba(vars.$primary-400);\n    font-weight: 400;\n  }\n\n  .sr-only {\n    @include utils.sr-only();\n  }\n}\n",
                    "styleUrl": "./biomarker-table-data-card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"no-data\" *ngIf=\"sectionItems.length === 0\">No data</div>\n<table mat-table *ngIf=\"sectionItems.length > 0\" [dataSource]=\"sectionItems\">\n  <caption class=\"sr-only\">\n    Biomarker Table Data Card\n  </caption>\n\n  <!-- Label Column -->\n  <ng-container matColumnDef=\"label\">\n    <th class=\"sr-only\" mat-header-cell *matHeaderCellDef>Item Label</th>\n    <td class=\"label\" mat-cell *matCellDef=\"let element\" [class.no-border]=\"!element.isLastItem\">\n      {{ element.data.label }}\n    </td>\n  </ng-container>\n\n  <!-- Value Column -->\n  <ng-container matColumnDef=\"value\">\n    <th class=\"sr-only\" mat-header-cell *matHeaderCellDef>Item Value</th>\n    <td class=\"value\" mat-cell *matCellDef=\"let element\" [class.no-border]=\"!element.isLastItem\">\n      {{ element.data.value }}\n    </td>\n  </ng-container>\n\n  <tr mat-row *matRowDef=\"let row; columns: ['label', 'value']\"></tr>\n</table>\n"
        },
        {
            "name": "BiomarkerTableDataIconComponent",
            "id": "component-BiomarkerTableDataIconComponent-0fab04062dee70e0c4d57bfdc6f056400c9b82591b050c6912b9e59a896e1a5535f884a104c1d3f95c19721a049ca51f5b2a953512dc1d6a501c29d5399a063c",
            "file": "src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-biomarker-table-data-icon",
            "styleUrls": [
                "./biomarker-table-data-icon.component.scss"
            ],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRepresents the color of the icon",
                    "description": "<p>Represents the color of the icon</p>\n",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRepresents the size of the icon",
                    "description": "<p>Represents the size of the icon</p>\n",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Describes the data icon for the table</p>\n",
            "rawdescription": "\n\nDescribes the data icon for the table\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Describes the data icon for the table\n */\n@Component({\n  selector: 'hra-biomarker-table-data-icon',\n  standalone: true,\n  imports: [CommonModule],\n  template: '',\n  styleUrls: ['./biomarker-table-data-icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerTableDataIconComponent {\n  /** Represents the color of the icon */\n  @HostBinding('style.background-color') @Input() color = '';\n\n  /** Represents the size of the icon  */\n  @HostBinding('style.--radius.rem') @Input() size = 0;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  border-radius: 50%;\n  --radius: 0.625rem;\n  width: var(--radius);\n  height: var(--radius);\n}\n",
                    "styleUrl": "./biomarker-table-data-icon.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ContactModalComponent",
            "id": "component-ContactModalComponent-83d2d192b4ddd887555a995392f1dea6f9172a23dbd6a6695625fd1cec26ac76b2299be06e5dbb9a2dfea7a1ec92ec025e4141fb6ae9ebd38e0f52fd6276ab24",
            "file": "src/lib/contact-modal/contact-modal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-contact-modal",
            "styleUrls": [
                "./contact-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "productLogoUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for product logo URL to displayed on the left side.",
                    "description": "<p>Input for product logo URL to displayed on the left side.</p>\n",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "productTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for product title to displayed on the left side.",
                    "description": "<p>Input for product title to displayed on the left side.</p>\n",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the cancel button or close icon is clicked",
                    "description": "<p>Emits when the cancel button or close icon is clicked</p>\n",
                    "line": 58,
                    "type": "EventEmitter"
                },
                {
                    "name": "submitClick",
                    "defaultValue": "new EventEmitter<ContactData>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the submit button is clicked and all the values are appropriate.",
                    "description": "<p>Emits when the submit button is clicked and all the values are appropriate.</p>\n",
                    "line": 55,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contactData",
                    "defaultValue": "EMPTY_CONTACT_DATA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Asigns the undefined initially to all the input fields.</p>\n",
                    "line": 66,
                    "rawdescription": "\nAsigns the undefined initially to all the input fields."
                },
                {
                    "name": "defaultMail",
                    "defaultValue": "'infoccf@iu.edu'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Default email address</p>\n",
                    "line": 69,
                    "rawdescription": "\nDefault email address",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIt emits the updated value of contact data",
                    "description": "<p>It emits the updated value of contact data</p>\n"
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "ContactData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUpdates the contact data object with a new value for a given key.",
                    "description": "<p>Updates the contact data object with a new value for a given key.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "ContactData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "EmailInputComponent",
                    "type": "component"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                },
                {
                    "name": "RequiredTextboxComponent",
                    "type": "component"
                },
                {
                    "name": "RequiredInputComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Contact modal component.</p>\n",
            "rawdescription": "\n\nContact modal component.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from '@hra-ui/components/atoms';\nimport { produce } from 'immer';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/**\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\n */\nexport interface ContactData {\n  /**  The email address of the person submitting the form. */\n  email: string;\n  /** The subject line of the message being sent. */\n  subject: string;\n  /** The body of the message being sent. */\n  message: string;\n}\n\n/** Initial empty contact data */\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\n  email: undefined,\n  subject: undefined,\n  message: undefined,\n};\n\n/**\n * Contact modal component.\n */\n@Component({\n  selector: 'hra-contact-modal',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    EmailInputComponent,\n    MarkdownModule,\n    RequiredTextboxComponent,\n    RequiredInputComponent,\n  ],\n  templateUrl: './contact-modal.component.html',\n  styleUrls: ['./contact-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactModalComponent {\n  /** Input for product logo URL to displayed on the left side. */\n  @Input() productLogoUrl = '';\n\n  /** Input for product title to displayed on the left side. */\n  @Input() productTitle = '';\n\n  /** Emits when the submit button is clicked and all the values are appropriate. */\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\n\n  /** Emits when the cancel button or close icon is clicked */\n  @Output() readonly closeClick = new EventEmitter<void>();\n\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\n  get disableSubmit(): boolean {\n    return Object.values(this.contactData).some((value) => value === undefined);\n  }\n\n  /** Asigns the undefined initially to all the input fields. */\n  contactData = EMPTY_CONTACT_DATA;\n\n  /** Default email address */\n  readonly defaultMail = 'infoccf@iu.edu';\n\n  /** Updates the contact data object with a new value for a given key. */\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\n    this.contactData = produce(this.contactData, (draft) => {\n      draft[key] = value;\n    });\n  }\n\n  /** It emits the updated value of contact data */\n  submit(): void {\n    this.submitClick.emit(this.contactData as ContactData);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  position: relative;\n  padding-top: 2rem;\n  margin-right: 1.5rem;\n  margin-left: 1.5rem;\n\n  .product-logo {\n    display: flex;\n    align-items: center;\n\n    .product-logo-image {\n      margin-right: 1rem;\n    }\n\n    .product-title {\n      color: #990000;\n      margin: 0;\n      font-weight: 600;\n    }\n  }\n\n  .close {\n    position: absolute;\n    top: 1.5rem;\n    right: 0rem;\n  }\n\n  .submit {\n    margin-right: 1.5rem;\n  }\n\n  .submit,\n  .cancel {\n    width: 7.5rem;\n  }\n\n  .email {\n    margin-top: 1.25rem;\n  }\n\n  .message-field {\n    margin-top: 1rem;\n  }\n\n  .subject-field {\n    margin-top: 1rem;\n  }\n\n  .desc {\n    margin-top: 1.5rem;\n  }\n}\n",
                    "styleUrl": "./contact-modal.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "disableSubmit": {
                    "name": "disableSubmit",
                    "getSignature": {
                        "name": "disableSubmit",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 61,
                        "rawdescription": "\nA function to disable the submit button. If all the values are in approproiate format, then it will be enabled.",
                        "description": "<p>A function to disable the submit button. If all the values are in approproiate format, then it will be enabled.</p>\n"
                    }
                }
            },
            "templateData": "<a class=\"product-logo\">\n  <img class=\"product-logo-image\" [src]=\"productLogoUrl\" alt=\"Prodoct Logo\" />\n  <h2 class=\"product-title\">{{ productTitle }}</h2>\n</a>\n\n<button class=\"close\" mat-icon-button (click)=\"closeClick.emit()\">\n  <mat-icon>close</mat-icon>\n</button>\n\n<hra-email-input\n  class=\"email\"\n  placeholder=\"Example@domain.com\"\n  (emailChange)=\"updateData('email', $event)\"\n  [defaultMail]=\"defaultMail\"\n>\n</hra-email-input>\n\n<hra-required-input label=\"Subject\" (inputChange)=\"updateData('subject', $event)\" class=\"subject-field\">\n</hra-required-input>\n\n<hra-required-textbox\n  class=\"message-field\"\n  label=\"Message\"\n  placeholder=\"Enter your message here\"\n  (messageChange)=\"updateData('message', $event)\"\n>\n</hra-required-textbox>\n\n<markdown class=\"desc\" data=\"Please allow two business days for a response to each inquiry.\"></markdown>\n\n<button mat-flat-button class=\"submit\" color=\"primary\" [disabled]=\"disableSubmit\" (click)=\"submit()\">Submit</button>\n<button mat-stroked-button class=\"cancel\" color=\"accent\" (click)=\"closeClick.emit()\">Cancel</button>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-e51939d18d7ad9957936ab8a6d7e2d46a69d4ab3b4d6dc01ebe300c1f6f74a51217fa903cc64a3c7e02669e5c29afb929acea3e01f475c42012d25f8cde46b26",
            "file": "src/lib/footer/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "aboutLink",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for about link",
                    "description": "<p>Input for about link</p>\n",
                    "line": 75,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "downloadFormats",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDifferent download formats options displayed to the user",
                    "description": "<p>Different download formats options displayed to the user</p>\n",
                    "line": 72,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "embed",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for embed link in HRA Portal",
                    "description": "<p>Input for embed link in HRA Portal</p>\n",
                    "line": 69,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "illustrationMetadata",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for Illustration metadata page link in HRA Portal",
                    "description": "<p>Input for Illustration metadata page link in HRA Portal</p>\n",
                    "line": 66,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "productLogoUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for product logo URL to displayed on the left side.",
                    "description": "<p>Input for product logo URL to displayed on the left side.</p>\n",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "productTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for product title to displayed on the left side.",
                    "description": "<p>Input for product title to displayed on the left side.</p>\n",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'large'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHost binding of footer component",
                    "description": "<p>Host binding of footer component</p>\n",
                    "line": 57,
                    "type": "\"small\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "contactClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the contact button is clicked",
                    "description": "<p>Emits when the contact button is clicked</p>\n",
                    "line": 92,
                    "type": "EventEmitter"
                },
                {
                    "name": "download",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits the selected download format",
                    "description": "<p>Emits the selected download format</p>\n",
                    "line": 78,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "downloadListOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether the download list panel is open</p>\n",
                    "line": 89,
                    "rawdescription": "\nWhether the download list panel is open"
                },
                {
                    "name": "DOWNLOADS_LIST_POSITION",
                    "defaultValue": "DOWNLOADS_LIST_POSITION",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Download list popup overlay positioning</p>\n",
                    "line": 81,
                    "rawdescription": "\nDownload list popup overlay positioning",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "aboutClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogs event when about button clicked\n",
                    "description": "<p>Logs event when about button clicked</p>\n"
                },
                {
                    "name": "handleOutsideClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIgnore if button is clicked, otherwise close the download list panel\n",
                    "description": "<p>Ignore if button is clicked, otherwise close the download list panel</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3112,
                                "end": 3117,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3106,
                                "end": 3111,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Mouse event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "OverlayModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "LinkDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Component for footer that displays its content at the bottom of the page with different action buttons.</p>\n",
            "rawdescription": "\n\nComponent for footer that displays its content at the bottom of the page with different action buttons.\n",
            "type": "component",
            "sourceCode": "import { ConnectedPosition, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { LinkDirective } from '@hra-ui/cdk';\nimport { EMPTY_LINK } from '@hra-ui/cdk/state';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\n\n/**\n * Base type for different download format options.\n */\nexport interface DownloadFormat {\n  /**\n   * User readable format label\n   */\n  label: string;\n}\n\n/**\n * Positioning value for the download list popup\n */\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\n  {\n    panelClass: 'above',\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n    offsetY: 0,\n  },\n  {\n    panelClass: 'below',\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n];\n\n/**\n * Component for footer that displays its content at the bottom of the page with different action buttons.\n */\n@Component({\n  selector: 'hra-footer',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\n  /** Host binding of footer component */\n  @HostBinding('class')\n  @Input()\n  size: 'small' | 'large' = 'large';\n\n  /** Input for product logo URL to displayed on the left side. */\n  @Input() productLogoUrl = '';\n\n  /** Input for product title to displayed on the left side. */\n  @Input() productTitle = '';\n\n  /** Input for Illustration metadata page link in HRA Portal */\n  @Input() illustrationMetadata = EMPTY_LINK;\n\n  /** Input for embed link in HRA Portal */\n  @Input() embed = EMPTY_LINK;\n\n  /** Different download formats options displayed to the user */\n  @Input() downloadFormats: T[] = [];\n\n  /** Input for about link */\n  @Input() aboutLink = EMPTY_LINK;\n\n  /** Emits the selected download format */\n  @Output() readonly download = new EventEmitter<T>();\n\n  /** Download list popup overlay positioning */\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\n\n  /** Gets whether the footer required is small */\n  get isSmall(): boolean {\n    return this.size === 'small';\n  }\n\n  /** Whether the download list panel is open */\n  downloadListOpen = false;\n\n  /** Emits when the contact button is clicked */\n  @Output() readonly contactClick = new EventEmitter<void>();\n\n  /** Google analytics tracking service */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /**\n   * Logs event when about button clicked\n   */\n  aboutClicked(): void {\n    this.ga.event('about_icon_click', 'link_click');\n  }\n\n  /**\n   * Ignore if button is clicked, otherwise close the download list panel\n   * @param event Mouse event\n   */\n  handleOutsideClick(event: MouseEvent): void {\n    const target = event.target as HTMLElement;\n    if (['download', 'download\\nDownload'].includes(target.innerText)) {\n      return;\n    } else {\n      this.downloadListOpen = false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  display: flex;\n  padding: 2rem;\n  border-top: 1px solid rgba(vars.$light-dividers);\n  align-items: center;\n  background: rgba(vars.$primary-lighter);\n  gap: 2rem;\n  height: 100%;\n  width: 100%;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  .controls {\n    display: flex;\n    justify-content: flex-end;\n  }\n  .filler {\n    display: none;\n  }\n\n  .product-title {\n    color: #990000;\n    margin-right: 0rem;\n  }\n\n  a {\n    cursor: pointer;\n    display: flex;\n  }\n\n  .product-logo-image {\n    height: 1.2rem;\n    margin-right: 1rem;\n  }\n\n  button {\n    background: rgba(vars.$light-dividers);\n    height: 1.75rem;\n    font-size: 0.75rem;\n    font-weight: 500;\n    padding: 0;\n    min-width: 10rem;\n    color: rgba(vars.$primary);\n\n    mat-icon,\n    span {\n      height: 1rem;\n      width: 1rem;\n      font-size: 1rem;\n      margin-right: 0.25rem;\n    }\n  }\n}\n\n::ng-deep {\n  .download-options-panel {\n    box-shadow: 0.1rem 0.1rem 0.4rem 0.2rem #dad7d7;\n    background-color: #ffffff;\n  }\n}\n::ng-deep .download,\n::ng-deep .data-download {\n  .mdc-button__label {\n    display: flex;\n    align-items: center;\n  }\n}\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isSmall": {
                    "name": "isSmall",
                    "getSignature": {
                        "name": "isSmall",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 84,
                        "rawdescription": "\nGets whether the footer required is small",
                        "description": "<p>Gets whether the footer required is small</p>\n"
                    }
                }
            },
            "templateData": "<div *ngIf=\"isSmall\">\n  <a class=\"product-logo-link\">\n    <img class=\"product-logo-image\" [src]=\"productLogoUrl\" alt=\"Prodoct Logo\" />\n    <div class=\"product-title\">{{ productTitle }}</div>\n  </a>\n</div>\n<div class=\"filler\" *ngIf=\"isSmall\"></div>\n\n<button class=\"button\" mat-button [hraLink]=\"embed\" disableRipple>\n  <mat-icon>code</mat-icon>\n  Embed Illustration\n</button>\n\n<button\n  class=\"button download\"\n  mat-button\n  (click)=\"downloadListOpen = !downloadListOpen\"\n  type=\"button\"\n  cdkOverlayOrigin\n  #anchor=\"cdkOverlayOrigin\"\n  disableRipple\n>\n  <span class=\"material-symbols-outlined\"> download </span>\n  Download Illustration\n</button>\n\n<button class=\"button illustration-metadata\" mat-button [hraLink]=\"illustrationMetadata\" disableRipple>\n  <mat-icon>info_outlined</mat-icon>\n  Illustration Metadata\n</button>\n\n<!-- <button class=\"button data-download\" *ngIf=\"!isSmall\" mat-button disableRipple>\n  <span class=\"material-symbols-outlined\"> download </span>\n  Download Data\n</button> -->\n\n<button class=\"button contact\" *ngIf=\"isSmall\" mat-button (mouseup)=\"contactClick.emit()\" disableRipple>\n  <mat-icon>mail_outlined</mat-icon>\n  Contact\n</button>\n\n<button class=\"button ftu-explorer\" *ngIf=\"isSmall\" mat-button [hraLink]=\"aboutLink\" disableRipple>\n  <mat-icon>open_in_new</mat-icon>\n  HRA Portal\n</button>\n\n<div class=\"filler\" *ngIf=\"!isSmall\"></div>\n\n<ng-template\n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"anchor\"\n  [cdkConnectedOverlayOpen]=\"downloadListOpen\"\n  [cdkConnectedOverlayPositions]=\"DOWNLOADS_LIST_POSITION\"\n  [cdkConnectedOverlayOffsetX]=\"0\"\n  cdkConnectedOverlayHasBackdrop=\"false\"\n  cdkConnectedOverlayPush=\"false\"\n  cdkConnectedOverlayPanelClass=\"download-options-panel\"\n  (overlayOutsideClick)=\"handleOutsideClick($event)\"\n>\n  <mat-action-list>\n    <button\n      mat-list-item\n      *ngFor=\"let format of downloadFormats\"\n      (click)=\"downloadListOpen = false; download.emit(format)\"\n    >\n      {{ format.label }}\n    </button>\n  </mat-action-list>\n</ng-template>\n"
        },
        {
            "name": "FullscreenContainerComponent",
            "id": "component-FullscreenContainerComponent-78edc2b37cbc90a17be0fcca4ed7291593d5f3d12c4ea823de3f9510c13bad4492bc5cd65823726fc7e333c874880c17093ff9d20096fd92e20137c8cc4f75af",
            "file": "src/lib/fullscreen/fullscreen-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-fullscreen-container",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n        position: relative;\n      }\n    "
            ],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fullscreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA boolean input property that controls the fullscreen mode",
                    "description": "<p>A boolean input property that controls the fullscreen mode</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FullscreenContentComponent>",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component&#39;s content area</p>\n",
                    "line": 35,
                    "rawdescription": "\nA property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component's content area",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FullscreenContentComponent"
                        }
                    ],
                    "modifierKind": [
                        170,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FullscreenContentComponent",
                    "type": "component"
                }
            ],
            "description": "<p>A component that wraps any child components of type FullscreenContentComponent and\nsets their isFullScreen property to true or false based on its own fullscreen input property</p>\n",
            "rawdescription": "\nA component that wraps any child components of type FullscreenContentComponent and\nsets their isFullScreen property to true or false based on its own fullscreen input property\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  OnChanges,\n  QueryList,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FullscreenContentComponent } from './fullscreen-content.component';\n\n/** A component that wraps any child components of type FullscreenContentComponent and\n * sets their isFullScreen property to true or false based on its own fullscreen input property\n */\n@Component({\n  selector: 'hra-fullscreen-container',\n  standalone: true,\n  imports: [CommonModule, FullscreenContentComponent],\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n      :host {\n        display: block;\n        position: relative;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenContainerComponent implements AfterContentInit, OnChanges {\n  /** A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component's content area */\n  @ContentChildren(FullscreenContentComponent)\n  readonly content?: QueryList<FullscreenContentComponent>;\n\n  /** A boolean input property that controls the fullscreen mode */\n  @Input() fullscreen = false;\n\n  /** It calls the updateFullscreenMode method to set the isFullScreen property of the child\n   * FullscreenContentComponent instances based on the value of the fullscreen input property\n   */\n  ngAfterContentInit(): void {\n    this.updateFullscreenMode();\n  }\n\n  /** It checks if the fullscreen input property has changed, and calls the updateFullscreenMode method if it has */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('fullscreen' in changes) {\n      this.updateFullscreenMode();\n    }\n  }\n\n  /** A private method that sets the isFullScreen property of each child FullscreenContentComponent based on the value of the fullscreen  */\n  private updateFullscreenMode(): void {\n    this.content?.forEach((content) => {\n      content.isFullScreen = this.fullscreen;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n        position: relative;\n      }\n    \n",
            "extends": [],
            "implements": [
                "AfterContentInit",
                "OnChanges"
            ]
        },
        {
            "name": "FullscreenContentComponent",
            "id": "component-FullscreenContentComponent-4eb26a9dce14bf30d2f4dd0ac220364e9296a3fa1587e700834c8f736cdf3e842fbd955d948a5c2af980d96fe85ccd77bd71f8780dcb5a170f0311000157c6c4",
            "file": "src/lib/fullscreen/fullscreen-content.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-fullscreen-content",
            "styleUrls": [
                "./fullscreen-content.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFullScreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\n",
                    "line": 40,
                    "rawdescription": "\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.fullscreen-on'"
                        },
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'@animateResize'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "@animateResize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true",
                    "description": "<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.fullscreen-on",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true",
                    "description": "<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>A component that displays its content in fullscreen mode when its isFullScreen property is set to true</p>\n",
            "rawdescription": "\nA component that displays its content in fullscreen mode when its isFullScreen property is set to true",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n/** A component that displays its content in fullscreen mode when its isFullScreen property is set to true */\n@Component({\n  selector: 'hra-fullscreen-content',\n  standalone: true,\n  imports: [CommonModule],\n  animations: [\n    trigger('animateResize', [\n      state(\n        'true',\n        style({\n          width: '100%',\n          position: 'absolute',\n          right: '0',\n        }),\n      ),\n      state(\n        'false',\n        style({\n          width: '46.3125rem',\n          position: 'absolute',\n          right: '0',\n        }),\n      ),\n      transition('true <=> false', [animate('0.5s ease')]),\n    ]),\n  ],\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./fullscreen-content.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullscreenContentComponent {\n  /** This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true */\n  @HostBinding('class.fullscreen-on')\n  /** This binds the isFullScreen property to the @animateResize when isFullScreen is true */\n  @HostBinding('@animateResize')\n  isFullScreen = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  overflow-y: hidden;\n  background: white;\n}\n",
                    "styleUrl": "./fullscreen-content.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b9dcd072dc66489ef5864825b233de168e789e0b4355cb48f5d6e3683145b51749657697cda01b3befe21a06741002e199ac1c53bf2b89738a20145881954f6d",
            "file": "src/lib/header/header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "aboutLink",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for about link",
                    "description": "<p>Input for about link</p>\n",
                    "line": 41,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "appTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput for app title to show on the left side.\n",
                    "description": "<p>Input for app title to show on the left side.</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hraPortal",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for HRA Portal link",
                    "description": "<p>Input for HRA Portal link</p>\n",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "productLogoUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput for product logo URL to displayed on the left side.\n",
                    "description": "<p>Input for product logo URL to displayed on the left side.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "productTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput for product title to displayed on the left side.\n",
                    "description": "<p>Input for product title to displayed on the left side.</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "productTitleLink",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput for Product Title link",
                    "description": "<p>Input for Product Title link</p>\n",
                    "line": 38,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "contactClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the contact button is clicked",
                    "description": "<p>Emits when the contact button is clicked</p>\n",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "aboutClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogs event when about button clicked\n",
                    "description": "<p>Logs event when about button clicked</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatRippleModule",
                    "type": "module"
                },
                {
                    "name": "LinkDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Header component, displays on top of every page.</p>\n",
            "rawdescription": "\n\nHeader component, displays on top of every page.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { LinkDirective } from '@hra-ui/cdk';\nimport { EMPTY_LINK } from '@hra-ui/cdk';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\n\n/**\n * Header component, displays on top of every page.\n */\n@Component({\n  selector: 'hra-header',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatRippleModule, LinkDirective],\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderComponent {\n  /**\n   * Input for product logo URL to displayed on the left side.\n   */\n  @Input() productLogoUrl = '';\n\n  /**\n   * Input for product title to displayed on the left side.\n   */\n  @Input() productTitle = '';\n\n  /**\n   * Input for app title to show on the left side.\n   */\n  @Input() appTitle = '';\n\n  /** Input for Product Title link */\n  @Input() productTitleLink = EMPTY_LINK;\n\n  /** Input for about link */\n  @Input() aboutLink = EMPTY_LINK;\n\n  /** Input for HRA Portal link */\n  @Input() hraPortal = EMPTY_LINK;\n\n  /** Emits when the contact button is clicked */\n  @Output() readonly contactClick = new EventEmitter<void>();\n\n  /** Google analytics tracking service */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /**\n   * Logs event when about button clicked\n   */\n  aboutClicked(): void {\n    this.ga.event('about_icon_click', 'link_click');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'utils';\n@use 'variables' as vars;\n\n:host {\n  display: flex;\n  align-items: center;\n  height: 4rem;\n  padding: 0 2rem;\n\n  @include utils.define-flex-filler();\n\n  h1 {\n    // Reset margins for h1 elements\n    margin: 0;\n  }\n\n  .product {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    // Style the ripple animation\n    padding: 0 1rem;\n    border-radius: 0.25rem;\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    .text {\n      margin-left: 1rem;\n      font-weight: 600;\n      color: vars.$accent-rgb;\n    }\n  }\n\n  .app {\n    margin-left: 0.5rem;\n  }\n\n  .button {\n    background: rgba(vars.$light-dividers);\n    height: 1.75rem;\n    font-size: 0.75rem;\n    font-weight: 500;\n    padding: 0;\n    width: 7.5rem;\n    color: rgba(vars.$primary);\n\n    mat-icon {\n      height: 1rem;\n      width: 1rem;\n      font-size: 1rem;\n    }\n  }\n\n  .explorer {\n    .about {\n      display: flex;\n      height: 100%;\n      text-decoration: none;\n      align-items: center;\n      color: rgba(vars.$primary);\n      gap: 0.25rem;\n    }\n  }\n\n  .contact {\n    margin-left: 1rem;\n  }\n\n  @media (max-width: 30rem) {\n    height: 4.5rem;\n\n    .product .text,\n    .about .text {\n      @include utils.sr-only();\n    }\n\n    .product {\n      height: 2.5rem;\n      padding: 0 0.25rem;\n\n      .logo {\n        width: 1.5rem;\n        height: 1.5rem;\n      }\n    }\n\n    .app {\n      font-size: 1rem;\n      line-height: 1.5rem;\n    }\n\n    .about {\n      min-width: 2.5rem;\n      width: 2.5rem;\n      height: 2.5rem;\n      padding: 0;\n\n      .icon {\n        margin: 0;\n      }\n    }\n  }\n\n  @media (max-width: 20rem) {\n    padding: 0;\n  }\n\n  @media (max-width: 22.5rem) {\n    padding: 0 1rem;\n  }\n\n  @media (min-height: 49.5rem) {\n    height: 4.5rem;\n  }\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<a class=\"product\" matRipple [hraLink]=\"productTitleLink\">\n  <img class=\"logo image\" [src]=\"productLogoUrl\" alt=\"Product Logo\" aria-hidden=\"true\" />\n  <h1 class=\"text\">{{ productTitle }}</h1>\n</a>\n<h1 class=\"app text\">{{ appTitle }}</h1>\n\n<div class=\"filler\"></div>\n\n<button class=\"button explorer\" mat-button (click)=\"aboutClicked()\" disableRipple>\n  <a class=\"about\" [hraLink]=\"aboutLink\">\n    <mat-icon class=\"icon\">info_outlined</mat-icon>\n    <span class=\"text\">FTU Explorer</span>\n  </a>\n</button>\n\n<!-- <button class=\"button contact\" mat-button (mouseup)=\"contactClick.emit()\" disableRipple>\n  <mat-icon>mail_outlined</mat-icon>\n  Contact\n</button> -->\n"
        },
        {
            "name": "HraLandingPageIntroWcComponent",
            "id": "component-HraLandingPageIntroWcComponent-57ba89b5fa60bec2ad59de1cc52e4d3002935eab8da7f77895b1d7b507237df7df5d8fa2fec4dd3ba498b8d06fc5f70758beb2ba67ccbb24f2819798948e81d4",
            "file": "src/lib/hra-landing-page-intro-wc/hra-landing-page-intro-wc.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-ui-hra-landing-page-intro-wc",
            "styleUrls": [
                "./hra-landing-page-intro-wc.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hra-landing-page-intro-wc.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDescription for FTU Explorer",
                    "description": "<p>Description for FTU Explorer</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "partners",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThank you message to partners",
                    "description": "<p>Thank you message to partners</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readMore",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntro Image file url",
                    "description": "<p>Intro Image file url</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntro title for FTU Explorer",
                    "description": "<p>Intro title for FTU Explorer</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                }
            ],
            "description": "<p>Component for LandingPage Intro - Web coomponent</p>\n",
            "rawdescription": "\nComponent for LandingPage Intro - Web coomponent",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/** Component for LandingPage Intro - Web coomponent */\n@Component({\n  selector: 'hra-ui-hra-landing-page-intro-wc',\n  standalone: true,\n  imports: [CommonModule, MarkdownModule],\n  templateUrl: './hra-landing-page-intro-wc.component.html',\n  styleUrls: ['./hra-landing-page-intro-wc.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HraLandingPageIntroWcComponent {\n  /** Intro title for FTU Explorer */\n  @Input() title = '';\n\n  /** Description for FTU Explorer */\n  @Input() description = '';\n\n  /** Thank you message to partners */\n  @Input() partners = '';\n\n  /** Intro Image file url */\n  @Input() readMore = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  gap: 0.5rem;\n  padding: 1.5rem 2rem 1.5rem 2rem;\n  display: flex;\n  flex-wrap: wrap;\n\n  .title {\n    width: 100%;\n    font-size: 1.5rem;\n    font-weight: 400;\n    line-height: 1.5rem;\n    letter-spacing: 0em;\n    text-align: left;\n  }\n\n  .description .partners .readMore {\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5rem;\n    letter-spacing: 0em;\n    text-align: left;\n  }\n  ::ng-deep a {\n    color: vars.$primary-rgb;\n    font-weight: 700;\n  }\n  ::ng-deep p {\n    margin: 0;\n  }\n}\n",
                    "styleUrl": "./hra-landing-page-intro-wc.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h1 class=\"title\">{{ title }}</h1>\n\n<markdown class=\"description\" [data]=\"description\"></markdown>\n\n<markdown class=\"readMore\" [data]=\"readMore\"></markdown>\n\n<markdown class=\"partners\" [data]=\"partners\"></markdown>\n"
        },
        {
            "name": "InfoModalComponent",
            "id": "component-InfoModalComponent-56dc03e6960f4005149bab8dbf6a5b713061505964f6b3cc7d33868ed7f83aff7dbf222ccf66999864c6313f218c20f849715b3ebcc4d2ea44285c6e07811662",
            "file": "src/lib/info-modal/info-modal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-info-modal",
            "styleUrls": [
                "./info-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInformation modal message to the user",
                    "description": "<p>Information modal message to the user</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "productLogoUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nProduct logo shown to the user",
                    "description": "<p>Product logo shown to the user</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "productTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nProduct title shown to the user",
                    "description": "<p>Product title shown to the user</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the close icon is clicked",
                    "description": "<p>Emits when the close icon is clicked</p>\n",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                }
            ],
            "description": "<p>Displays an information modal to the user with the product title and logo and description</p>\n",
            "rawdescription": "\nDisplays an information modal to the user with the product title and logo and description",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/** Displays an information modal to the user with the product title and logo and description */\n@Component({\n  selector: 'hra-info-modal',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule],\n  templateUrl: './info-modal.component.html',\n  styleUrls: ['./info-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InfoModalComponent {\n  /** Product title shown to the user */\n  @Input() productTitle = '';\n\n  /** Product logo shown to the user */\n  @Input() productLogoUrl = '';\n\n  /** Information modal message to the user */\n  @Input() description = '';\n\n  /** Emits when the close icon is clicked */\n  @Output() readonly closeClick = new EventEmitter<void>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  position: relative;\n  padding: 2rem 2rem 1.25rem 2rem;\n\n  .close {\n    position: absolute;\n    top: 1.5rem;\n    right: 1.5rem;\n  }\n\n  .title {\n    display: flex;\n    align-items: center;\n\n    .product-logo-image {\n      height: 2.75rem;\n      margin-right: 1rem;\n    }\n\n    .product-title {\n      margin: 0;\n      color: #990000;\n    }\n  }\n\n  .description {\n    display: block;\n    margin-top: 1rem;\n  }\n}\n",
                    "styleUrl": "./info-modal.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<a class=\"title\">\n  <img class=\"product-logo-image\" [src]=\"productLogoUrl\" alt=\"Prodoct Logo\" />\n  <h2 class=\"product-title\">{{ productTitle }}</h2>\n</a>\n\n<button mat-icon-button class=\"close\" (click)=\"closeClick.emit()\">\n  <mat-icon>close</mat-icon>\n</button>\n\n<markdown class=\"description\" [data]=\"description\"></markdown>\n"
        },
        {
            "name": "InteractiveSvgComponent",
            "id": "component-InteractiveSvgComponent-0711015c1f391a7e92097035f32782c7f7c478300b1c248a0b77c6bbf4814b79173bb1a1276b156282c71fcf6711dffe41c7d57c0ec02a86a2d0fb393341fd2f",
            "file": "src/lib/interactive-svg/interactive-svg.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.ShadowDom"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-interactive-svg",
            "styleUrls": [
                "./interactive-svg.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./interactive-svg.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "highlightId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHighlighted ontology id",
                    "description": "<p>Highlighted ontology id</p>\n",
                    "line": 96,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mapping",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMapping info",
                    "description": "<p>Mapping info</p>\n",
                    "line": 93,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSVG url",
                    "description": "<p>SVG url</p>\n",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nodeClick",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits node id when clicked",
                    "description": "<p>Emits node id when clicked</p>\n",
                    "line": 102,
                    "type": "EventEmitter"
                },
                {
                    "name": "nodeHover",
                    "defaultValue": "new EventEmitter<T | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits node id when hovered",
                    "description": "<p>Emits node id when hovered</p>\n",
                    "line": 99,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "NEVER_EVAL_SCRIPTS",
                    "defaultValue": "SVGScriptEvalMode.NEVER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>SVG script eval mode</p>\n",
                    "line": 105,
                    "rawdescription": "\nSVG script eval mode",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "nodeHoverData$",
                    "defaultValue": "new BehaviorSubject<NodeTooltipData | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Observable of node hover data or undefined when there is no active hover</p>\n",
                    "line": 111,
                    "rawdescription": "\nObservable of node hover data or undefined when there is no active hover",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "nodeHoverDelayedData$",
                    "defaultValue": "this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Observable of node hover with a timer</p>\n",
                    "line": 114,
                    "rawdescription": "\nObservable of node hover with a timer",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "TOOLTIP_POSITIONS",
                    "defaultValue": "TOOLTIP_POSITIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Tooltip position settings</p>\n",
                    "line": 108,
                    "rawdescription": "\nTooltip position settings",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "formatNodeName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves underscores from id\n",
                    "description": "<p>Removes underscores from id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5139,
                                "end": 5143,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5133,
                                "end": 5138,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Node name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5160,
                                "end": 5167,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>node name without underscores</p>\n"
                        }
                    ]
                },
                {
                    "name": "setSvgElement",
                    "args": [
                        {
                            "name": "el",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets SVG element\n",
                    "description": "<p>Sets SVG element</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4714,
                                "end": 4716,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "el"
                            },
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4708,
                                "end": 4713,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>SVG element</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "InlineSVGModule",
                    "type": "module"
                },
                {
                    "name": "OverlayModule",
                    "type": "module"
                },
                {
                    "name": "TooltipComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Interactive SVG component</p>\n",
            "rawdescription": "\n\nInteractive SVG component\n",
            "type": "component",
            "sourceCode": "import { ConnectedPosition, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { TooltipComponent } from '@hra-ui/components/atoms';\nimport { InlineSVGModule, SVGScriptEvalMode } from 'ng-inline-svg-2';\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from 'rxjs';\nimport { NodeEventHandler } from 'rxjs/internal/observable/fromEvent';\n\n/** Delay before tooltip becomes visible */\nconst HOVER_DELAY = 200;\n\n/** Tooltip position settings */\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center',\n    offsetX: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'end',\n    overlayY: 'center',\n    offsetX: -8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'top',\n    offsetY: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'bottom',\n    offsetY: -8,\n  },\n];\n\n/** Node tooltip data */\nexport interface NodeTooltipData {\n  /** Node name */\n  node: string;\n  /** Center point of hovered node in screen coordinates */\n  origin: { x: number; y: number };\n}\n\n/** Interface for node entries */\nexport interface NodeMapEntry {\n  /** Node label */\n  label: string;\n  /** Node id in svg */\n  id: string;\n  /** Node group id */\n  groupId: string;\n  /** Ontology id of cell type */\n  ontologyId: string;\n}\n\n/**\n * Interactive SVG component\n */\n@Component({\n  selector: 'hra-interactive-svg',\n  standalone: true,\n  imports: [CommonModule, InlineSVGModule, OverlayModule, TooltipComponent],\n  templateUrl: './interactive-svg.component.html',\n  styleUrls: ['./interactive-svg.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnChanges, OnDestroy {\n  /** SVG url */\n  @Input() url?: string;\n\n  /** Mapping info */\n  @Input() mapping: T[] = [];\n\n  /** Highlighted ontology id */\n  @Input() highlightId?: string;\n\n  /** Emits node id when hovered */\n  @Output() readonly nodeHover = new EventEmitter<T | undefined>();\n\n  /** Emits node id when clicked */\n  @Output() readonly nodeClick = new EventEmitter<T>();\n\n  /** SVG script eval mode */\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\n\n  /** Tooltip position settings */\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\n\n  /** Observable of node hover data or undefined when there is no active hover */\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\n\n  /** Observable of node hover with a timer */\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\n\n  /** Custom renderer */\n  private readonly renderer = inject(Renderer2);\n\n  /** Destroys */\n  private destroy$ = new Subject<void>();\n\n  /** Crosswalk element of svg */\n  private crosswalkEl?: Element;\n\n  /** List of highlighted svg elements */\n  private highlightedElements: Element[] = [];\n\n  /**\n   * Updates the highlighting based on current highlight id\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('highlightId' in changes) {\n      this.resetHighlight();\n      this.setHighlight();\n    }\n  }\n\n  /**\n   * Highlights cells that match highlightId\n   */\n  private setHighlight() {\n    const { mapping, highlightId, crosswalkEl } = this;\n    const entry = mapping.find(({ ontologyId }) => ontologyId === highlightId);\n    if (!entry || !crosswalkEl) {\n      return;\n    }\n\n    const encodedId = this.encodeId(entry.id);\n    const element = crosswalkEl.querySelector(`#${entry.id}, #${encodedId}`);\n    if (!element) {\n      return;\n    }\n\n    const gElement = element.nodeName === 'g' ? element : (element.parentElement as Element);\n    const id = gElement.id;\n    const elements = crosswalkEl.querySelectorAll(`#${id} :is(path, polygon, polyline)`);\n    this.highlightedElements = Array.from(elements);\n    elements.forEach((el) => el.classList.add('click-active'));\n  }\n\n  /**\n   * Resets all highlighted elements in the svg\n   */\n  private resetHighlight(): void {\n    for (const el of this.highlightedElements) {\n      el.classList.remove('click-active');\n    }\n    this.highlightedElements = [];\n  }\n\n  /**\n   * Clears observables on destroy\n   */\n  ngOnDestroy(): void {\n    this.clear();\n  }\n\n  /**\n   * Sets SVG element\n   * @param el SVG element\n   */\n  setSvgElement(el: SVGElement): void {\n    this.clear();\n    this.crosswalkEl = el.querySelector('[id^=\"Crosswalk\"]') ?? undefined;\n    if (this.crosswalkEl) {\n      // Move to front (i.e. last child in svg)\n      this.renderer.appendChild(el, this.crosswalkEl);\n      this.attachCrosswalkHover(this.crosswalkEl);\n      this.setHighlight();\n    }\n  }\n\n  /**\n   * Removes underscores from id\n   * @param name Node name\n   * @returns node name without underscores\n   */\n  formatNodeName(name: string): string {\n    return name.replace(/_/g, ' ');\n  }\n\n  /**\n   * Attaches crosswalk hover\n   * @param el element\n   */\n  private attachCrosswalkHover(el: Element): void {\n    this.attachEvent(el, 'mouseover').subscribe((event) => this.onCrosswalkHover(event));\n    this.attachEvent(el, 'mouseout').subscribe(() => this.onCrosswalkHover(undefined as never as MouseEvent));\n    this.attachEvent(el, 'click').subscribe((event) => this.nodeClick.emit(this.getNode(event)));\n  }\n\n  /**\n   * Finds matching node in data from a hovered element\n   * @param event Mouse event\n   */\n  private onCrosswalkHover(event: MouseEvent): void {\n    if (event) {\n      const node = this.getNode(event);\n      if (node) {\n        this.nodeHoverData$.next({\n          node: node.label,\n          origin: {\n            x: event.clientX,\n            y: event.clientY,\n          },\n        });\n        this.nodeHover.emit(node); //emits node entry\n      }\n    } else {\n      this.nodeHoverData$.next(undefined);\n      this.nodeHover.emit();\n    }\n  }\n\n  /**\n   * Clears observables\n   */\n  private clear(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.destroy$ = new Subject();\n  }\n\n  /**\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\n   * @param event Event\n   * @returns Node entry that matches the target id\n   */\n  private getNode(event: Event): T | undefined {\n    const targetId = (event.target as Element).id;\n    const parentId = (event.target as Element).parentElement?.id ?? '';\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? '';\n    const idCollection = [targetId, parentId, grandparentId];\n    for (const id of idCollection) {\n      const decodedID = this.decodeId(id);\n      const cellMatch = this.mapping.find(\n        (item) => item.id?.toLowerCase() === decodedID.toLowerCase(), //search mapping by cell name for matching node entry\n      );\n      if (cellMatch) {\n        return cellMatch;\n      } else {\n        const groupMatch = this.mapping.find(\n          (item) => item.groupId?.toLowerCase() === decodedID.toLowerCase(), //search mapping by group name for matching node entry\n        );\n        if (groupMatch) {\n          return groupMatch;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Decodes id into a normal string\n   * @param id Undecoded ID\n   * @returns id\n   */\n  private decodeId(id: string): string {\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\n    return id.replace(/_x([\\da-f]+)_/gi, replacer);\n  }\n\n  /**\n   * Turns normal string into decoded SVG id\n   * @param id id\n   * @returns Encoded id\n   */\n  private encodeId(id: string): string {\n    const replacer = (match: string) => `_x${match.charCodeAt(0).toString(16).toUpperCase()}_`;\n    return id.replace(/[^a-z0-9-]/gi, replacer);\n  }\n\n  /**\n   * Attaches an event listener\n   * @template K\n   * @param el Element\n   * @param event Event\n   * @returns Observable\n   */\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\n    const { renderer, destroy$ } = this;\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".svg {\n  height: 100%;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n}\n\nsvg {\n  width: 100%;\n  height: 100%;\n}\n\n#Crosswalk {\n  :is(path, polygon, polyline),\n  .hover-active & .inset-group:hover :is(path, polygon, polyline) {\n    fill: transparent;\n    stroke: transparent;\n  }\n\n  .hover-active & g:hover :is(path, polygon, polyline),\n  .hover-active & .inset-group > g:hover :is(path, polygon, polyline),\n  .click-active {\n    fill: hsl(0deg 100% 50%);\n    mix-blend-mode: saturation;\n  }\n}\n\n::-webkit-scrollbar {\n  width: 0.5rem;\n  height: 0.5rem;\n}\n\n::-webkit-scrollbar-track {\n  background: #f8f9fa;\n  border: 0.063rem solid #d3d3d3;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #a0abb4;\n  border-radius: 0.5rem;\n}\n",
                    "styleUrl": "./interactive-svg.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<div\n  *ngIf=\"url\"\n  class=\"svg\"\n  [class.hover-active]=\"nodeHoverData$ | async\"\n  [inlineSVG]=\"url\"\n  [evalScripts]=\"NEVER_EVAL_SCRIPTS\"\n  (onSVGInserted)=\"setSvgElement($event)\"\n></div>\n\n<ng-container *ngIf=\"nodeHoverDelayedData$ | async as hover\">\n  <ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayPanelClass=\"hra-interactive-svg-tooltip-panel\"\n    [cdkConnectedOverlayOrigin]=\"hover.origin\"\n    [cdkConnectedOverlayPositions]=\"TOOLTIP_POSITIONS\"\n    [cdkConnectedOverlayViewportMargin]=\"16\"\n    [cdkConnectedOverlayOpen]=\"true\"\n  >\n    <hra-ui-tooltip [text]=\"formatNodeName(hover.node)\"></hra-ui-tooltip>\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "LandingPageInDepthComponent",
            "id": "component-LandingPageInDepthComponent-266cc77d12f81268af62a259a42675f25c0be65e3cab6881ce7afcd3dbaa4ab87e767f669fc822ea592327de677787a00c9eb4a5b9b1171d78fe6aefc8cc439b",
            "file": "src/lib/landing-page-in-depth/landing-page-in-depth.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-landing-page-in-depth",
            "styleUrls": [
                "./landing-page-in-depth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page-in-depth.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImage description shown to the user",
                    "description": "<p>Image description shown to the user</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "img",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImage shown to the user",
                    "description": "<p>Image shown to the user</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "moreLink",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLink to navigate to on more button click",
                    "description": "<p>Link to navigate to on more button click</p>\n",
                    "line": 33,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "moreText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText for more button",
                    "description": "<p>Text for more button</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nImage title shown to the user",
                    "description": "<p>Image title shown to the user</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "LinkDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Displays the image and also corresponding title and text along with a button to read more</p>\n",
            "rawdescription": "\n\nDisplays the image and also corresponding title and text along with a button to read more\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { EMPTY_LINK, LinkDirective } from '@hra-ui/cdk';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/**\n * Displays the image and also corresponding title and text along with a button to read more\n */\n@Component({\n  selector: 'hra-landing-page-in-depth',\n  standalone: true,\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\n  templateUrl: './landing-page-in-depth.component.html',\n  styleUrls: ['./landing-page-in-depth.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LandingPageInDepthComponent {\n  /**  Image title shown to the user */\n  @Input() title = '';\n\n  /** Image description shown to the user */\n  @Input() description = '';\n\n  /** Image shown to the user */\n  @Input() img = '';\n\n  /** Text for more button */\n  @Input() moreText = '';\n\n  /** Link to navigate to on more button click */\n  @Input() moreLink = EMPTY_LINK;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  display: grid;\n  grid-template-columns: 2fr 3fr;\n  grid-template-rows: 0fr 0fr 1fr;\n  column-gap: 4rem;\n  row-gap: 2rem;\n  padding: 3.5rem 6rem;\n  max-height: 30rem;\n\n  .image {\n    grid-column: 1;\n    grid-row: 1 / span 3;\n    width: 100%;\n    height: 100%;\n    align-self: center;\n    border-radius: 1rem;\n    box-shadow: 0.06rem 0.13rem 1rem 0.13rem #00000029;\n  }\n\n  .title {\n    font-size: 2rem;\n    line-height: 2.5rem;\n    margin: 0;\n  }\n\n  .description {\n    font-size: 1rem;\n    line-height: 1.5rem;\n\n    ::ng-deep p {\n      margin: 0;\n    }\n\n    ::ng-deep a {\n      color: vars.$primary-rgb;\n      font-weight: 700;\n    }\n  }\n\n  .more-button {\n    width: fit-content;\n    height: 3rem;\n  }\n\n  @media (max-width: 1400px) {\n    grid-template-columns: 1.8fr 1fr;\n    grid-template-rows: auto auto 3rem;\n    column-gap: 2rem;\n    padding: 3.5rem 2rem;\n    max-height: unset;\n\n    .title {\n      font-size: 1.5rem;\n      line-height: normal;\n    }\n  }\n\n  @media (max-width: 1280px) {\n    grid-template-columns: unset;\n    text-align: center;\n\n    .image {\n      max-height: 22rem;\n      width: auto;\n    }\n\n    .image,\n    .more-button {\n      place-self: center;\n    }\n  }\n}\n",
                    "styleUrl": "./landing-page-in-depth.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<img class=\"image\" [src]=\"img\" alt=\"\" />\n<h1 class=\"title\">{{ title }}</h1>\n<markdown class=\"description\" [data]=\"description\"></markdown>\n<button mat-flat-button class=\"more-button\" color=\"primary\" [hraLink]=\"moreLink\">\n  {{ moreText }}\n</button>\n"
        },
        {
            "name": "LandingPageIntroComponent",
            "id": "component-LandingPageIntroComponent-8e48a2ad3d32eea60c9dee7976b3dbc195b3a8107a3c174ac68b4696362903f19522bad089b509daae23505334aa5361945e7a8124fd32f17a6834c349c87aed",
            "file": "src/lib/landing-page-intro/landing-page-intro.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-landing-page-intro",
            "styleUrls": [
                "./landing-page-intro.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page-intro.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDescription for FTU Explorer",
                    "description": "<p>Description for FTU Explorer</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "img",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntro Image file url",
                    "description": "<p>Intro Image file url</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "moreLink",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLink to navigate to on more button click",
                    "description": "<p>Link to navigate to on more button click</p>\n",
                    "line": 34,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "moreText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText for more button",
                    "description": "<p>Text for more button</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "partners",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThank you message to partners",
                    "description": "<p>Thank you message to partners</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIntro title for FTU Explorer",
                    "description": "<p>Intro title for FTU Explorer</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                },
                {
                    "name": "LinkDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Component for LandingPage Intro</p>\n",
            "rawdescription": "\nComponent for LandingPage Intro",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { EMPTY_LINK, LinkDirective } from '@hra-ui/cdk';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/** Component for LandingPage Intro */\n@Component({\n  selector: 'hra-landing-page-intro',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule, LinkDirective],\n  templateUrl: './landing-page-intro.component.html',\n  styleUrls: ['./landing-page-intro.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LandingPageIntroComponent {\n  /** Intro title for FTU Explorer */\n  @Input() title = '';\n\n  /** Description for FTU Explorer */\n  @Input() description = '';\n\n  /** Thank you message to partners */\n  @Input() partners = '';\n\n  /** Intro Image file url */\n  @Input() img = '';\n\n  /** Text for more button */\n  @Input() moreText = '';\n\n  /** Link to navigate to on more button click */\n  @Input() moreLink = EMPTY_LINK;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  display: grid;\n  grid-template-columns: 3fr 2fr;\n  grid-template-rows: auto auto 3rem 1fr;\n  align-items: start;\n  column-gap: 2rem;\n  row-gap: 2rem;\n\n  .title {\n    font-size: 3rem;\n    line-height: 4rem;\n    margin: 0;\n  }\n\n  .more-button {\n    width: fit-content;\n    height: 3rem;\n  }\n\n  .image {\n    grid-column: 2;\n    grid-row: 1 / span 4;\n    place-self: center;\n    width: 100%;\n    min-height: 23rem;\n    max-height: 27rem;\n  }\n\n  .description,\n  .partners {\n    font-size: 1rem;\n    line-height: 1.5rem;\n\n    ::ng-deep p {\n      margin: 0;\n    }\n\n    ::ng-deep a {\n      color: vars.$primary-rgb;\n      font-weight: 700;\n    }\n  }\n\n  mat-icon {\n    font-size: 1.5rem;\n    height: fit-content;\n    width: fit-content;\n    padding-right: 0.5rem;\n    margin-left: 0.25rem !important;\n  }\n\n  .red-theme {\n    background-color: #990000;\n    border-color: #990000;\n    &:hover {\n      background-color: #800000;\n      border-color: #800000;\n\n      mat-icon {\n        transform: translateX(30%);\n        transition: 0.5s;\n      }\n    }\n\n    &:active,\n    &:focus {\n      background-color: #990000;\n      border-color: #990000;\n\n      ::ng-deep .mat-mdc-focus-indicator {\n        background-color: #990000 !important;\n        border-color: #990000;\n      }\n    }\n\n    &:active {\n      background-color: #ffffff;\n      color: #990000;\n\n      ::ng-deep .mat-mdc-focus-indicator {\n        background-color: #ffffff !important;\n        border: 2px solid;\n      }\n    }\n\n    &:disabled {\n      background-color: #ffd6db;\n      border: 1px solid #ffd6db;\n    }\n  }\n\n  @media (max-width: 1400px) {\n    .title {\n      font-size: 2rem;\n      line-height: normal;\n    }\n  }\n\n  @media (max-width: 1280px) {\n    grid-template-columns: unset;\n\n    .image {\n      grid-column: 1;\n      grid-row: 5 / span 1;\n    }\n  }\n}\n",
                    "styleUrl": "./landing-page-intro.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h1 class=\"title\">{{ title }}</h1>\n<markdown class=\"description\" [data]=\"description\"></markdown>\n\n<button mat-flat-button class=\"more-button red-theme\" color=\"primary\" [hraLink]=\"moreLink\">\n  {{ moreText }}\n  <mat-icon iconPositionEnd>arrow_forward</mat-icon>\n</button>\n<markdown class=\"partners\" [data]=\"partners\"></markdown>\n\n<img class=\"image\" [src]=\"img\" alt=\"alt\" />\n"
        },
        {
            "name": "MetricsComponent",
            "id": "component-MetricsComponent-6e3a4bad9dea0c0be10b197ab58639138abd5a1daf54d501bb2aa02864a0941b60580e69878578865cfd236b31a32ca86cf510c5241d8b6bd3f1128c73e47600",
            "file": "src/lib/metrics/metrics.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-metrics",
            "styleUrls": [
                "./metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./metrics.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "baseHref",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBase url",
                    "description": "<p>Base url</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLogo of metrics component.",
                    "description": "<p>Logo of metrics component.</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "metrics",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nList of metrics that will be shown to the user.",
                    "description": "<p>List of metrics that will be shown to the user.</p>\n",
                    "line": 34,
                    "type": "MetricItem[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMain title of metrics component.",
                    "description": "<p>Main title of metrics component.</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Describes the metrics for the HuBMAP project.</p>\n",
            "rawdescription": "\n\nDescribes the metrics for the HuBMAP project.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n  An interface representing a single metric with an icon, value and description.\n */\nexport interface MetricItem {\n  /** Represents the icon associated with the metric. */\n  icon: string;\n  /** Describes the numberical value of the metric. */\n  value: string;\n  /** Describes the type of metric. */\n  description: string;\n}\n/**\n * Describes the metrics for the HuBMAP project.\n */\n@Component({\n  selector: 'hra-metrics',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './metrics.component.html',\n  styleUrls: ['./metrics.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsComponent {\n  /** Main title of metrics component. */\n  @Input() title = '';\n\n  /** Logo of metrics component. */\n  @Input() logo = '';\n\n  /** List of metrics that will be shown to the user. */\n  @Input() metrics: MetricItem[] = [];\n\n  /** Base url */\n  @Input() baseHref = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 2rem 0 0 0;\n  background: #f8f9fa;\n  gap: 0.5rem;\n\n  .logo {\n    height: 2.75rem;\n  }\n\n  .header-title {\n    font-size: 2rem;\n    line-height: 2.5rem;\n    text-align: center;\n  }\n\n  .metrics {\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    gap: 3%;\n    padding: 2rem 1.75rem;\n\n    .metric {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      min-width: calc(100% / 7);\n      height: 14.75rem;\n      padding-top: 2rem;\n      padding-bottom: 2rem;\n\n      .logo {\n        margin-bottom: 2rem;\n      }\n\n      .value {\n        font-size: 3rem;\n        line-height: 4rem;\n        margin-bottom: 0.25rem;\n      }\n\n      .description {\n        font-size: 1rem;\n        text-align: center;\n      }\n    }\n  }\n\n  @media (max-width: 1400px) {\n    .metrics {\n      flex-wrap: wrap;\n\n      .metric {\n        width: 31%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./metrics.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<img class=\"logo\" [src]=\"logo\" alt=\"\" />\n<span class=\"header-title\">{{ title }}</span>\n\n<div class=\"metrics\">\n  <div class=\"metric\" *ngFor=\"let item of metrics\">\n    <img class=\"logo\" [src]=\"baseHref + item.icon\" alt=\"\" />\n    <span class=\"value\"> {{ item.value }} </span>\n    <span class=\"description\"> {{ item.description }} </span>\n  </div>\n</div>\n"
        },
        {
            "name": "ScreenSizeNoticeComponent",
            "id": "component-ScreenSizeNoticeComponent-6b641a220201d969fb228ecf72f5e7a8fc87da742b8a53350bc9c27cea9c54a6493313826b99ec8c34dfd7004772a27748e45af5b0c9ead80bdf168a781117f8",
            "file": "src/lib/screen-size-notice/screen-size-notice.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-screen-size-notice",
            "styleUrls": [
                "./screen-size-notice.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-size-notice.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput for passing screen size notice content\n",
                    "description": "<p>Input for passing screen size notice content</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "portal",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput  of screen size notice component\n",
                    "description": "<p>Input  of screen size notice component</p>\n",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "proceedClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the proceed button is clicked",
                    "description": "<p>Emits when the proceed button is clicked</p>\n",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "LinkDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>The screen size notice component displays a notice for the users specifying the required screen size</p>\n",
            "rawdescription": "\n\nThe screen size notice component displays a notice for the users specifying the required screen size\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { EMPTY_LINK, LinkDirective } from '@hra-ui/cdk';\n\n/**\n * The screen size notice component displays a notice for the users specifying the required screen size\n */\n@Component({\n  selector: 'hra-screen-size-notice',\n  standalone: true,\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\n  templateUrl: './screen-size-notice.component.html',\n  styleUrls: ['./screen-size-notice.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScreenSizeNoticeComponent {\n  /**\n   * Input for passing screen size notice content\n   */\n  @Input() content = '';\n\n  /**\n   * Input  of screen size notice component\n   */\n  @Input() portal = EMPTY_LINK;\n\n  /** Emits when the proceed button is clicked */\n  @Output() readonly proceedClick = new EventEmitter<void>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: none;\n  position: relative;\n  border-radius: 0.5rem;\n  padding: 1.5rem;\n  flex-direction: column;\n  max-width: 30rem;\n\n  .header-close {\n    position: absolute;\n    top: 1.125rem;\n    right: 1rem;\n  }\n\n  h3 {\n    margin: 0;\n    height: 2.5rem;\n    line-height: 2.5rem;\n  }\n\n  button {\n    height: 3rem;\n    padding: 0.75rem 0;\n    letter-spacing: 0.5px;\n  }\n\n  .btn-stroked {\n    margin-bottom: 1rem;\n  }\n\n  .content {\n    font-size: 1rem;\n    line-height: 1.5rem;\n    letter-spacing: 0.5px;\n  }\n\n  @media (max-width: 1279px) {\n    display: flex;\n  }\n}\n",
                    "styleUrl": "./screen-size-notice.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h3>Screen Size Notice</h3>\n<button mat-icon-button class=\"header-close\" (click)=\"proceedClick.emit()\">\n  <mat-icon>close</mat-icon>\n</button>\n<markdown [data]=\"content\" class=\"content\"></markdown>\n<button mat-stroked-button color=\"accent\" class=\"btn-stroked\" (click)=\"proceedClick.emit()\">\n  Proceed to FTU Explorer\n</button>\n<button mat-flat-button color=\"primary\" class=\"btn-flat\" [hraLink]=\"portal\">Human Reference Atlas Portal</button>\n"
        },
        {
            "name": "SourceListComponent",
            "id": "component-SourceListComponent-28f8adc647b19ac928622b4681cc5368b8a2980d1749200cd1d8681217c007c179c40cd49b2ab473c4e2467738a8935fa56e2a2a1287587911607a8b40626909",
            "file": "src/lib/source-list/source-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-source-list",
            "styleUrls": [
                "./source-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./source-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "collaborateText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText that appears in the empty biomarker collaborate button",
                    "description": "<p>Text that appears in the empty biomarker collaborate button</p>\n",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nText that appears in the empty biomarker message",
                    "description": "<p>Text that appears in the empty biomarker message</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "sources",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nList of sources with titles and links displayed to the user",
                    "description": "<p>List of sources with titles and links displayed to the user</p>\n",
                    "line": 60,
                    "type": "T[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "collaborateClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when the contact button is clicked",
                    "description": "<p>Emits when the contact button is clicked</p>\n",
                    "line": 81,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectionChanged",
                    "defaultValue": "new EventEmitter<T[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits when source selection changed",
                    "description": "<p>Emits when source selection changed</p>\n",
                    "line": 84,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Data source for table</p>\n",
                    "line": 75,
                    "rawdescription": "\nData source for table"
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['select', 'authors', 'year', 'title', 'link']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Columns to display in the sources list</p>\n",
                    "line": 78,
                    "rawdescription": "\nColumns to display in the sources list"
                },
                {
                    "name": "selection",
                    "defaultValue": "new SelectionModel<T>(true, [])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Current source selection</p>\n",
                    "line": 72,
                    "rawdescription": "\nCurrent source selection"
                },
                {
                    "name": "showTable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether to show the biomarker table</p>\n",
                    "line": 69,
                    "rawdescription": "\nWhether to show the biomarker table"
                }
            ],
            "methodsClass": [
                {
                    "name": "isAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the number of selected elements matches the total number of rows.",
                    "description": "<p>Whether the number of selected elements matches the total number of rows.</p>\n"
                },
                {
                    "name": "sourceLinkClicked",
                    "args": [
                        {
                            "name": "item",
                            "type": "SourceListItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLogs source link click\n",
                    "description": "<p>Logs source link click</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3473,
                                "end": 3477,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "item"
                            },
                            "type": "SourceListItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3467,
                                "end": 3472,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Source list item</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggleAllRows",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelects all rows if they are not all selected; otherwise clear selection.",
                    "description": "<p>Selects all rows if they are not all selected; otherwise clear selection.</p>\n"
                },
                {
                    "name": "toggleRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggles selection status of a row",
                    "description": "<p>Toggles selection status of a row</p>\n",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt changes the value of showTable to false if value it true\nand vice versa\n",
                    "description": "<p>It changes the value of showTable to false if value it true\nand vice versa</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "LabelBoxComponent",
                    "type": "component"
                },
                {
                    "name": "EmptyBiomarkerComponent",
                    "type": "component"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "HoverDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>This component shows list of sources with title and links to the datasets</p>\n",
            "rawdescription": "\nThis component shows list of sources with title and links to the datasets",
            "type": "component",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { HoverDirective } from '@hra-ui/cdk';\nimport { EmptyBiomarkerComponent, LabelBoxComponent } from '@hra-ui/components/atoms';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\n\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\nexport interface SourceListItem {\n  /** List of authors for the source */\n  authors: string[];\n  /** Year dataset was released */\n  year: number;\n  /** Title of the dataset in the SourceList */\n  title: string;\n  /** DOI of dataset */\n  doi: string;\n  /** Label of the dataset in the SourceList */\n  label: string;\n  /** Link to the dataset in the SourceList */\n  link: string;\n}\n\n/** This component shows list of sources with title and links to the datasets */\n@Component({\n  selector: 'hra-source-list',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatTableModule,\n    MatIconModule,\n    MatSortModule,\n    LabelBoxComponent,\n    EmptyBiomarkerComponent,\n    MatCheckboxModule,\n    HoverDirective,\n  ],\n  templateUrl: './source-list.component.html',\n  styleUrls: ['./source-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SourceListComponent<T extends SourceListItem> implements OnChanges {\n  /** List of sources with titles and links displayed to the user */\n  @Input() sources: T[] = [];\n\n  /** Text that appears in the empty biomarker collaborate button */\n  @Input() collaborateText = '';\n\n  /** Text that appears in the empty biomarker message */\n  @Input() message = '';\n\n  /** Whether to show the biomarker table */\n  showTable = true;\n\n  /** Current source selection */\n  selection = new SelectionModel<T>(true, []);\n\n  /** Data source for table */\n  dataSource = new MatTableDataSource<T>();\n\n  /** Columns to display in the sources list */\n  displayedColumns: string[] = ['select', 'authors', 'year', 'title', 'link'];\n\n  /** Emits when the contact button is clicked */\n  @Output() readonly collaborateClick = new EventEmitter<void>();\n\n  /** Emits when source selection changed */\n  @Output() readonly selectionChanged = new EventEmitter<T[]>();\n\n  /** Sorter for sources list */\n  @ViewChild(MatSort) set sort(sorter: MatSort) {\n    this.dataSource.sort = sorter || null;\n  }\n\n  /** Google analytics tracking service */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /** On sources change, resets selection and selects all sources */\n  ngOnChanges(changes: SimpleChanges) {\n    if ('sources' in changes) {\n      this.selection.clear();\n      this.dataSource.data = this.sources;\n      this.toggleAllRows();\n    }\n  }\n\n  /**\n   * It changes the value of showTable to false if value it true\n   * and vice versa\n   */\n  toggleTable(): void {\n    this.showTable = !this.showTable;\n    this.ga.event('source_table_toggle', this.showTable.toString());\n  }\n\n  /**\n   * Logs source link click\n   * @param item Source list item\n   */\n  sourceLinkClicked(item: SourceListItem): void {\n    this.ga.event('source_link_clicked', 'link_click', item.link);\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  toggleAllRows() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      this.selectionChanged.emit(this.selection.selected);\n      return;\n    }\n\n    this.dataSource.data.forEach((row) => this.selection.select(row));\n    this.selectionChanged.emit(this.selection.selected);\n  }\n\n  /** Toggles selection status of a row */\n  toggleRow(row: T) {\n    this.selection.toggle(row);\n    this.selectionChanged.emit(this.selection.selected);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'utils';\n@use 'variables' as vars;\n\n:host {\n  display: block;\n  height: 100%;\n\n  @media (min-height: 60.75rem) {\n    .toggle {\n      height: 3rem !important;\n    }\n\n    ::ng-deep thead > tr {\n      height: 3rem !important;\n    }\n  }\n\n  .sr-only {\n    @include utils.sr-only();\n  }\n\n  hra-label-box {\n    font-size: 0.875rem;\n    padding-left: 1.5rem;\n  }\n\n  .toggle {\n    display: flex;\n    align-items: center;\n    height: 2.5rem;\n    grid-area: source-list-header;\n    border-top: 1px solid rgba(vars.$light-dividers);\n    border-bottom: 1px solid rgba(vars.$light-dividers);\n  }\n\n  .table-content {\n    max-height: 236px;\n    overflow: auto;\n\n    &.hidden {\n      display: none;\n    }\n\n    .mat-column-select {\n      width: 1rem;\n      padding-right: 0;\n    }\n\n    .mat-column-authors,\n    .mat-column-title,\n    .mat-column-doi,\n    .mat-column-link {\n      max-width: 7rem;\n    }\n\n    .mat-column-year {\n      max-width: 3.5rem;\n    }\n\n    .mat-column-link {\n      padding-right: 3rem;\n      text-overflow: unset !important;\n    }\n\n    ::ng-deep thead {\n      .mat-sort-header-stem,\n      .mat-sort-header-indicator {\n        opacity: 0 !important;\n      }\n\n      .mat-sort-header-arrow {\n        background-image: url('../../assets/icons/arrow-upward.svg');\n        background-size: contain;\n        height: 1rem;\n        width: 1rem;\n      }\n\n      [aria-sort='descending'] {\n        .mat-sort-header-arrow {\n          background-image: url('../../assets/icons/arrow-down.svg');\n        }\n      }\n\n      [aria-sort='none'] {\n        .mat-sort-header-arrow {\n          background-image: url('../../assets/icons/arrow-upward.svg');\n          transition: 0.5s;\n        }\n      }\n\n      tr {\n        color: rgba(vars.$primary-darker);\n        background: rgba(vars.$primary-lighter);\n        height: 2.5rem;\n      }\n    }\n\n    ::ng-deep tbody {\n      .mat-column-doi,\n      .mat-column-link {\n        color: rgba(vars.$accent);\n        font-weight: 500;\n      }\n    }\n\n    .mat-mdc-cell,\n    .mat-mdc-header-cell {\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    .mat-mdc-header-cell {\n      border-bottom-color: rgba(vars.$light-dividers);\n    }\n\n    .mat-mdc-cell {\n      border-bottom: none;\n    }\n\n    tr {\n      color: rgba(vars.$primary);\n      font-size: 0.75rem;\n      height: 2.25rem;\n\n      .mat-column-link {\n        cursor: pointer;\n      }\n    }\n\n    .source-link {\n      --mdc-filled-button-label-text-tracking: 0.0178571429em;\n      font-size: 0.75rem;\n      font-weight: 500;\n      padding: 0;\n      justify-content: left;\n      color: #b20a2f;\n      text-decoration: none;\n      border: 0.25rem solid transparent;\n\n      &:hover {\n        color: #8e0825;\n      }\n\n      &:active {\n        color: #6a061c;\n      }\n\n      &:focus {\n        color: #201e3d;\n        border-color: #e00d3a;\n      }\n\n      ::ng-deep .mdc-button__ripple::before {\n        background-color: transparent;\n      }\n\n      ::ng-deep .mdc-button__label {\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        max-width: 9rem;\n        overflow: hidden;\n      }\n    }\n  }\n\n  ::ng-deep mat-checkbox {\n    .mdc-form-field {\n      height: 2.25rem;\n\n      .mdc-checkbox {\n        padding: 9px;\n      }\n    }\n    --mdc-checkbox-selected-checkmark-color: rgba(vars.$primary) !important;\n\n    .mdc-checkbox__background {\n      background-color: transparent !important;\n      border-color: rgba(vars.$primary) !important;\n      top: 9px;\n      left: 9px;\n    }\n  }\n\n  .end {\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./source-list.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "sort": {
                    "name": "sort",
                    "setSignature": {
                        "name": "sort",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "sorter",
                                "type": "MatSort",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 87,
                        "rawdescription": "\nSorter for sources list",
                        "description": "<p>Sorter for sources list</p>\n",
                        "jsdoctags": [
                            {
                                "name": "sorter",
                                "type": "MatSort",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<hra-label-box class=\"toggle\" (click)=\"toggleTable()\">\n  Source Data\n  <mat-icon class=\"end\">\n    {{ showTable ? 'keyboard_arrow_down' : 'keyboard_arrow_up' }}\n  </mat-icon>\n</hra-label-box>\n\n<div class=\"table-content\" [class.hidden]=\"!showTable\">\n  <table\n    *ngIf=\"sources.length !== 0\"\n    mat-table\n    [dataSource]=\"dataSource\"\n    matSort\n    matSortActive=\"authors\"\n    matSortDirection=\"asc\"\n  >\n    <caption class=\"sr-only\">\n      Source Data\n    </caption>\n\n    <!-- Checkbox Column -->\n    <ng-container matColumnDef=\"select\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox\n          (change)=\"$event ? toggleAllRows() : null\"\n          [checked]=\"selection.hasValue() && isAllSelected()\"\n          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          [disableRipple]=\"true\"\n        >\n        </mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <mat-checkbox\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"$event ? toggleRow(row) : null\"\n          [checked]=\"selection.isSelected(row)\"\n          [disableRipple]=\"true\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Authors Column -->\n    <ng-container matColumnDef=\"authors\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Authors</th>\n      <td mat-cell *matCellDef=\"let row\" [hraHover]=\"dataHover\" [hraHoverData]=\"row.authors\">\n        {{ row.authors.join(', ') }}\n      </td>\n    </ng-container>\n\n    <!-- Year Column -->\n    <ng-container matColumnDef=\"year\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Year</th>\n      <td mat-cell *matCellDef=\"let row\">{{ row.year < 0 ? '' : row.year }}</td>\n    </ng-container>\n\n    <!-- Title Column -->\n    <ng-container matColumnDef=\"title\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper Title</th>\n      <td mat-cell *matCellDef=\"let row\" [hraHover]=\"dataHover\" [hraHoverData]=\"row.title\">{{ row.title }}</td>\n    </ng-container>\n\n    <!-- DOI Column -->\n    <ng-container matColumnDef=\"link\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Paper DOI</th>\n      <td\n        mat-cell\n        *matCellDef=\"let row\"\n        [hraHover]=\"dataHover\"\n        [hraHoverData]=\"row.link\"\n        (click)=\"sourceLinkClicked(row)\"\n      >\n        <a\n          class=\"source-link\"\n          mat-flat-button\n          [href]=\"row.link\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          disableRipple\n        >\n          {{ row.link }}\n        </a>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n  </table>\n  <hra-empty-biomarker\n    *ngIf=\"sources.length === 0\"\n    [collaborateText]=\"collaborateText\"\n    [message]=\"message\"\n    (collaborateClick)=\"collaborateClick.emit()\"\n  ></hra-empty-biomarker>\n</div>\n\n<ng-template #dataHover let-columnName>\n  <div class=\"biomarker-table-hover full-column-name\" [class.empty]=\"columnName.toString() === ''\">\n    {{ columnName }}\n  </div>\n</ng-template>\n"
        },
        {
            "name": "TissueTreeListComponent",
            "id": "component-TissueTreeListComponent-c78e5394de0d6c8f1d9e1e429499f409d52c934c5c2387c13559d6b24aeee7af41f255badc70750f063a293d9149221e041042381816d847c329eb815ef12f9d",
            "file": "src/lib/tissue-tree-list/tissue-tree-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-tissue-tree-list",
            "styleUrls": [
                "./tissue-tree-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tissue-tree-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nodes",
                    "defaultValue": "{} as Record<K, T>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput  of tissue tree list component\n",
                    "description": "<p>Input  of tissue tree list component</p>\n",
                    "line": 70,
                    "type": "Record<K | T>",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNode selected, to view the data associated with it\n",
                    "description": "<p>Node selected, to view the data associated with it</p>\n",
                    "line": 75,
                    "type": "T",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "navigate",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigates to an illustration page\n",
                    "description": "<p>Navigates to an illustration page</p>\n",
                    "line": 85,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedChange",
                    "defaultValue": "new EventEmitter<T | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutput  of tissue tree list component\n",
                    "description": "<p>Output  of tissue tree list component</p>\n",
                    "line": 80,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "defaultValue": "new FlatTreeControl<InternalNode<K, T>>(\n    (node) => node.level,\n    (node) => node.expandable,\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>tree controller, used to control the nodes in the tree</p>\n",
                    "line": 95,
                    "rawdescription": "\n\ntree controller, used to control the nodes in the tree\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTreeFlatDataSource(this.control, this.flattener)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Data source of tissue tree list component, defines the data in mat-tree</p>\n",
                    "line": 118,
                    "rawdescription": "\n\nData source of tissue tree list component, defines the data in mat-tree\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "enableNav",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Whether keyboard navigation is enabled</p>\n",
                    "line": 90,
                    "rawdescription": "\n\nWhether keyboard navigation is enabled\n"
                },
                {
                    "name": "flattener",
                    "defaultValue": "new MatTreeFlattener<T, InternalNode<K, T>>(\n    (node, level) => ({\n      label: node.label,\n      expandable: (node.children?.length ?? 0) > 0,\n      level,\n      data: node,\n    }),\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children?.map((id) => this.nodes[id]),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Flattener of tissue tree list component, returns flat-data structure</p>\n",
                    "line": 103,
                    "rawdescription": "\n\nFlattener of tissue tree list component, returns flat-data structure\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleListClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnables keyboard nav only if the tissue tree list is clicked\n",
                    "description": "<p>Enables keyboard nav only if the tissue tree list is clicked</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7678,
                                "end": 7683,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7672,
                                "end": 7677,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Click event</p>\n"
                        }
                    ]
                },
                {
                    "name": "handlePageClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable keyboard nav on click\n",
                    "description": "<p>Disable keyboard nav on click</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "hasChild",
                    "args": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "InternalNode<K | T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck if the current node has children\n",
                    "description": "<p>check if the current node has children</p>\n",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 3855,
                                "end": 3859,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "node"
                            },
                            "type": "InternalNode<K | T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3849,
                                "end": 3854,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>current selected node</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3888,
                                "end": 3895,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean, which means if node has children</p>\n"
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKeyboard navigation for tissue tree list\n",
                    "description": "<p>Keyboard navigation for tissue tree list</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5845,
                                "end": 5850,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5839,
                                "end": 5844,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Keyboard event</p>\n"
                        }
                    ]
                },
                {
                    "name": "resetSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets selection and collapes all nodes of the tree.\n",
                    "description": "<p>Resets selection and collapes all nodes of the tree.</p>\n"
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIt selects the node, which is clicked.\n",
                    "description": "<p>It selects the node, which is clicked.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4098,
                                "end": 4102,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "node"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4092,
                                "end": 4097,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Tissue Tree Item, which is clicked</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnables keyboard nav only if the tissue tree list is clicked\n",
                    "description": "<p>Enables keyboard nav only if the tissue tree list is clicked</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 7671,
                            "end": 7699,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 7672,
                                "end": 7677,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Click event</p>\n",
                            "name": {
                                "pos": 7678,
                                "end": 7683,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 276
                },
                {
                    "name": "document:click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable keyboard nav on click\n",
                    "description": "<p>Disable keyboard nav on click</p>\n",
                    "line": 267
                },
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKeyboard navigation for tissue tree list\n",
                    "description": "<p>Keyboard navigation for tissue tree list</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 5838,
                            "end": 5869,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 5839,
                                "end": 5844,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Keyboard event</p>\n",
                            "name": {
                                "pos": 5845,
                                "end": 5850,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 223
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatTreeModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "MatRippleModule",
                    "type": "module"
                },
                {
                    "name": "LinkDirective",
                    "type": "directive"
                }
            ],
            "description": "<p>Tabular View for hubMap tissue side-bar</p>\n",
            "rawdescription": "\n\nTabular View for hubMap tissue side-bar\n",
            "type": "component",
            "sourceCode": "import { FlatTreeControl } from '@angular/cdk/tree';\nimport { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from '@angular/material/tree';\nimport { LinkDirective } from '@hra-ui/cdk';\nimport { LinkId } from '@hra-ui/cdk/state';\n\n/** Base node type */\nexport interface DataNode<K extends string> {\n  /** User readable label */\n  label: string;\n  /** Id to pass as a query parameter on navigation */\n  id?: string;\n  /** Link to navigate to on node click */\n  link?: LinkId;\n  /** Nested nodes */\n  children?: K[];\n}\n\n/**\n * Internal interface for flat tissue data hierarchy\n */\ninterface InternalNode<K extends string, T extends DataNode<K>> {\n  /** Displayed label */\n  label: string;\n  /** Whether the node can be expanded to display child nodes */\n  expandable: boolean;\n  /** Depth of node in the tree */\n  level: number;\n  /** Associated user node data */\n  data: T;\n}\n\n/**\n * Tabular View for hubMap tissue side-bar\n */\n@Component({\n  selector: 'hra-tissue-tree-list',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatTreeModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatRippleModule,\n    LinkDirective,\n  ],\n  templateUrl: './tissue-tree-list.component.html',\n  styleUrls: ['./tissue-tree-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\n  /**\n   * Input  of tissue tree list component\n   */\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\n\n  /**\n   * Node selected, to view the data associated with it\n   */\n  @Input() selected?: T = undefined;\n\n  /**\n   * Output  of tissue tree list component\n   */\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\n\n  /**\n   * Navigates to an illustration page\n   */\n  @Output() navigate = new EventEmitter();\n\n  /**\n   * Whether keyboard navigation is enabled\n   */\n  enableNav = true;\n\n  /**\n   * tree controller, used to control the nodes in the tree\n   */\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\n    (node) => node.level,\n    (node) => node.expandable,\n  );\n\n  /**\n   * Flattener of tissue tree list component, returns flat-data structure\n   */\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\n    (node, level) => ({\n      label: node.label,\n      expandable: (node.children?.length ?? 0) > 0,\n      level,\n      data: node,\n    }),\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children?.map((id) => this.nodes[id]),\n  );\n\n  /**\n   * Data source of tissue tree list component, defines the data in mat-tree\n   */\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\n\n  /**\n   * Take actions if any data changes\n   * @param changes changes in data\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('nodes' in changes) {\n      this.dataSource.data = this.findRootNodes();\n      this.control.expandAll();\n    }\n    if ('selected' in changes) {\n      if (!this.selected) {\n        this.control.expandAll();\n      }\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\n      const node = this.control.dataNodes.find((n) => n.data === changes['selected'].currentValue);\n      if (!node?.expandable) {\n        this.expandPath(path);\n      }\n    }\n  }\n\n  /**\n   * check if the current node has children\n   * @param node current selected node\n   * @returns boolean, which means if node has children\n   */\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\n    return node.expandable;\n  }\n\n  /**\n   * It selects the node, which is clicked.\n   * @param node Tissue Tree Item, which is clicked\n   */\n  selectNode(node: T): void {\n    if (this.selected !== node) {\n      this.selected = node;\n      this.selectedChange.emit(this.selected);\n    }\n  }\n\n  /**\n   * Resets selection and collapes all nodes of the tree.\n   */\n  resetSelection(): void {\n    this.selected = undefined;\n    this.control.collapseAll();\n  }\n\n  /**\n   * It creates a copy of the input nodes object.\n   * It iterates over it and removes all the children nodes from it.\n   * @returns remaining nodes which are root nodes.\n   */\n  private findRootNodes(): T[] {\n    const { nodes } = this;\n    const roots = { ...this.nodes };\n    for (const key in nodes) {\n      for (const child of nodes[key].children ?? []) {\n        delete roots[child];\n      }\n    }\n\n    return Object.values(roots);\n  }\n\n  /**\n   * expands the tree nodes based on the path provided.\n   * @param path is given as an input.\n   */\n  private expandPath(path: DataNode<K>[]): void {\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\n    nodes.forEach((node) => this.control.expand(node));\n  }\n\n  /**\n   * It used the logic of depth first search to find the target node.\n   * returns the path to the target node.\n   */\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\n    for (const node of nodes) {\n      path.push(node);\n      if (node === target) {\n        return path;\n      }\n\n      const savedLength = path.length;\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\n        return path;\n      }\n\n      path.pop();\n    }\n\n    return path;\n  }\n\n  /**\n   * Keyboard navigation for tissue tree list\n   * @param event Keyboard event\n   */\n  @HostListener('document:keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    if (!this.enableNav) {\n      return;\n    }\n    if (this.control) {\n      const nodes = this.control.dataNodes;\n      const selectedIndex = this.control.dataNodes.findIndex((node) => node.data.id === this.selected?.id);\n\n      const currentNode = nodes[selectedIndex];\n      if (currentNode && currentNode.expandable) {\n        const expandableNodes = nodes.filter((node) => node.expandable);\n        const index = expandableNodes.indexOf(currentNode);\n        if (event.key === 'ArrowLeft') {\n          this.control.collapse(currentNode);\n        } else if (event.key === 'ArrowRight') {\n          this.control.expand(currentNode);\n        } else if (\n          event.key === 'ArrowDown' &&\n          index + 1 < expandableNodes.length &&\n          !this.control.isExpanded(currentNode)\n        ) {\n          this.selectNode(expandableNodes[index + 1].data);\n          return;\n        } else if (event.key === 'ArrowUp' && index - 1 >= 0 && !this.control.isExpanded(expandableNodes[index - 1])) {\n          this.selectNode(expandableNodes[index - 1].data);\n          return;\n        }\n      }\n      if (event.key === 'ArrowDown' && selectedIndex + 1 < nodes.length) {\n        this.selectNode(nodes[selectedIndex + 1].data);\n      }\n      if (event.key === 'ArrowUp' && selectedIndex - 1 >= 0) {\n        this.selectNode(nodes[selectedIndex - 1].data);\n      }\n      if (event.key === 'Enter' && !currentNode.expandable) {\n        this.navigate.emit(currentNode.data);\n      }\n    }\n  }\n\n  /**\n   * Disable keyboard nav on click\n   */\n  @HostListener('document:click')\n  handlePageClick(): void {\n    this.enableNav = false;\n  }\n\n  /**\n   * Enables keyboard nav only if the tissue tree list is clicked\n   * @param event Click event\n   */\n  @HostListener('click', ['$event'])\n  handleListClick(event: MouseEvent): void {\n    event.stopPropagation();\n    this.enableNav = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  overflow-y: auto;\n\n  .row {\n    min-height: unset;\n\n    &.child {\n      padding-left: 2rem !important;\n\n      @media (min-width: 90rem) {\n        padding-left: 4rem !important;\n      }\n    }\n\n    &.selected {\n      background-color: #fff3f0;\n    }\n\n    .toggle {\n      width: 2rem;\n      height: 2rem;\n      padding: 0.25rem;\n    }\n\n    .label-container {\n      display: flex;\n      align-items: center;\n      min-height: 2rem;\n      border-radius: 0.25rem;\n      width: 100%;\n      font-weight: 500;\n      font-size: 0.75rem;\n\n      .link {\n        cursor: pointer;\n        text-decoration: none;\n        color: rgba(vars.$dark-primary-text);\n        line-height: normal;\n        width: 100%;\n        height: 100%;\n        align-items: center;\n        display: flex;\n      }\n    }\n\n    &.selected .label-container .link {\n      color: rgba(vars.$accent);\n    }\n\n    &:focus-visible {\n      outline: none;\n    }\n  }\n}\n",
                    "styleUrl": "./tissue-tree-list.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"control\" class=\"tree\">\n  <mat-tree-node\n    *matTreeNodeDef=\"let node; let level = level\"\n    [matTreeNodePadding]=\"level\"\n    matTreeNodePaddingIndent=\"64\"\n    [class.selected]=\"node.data === selected\"\n    class=\"row\"\n    [class.child]=\"hasChild\"\n    tabIndex=\"0\"\n  >\n    <ng-container [ngTemplateOutlet]=\"label\" [ngTemplateOutletContext]=\"node\"> </ng-container>\n  </mat-tree-node>\n\n  <mat-tree-node\n    *matTreeNodeDef=\"let node; let level = level; when: hasChild\"\n    class=\"row\"\n    [class.selected]=\"node.data === selected\"\n    (mouseup)=\"selectNode(node.data)\"\n  >\n    <button mat-icon-button matTreeNodeToggle class=\"toggle\" [attr.aria-label]=\"'Toggle ' + node.label\">\n      <mat-icon>\n        {{ control.isExpanded(node) ? 'keyboard_arrow_up' : 'chevron_right' }}\n      </mat-icon>\n    </button>\n\n    <ng-container [ngTemplateOutlet]=\"label\" [ngTemplateOutletContext]=\"node\"> </ng-container>\n  </mat-tree-node>\n</mat-tree>\n\n<ng-template let-label=\"label\" let-data=\"data\" #label>\n  <div class=\"label-container\">\n    <a\n      *ngIf=\"data.link; else noLink\"\n      [hraLink]=\"data.link\"\n      [queryParams]=\"{ id: data.id }\"\n      class=\"link\"\n      (mouseup)=\"selectNode(data)\"\n    >\n      {{ label }}\n    </a>\n    <ng-template #noLink>\n      <span>{{ label }}</span>\n    </ng-template>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "TitleCardComponent",
            "id": "component-TitleCardComponent-dda33e0370aff82797f5b3494c98b25f59e8b87daefd03e828cec8116928222c19885f73255625acfce7c66d590784fd1ad8faa664dac65130f8119fc2670670",
            "file": "src/lib/title-card/title-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-title-card",
            "styleUrls": [
                "./title-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDescription for the title card shown to the user",
                    "description": "<p>Description for the title card shown to the user</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTitle for the title card shown to the user",
                    "description": "<p>Title for the title card shown to the user</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                }
            ],
            "description": "<p>Displays title card to the user with title and description</p>\n",
            "rawdescription": "\nDisplays title card to the user with title and description",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/** Displays title card to the user with title and description */\n@Component({\n  selector: 'hra-title-card',\n  standalone: true,\n  imports: [CommonModule, MarkdownModule],\n  templateUrl: './title-card.component.html',\n  styleUrls: ['./title-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TitleCardComponent {\n  /** Title for the title card shown to the user*/\n  @Input() title = '';\n\n  /** Description for the title card shown to the user*/\n  @Input() description = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .title {\n    margin-bottom: 0.5rem;\n  }\n}\n",
                    "styleUrl": "./title-card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h1 class=\"title\">{{ title }}</h1>\n<markdown class=\"description\" [data]=\"description\"></markdown>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "DOWNLOADS_LIST_POSITION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/footer/footer.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConnectedPosition[]",
                "defaultValue": "[\n  {\n    panelClass: 'above',\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n    offsetY: 0,\n  },\n  {\n    panelClass: 'below',\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n]",
                "rawdescription": "Positioning value for the download list popup",
                "description": "<p>Positioning value for the download list popup</p>\n"
            },
            {
                "name": "EMPTY_CONTACT_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/contact-modal/contact-modal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Partial<ContactData>",
                "defaultValue": "{\n  email: undefined,\n  subject: undefined,\n  message: undefined,\n}",
                "rawdescription": "Initial empty contact data",
                "description": "<p>Initial empty contact data</p>\n"
            },
            {
                "name": "HOVER_DELAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/interactive-svg/interactive-svg.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "200",
                "rawdescription": "Delay before tooltip becomes visible",
                "description": "<p>Delay before tooltip becomes visible</p>\n"
            },
            {
                "name": "TOOLTIP_POSITIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/interactive-svg/interactive-svg.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConnectedPosition[]",
                "defaultValue": "[\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center',\n    offsetX: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'end',\n    overlayY: 'center',\n    offsetX: -8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'top',\n    offsetY: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'bottom',\n    offsetY: -8,\n  },\n]",
                "rawdescription": "Tooltip position settings",
                "description": "<p>Tooltip position settings</p>\n"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/lib/footer/footer.component.ts": [
                {
                    "name": "DOWNLOADS_LIST_POSITION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/footer/footer.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectedPosition[]",
                    "defaultValue": "[\n  {\n    panelClass: 'above',\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n    offsetY: 0,\n  },\n  {\n    panelClass: 'below',\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n]",
                    "rawdescription": "Positioning value for the download list popup",
                    "description": "<p>Positioning value for the download list popup</p>\n"
                }
            ],
            "src/lib/contact-modal/contact-modal.component.ts": [
                {
                    "name": "EMPTY_CONTACT_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/contact-modal/contact-modal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<ContactData>",
                    "defaultValue": "{\n  email: undefined,\n  subject: undefined,\n  message: undefined,\n}",
                    "rawdescription": "Initial empty contact data",
                    "description": "<p>Initial empty contact data</p>\n"
                }
            ],
            "src/lib/interactive-svg/interactive-svg.component.ts": [
                {
                    "name": "HOVER_DELAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/interactive-svg/interactive-svg.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "200",
                    "rawdescription": "Delay before tooltip becomes visible",
                    "description": "<p>Delay before tooltip becomes visible</p>\n"
                },
                {
                    "name": "TOOLTIP_POSITIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/interactive-svg/interactive-svg.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectedPosition[]",
                    "defaultValue": "[\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center',\n    offsetX: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'end',\n    overlayY: 'center',\n    offsetX: -8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'top',\n    offsetY: 8,\n  },\n  {\n    originX: 'center',\n    originY: 'center',\n    overlayX: 'center',\n    overlayY: 'bottom',\n    offsetY: -8,\n  },\n]",
                    "rawdescription": "Tooltip position settings",
                    "description": "<p>Tooltip position settings</p>\n"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    }
}