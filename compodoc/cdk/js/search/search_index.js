var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,1.017,1,3.106]],["body/interfaces/ActionConstructor.html",[0,1.515,1,5.423,2,1.974,3,0.229,4,0.229,5,0.229,6,4.194,7,0.259,8,1.16,9,1.633,10,1.602,11,0.695,12,1.894,13,0.353,14,0.945,15,0.022,16,0.229,17,4.194,18,1.853,19,0.347,20,1.263,21,2.43,22,0.817,23,2.919,24,1.355,25,3.58,26,5.423,27,6.01,28,3.175,29,0.458,30,1.078,31,1.693,32,4.194,33,1.143,34,4.194,35,1.744,36,0.194,37,4.194,38,4.194,39,4.194,40,2.258,41,0.016,42,0.016]],["title/classes/Add.html",[36,0.13,43,1.271]],["body/classes/Add.html",[3,0.194,4,0.194,5,0.34,7,0.3,8,0.624,9,1.082,10,1.046,13,0.169,14,0.659,15,0.022,16,0.302,19,0.34,20,0.963,22,0.482,24,0.885,29,0.555,36,0.222,41,0.014,42,0.014,43,2.442,44,0.624,45,2.141,46,2.141,47,1.473,48,1.659,49,2.585,50,2.005,51,2.624,52,1.907,53,2.927,54,1.897,55,2.795,56,0.417,57,3.542,58,2.441,59,0.417,60,0.356,61,0.299,62,1.605,63,1.631,64,2.609,65,1.907,66,1.237,67,1.237,68,1.237,69,0.386,70,2.052,71,2.172,72,2.172,73,1.792,74,3.458,75,1.473,76,1.237,77,1.565,78,2.043,79,1.473,80,2.692,81,1.237,82,2.141,83,1.046,84,2.441,85,1.237,86,1.565,87,1.565,88,1.47,89,2.776,90,1.565,91,1.565,92,2.222,93,2.222,94,2.435,95,1.78,96,2.222,97,2.222]],["title/classes/Add-1.html",[36,0.109,43,1.067,98,1.644]],["body/classes/Add-1.html",[3,0.194,4,0.194,5,0.359,7,0.3,8,0.625,9,1.083,10,1.048,13,0.169,14,0.752,15,0.022,16,0.265,19,0.34,20,0.964,22,0.482,24,0.887,29,0.556,36,0.222,41,0.014,42,0.014,43,2.474,44,0.625,47,1.475,48,1.66,50,2.006,51,2.626,52,1.91,54,1.898,56,0.418,58,2.443,59,0.418,60,0.357,61,0.3,62,1.606,63,1.433,66,1.239,67,1.239,68,1.239,69,0.387,71,2.174,72,2.174,73,1.794,75,1.475,76,1.239,77,1.567,78,1.794,79,1.475,80,2.692,81,1.239,82,2.143,83,1.633,84,2.839,85,1.239,86,2.143,87,2.143,88,1.518,99,2.143,100,2.143,101,2.309,102,3.35,103,3.2,104,3.547,105,2.055,106,3.811,107,1.669,108,2.797,109,1.91,110,1.91]],["title/classes/AddFromYaml.html",[36,0.13,81,1.271]],["body/classes/AddFromYaml.html",[3,0.194,4,0.194,5,0.351,7,0.301,8,0.627,9,1.085,10,1.051,13,0.17,14,0.809,15,0.022,16,0.303,19,0.34,20,0.967,22,0.484,24,0.889,29,0.556,36,0.223,41,0.014,42,0.014,43,2.424,44,0.627,45,2.148,46,2.148,47,1.479,48,1.358,49,2.478,50,2.008,51,2.629,53,2.606,54,1.635,55,2.288,56,0.419,58,2.148,59,0.419,60,0.358,61,0.301,62,1.557,63,1.436,64,2.617,65,1.916,66,1.243,67,1.243,68,1.243,69,0.388,70,2.062,71,2.176,72,2.176,73,1.798,74,3.544,75,1.479,76,1.243,77,1.572,78,2.2,79,1.479,80,2.79,81,1.698,82,2.629,83,1.436,84,2.447,85,1.243,86,1.572,87,1.572,88,1.472,89,2.782,90,1.572,91,1.572,92,2.232,93,2.232,94,2.443,95,1.788,96,2.232,97,2.232,111,3.037,112,3.558]],["title/classes/AddFromYaml-1.html",[36,0.109,81,1.067,98,1.644]],["body/classes/AddFromYaml-1.html",[3,0.194,4,0.194,5,0.36,7,0.301,8,0.627,9,1.085,10,1.051,13,0.17,14,0.847,15,0.022,16,0.266,19,0.34,20,0.967,22,0.484,24,0.889,29,0.556,36,0.223,41,0.014,42,0.014,43,2.46,44,0.627,47,1.479,48,1.358,50,2.008,51,2.629,54,1.635,56,0.419,58,2.148,59,0.419,60,0.358,61,0.301,62,1.557,63,1.051,66,1.243,67,1.243,68,1.243,69,0.388,71,2.176,72,2.176,73,1.798,75,1.479,76,1.243,77,1.572,78,1.798,79,1.479,80,2.79,81,1.698,82,2.629,83,1.84,84,2.842,85,1.243,86,2.148,87,2.148,88,1.52,99,2.148,100,2.148,101,2.213,102,2.981,103,2.617,105,2.062,106,3.938,107,2.288,108,2.8,109,1.916,110,1.916,111,3.037,113,3.558]],["title/classes/AddMany.html",[36,0.13,76,1.271]],["body/classes/AddMany.html",[3,0.195,4,0.195,5,0.341,7,0.301,8,0.628,9,1.086,10,1.053,13,0.17,14,0.662,15,0.022,16,0.303,19,0.341,20,0.968,22,0.662,24,0.891,29,0.556,36,0.223,41,0.014,42,0.014,43,2.425,44,0.628,45,2.15,46,2.15,47,1.482,48,1.36,49,2.479,50,2.009,51,2.631,53,2.608,54,1.637,55,2.29,56,0.42,58,2.449,59,0.42,60,0.359,61,0.301,62,1.558,63,1.437,64,2.62,65,1.919,66,1.245,67,1.245,68,1.245,69,0.389,70,2.065,71,2.177,72,2.177,73,2.202,74,3.661,75,2.023,76,1.7,77,2.15,78,2.202,79,2.304,80,2.695,81,1.245,82,2.15,83,1.053,84,2.449,85,1.245,86,1.575,87,1.575,88,1.473,89,2.785,90,1.575,91,1.575,92,2.236,93,2.236,94,2.445,95,1.791,96,2.236,97,2.236,114,3.042,115,3.564]],["title/classes/AddMany-1.html",[36,0.109,76,1.067,98,1.644]],["body/classes/AddMany-1.html",[3,0.195,4,0.195,5,0.36,7,0.301,8,0.629,9,1.088,10,1.054,13,0.17,14,0.754,15,0.022,16,0.266,19,0.341,20,0.969,22,0.662,24,0.892,29,0.557,36,0.223,41,0.014,42,0.014,43,2.461,44,0.629,47,1.484,48,1.361,50,2.01,51,2.633,54,1.638,56,0.42,58,2.451,59,0.42,60,0.359,61,0.302,62,1.559,63,1.054,66,1.247,67,1.247,68,1.247,69,0.389,71,2.178,72,2.178,73,2.203,75,2.025,76,1.702,77,2.153,78,2.051,79,2.306,80,2.696,81,1.247,82,2.153,83,1.638,84,2.844,85,1.247,86,2.153,87,2.153,88,1.521,99,2.153,100,2.153,101,2.214,102,2.986,103,2.623,105,2.068,106,3.986,107,1.68,108,2.804,109,1.922,110,1.922,114,3.047,116,3.57]],["title/injectables/AppHrefService.html",[117,1.426,118,2.109]],["body/injectables/AppHrefService.html",[3,0.213,4,0.213,5,0.213,7,0.319,8,0.686,11,0.645,12,1.804,13,0.186,14,0.788,15,0.022,16,0.282,19,0.282,20,1.339,22,0.788,24,0.973,29,0.329,30,1.027,36,0.139,41,0.015,42,0.015,56,0.683,59,0.458,60,0.392,61,0.329,69,0.425,117,2.024,118,2.992,119,2.096,120,4.228,121,5.268,122,3.323,123,2.595,124,4.408,125,3.909,126,3.893,127,1.365,128,6.173,129,5.165,130,3.893,131,5.165,132,5.165,133,5.268,134,1.875,135,2.038,136,5.165,137,3.893,138,4.408,139,3.722,140,2.147,141,1.525,142,5.165,143,3.893,144,4.228,145,2.666,146,1.36,147,1.029,148,4.408,149,3.323,150,2.096,151,3.323,152,2.666,153,3.323,154,3.323,155,3.909,156,3.909,157,2.024,158,3.893,159,3.893,160,3.893,161,3.893,162,3.893,163,3.893]],["title/pipes/AssetUrlPipe.html",[164,2.493,165,3.106]],["body/pipes/AssetUrlPipe.html",[3,0.202,4,0.202,5,0.202,7,0.309,12,1.293,13,0.31,14,0.859,15,0.022,16,0.309,19,0.202,20,1.256,21,2.894,29,0.422,30,0.993,33,0.78,36,0.132,41,0.015,42,0.015,56,0.588,59,0.436,60,0.569,61,0.313,69,0.404,88,1.598,118,2.146,120,4.143,126,3.69,127,0.979,134,1.669,139,3.275,141,1.451,144,3.421,146,1.293,147,0.979,152,4.457,157,2.215,164,3.421,165,4.263,166,3.703,167,5.652,168,3.703,169,6.05,170,4.995,171,2.536,172,4.995,173,3.133,174,2.077,175,3.703,176,4.995,177,3.703,178,4.995,179,6.05,180,2.803,181,2.894,182,3.781,183,6.05,184,3.781,185,4.995,186,4.995,187,5.652,188,4.995,189,3.781,190,4.995,191,3.703,192,4.995,193,4.278,194,4.263,195,3.781,196,3.16,197,4.995,198,3.703,199,3.703,200,4.995,201,3.703,202,3.703,203,2.536,204,2.536,205,3.703,206,3.703,207,3.703,208,2.146,209,3.703,210,3.16,211,3.16,212,3.703,213,3.703]],["title/classes/BaseHrefSelectors.html",[36,0.13,214,2.755]],["body/classes/BaseHrefSelectors.html",[3,0.258,4,0.258,5,0.258,7,0.361,8,1.119,11,0.781,13,0.225,14,0.927,15,0.022,16,0.319,19,0.258,29,0.398,30,1.318,33,0.994,36,0.169,40,3.416,41,0.017,42,0.017,44,0.831,56,0.555,59,0.555,60,0.475,61,0.398,127,1.543,134,1.895,140,2.887,214,4.421,215,4,216,4,217,4.715,218,4,219,4.345,220,4,221,5.84,222,2.083,223,4.715,224,4.715,225,2.083,226,1.96,227,4.715,228,4.715]],["title/injectables/BaseHrefState.html",[117,1.426,219,2.493]],["body/injectables/BaseHrefState.html",[3,0.241,4,0.241,5,0.241,7,0.346,8,1.178,9,0.983,11,0.73,13,0.21,15,0.022,16,0.336,19,0.241,29,0.473,30,0.876,36,0.157,41,0.016,42,0.016,56,0.519,59,0.519,60,0.563,61,0.372,117,2.193,119,2.371,127,1.479,134,1.625,135,1.454,140,2.777,147,1.164,150,2.371,215,3.833,216,3.833,219,3.833,220,4.675,222,1.946,226,1.831,229,4.405,230,2.838,231,4.776,232,5.596,233,5.596,234,5.523,235,1.726,236,2.136,237,4.776,238,4.405,239,4.236,240,3.511,241,2.633,242,4.405,243,4.405,244,4.405]],["title/classes/BreakpointWatchState.html",[36,0.13,245,3.106]],["body/classes/BreakpointWatchState.html",[3,0.148,4,0.148,5,0.148,7,0.325,10,1.182,11,0.449,13,0.227,14,0.799,15,0.022,16,0.307,19,0.321,20,0.796,22,0.368,29,0.527,30,1.307,31,1.752,33,1.183,36,0.097,41,0.012,42,0.012,44,0.477,48,0.757,56,0.619,59,0.561,60,0.479,61,0.402,69,0.612,73,1.761,127,1.058,141,1.061,144,4.503,146,0.946,147,0.716,157,1.568,174,2.527,181,3.404,203,4.163,230,2.82,241,2.475,245,3.416,246,2.708,247,4.003,248,4.762,249,5.26,250,4.003,251,4.003,252,2.708,253,5.26,254,6.575,255,4.791,256,2.708,257,4.003,258,4.003,259,2.511,260,5.679,261,4.003,262,4.907,263,2.708,264,5.876,265,4.003,266,3.93,267,6.722,268,4.448,269,4.024,270,4.003,271,2.241,272,2.708,273,5.26,274,4.49,275,4.003,276,2.708,277,2.708,278,2.708,279,4.003,280,2.708,281,2.708,282,2.708,283,1.699,284,1.458,285,5.439,286,2.708,287,2.708,288,2.708,289,2.708,290,6.575,291,3.982,292,2.832,293,2.05,294,2.708,295,2.708,296,2.708,297,2.708,298,3.3,299,4.49,300,2.708,301,2.708,302,4.762,303,2.311,304,2.708,305,4.003,306,2.708,307,2.708,308,2.708,309,2.708,310,2.708,311,2.708]],["title/modules/CdkStateModule.html",[312,2.755,313,2.755]],["body/modules/CdkStateModule.html",[3,0.282,4,0.282,5,0.282,8,0.908,15,0.022,16,0.388,18,2.724,19,0.282,36,0.184,41,0.018,42,0.018,49,1.905,101,1.701,140,2.142,147,1.362,219,3.529,226,2.142,313,4.666,314,3.9,315,5.152,316,6.164,317,5.152,318,4.222,319,4.222,320,4.222,321,2.589,322,5.152,323,5.152]],["title/classes/Clear.html",[36,0.13,324,2.283]],["body/classes/Clear.html",[3,0.211,4,0.211,5,0.211,7,0.317,8,0.681,9,1.524,10,1.892,13,0.325,14,0.896,15,0.022,16,0.281,19,0.315,20,1.147,24,0.965,29,0.556,35,2.135,36,0.247,41,0.015,42,0.015,44,0.681,50,1.921,52,2.078,56,0.455,59,0.455,60,0.388,61,0.326,62,1.68,63,1.945,66,1.348,67,1.348,69,0.421,71,2.016,72,2.016,134,1.525,236,2.031,321,3.309,324,4.132,325,2.644,326,2.269,327,4.018,328,4.106,329,3.887,330,3.86,331,2.149,332,2.421,333,2.644,334,3.517,335,2.644,336,3.895,337,3.859,338,2.922]],["title/classes/Delete.html",[36,0.13,337,2.283]],["body/classes/Delete.html",[3,0.207,4,0.207,5,0.207,7,0.314,8,0.669,9,1.538,10,1.881,13,0.328,14,0.937,15,0.022,16,0.278,19,0.313,20,1.138,24,0.949,29,0.554,35,1.578,36,0.249,41,0.015,42,0.015,44,0.669,50,1.908,52,2.043,56,0.447,59,0.447,60,0.382,61,0.321,62,1.673,63,1.977,66,1.326,67,1.326,69,0.414,71,1.999,72,1.999,134,1.512,236,2.017,321,3.363,324,3.59,325,2.6,326,1.677,327,3.996,328,4.067,329,2.873,331,2.134,332,2.381,333,2.6,334,3.919,335,2.6,336,4.032,337,4.267,338,3.844,339,3.796]],["title/components/DestroyHostComponent.html",[340,2.283,341,3.106]],["body/components/DestroyHostComponent.html",[3,0.196,4,0.196,5,0.196,7,0.302,11,0.989,12,1.707,13,0.233,15,0.022,16,0.196,19,0.196,20,1.105,21,3.459,22,0.665,23,2.631,29,0.303,30,0.972,33,0.756,36,0.128,40,2.993,41,0.014,42,0.014,56,0.576,59,0.422,60,0.601,61,0.303,127,1.292,134,0.948,135,1.184,141,1.405,146,1.253,147,0.948,171,2.456,173,3.066,174,2.032,204,3.347,208,2.832,225,2.76,259,3.066,340,4.044,341,5.502,342,4.171,343,5.56,344,5.97,345,4.888,346,3.808,347,5.56,348,3.586,349,3.066,350,4.888,351,5.332,352,4.888,353,4.171,354,4.888,355,5.56,356,2.616,357,5.502,358,4.209,359,5.56,360,4.209,361,4.888,362,4.519,363,3.586,364,3.7,365,4.88,366,4.395,367,5.97,368,4.171,369,4.888,370,4.209,371,3.347,372,4.729,373,4.171,374,3.7,375,3.586,376,2.456,377,2.715,378,3.586,379,3.586,380,3.586,381,3.586,382,3.061,383,4.888,384,2.078,385,5.97,386,3.586,387,2.456,388,2.456,389,3.586,390,2.715,391,3.061,392,3.586]],["title/interfaces/DestructorScope.html",[0,1.017,393,2.755]],["body/interfaces/DestructorScope.html",[0,1.112,2,1.873,3,0.218,4,0.218,5,0.218,7,0.324,11,0.66,13,0.25,15,0.022,16,0.218,19,0.32,22,0.541,23,2.143,29,0.495,30,1.042,31,2.146,33,0.839,36,0.142,41,0.015,42,0.015,48,1.112,50,1.243,56,0.469,59,0.469,60,0.401,61,0.336,69,0.434,127,1.385,134,1.385,135,2.056,174,1.655,181,2.307,189,3.014,203,2.727,235,1.56,269,2.727,284,2.143,331,2.26,346,3.59,393,4.714,394,4.474,395,3.398,396,5.203,397,3.59,398,3.968,399,5.002,400,4.474,401,3.981,402,3.968,403,4.474,404,4.474,405,4.474,406,3.398,407,4.714,408,5.671,409,5.523,410,3.014,411,3.398,412,3.398,413,2.727,414,4.474,415,4.474,416,3.398,417,5.002,418,4.474,419,3.014,420,2.727,421,3.398,422,2.727,423,3.014,424,3.398,425,3.398,426,3.398,427,3.398,428,3.398,429,3.398]],["title/interfaces/FontIconsConfig.html",[0,1.017,430,2.493]],["body/interfaces/FontIconsConfig.html",[0,1.35,2,1.307,3,0.152,4,0.152,5,0.152,7,0.172,8,0.49,11,0.46,12,1.424,13,0.132,14,0.724,15,0.022,16,0.31,18,2.62,19,0.324,22,0.555,24,1.019,29,0.542,30,1.128,31,1.913,33,1.292,35,1.695,41,0.012,42,0.012,44,0.852,61,0.344,69,0.686,88,0.656,101,0.917,118,2.8,123,1.395,126,1.495,135,1.346,140,1.155,141,2.222,145,1.902,146,0.97,147,0.734,236,1.346,292,2.195,298,1.742,326,1.802,331,1.981,356,1.307,430,3.647,431,1.902,432,4.528,433,4.274,434,3.658,435,3.977,436,4.061,437,3.087,438,4.031,439,3.658,440,3.658,441,3.658,442,1.902,443,2.793,444,1.902,445,1.742,446,2.102,447,3.087,448,2.102,449,3.943,450,3.31,451,3.558,452,3.884,453,1.902,454,1.902,455,2.102,456,2.102,457,2.102,458,2.793,459,2.102,460,2.102,461,2.558,462,2.793,463,1.902,464,2.793,465,1.902,466,2.793,467,3.647,468,2.793,469,1.902,470,3.087,471,3.087,472,4.197,473,3.087,474,2.102,475,3.087,476,2.102,477,2.102,478,2.793,479,2.558,480,3.647,481,3.087,482,2.102,483,2.102,484,3.658,485,2.8,486,3.31,487,2.102,488,3.087,489,3.087,490,4.031,491,2.102,492,2.102,493,2.102,494,2.102,495,2.102,496,2.102,497,2.102,498,2.102,499,2.102,500,2.102,501,2.102]],["title/interfaces/HoverContext.html",[0,1.017,502,2.755]],["body/interfaces/HoverContext.html",[0,0.85,2,1.431,3,0.166,4,0.166,5,0.166,7,0.188,11,0.504,12,1.521,13,0.145,15,0.022,16,0.278,19,0.238,20,1.012,21,1.762,22,0.8,31,1.734,33,0.641,36,0.109,41,0.013,42,0.013,69,0.555,83,1.736,123,1.528,125,2.302,135,1.68,146,1.062,147,0.804,157,2.468,173,1.907,174,1.264,184,2.302,195,2.302,208,2.948,225,1.343,236,1.68,241,2.394,259,2.732,271,2.614,349,1.907,358,3.296,360,2.302,362,3.296,364,3.296,365,2.302,366,3.192,371,2.082,374,2.302,376,2.082,377,3.296,384,3.407,388,2.082,485,1.762,502,3.851,503,2.595,504,4.342,505,4.741,506,4.769,507,3.717,508,5.018,509,3.717,510,3.717,511,5.018,512,5.681,513,5.377,514,2.595,515,3.717,516,2.595,517,2.302,518,3.851,519,3.717,520,2.595,521,3.717,522,3.717,523,2.595,524,2.595,525,3.717,526,2.595,527,2.595,528,4.342,529,3.717,530,5.599,531,4.342,532,2.595,533,2.595,534,2.595,535,2.595,536,3.296,537,2.595,538,3.717,539,2.595,540,4.342,541,2.595,542,2.302,543,2.595,544,3.851,545,3.717,546,3.296,547,2.595,548,2.595,549,2.595,550,2.595,551,2.595,552,2.595,553,2.302,554,2.595,555,2.595,556,2.595,557,2.595,558,2.595,559,2.595,560,2.595,561,2.595,562,2.595,563,2.595,564,2.595,565,2.595,566,2.595,567,2.595,568,2.595,569,2.595,570,4.741,571,4.741,572,4.741,573,4.741,574,4.741,575,4.741,576,4.741,577,4.741,578,2.595]],["title/directives/HoverDirective.html",[384,2.109,388,2.493]],["body/directives/HoverDirective.html",[0,0.714,3,0.14,4,0.14,5,0.14,7,0.158,11,0.423,12,1.339,13,0.261,15,0.022,16,0.251,19,0.21,20,0.915,21,1.481,22,0.745,30,1.016,31,1.916,33,0.539,36,0.091,41,0.011,42,0.011,56,0.739,59,0.452,60,0.386,61,0.432,69,0.502,83,1.762,123,1.284,125,1.935,127,1.013,135,1.969,146,0.893,147,0.676,157,2.337,171,1.751,173,2.405,174,1.594,184,1.935,195,1.935,208,2.666,222,1.694,225,1.694,236,1.519,241,2.406,259,1.603,271,2.578,349,2.405,358,4.147,360,1.935,362,2.902,364,1.935,365,1.935,366,2.886,371,1.751,374,1.935,376,1.751,377,1.935,384,3.333,387,1.751,388,2.626,485,2.222,502,2.902,503,2.181,504,3.272,505,4.909,506,4.976,507,2.181,508,3.272,509,2.181,510,2.181,511,4.675,512,5.819,513,5.091,514,2.181,515,3.927,516,2.181,517,1.935,518,3.483,519,4.675,520,4.364,521,4.909,522,4.909,523,2.181,524,2.181,525,3.272,526,2.181,527,2.181,528,3.927,529,3.272,530,5.891,531,4.675,532,2.181,533,2.181,534,2.181,535,2.181,536,3.483,537,2.181,538,4.364,539,2.181,540,3.927,541,2.181,542,1.935,543,2.181,544,4.515,545,4.909,546,4.354,547,3.927,548,3.272,549,4.364,550,2.181,551,2.181,552,2.181,553,3.483,554,3.927,555,3.272,556,4.364,557,2.181,558,2.181,559,2.181,560,2.181,561,2.181,562,2.181,563,2.181,564,2.181,565,2.181,566,2.181,567,2.181,568,2.181,569,2.181,570,4.364,571,4.364,572,4.364,573,4.364,574,4.364,575,4.364,576,4.364,577,4.364,578,2.181,579,3.272,580,3.834,581,3.272,582,3.834,583,3.834,584,3.834,585,3.834,586,3.834,587,3.834,588,3.834,589,2.556,590,2.556,591,2.556]],["title/interfaces/IconsConfig.html",[0,1.017,458,2.493]],["body/interfaces/IconsConfig.html",[0,1.338,2,1.286,3,0.149,4,0.149,5,0.149,7,0.169,8,0.482,11,0.453,12,1.408,13,0.192,14,0.548,15,0.022,16,0.308,18,2.605,19,0.322,22,0.548,24,1.008,29,0.54,30,1.12,31,1.904,33,1.285,35,1.137,41,0.012,42,0.012,44,0.711,61,0.446,69,0.683,88,0.646,101,0.903,118,2.774,123,1.374,126,1.472,135,1.331,140,1.137,141,2.071,145,1.872,146,0.955,147,0.723,236,0.903,292,2.17,298,1.715,326,1.781,331,1.968,356,1.286,430,3.859,431,1.872,432,4.512,433,4.324,434,3.051,435,4.017,436,3.279,437,2.07,438,4,439,3.625,440,3.625,441,3.625,442,1.872,443,2.761,444,1.872,445,1.715,446,2.07,447,3.051,448,2.07,449,4.076,450,3.859,451,3.535,452,4.038,453,1.872,454,1.872,455,3.051,456,3.051,457,3.051,458,3.279,459,4,460,4,461,2.529,462,2.761,463,1.872,464,2.761,465,1.872,466,2.761,467,3.619,468,2.761,469,1.872,470,3.051,471,3.051,472,4.176,473,3.051,474,2.07,475,3.051,476,2.07,477,2.07,478,2.761,479,2.529,480,3.619,481,3.051,482,2.07,483,2.07,484,3.625,485,2.774,486,3.279,487,2.07,488,3.051,489,3.051,490,4,491,2.07,492,2.07,493,2.07,494,2.07,495,2.07,496,2.07,497,2.07,498,2.07,499,2.07,500,2.07,501,2.07]],["title/directives/LinkDirective.html",[384,2.109,390,2.755]],["body/directives/LinkDirective.html",[3,0.111,4,0.111,5,0.111,7,0.246,8,0.358,9,1.01,11,0.336,12,1.12,13,0.311,14,0.903,15,0.022,16,0.269,18,0.896,19,0.111,20,0.899,22,0.436,29,0.382,30,0.899,33,1.265,36,0.073,41,0.009,42,0.009,48,0.567,49,2.392,53,2.129,54,1.455,55,2.129,56,0.754,59,0.533,60,0.323,61,0.481,64,2.821,65,1.092,69,0.599,74,1.727,88,0.94,89,1.612,90,1.417,94,2.273,95,2.273,101,0.67,127,0.848,134,1.052,135,1.059,138,2.738,139,1.859,140,2.495,141,1.773,146,0.708,147,0.536,157,2.399,171,1.389,173,2.012,174,1.881,181,2.621,182,2.428,204,2.197,208,1.175,222,1.999,225,1.758,230,0.843,235,1.773,236,1.493,266,2.855,268,3.967,326,1.999,331,0.708,336,1.175,356,1.873,357,3.861,366,4.197,368,2.738,370,1.535,376,1.389,384,2.855,387,1.389,390,2.428,391,3.861,517,1.535,518,3.967,544,2.428,546,4.542,579,3.396,581,2.738,592,2.028,593,2.738,594,3.979,595,4.308,596,4.308,597,3.208,598,4.857,599,3.396,600,3.396,601,4.472,602,3.979,603,3.208,604,3.208,605,3.208,606,3.208,607,4.928,608,2.028,609,3.396,610,2.028,611,2.428,612,2.028,613,2.738,614,3.424,615,5.24,616,2.028,617,2.028,618,3.979,619,2.028,620,3.208,621,3.208,622,3.208,623,3.208,624,3.208,625,3.208,626,5.24,627,3.208,628,1.731,629,3.208,630,3.979,631,3.396,632,3.208,633,3.979,634,3.208,635,3.208,636,3.979,637,3.208,638,3.208,639,3.208,640,2.028,641,3.861,642,3.208,643,1.731,644,2.028,645,2.028,646,1.535,647,1.389,648,2.028,649,1.731,650,2.028,651,1.535,652,2.028,653,2.028,654,1.731,655,2.028,656,2.028,657,2.028,658,2.028,659,2.028,660,2.028,661,2.028,662,2.028,663,2.028,664,4.524,665,2.028,666,2.028,667,1.535,668,3.979,669,2.028,670,2.028,671,2.028,672,2.738,673,2.028,674,2.028,675,2.028,676,2.028,677,3.208,678,2.028,679,3.208,680,3.208,681,3.208,682,3.208,683,3.208,684,2.028,685,2.738,686,2.028,687,2.028,688,3.979,689,2.028,690,2.028,691,2.028,692,2.028,693,2.028,694,1.389,695,2.028,696,2.028,697,2.028,698,1.389,699,2.028,700,2.197,701,2.028,702,2.028,703,2.028,704,2.028,705,2.028,706,3.208,707,2.028,708,3.208,709,3.208,710,2.028,711,2.028,712,3.208,713,2.028,714,1.731,715,3.208,716,2.028,717,2.028,718,2.028,719,2.028,720,2.028,721,2.028]],["title/classes/LinkRegistrySelectors.html",[36,0.13,646,2.755]],["body/classes/LinkRegistrySelectors.html",[3,0.216,4,0.216,5,0.216,7,0.323,11,0.656,13,0.331,15,0.022,16,0.34,18,2.583,19,0.216,29,0.525,30,1.162,31,1.631,33,1.101,36,0.142,40,3.346,41,0.015,42,0.015,44,0.698,45,2.308,46,2.308,49,2.593,53,2.458,54,2.028,55,1.864,56,0.466,59,0.466,60,0.399,61,0.441,62,1.658,68,1.383,69,0.57,127,1.381,139,3.027,157,1.552,218,3.578,222,1.75,225,1.75,226,1.647,230,2.813,235,2.435,262,3.954,266,3.601,269,2.713,271,1.864,318,2.713,356,1.864,646,3.954,647,2.713,694,2.713,722,2.998,723,5.224,724,4.89,725,3.961,726,3.961,727,4.425,728,4.425,729,2.998,730,3.38,731,3.961,732,3.961,733,2.998,734,3.38,735,3.38,736,3.961,737,5.224,738,2.998]],["title/injectables/LinkRegistryState.html",[117,1.426,318,2.493]],["body/injectables/LinkRegistryState.html",[3,0.121,4,0.121,5,0.259,7,0.336,9,1.372,11,0.366,13,0.279,14,0.571,15,0.022,16,0.336,19,0.187,20,0.835,22,0.644,29,0.544,30,1.127,31,0.689,33,0.465,35,0.917,36,0.079,41,0.01,42,0.01,43,2.276,45,2.399,46,2.399,48,0.958,49,2.273,53,1.613,54,1.849,55,1.038,56,0.604,59,0.604,60,0.546,61,0.495,62,1.503,64,2.262,65,1.188,68,0.771,69,0.517,73,1.267,74,1.845,76,1.979,78,2.315,80,2.22,81,1.655,83,1.399,85,1.655,88,1.212,89,3.195,90,2.093,91,2.504,94,2.943,107,1.038,109,1.845,117,1.343,119,1.188,123,1.109,127,0.906,135,1.871,141,0.865,146,0.771,147,0.583,150,1.188,157,2.01,174,0.917,180,1.67,222,2.267,226,0.917,230,2.71,235,2.128,240,3.857,241,2.893,266,1.279,271,1.038,283,1.384,284,1.188,318,2.347,334,2.347,356,1.613,422,2.347,593,1.883,595,1.67,596,1.67,614,1.67,647,1.511,649,1.883,651,1.67,667,2.594,672,1.883,685,1.883,698,1.511,700,2.347,724,1.67,727,1.67,728,2.594,729,1.67,733,1.67,738,1.67,739,1.67,740,2.925,741,2.925,742,3.427,743,2.925,744,2.925,745,2.925,746,4.738,747,2.925,748,5.669,749,2.925,750,2.207,751,2.925,752,2.925,753,2.207,754,2.925,755,4.378,756,2.925,757,2.207,758,2.925,759,2.925,760,2.925,761,2.15,762,2.925,763,2.925,764,2.925,765,2.207,766,3.587,767,3.883,768,2.925,769,3.427,770,3.427,771,2.207,772,5.13,773,1.883,774,1.883,775,3.427,776,4.738,777,1.883,778,1.883,779,2.925,780,2.925,781,1.883,782,1.883,783,2.925,784,1.883,785,1.883,786,3.427,787,3.427,788,2.207,789,2.207,790,2.207,791,2.925,792,1.883,793,1.883,794,2.207,795,1.883,796,1.883,797,1.883,798,1.883,799,1.384,800,1.883,801,1.883,802,1.883,803,1.883,804,2.207,805,3.427,806,2.207,807,3.427,808,2.207,809,1.67,810,2.207,811,2.207,812,3.427,813,1.883,814,2.207,815,2.207,816,2.207,817,2.207,818,2.207,819,2.207,820,2.207,821,2.207,822,2.207,823,2.207]],["title/classes/LoadFromYaml.html",[36,0.13,85,1.271]],["body/classes/LoadFromYaml.html",[3,0.193,4,0.193,5,0.366,7,0.299,8,0.623,9,1.081,10,1.044,13,0.169,14,0.807,15,0.022,16,0.302,19,0.34,20,0.962,22,0.481,24,0.884,29,0.555,36,0.222,41,0.014,42,0.014,43,2.422,44,0.623,45,2.139,46,2.139,47,1.47,48,1.352,49,2.475,50,2.004,51,2.439,53,2.597,54,1.63,55,2.278,56,0.416,58,2.139,59,0.416,60,0.356,61,0.299,62,1.554,63,1.43,64,2.606,65,1.904,66,1.235,67,1.235,68,1.235,69,0.386,70,2.049,71,2.171,72,2.171,73,1.79,74,3.603,75,1.47,76,1.235,77,1.563,78,2.041,79,1.47,80,2.774,81,1.235,82,2.139,83,1.044,84,2.836,85,1.691,86,2.139,87,2.139,88,1.553,89,2.773,90,1.563,91,1.563,92,2.218,93,2.218,94,2.432,95,1.777,96,2.218,97,2.218,824,3.018,825,3.536]],["title/classes/LoadFromYaml-1.html",[36,0.109,85,1.067,98,1.644]],["body/classes/LoadFromYaml-1.html",[3,0.194,4,0.194,5,0.375,7,0.3,8,0.624,9,1.082,10,1.046,13,0.169,14,0.846,15,0.022,16,0.265,19,0.34,20,0.963,22,0.482,24,0.885,29,0.555,36,0.222,41,0.014,42,0.014,43,2.458,44,0.624,47,1.473,48,1.354,50,2.005,51,2.441,54,1.631,56,0.417,58,2.141,59,0.417,60,0.356,61,0.299,62,1.555,63,1.046,66,1.237,67,1.237,68,1.237,69,0.386,71,2.172,72,2.172,73,1.792,75,1.473,76,1.237,77,1.565,78,1.792,79,1.473,80,2.774,81,1.237,82,2.141,83,1.631,84,3,85,1.693,86,2.441,87,2.441,88,1.582,99,2.141,100,2.141,101,2.21,102,2.974,103,2.609,105,2.052,106,3.935,107,1.667,108,2.795,109,1.907,110,1.907,824,3.023,826,3.542]],["title/classes/LoadMarkdown.html",[36,0.13,110,1.959]],["body/classes/LoadMarkdown.html",[3,0.191,4,0.191,5,0.374,7,0.297,8,0.617,9,1.073,10,1.033,13,0.167,14,0.842,15,0.022,16,0.263,19,0.338,20,0.955,22,0.476,24,0.874,29,0.554,36,0.221,41,0.014,42,0.014,43,2.454,44,0.617,47,1.454,48,1.342,50,1.998,51,2.425,52,1.883,54,1.621,56,0.412,58,2.123,59,0.412,60,0.352,61,0.296,62,1.638,63,1.033,66,1.222,67,1.222,68,1.222,69,0.382,71,2.163,72,2.163,73,1.777,75,1.454,76,1.222,77,1.546,78,1.777,79,1.454,80,2.685,81,1.222,82,2.123,83,1.745,84,2.992,85,1.222,86,2.425,87,2.425,88,1.6,99,2.123,100,2.123,101,2.284,102,3.334,103,2.587,105,2.027,106,3.797,107,1.646,108,3.141,109,2.587,110,2.587,827,2.986]],["title/classes/Navigate.html",[36,0.13,89,1.829]],["body/classes/Navigate.html",[3,0.192,4,0.192,5,0.339,7,0.298,8,0.621,9,1.077,10,1.04,13,0.168,14,0.656,15,0.022,16,0.301,19,0.339,20,0.959,22,0.479,24,0.88,29,0.555,36,0.222,41,0.014,42,0.014,43,2.369,44,0.621,45,2.132,46,2.132,47,1.463,48,1.348,49,2.562,50,2.001,51,2.433,52,1.895,53,2.92,54,1.626,55,2.271,56,0.415,58,2.132,59,0.415,60,0.354,61,0.297,62,1.641,63,1.626,64,3.189,65,1.895,66,1.229,67,1.229,68,1.229,69,0.384,70,2.039,71,2.168,72,2.168,73,1.784,74,3.451,75,1.463,76,1.229,77,1.555,78,2.036,79,1.463,80,2.688,81,1.229,82,2.132,83,1.04,84,2.433,85,1.229,86,1.555,87,1.555,88,1.551,89,3.221,90,2.132,91,2.132,92,3.027,93,3.027,94,2.977,95,2.425,96,3.027,97,3.027,827,3.004]],["title/classes/ResourceRegistrySelectors.html",[36,0.13,828,3.106]],["body/classes/ResourceRegistrySelectors.html",[3,0.124,4,0.124,5,0.124,7,0.321,8,0.401,11,0.377,13,0.325,14,0.477,15,0.022,16,0.263,19,0.284,29,0.484,30,1.304,31,2.116,33,1.35,36,0.081,40,3.71,41,0.01,42,0.01,44,0.401,49,1.583,54,1.937,56,0.674,59,0.674,60,0.576,61,0.484,62,1.704,68,0.794,69,0.467,83,1.915,88,1.353,99,2.613,100,2.613,101,1.413,102,2.8,103,1.888,108,2.695,127,0.927,134,0.601,139,3.655,140,0.945,141,1.374,214,1.72,218,2.402,220,3.296,222,2.531,225,1.004,226,0.945,230,2.878,235,1.678,262,4.16,266,4.072,271,1.65,319,1.557,698,1.557,700,2.402,714,1.94,722,1.72,730,1.94,735,1.94,738,1.72,799,3.957,828,2.993,829,2.993,830,3.507,831,3.507,832,5.914,833,3.507,834,4.909,835,4.813,836,2.273,837,3.654,838,3.507,839,2.273,840,5.18,841,3.507,842,2.273,843,3.654,844,3.507,845,2.273,846,5.465,847,3.507,848,4.281,849,2.273,850,4.281,851,3.507,852,2.273,853,3.507,854,2.273,855,1.72,856,3.654,857,3.654,858,1.94,859,1.94,860,1.94,861,4.281,862,3.507,863,4.813,864,4.813,865,2.273,866,2.273,867,2.993,868,2.273,869,3.507,870,2.273,871,4.281,872,4.281,873,2.273,874,4.281,875,2.273]],["title/injectables/ResourceRegistryState.html",[117,1.426,319,2.493]],["body/injectables/ResourceRegistryState.html",[3,0.139,4,0.139,5,0.314,7,0.355,9,1.467,11,0.423,13,0.274,14,0.625,15,0.022,16,0.326,19,0.139,20,0.507,22,0.694,25,3.267,29,0.548,30,1.185,33,0.807,36,0.091,41,0.011,42,0.011,43,2.343,48,1.069,54,1.852,56,0.645,59,0.645,60,0.578,61,0.504,62,1.368,68,0.891,69,0.418,73,1.415,76,2.082,78,2.398,80,2.336,81,1.784,83,1.508,85,1.784,88,1.293,91,2.539,99,2.539,100,2.539,101,1.517,106,2.218,107,1.2,108,2.403,109,2.749,110,3.094,117,1.5,119,1.373,123,1.281,127,1.012,135,1.897,146,0.891,147,0.674,150,1.373,157,0.999,164,1.747,180,1.93,222,2.418,226,1.06,230,2.789,235,2.144,240,4.007,241,3.006,283,1.6,284,1.373,319,2.622,422,3.498,506,2.898,739,1.93,740,3.267,741,3.267,743,3.267,744,3.267,745,3.267,747,3.267,749,3.267,751,3.267,752,3.267,754,3.267,755,4.671,756,3.267,758,3.267,759,3.267,760,3.267,761,2.401,762,3.267,763,3.267,764,3.267,766,3.922,767,4.747,768,4.359,773,2.177,774,2.177,777,2.177,778,2.177,783,3.267,784,2.177,785,2.177,791,3.267,792,2.177,793,2.177,795,2.177,796,2.177,797,2.177,798,3.267,799,2.401,800,2.177,801,2.177,802,2.177,829,2.177,834,1.93,855,1.93,867,2.177,876,3.267,877,5.816,878,2.55,879,2.55,880,2.55,881,3.828,882,3.828,883,2.55,884,2.55,885,2.177,886,2.55,887,2.55,888,2.55,889,2.55,890,2.55,891,2.55]],["title/classes/ScopedDestructorSubject.html",[36,0.13,423,2.755]],["body/classes/ScopedDestructorSubject.html",[0,1.099,3,0.215,4,0.215,5,0.215,7,0.321,10,1.162,13,0.278,15,0.022,16,0.215,19,0.318,22,0.707,23,2.799,29,0.492,30,0.782,31,2.067,33,0.829,36,0.141,41,0.015,42,0.015,44,0.693,48,1.453,50,1.623,56,0.463,59,0.463,60,0.396,61,0.332,69,0.429,134,1.54,135,1.717,174,1.635,181,2.279,189,2.977,203,2.694,235,2.038,269,2.694,284,2.118,331,2.165,346,3.561,393,4.879,394,4.438,395,3.357,396,5.112,397,2.694,398,2.977,399,3.357,400,3.357,402,2.977,403,3.357,404,3.357,405,4.972,406,3.357,407,5.012,408,5.978,409,5.501,410,2.977,411,3.357,412,3.357,413,2.694,414,4.438,415,4.438,416,3.357,417,5.651,418,5.29,419,3.936,420,3.561,421,4.438,422,3.561,423,3.936,424,4.438,425,4.438,426,3.357,427,3.357,428,3.357,429,3.357,892,3.933]],["title/interfaces/SelectOptions.html",[0,1.017,893,3.106]],["body/interfaces/SelectOptions.html",[0,1.047,2,1.763,3,0.205,4,0.311,5,0.205,7,0.232,11,0.621,12,1.758,13,0.271,15,0.022,16,0.347,19,0.311,22,0.509,23,2.017,29,0.48,30,1.001,31,1.775,33,1.198,41,0.015,42,0.015,61,0.48,69,0.62,95,3.352,134,0.99,146,1.308,147,0.99,150,2.71,174,2.527,181,2.916,193,4.303,194,4.852,196,3.197,210,4.296,211,3.197,225,2.224,226,1.557,230,2.363,241,1.763,268,4.303,271,1.763,284,2.71,291,2.835,292,2.017,298,3.158,351,3.197,356,1.763,371,3.893,397,2.565,420,3.447,435,2.916,461,2.35,542,2.835,729,2.835,761,2.35,767,4.601,893,5.187,894,3.197,895,5.187,896,6.53,897,5.033,898,4.852,899,5.033,900,3.746,901,5.033,902,3.746,903,3.197,904,2.835,905,4.296,906,3.746,907,3.746,908,3.746,909,2.835,910,3.746,911,3.197,912,3.746,913,3.746,914,5.033,915,3.746,916,6.078,917,3.746,918,2.835,919,3.746,920,3.746,921,3.746,922,3.746,923,3.746,924,3.746,925,3.746,926,3.746,927,3.197,928,3.746,929,3.746,930,3.746,931,3.746,932,3.746]],["title/classes/Set.html",[36,0.13,236,1.202]],["body/classes/Set.html",[3,0.265,4,0.265,5,0.265,7,0.368,8,1.212,9,1.328,10,1.434,13,0.231,14,0.874,15,0.022,16,0.265,19,0.265,22,0.809,24,1.214,29,0.41,36,0.174,41,0.017,42,0.017,44,0.856,50,1.857,56,0.572,59,0.572,60,0.489,61,0.41,66,1.696,67,1.696,69,0.53,71,1.696,72,1.696,140,2.908,215,4.073,216,4.073,220,4.403,236,1.963,239,5.071,335,4.073,933,4.144,934,4.856,935,4.856,936,4.144]],["title/classes/Set-1.html",[36,0.109,98,1.644,236,1.008]],["body/classes/Set-1.html",[3,0.204,4,0.204,5,0.204,7,0.311,8,0.659,9,1.533,10,1.872,13,0.331,14,0.959,15,0.022,16,0.275,19,0.31,20,1.129,24,0.935,29,0.551,35,1.555,36,0.248,41,0.015,42,0.015,44,0.659,50,1.896,52,2.013,56,0.44,59,0.44,60,0.376,61,0.316,62,1.667,63,1.969,66,1.306,67,1.306,69,0.408,71,1.984,72,1.984,134,1.725,236,2.238,321,3.351,324,3.563,325,2.561,326,1.652,327,4.094,328,4.056,329,2.831,331,2.121,332,2.346,333,2.561,334,3.89,335,3.443,336,4.056,337,3.81,338,2.831,937,3.74]],["title/classes/SnapshotObserver.html",[36,0.13,938,3.106]],["body/classes/SnapshotObserver.html",[3,0.211,4,0.211,5,0.211,7,0.357,11,0.64,13,0.184,15,0.022,16,0.211,19,0.211,22,0.698,29,0.434,30,1.223,33,0.814,36,0.138,41,0.015,42,0.015,44,0.681,56,0.68,59,0.605,60,0.517,61,0.434,69,0.421,127,1.357,134,1.922,135,2.031,157,2.012,204,3.517,235,2.012,271,3.163,284,2.078,293,2.922,299,5.737,331,1.348,413,3.517,420,4.213,694,3.517,761,4.336,809,4.369,909,3.887,918,3.887,938,4.383,939,5.251,940,3.294,941,5.135,942,5.135,943,5.135,944,5.135,945,5.771,946,5.771,947,5.135,948,3.86,949,6.152,950,5.771,951,3.86,952,5.135,953,5.135,954,3.86,955,4.926,956,3.86,957,3.86,958,3.86,959,3.86,960,5.771,961,5.771]],["title/classes/StorageSelectors.html",[36,0.13,962,3.106]],["body/classes/StorageSelectors.html",[3,0.213,4,0.213,5,0.213,7,0.241,11,0.647,14,0.789,15,0.022,16,0.317,19,0.213,30,1.361,33,1.091,36,0.208,40,3.558,41,0.015,42,0.015,44,0.689,56,0.61,59,0.61,60,0.584,61,0.437,62,1.711,127,1.368,134,1.368,218,3.545,222,2.287,225,2.287,226,1.624,235,2.642,320,2.675,321,3.44,327,3.878,328,3.906,332,2.451,336,2.999,413,3.545,911,3.334,918,2.957,962,4.418,963,3.906,964,5.176,965,2.999,966,6.181,967,5.176,968,5.176,969,3.906,970,4.418,971,4.418,972,5.843,973,5.176,974,5.176,975,5.176,976,3.906,977,6.181,978,5.176,979,5.176,980,3.906,981,5.176,982,3.906,983,3.906,984,3.906,985,3.906,986,3.906,987,5.176,988,3.906,989,3.906,990,3.906,991,3.906]],["title/injectables/StorageState.html",[117,1.426,320,2.493]],["body/injectables/StorageState.html",[3,0.155,4,0.155,5,0.155,7,0.333,9,0.635,11,0.471,13,0.294,15,0.022,16,0.327,19,0.155,22,0.387,28,2.152,29,0.545,30,1.138,33,0.874,35,2.381,36,0.175,40,2.637,41,0.012,42,0.012,56,0.634,59,0.634,60,0.576,61,0.455,62,1.785,63,1.225,98,1.531,117,1.626,119,1.531,127,1.096,134,1.423,135,2.038,141,1.114,147,0.751,150,1.531,157,1.114,193,2.152,222,2.164,226,1.182,230,2.239,231,3.541,235,1.919,236,2.218,237,3.541,239,3.14,240,3.872,303,3.541,320,3.688,321,3.504,324,3.75,326,2.379,327,2.602,328,3.85,331,2.088,332,2.602,336,3.12,337,3.75,370,3.14,631,2.427,698,1.947,700,2.841,803,4.18,809,2.152,965,2.404,970,4.887,971,4.887,972,4.887,992,2.843,993,4.149,994,4.149,995,5.982,996,4.149,997,2.843,998,4.149,999,4.149,1000,4.149,1001,2.843,1002,4.149,1003,4.149,1004,4.149,1005,2.843,1006,4.149,1007,4.596,1008,3.541,1009,3.541,1010,4.149,1011,2.843,1012,2.843,1013,2.843,1014,2.427,1015,2.843,1016,4.149,1017,4.149,1018,2.843,1019,2.843,1020,2.843,1021,2.843,1022,4.898,1023,4.898,1024,2.843,1025,4.898,1026,2.843,1027,2.843,1028,2.843,1029,4.149,1030,2.843,1031,2.843,1032,2.843,1033,2.843,1034,2.843,1035,2.843,1036,2.843]],["title/injectables/StyleComponentManagerService.html",[117,1.426,1037,3.106]],["body/injectables/StyleComponentManagerService.html",[3,0.16,4,0.16,5,0.16,7,0.262,11,0.703,13,0.304,15,0.022,16,0.16,18,1.876,19,0.232,20,0.583,22,0.678,23,1.58,28,4.137,29,0.539,30,1.153,31,0.916,33,1.222,36,0.178,41,0.012,42,0.012,44,0.879,56,0.346,59,0.5,60,0.295,61,0.248,69,0.596,75,2.074,95,3.318,117,1.663,119,1.58,127,1.122,146,1.025,147,0.776,155,2.222,156,2.222,157,1.954,208,1.7,241,1.381,259,1.841,274,2.505,283,4.08,291,2.222,292,1.58,331,1.483,340,4.468,342,5.637,349,1.841,372,4.389,373,2.505,396,2.222,398,4.137,402,3.775,485,2.89,536,3.213,614,2.222,641,5.551,654,2.505,694,2.907,876,3.623,904,4.389,927,2.505,965,3.698,1037,3.623,1038,3.623,1039,2.505,1040,4.988,1041,5.465,1042,2.935,1043,4.245,1044,2.935,1045,4.949,1046,6.925,1047,4.245,1048,4.245,1049,6.233,1050,2.935,1051,2.935,1052,2.935,1053,2.505,1054,4.257,1055,2.505,1056,2.505,1057,3.213,1058,2.505,1059,2.935,1060,2.935,1061,4.988,1062,4.245,1063,2.935,1064,2.935,1065,2.935,1066,2.935,1067,6.504,1068,2.935,1069,2.935,1070,2.935,1071,2.935,1072,2.935,1073,2.935,1074,2.935,1075,2.935,1076,2.935,1077,2.935,1078,2.935,1079,2.935,1080,2.935,1081,2.935,1082,2.935,1083,2.935,1084,2.935,1085,2.935,1086,2.505,1087,2.935,1088,2.935,1089,2.935,1090,2.935]],["title/interfaces/SvgIconResolverConfig.html",[0,1.017,1091,3.106]],["body/interfaces/SvgIconResolverConfig.html",[0,1.086,2,1.829,3,0.212,4,0.212,5,0.212,7,0.24,8,0.91,11,0.644,12,1.802,13,0.276,14,0.916,15,0.022,16,0.316,19,0.282,21,2.989,23,2.092,29,0.436,30,1.026,31,1.926,33,1.221,35,1.616,41,0.015,42,0.015,48,1.086,60,0.519,69,0.632,88,0.918,101,1.703,120,3.533,126,3.553,134,1.363,140,2.145,144,4.225,147,1.027,152,4.225,331,1.357,433,3.633,435,3.574,442,2.662,443,4.225,444,2.662,445,2.438,449,4.027,451,4.224,452,3.966,453,4.225,454,3.533,472,3.533,478,4.225,480,4.612,611,3.905,667,3.905,1091,4.942,1092,3.886,1093,5.159,1094,3.886,1095,3.886,1096,3.886,1097,3.886,1098,3.886,1099,3.886,1100,6.169,1101,3.886,1102,3.886,1103,3.886,1104,3.886,1105,3.886,1106,3.886]],["title/interfaces/SvgIconsConfig.html",[0,1.017,450,2.493]],["body/interfaces/SvgIconsConfig.html",[0,1.35,2,1.307,3,0.152,4,0.152,5,0.152,7,0.172,8,0.719,11,0.46,12,1.424,13,0.132,14,0.724,15,0.022,16,0.31,18,2.62,19,0.324,22,0.555,24,1.019,29,0.542,30,1.128,31,1.913,33,1.292,35,1.155,41,0.012,42,0.012,44,0.719,61,0.344,69,0.686,88,0.656,101,0.917,118,2.8,123,1.395,126,1.495,135,1.346,140,1.155,141,2.086,145,1.902,146,0.97,147,0.734,236,0.917,292,2.195,298,2.558,326,1.802,331,1.981,356,1.307,430,3.31,431,1.902,432,4.393,433,4.274,434,3.658,435,3.977,436,3.31,437,2.102,438,4.031,439,3.658,440,3.658,441,3.658,442,1.902,443,2.793,444,1.902,445,1.742,446,2.102,447,3.087,448,2.102,449,4.024,450,3.647,451,4.024,452,4.061,453,2.793,454,2.793,455,2.102,456,2.102,457,2.102,458,2.793,459,2.102,460,2.102,461,2.558,462,2.793,463,1.902,464,2.793,465,1.902,466,2.793,467,3.647,468,2.793,469,1.902,470,3.087,471,3.087,472,4.197,473,3.087,474,2.102,475,3.087,476,2.102,477,2.102,478,2.793,479,2.558,480,3.647,481,3.087,482,2.102,483,2.102,484,3.658,485,2.8,486,3.31,487,2.102,488,3.087,489,3.087,490,4.031,491,2.102,492,2.102,493,2.102,494,2.102,495,2.102,496,2.102,497,2.102,498,2.102,499,2.102,500,2.102,501,2.102]],["title/dependencies.html",[1107,2.607,1108,3.307]],["body/dependencies.html",[15,0.022,41,0.019,42,0.019,147,1.45,226,2.282,356,3.011,651,4.154,1108,4.843,1109,5.488,1110,5.488,1111,5.488,1112,5.488,1113,6.398,1114,5.488,1115,5.488]],["title/miscellaneous/enumerations.html",[1116,1.77,1117,3.729]],["body/miscellaneous/enumerations.html",[11,0.829,13,0.239,15,0.021,41,0.018,42,0.018,45,2.212,46,2.212,49,1.851,63,1.478,88,1.431,90,2.677,91,2.677,99,2.212,100,2.212,107,2.355,108,2.85,134,1.884,321,2.515,326,2.212,328,3.774,647,4.149,799,3.8,965,3.51,1008,5.56,1009,5.56,1116,2.9,1117,4.272,1118,3.789,1119,5.124,1120,5.17,1121,3.789,1122,4.272,1123,3.789,1124,3.789,1125,4.272,1126,5.005]],["title/index.html",[11,0.506,124,2.607,1127,3.054]],["body/index.html",[15,0.019,41,0.019,42,0.019,410,4.246,419,4.246,1128,6.48,1129,5.609,1130,5.609,1131,6.48,1132,5.609,1133,6.48,1134,6.48,1135,5.609]],["title/modules.html",[314,3.737]],["body/modules.html",[15,0.019,41,0.019,42,0.019,313,4.342,314,4.342,1136,5.737,1137,5.737,1138,5.737]],["title/overview.html",[1139,4.213]],["body/overview.html",[2,2.564,15,0.019,41,0.019,42,0.019,44,0.961,98,3.635,119,2.933,164,3.731,312,4.823,340,3.418,382,4.65,387,3.731,486,3.731,553,4.124,1108,4.124,1139,4.65,1140,5.448,1141,5.448,1142,5.448,1143,6.371,1144,5.448,1145,5.448,1146,5.448,1147,5.448,1148,5.448]],["title/properties.html",[12,1.526,1107,2.607]],["body/properties.html",[12,2.009,15,0.02,41,0.019,42,0.019,1149,5.751,1150,5.751]],["title/miscellaneous/typealiases.html",[1116,1.77,1151,4.369]],["body/miscellaneous/typealiases.html",[9,1.012,11,0.533,13,0.335,14,0.437,15,0.02,18,1.421,31,2.147,35,1.337,41,0.013,42,0.013,45,2.003,46,2.003,48,0.899,49,2.221,53,2.133,54,1.963,55,2.133,60,0.324,63,1.339,83,1.339,90,1.421,91,1.421,99,2.003,100,2.003,101,1.983,102,2.44,103,2.44,107,1.514,127,0.85,182,2.435,225,1.421,230,2.182,234,4.479,240,2.018,241,2.133,255,2.745,260,4.479,266,3.48,271,2.133,283,2.843,321,1.616,340,3.768,349,2.018,372,2.435,397,2.203,479,2.018,628,3.868,643,2.745,722,4.547,724,3.431,727,3.431,728,2.435,733,2.435,739,3.431,748,3.868,779,3.868,780,3.868,782,3.868,834,3.431,837,3.868,840,3.868,843,3.868,846,3.868,856,4.479,857,4.863,858,2.745,859,2.745,860,2.745,877,3.868,894,2.745,895,2.745,898,2.745,904,2.435,905,3.868,965,3.301,995,3.868,1007,2.745,1014,3.868,1038,2.745,1039,4.479,1045,3.868,1053,2.745,1054,3.868,1055,3.868,1056,2.745,1057,3.973,1058,2.745,1086,2.745,1116,1.864,1118,4.847,1119,5.391,1121,5.283,1122,3.868,1123,3.973,1124,2.435,1125,2.745,1152,3.217,1153,2.745,1154,3.868,1155,4.532,1156,4.532,1157,4.532,1158,4.532,1159,3.868,1160,5.127,1161,2.745,1162,3.868,1163,4.532,1164,4.532,1165,4.532,1166,5.248,1167,4.532,1168,3.217,1169,2.745,1170,3.217,1171,3.217,1172,4.479,1173,3.217,1174,3.217,1175,6.538,1176,3.217,1177,3.217,1178,4.532,1179,3.217,1180,3.217,1181,2.745,1182,2.745,1183,2.745,1184,2.745,1185,2.745,1186,2.745,1187,2.745,1188,2.745,1189,3.217,1190,3.217,1191,3.217,1192,4.532,1193,3.217,1194,3.217]],["title/miscellaneous/variables.html",[1116,1.77,1195,3.729]],["body/miscellaneous/variables.html",[8,0.93,9,1.458,11,0.389,13,0.326,14,0.717,15,0.022,18,1.587,22,0.717,24,1.318,41,0.011,42,0.011,45,1.587,46,1.587,47,2.034,49,1.809,54,1.445,62,0.586,63,0.693,70,1.359,78,1.328,79,1.815,83,1.061,88,1.032,90,1.036,91,1.587,94,1.805,99,1.587,100,1.587,101,1.441,105,1.359,108,1.69,120,3.613,121,2.002,122,3.066,126,1.263,127,0.62,133,2.002,134,1.897,139,1.359,141,2.812,148,2.002,149,3.066,150,1.263,151,3.066,152,2.46,153,3.066,154,2.002,155,1.775,156,1.775,174,1.815,215,1.606,216,1.606,230,0.975,235,0.919,236,0.774,285,3.726,292,1.934,293,1.775,312,1.775,325,1.606,326,1.587,331,1.944,333,1.606,346,1.606,353,2.002,366,1.471,407,1.775,431,1.606,432,2.46,433,3.069,435,2.835,436,1.606,445,1.471,449,2.254,451,1.471,461,2.254,462,2.46,463,1.606,464,2.46,465,1.606,466,2.46,467,2.46,468,2.46,469,1.606,479,1.471,595,2.719,596,2.719,598,2.002,599,2.002,600,2.002,601,2.002,609,3.066,611,1.775,613,2.002,734,2.002,761,1.471,781,3.066,799,2.254,813,2.002,855,2.719,885,3.066,903,2.002,909,1.775,933,3.066,936,2.002,939,2.002,940,3.066,955,3.066,965,2.53,1057,2.719,1116,1.359,1118,3.993,1119,5.156,1120,2.002,1121,4.943,1123,4.212,1124,1.775,1153,2.002,1154,2.002,1159,2.002,1160,4.502,1161,2.002,1162,3.066,1169,2.002,1172,4.502,1181,2.002,1182,2.002,1183,2.002,1184,2.002,1185,2.002,1186,2.002,1187,2.002,1188,2.002,1195,2.002,1196,2.345,1197,2.345,1198,3.592,1199,2.345,1200,3.592,1201,3.592,1202,3.592,1203,3.592,1204,3.592,1205,4.366,1206,3.592,1207,4.366,1208,4.366,1209,3.592,1210,4.893,1211,3.592,1212,2.345,1213,3.592,1214,4.366,1215,2.345,1216,4.366,1217,4.366,1218,2.345,1219,3.592,1220,4.366,1221,3.592,1222,4.366,1223,4.366,1224,2.345,1225,2.345,1226,3.592,1227,4.893,1228,2.345,1229,2.345,1230,3.592,1231,2.345,1232,2.345,1233,2.345,1234,2.345,1235,3.592,1236,2.345,1237,2.345,1238,4.893,1239,2.345,1240,5.565,1241,2.345,1242,2.345,1243,2.345,1244,2.345,1245,2.345,1246,3.592,1247,3.592,1248,2.345,1249,2.345,1250,5.565,1251,2.345,1252,3.592,1253,2.345,1254,2.345,1255,2.345,1256,3.592,1257,2.345,1258,2.345,1259,2.345,1260,2.345,1261,2.345,1262,2.345,1263,2.345,1264,2.345,1265,2.345,1266,2.345,1267,2.345,1268,2.345,1269,2.345,1270,2.345,1271,2.345,1272,2.345,1273,3.592,1274,2.345,1275,2.345,1276,2.345,1277,2.345,1278,2.345,1279,2.345,1280,2.345,1281,2.345,1282,2.345,1283,4.366,1284,2.345,1285,2.345,1286,2.345,1287,2.345,1288,2.345,1289,2.345,1290,2.345]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":370,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["1",{"_index":98,"title":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/Set-1.html":{}},"body":{"injectables/StorageState.html":{},"overview.html":{}}}],["1.0.0",{"_index":1150,"title":{},"body":{"properties.html":{}}}],["15.1.0",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["1920.98px",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1921px",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1145,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":1147,"title":{},"body":{"overview.html":{}}}],["3.7.6",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1146,"title":{},"body":{"overview.html":{}}}],["639.98px",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["640px",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":1148,"title":{},"body":{"overview.html":{}}}],["_data",{"_index":543,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["_state",{"_index":973,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["accessors",{"_index":584,"title":{},"body":{"directives/HoverDirective.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('clear",{"_index":329,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{}}}],["action('delete",{"_index":338,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{}}}],["action('load",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('navigate",{"_index":92,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["action('set",{"_index":335,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":752,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":756,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":749,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(clear",{"_index":996,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(delete",{"_index":1000,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(loadfromyaml",{"_index":764,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":882,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(navigate",{"_index":770,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["action(set",{"_index":237,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/StorageState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{}}}],["actiongroup",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["actiongroup('basehref",{"_index":936,"title":{},"body":{"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('linkregistry",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":105,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('storage",{"_index":333,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actions/actions",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["actiontyperegistry",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activatedroute",{"_index":618,"title":{},"body":{"directives/LinkDirective.html":{}}}],["actual_component",{"_index":392,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{},"classes/Add-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":889,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":768,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":81,"title":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":802,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adding",{"_index":1084,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["additional",{"_index":927,"title":{},"body":{"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{}}}],["addmany",{"_index":76,"title":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":747,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":795,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":743,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":751,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml",{"_index":744,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":754,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["affects",{"_index":623,"title":{},"body":{"directives/LinkDirective.html":{}}}],["afterviewinit",{"_index":355,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["alias",{"_index":1192,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1152,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":990,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["along",{"_index":539,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["already",{"_index":1073,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["altkey",{"_index":682,"title":{},"body":{"directives/LinkDirective.html":{}}}],["anchor",{"_index":663,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular",{"_index":787,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["angular/cdk",{"_index":286,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["angular/cdk/layout",{"_index":278,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["angular/cdk/overlay",{"_index":514,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/cdk/portal",{"_index":516,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/common",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":774,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":147,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{}}}],["angular/core/rxjs",{"_index":281,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["angular/material/icon",{"_index":442,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["angular/platform",{"_index":444,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["angular/router",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["anyentry",{"_index":830,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentry(state",{"_index":833,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentryquery",{"_index":837,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["anytext",{"_index":831,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":838,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyway",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":120,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/variables.html":{}}}],["apphref",{"_index":126,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["apphrefservice",{"_index":118,"title":{"injectables/AppHrefService.html":{}},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["apphrefservice.apphref",{"_index":482,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["apphrefsignal",{"_index":160,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["application",{"_index":485,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{}}}],["applicationref",{"_index":1048,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["apply",{"_index":437,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["applying",{"_index":1191,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["appref",{"_index":1076,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["appref.ondestroy",{"_index":1080,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["area'].includes(this.tagname",{"_index":665,"title":{},"body":{"directives/LinkDirective.html":{}}}],["arg",{"_index":302,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["args",{"_index":906,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["argument",{"_index":1194,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["arguments",{"_index":628,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":1057,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(arg",{"_index":305,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["assertininjectioncontext",{"_index":1050,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["assertininjectioncontext(registerstylecomponents",{"_index":1063,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["asset",{"_index":179,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["assets/icons",{"_index":469,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["asseturl",{"_index":172,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["asseturlpipe",{"_index":165,"title":{"pipes/AssetUrlPipe.html":{}},"body":{"pipes/AssetUrlPipe.html":{}}}],["associated",{"_index":418,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["async",{"_index":746,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["attach",{"_index":547,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attached",{"_index":531,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attaches",{"_index":424,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["attaching",{"_index":350,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["attr.href",{"_index":604,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.rel",{"_index":605,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.target",{"_index":606,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attribute",{"_index":626,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attributes",{"_index":688,"title":{},"body":{"directives/LinkDirective.html":{}}}],["automatically",{"_index":924,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["available",{"_index":1137,"title":{},"body":{"modules.html":{}}}],["await",{"_index":805,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["back",{"_index":1187,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":636,"title":{},"body":{"directives/LinkDirective.html":{}}}],["basehref",{"_index":220,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{}}}],["basehref(value",{"_index":221,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["basehref.endswith",{"_index":243,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["basehrefselectors",{"_index":214,"title":{"classes/BaseHrefSelectors.html":{}},"body":{"classes/BaseHrefSelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["basehrefselectors.basehref",{"_index":873,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["basehrefstate",{"_index":219,"title":{"injectables/BaseHrefState.html":{}},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{}}}],["bind",{"_index":696,"title":{},"body":{"directives/LinkDirective.html":{}}}],["boolean",{"_index":268,"title":{},"body":{"classes/BreakpointWatchState.html":{},"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{}}}],["bootstrap",{"_index":1141,"title":{},"body":{"overview.html":{}}}],["both",{"_index":498,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["bottom",{"_index":573,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["bound",{"_index":182,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["brand('linkid",{"_index":1290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand('resourceid",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":807,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["breakpoint",{"_index":260,"title":{},"body":{"classes/BreakpointWatchState.html":{},"miscellaneous/typealiases.html":{}}}],["breakpointobserver",{"_index":277,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpoints",{"_index":285,"title":{},"body":{"classes/BreakpointWatchState.html":{},"miscellaneous/variables.html":{}}}],["breakpoints$.pipe(map((state",{"_index":308,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpoints/.../breakpoints.ts",{"_index":1153,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["breakpoints/src/lib/breakpoints.ts",{"_index":1169,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["breakpoints/src/lib/observers.ts",{"_index":246,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpoints/src/lib/observers.ts:25",{"_index":263,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpoints/src/lib/observers.ts:35",{"_index":276,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpoints/src/lib/observers.ts:45",{"_index":272,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpoints/src/lib/observers.ts:8",{"_index":256,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpointstate",{"_index":253,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpointwatchstate",{"_index":245,"title":{"classes/BreakpointWatchState.html":{}},"body":{"classes/BreakpointWatchState.html":{}}}],["breakpointwatchstate(state",{"_index":309,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["browse",{"_index":1138,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":445,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["building",{"_index":96,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["builtin",{"_index":1123,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builtin_entry",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtin_type_values",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtinresourcetype",{"_index":855,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["builtinresourcetype.markdown",{"_index":867,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["builtinresourcetype.text",{"_index":869,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtinresourcetype.url",{"_index":875,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtintypes",{"_index":1154,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["button",{"_index":679,"title":{},"body":{"directives/LinkDirective.html":{}}}],["cached",{"_index":1273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback",{"_index":404,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["called",{"_index":291,"title":{},"body":{"classes/BreakpointWatchState.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{}}}],["case",{"_index":700,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["cases",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb",{"_index":403,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["cdk",{"_index":1128,"title":{},"body":{"index.html":{}}}],["cdkstatemodule",{"_index":313,"title":{"modules/CdkStateModule.html":{}},"body":{"modules/CdkStateModule.html":{},"modules.html":{}}}],["cdr",{"_index":210,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["cdr.markforcheck",{"_index":917,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["change",{"_index":193,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{}}}],["changedetectorref",{"_index":196,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["changes",{"_index":195,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["check",{"_index":274,"title":{},"body":{"classes/BreakpointWatchState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["checks",{"_index":264,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["child",{"_index":369,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"overview.html":{}}}],["cleanup",{"_index":396,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"injectables/StyleComponentManagerService.html":{}}}],["clear",{"_index":324,"title":{"classes/Clear.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{}}}],["clear(ctx",{"_index":994,"title":{},"body":{"injectables/StorageState.html":{}}}],["clears",{"_index":998,"title":{},"body":{"injectables/StorageState.html":{}}}],["click",{"_index":607,"title":{},"body":{"directives/LinkDirective.html":{}}}],["collects",{"_index":670,"title":{},"body":{"directives/LinkDirective.html":{}}}],["commands",{"_index":813,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":988,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["complete",{"_index":919,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["completes",{"_index":422,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["component",{"_index":340,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["component's",{"_index":653,"title":{},"body":{"directives/LinkDirective.html":{}}}],["component/directive/pipe",{"_index":354,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["component_template",{"_index":386,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["componentinstancemap",{"_index":1054,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["componentref",{"_index":372,"title":{},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["componentrefsfromtypes",{"_index":1045,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["components",{"_index":342,"title":{},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{}}}],["components.map((component",{"_index":1070,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["computed",{"_index":279,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["computedprevious",{"_index":198,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["computedprevious(this.apphref",{"_index":207,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["config",{"_index":472,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["configuration",{"_index":435,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["connectionpositionpair",{"_index":511,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["constructor(basehref",{"_index":934,"title":{},"body":{"classes/Set.html":{}}}],["constructor(entries",{"_index":114,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["constructor(id",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set-1.html":{}}}],["constructor(readonly",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["constructor(scope",{"_index":425,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["constructor(state",{"_index":252,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["constructor(url",{"_index":824,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["constructor(yaml",{"_index":111,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["container",{"_index":365,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["container.createcomponent(destroyhostcomponent",{"_index":378,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["containing",{"_index":298,"title":{},"body":{"classes/BreakpointWatchState.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconsConfig.html":{}}}],["content",{"_index":506,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/ResourceRegistryState.html":{}}}],["content(content",{"_index":524,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["context",{"_index":241,"title":{},"body":{"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":1029,"title":{},"body":{"injectables/StorageState.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["create(container",{"_index":361,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["createcomponent",{"_index":1051,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["createcomponent(component",{"_index":1089,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["created",{"_index":536,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["createexternalurl",{"_index":649,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["createexternalurl(entry.url",{"_index":820,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["createexternalurl(link.url",{"_index":703,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createinternalurl",{"_index":650,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createinternalurl(injector",{"_index":701,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createlinkid('@@__empty__",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createoverlay",{"_index":564,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["createsvgiconresolver",{"_index":447,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["createsvgiconresolver(config",{"_index":1096,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["creating",{"_index":1086,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["css",{"_index":183,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["ctrlkey",{"_index":680,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ctx",{"_index":240,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.getstate()[id",{"_index":804,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":792,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["ctx.setstate",{"_index":1034,"title":{},"body":{"injectables/StorageState.html":{}}}],["ctx.setstate(basehref",{"_index":244,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["current",{"_index":139,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentscriptel",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentscriptpath",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":1172,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["custom:${t",{"_index":1173,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["custom_entry",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_entry_type",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_type_prefix",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customresourceentry",{"_index":1156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["customresourcetype",{"_index":1157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["data",{"_index":83,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data(data",{"_index":533,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["dataquery",{"_index":840,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["date",{"_index":560,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["deals",{"_index":666,"title":{},"body":{"directives/LinkDirective.html":{}}}],["declarations",{"_index":1140,"title":{},"body":{"overview.html":{}}}],["decorators",{"_index":222,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["default",{"_index":141,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["default_font_icons_config",{"_index":466,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["default_svg_icons_config",{"_index":468,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["defaultclasses",{"_index":436,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":150,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":861,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["defined",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["delete",{"_index":337,"title":{"classes/Delete.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{}}}],["delete(ctx",{"_index":999,"title":{},"body":{"injectables/StorageState.html":{}}}],["deletes",{"_index":1002,"title":{},"body":{"injectables/StorageState.html":{}}}],["dependencies",{"_index":1108,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["desktop",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destroy",{"_index":351,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/SelectOptions.html":{}}}],["destroy.ts",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destroy/destroy",{"_index":347,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["destroy/destructor",{"_index":394,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["destroy/on",{"_index":903,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/variables.html":{}}}],["destroyed",{"_index":1075,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["destroyhostcomponent",{"_index":341,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{}}}],["destructor",{"_index":407,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["destructor_cache",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destructorscope",{"_index":393,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["detach",{"_index":554,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["detection",{"_index":194,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["detector",{"_index":209,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["determines",{"_index":406,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["different",{"_index":695,"title":{},"body":{"directives/LinkDirective.html":{}}}],["directive",{"_index":384,"title":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["directives",{"_index":387,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"overview.html":{}}}],["directory",{"_index":451,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["directory/[namespace/]name.svg",{"_index":1095,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["disable",{"_index":911,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{}}}],["disconnects",{"_index":379,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["dispatch",{"_index":642,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dispatch(linkregistryactions.navigate",{"_index":662,"title":{},"body":{"directives/LinkDirective.html":{}}}],["display",{"_index":358,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["displayed",{"_index":522,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["docheck",{"_index":594,"title":{},"body":{"directives/LinkDirective.html":{}}}],["document.currentscript",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doesn't",{"_index":1072,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["dom",{"_index":344,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["domsanitizer",{"_index":443,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["don't",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["double",{"_index":1102,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["draft[id",{"_index":1036,"title":{},"body":{"injectables/StorageState.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["effect",{"_index":187,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["el",{"_index":360,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["element",{"_index":366,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["elementref",{"_index":376,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["emits",{"_index":420,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["emitted",{"_index":909,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["emitting",{"_index":920,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["empty",{"_index":611,"title":{},"body":{"directives/LinkDirective.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/variables.html":{}}}],["empty_link",{"_index":609,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":577,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["endhover",{"_index":556,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["entries",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["entry",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry(state",{"_index":841,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.extras",{"_index":817,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.markdown",{"_index":868,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.rel",{"_index":823,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.target",{"_index":822,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.text",{"_index":870,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.[field",{"_index":865,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":738,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["entryquery",{"_index":843,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["enum",{"_index":1126,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1117,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":1085,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["environmentinjector",{"_index":1049,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["environmentproviders",{"_index":438,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["equal",{"_index":956,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["err",{"_index":950,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":761,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["error(`cannot",{"_index":810,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["error(`no",{"_index":1020,"title":{},"body":{"injectables/StorageState.html":{}}}],["error(err",{"_index":947,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorobserver",{"_index":946,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":952,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":958,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["eslint",{"_index":983,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["eslint/ban",{"_index":986,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["etc",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":546,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["execute",{"_index":1135,"title":{},"body":{"index.html":{}}}],["executed",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executing",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":1074,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["existing",{"_index":614,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["existingclasses",{"_index":475,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["explicitly",{"_index":910,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["exports",{"_index":1142,"title":{},"body":{"overview.html":{}}}],["extends",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["external",{"_index":91,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["external_link_schema",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["externallinkentry",{"_index":779,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["extractbuiltinentrytype",{"_index":1158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extracts",{"_index":1174,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extras",{"_index":94,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":203,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["field",{"_index":832,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["field(state",{"_index":844,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["fieldquery",{"_index":846,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["filename",{"_index":755,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["first",{"_index":368,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["flexibleconnectedto(this.el",{"_index":568,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["folders",{"_index":454,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["font",{"_index":432,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["font_icons_config",{"_index":462,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["fonticons",{"_index":459,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["fonticonsconfig",{"_index":430,"title":{"interfaces/FontIconsConfig.html":{}},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["format",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forward",{"_index":1186,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":734,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["fragment",{"_index":598,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["full",{"_index":169,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/BreakpointWatchState.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":397,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["generated",{"_index":1130,"title":{},"body":{"index.html":{}}}],["get(_state",{"_index":967,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["get(url",{"_index":797,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["getcurrentscriptbasepath",{"_index":148,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["getentry",{"_index":735,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["getentry(state",{"_index":864,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield",{"_index":850,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield(id",{"_index":872,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getinstance",{"_index":1087,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["getinstancemap(appref",{"_index":1077,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["getlinkattributes(link",{"_index":697,"title":{},"body":{"directives/LinkDirective.html":{}}}],["gets",{"_index":694,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/SnapshotObserver.html":{},"injectables/StyleComponentManagerService.html":{}}}],["getstorage",{"_index":993,"title":{},"body":{"injectables/StorageState.html":{}}}],["getstorage(id",{"_index":1004,"title":{},"body":{"injectables/StorageState.html":{}}}],["getting",{"_index":124,"title":{"index.html":{}},"body":{"injectables/AppHrefService.html":{}}}],["given",{"_index":972,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["global",{"_index":876,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["globally",{"_index":742,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["graph",{"_index":1136,"title":{},"body":{"modules.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["handle",{"_index":544,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["handler's",{"_index":1193,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":1177,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":949,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["helper",{"_index":1055,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["history",{"_index":1183,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["historygo",{"_index":1188,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["holding",{"_index":231,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/StorageState.html":{}}}],["host",{"_index":357,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["host.component.ts",{"_index":348,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:14",{"_index":375,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:22",{"_index":363,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hostbinding",{"_index":640,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.href",{"_index":637,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.rel",{"_index":638,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.target",{"_index":639,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbindings",{"_index":603,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener",{"_index":517,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hostlistener('click",{"_index":634,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener('mouseout",{"_index":555,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlistener('mouseover",{"_index":548,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlisteners",{"_index":581,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hover",{"_index":505,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hovercontext",{"_index":502,"title":{"interfaces/HoverContext.html":{}},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hoverdirective",{"_index":388,"title":{"directives/HoverDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hra",{"_index":356,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{}}}],["hrahover",{"_index":520,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hrahover]'},{'name",{"_index":389,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hrahoverdata",{"_index":580,"title":{},"body":{"directives/HoverDirective.html":{}}}],["hralink",{"_index":391,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["href",{"_index":140,"title":{},"body":{"injectables/AppHrefService.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["href.actions",{"_index":242,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href.actions.ts",{"_index":933,"title":{},"body":{"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["href.actions.ts:7",{"_index":935,"title":{},"body":{"classes/Set.html":{}}}],["href.selectors.ts",{"_index":217,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.selectors.ts:12",{"_index":224,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.service",{"_index":201,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["href.service.ts",{"_index":122,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["href.service.ts:21",{"_index":143,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["href.service.ts:28",{"_index":137,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["href.service.ts:35",{"_index":130,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["href.state",{"_index":227,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.state.ts",{"_index":229,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href.state.ts:20",{"_index":238,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href/.../app",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["href/.../current",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["href/base",{"_index":216,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["href/src/lib/app",{"_index":121,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["href/src/lib/asset",{"_index":167,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["href/src/lib/current",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["html",{"_index":383,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["http",{"_index":783,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":773,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["icon",{"_index":433,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["iconresolver",{"_index":1093,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["icons",{"_index":452,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["icons/.../providers.ts",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icons/src/lib/providers.ts",{"_index":431,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["icons/src/lib/resolvers.ts",{"_index":1092,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["iconsconfig",{"_index":458,"title":{"interfaces/IconsConfig.html":{}},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["id",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["id,key",{"_index":974,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["identifier",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ie",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignore",{"_index":989,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["immediately",{"_index":421,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["immer",{"_index":1013,"title":{},"body":{"injectables/StorageState.html":{}}}],["implements",{"_index":204,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{}}}],["implicit",{"_index":508,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["imports",{"_index":322,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["improved",{"_index":760,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["increasechangecount(ctx",{"_index":1033,"title":{},"body":{"injectables/StorageState.html":{}}}],["increases",{"_index":1028,"title":{},"body":{"injectables/StorageState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"injectables/AppHrefService.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":293,"title":{},"body":{"classes/BreakpointWatchState.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["initial",{"_index":133,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["initial_app_href",{"_index":153,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["initialapphref",{"_index":158,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["initialize",{"_index":257,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["initializerfn",{"_index":490,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["inject",{"_index":146,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{}}}],["inject(apphrefservice",{"_index":495,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["inject(apphrefservice).apphref",{"_index":205,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["inject(breakpointobserver).observe(queries",{"_index":307,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["inject(changedetectorref",{"_index":211,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["inject(domsanitizer",{"_index":496,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["inject(elementref).nativeelement",{"_index":374,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(environmentinjector",{"_index":1069,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["inject(font_icons_config",{"_index":492,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["inject(httpclient",{"_index":785,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["inject(initial_app_href",{"_index":159,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["inject(injector",{"_index":654,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["inject(maticonregistry",{"_index":494,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["inject(ngzone",{"_index":790,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(overlay",{"_index":535,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(router",{"_index":788,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(store",{"_index":930,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(stylecomponentmanagerservice",{"_index":1064,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["inject(svg_icons_config",{"_index":497,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["inject(viewcontainerref",{"_index":541,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject>(elementref).nativeelement.tagname.tolowercase",{"_index":658,"title":{},"body":{"directives/LinkDirective.html":{}}}],["injectable",{"_index":117,"title":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["injectables",{"_index":119,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"overview.html":{}}}],["injectdestroy",{"_index":902,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["injection",{"_index":292,"title":{},"body":{"classes/BreakpointWatchState.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":145,"title":{},"body":{"injectables/AppHrefService.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["injectiontoken('initialapphref",{"_index":154,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken>('font_icons_config",{"_index":463,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken>('svg_icons_config",{"_index":465,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["injector",{"_index":641,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["injectors/.../on",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":1165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../select.ts",{"_index":1168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../snapshot",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/src/lib/on",{"_index":346,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select/select",{"_index":1189,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/select.ts",{"_index":894,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/snapshot",{"_index":939,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":786,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["input",{"_index":518,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["input('hrahover",{"_index":523,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hrahoverdata",{"_index":532,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hralink",{"_index":652,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inputs",{"_index":579,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inserted",{"_index":367,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["inside",{"_index":364,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["instance",{"_index":1046,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instance.destroy",{"_index":1083,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap",{"_index":1067,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap.get(component",{"_index":1088,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap.set(component",{"_index":1090,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap?.foreach((instance",{"_index":1082,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instances",{"_index":1053,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"overview.html":{}}}],["internal",{"_index":90,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["internal_link_schema",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internallinkentry",{"_index":780,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["interop",{"_index":282,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["invalid",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isanchorelement",{"_index":664,"title":{},"body":{"directives/LinkDirective.html":{}}}],["isbuiltintype(val",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdestructorscopelike(obj",{"_index":412,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["isobject",{"_index":414,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["isresourceurl",{"_index":668,"title":{},"body":{"directives/LinkDirective.html":{}}}],["it's",{"_index":132,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["items",{"_index":978,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["joined",{"_index":1104,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["joinpath(...segments",{"_index":1105,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["joinpath(directory",{"_index":1097,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["joins",{"_index":1099,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["js",{"_index":777,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["k",{"_index":714,"title":{},"body":{"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["keeping",{"_index":740,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["key",{"_index":336,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key,value",{"_index":970,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key:string",{"_index":1022,"title":{},"body":{"injectables/StorageState.html":{}}}],["keyof",{"_index":1059,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["largedesktop",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["latest",{"_index":299,"title":{},"body":{"classes/BreakpointWatchState.html":{},"classes/SnapshotObserver.html":{}}}],["legend",{"_index":382,"title":{},"body":{"components/DestroyHostComponent.html":{},"overview.html":{}}}],["length",{"_index":966,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["length(_state",{"_index":975,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["library",{"_index":1129,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":352,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["lifetime",{"_index":923,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["line",{"_index":984,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"modules/CdkStateModule.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link'].includes(this.tagname",{"_index":669,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.commands",{"_index":702,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.extras",{"_index":673,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.type",{"_index":684,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link/url",{"_index":674,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link?.type",{"_index":699,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link_registry_schema",{"_index":781,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["link_registry_schema.parse(data",{"_index":794,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["linkdirective",{"_index":390,"title":{"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["linkentry",{"_index":55,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid:'${id",{"_index":1289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistry",{"_index":782,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryactions",{"_index":645,"title":{},"body":{"directives/LinkDirective.html":{}}}],["linkregistrycontext",{"_index":748,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistrymodel",{"_index":724,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryquery",{"_index":727,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryselectors",{"_index":646,"title":{"classes/LinkRegistrySelectors.html":{}},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{}}}],["linkregistrystate",{"_index":318,"title":{"injectables/LinkRegistryState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{}}}],["links",{"_index":74,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["linktype",{"_index":647,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["linktype.external",{"_index":685,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["linktype.internal",{"_index":672,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["list",{"_index":303,"title":{},"body":{"classes/BreakpointWatchState.html":{},"injectables/StorageState.html":{}}}],["literal",{"_index":1043,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["load",{"_index":766,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":793,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":109,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":85,"title":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":784,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":110,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":881,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":87,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["loadyaml",{"_index":745,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":763,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["local",{"_index":1009,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["localstorage",{"_index":1018,"title":{},"body":{"injectables/StorageState.html":{}}}],["location",{"_index":479,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["location.ts",{"_index":1162,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["location/.../nothrow",{"_index":1161,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["location/src/lib/nothrow",{"_index":1181,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["makeenvironmentproviders",{"_index":439,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["makeenvironmentproviders([providefonticons(config?.fonticons",{"_index":500,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["manage",{"_index":1006,"title":{},"body":{"injectables/StorageState.html":{}}}],["manager",{"_index":1040,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["manager.registerstylecomponents(components",{"_index":1065,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["manager.service.ts",{"_index":1039,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["manager.service.ts:58",{"_index":1044,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["many",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["map",{"_index":283,"title":{},"body":{"classes/BreakpointWatchState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["map((action",{"_index":890,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":888,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["mapping",{"_index":254,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["maps",{"_index":1170,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mark",{"_index":897,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markchangeref",{"_index":186,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["markdown",{"_index":108,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(getfield",{"_index":847,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["markdown_entry",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markfn",{"_index":916,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markforcheck(options",{"_index":914,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marking",{"_index":912,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marks",{"_index":907,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["matches",{"_index":267,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["matchesany",{"_index":249,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["matchesbreakpoint",{"_index":250,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["matchesbreakpoint(breakpoint",{"_index":270,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["matchesquery",{"_index":251,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["matchesquery(query",{"_index":275,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":471,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["maticonregistry",{"_index":441,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["max",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["merged",{"_index":710,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergeextras(opt1",{"_index":711,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey",{"_index":713,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('fragment",{"_index":719,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('preservefragment",{"_index":720,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('queryparams",{"_index":717,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('queryparamshandling",{"_index":718,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('relativeto",{"_index":721,"title":{},"body":{"directives/LinkDirective.html":{}}}],["merges",{"_index":704,"title":{},"body":{"directives/LinkDirective.html":{}}}],["messages",{"_index":762,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":171,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["metakey",{"_index":683,"title":{},"body":{"directives/LinkDirective.html":{}}}],["method",{"_index":334,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"injectables/LinkRegistryState.html":{},"classes/Set-1.html":{}}}],["methods",{"_index":127,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["min",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1116,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mobile",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":1178,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["module",{"_index":312,"title":{"modules/CdkStateModule.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":314,"title":{"modules.html":{}},"body":{"modules/CdkStateModule.html":{},"modules.html":{}}}],["monotypeoperatorfunction",{"_index":899,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["mounted",{"_index":656,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouse",{"_index":545,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["mouseevent",{"_index":633,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouseout",{"_index":582,"title":{},"body":{"directives/HoverDirective.html":{}}}],["mouseover",{"_index":583,"title":{},"body":{"directives/HoverDirective.html":{}}}],["multiple",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BreakpointWatchState.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["nagivate",{"_index":620,"title":{},"body":{"directives/LinkDirective.html":{}}}],["name",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/typealiases.html":{}}}],["names",{"_index":261,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["namespace",{"_index":453,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["navigate",{"_index":89,"title":{"classes/Navigate.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["navigate(ctx",{"_index":769,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetoexternal(entry",{"_index":819,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetointernal(entry",{"_index":814,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigation",{"_index":97,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["never",{"_index":866,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":373,"title":{},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{}}}],["next",{"_index":918,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}}}],["next(value",{"_index":953,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["nextobserver",{"_index":945,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngafterviewinit",{"_index":380,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["ngdocheck",{"_index":675,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ngmodule",{"_index":316,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxs/store",{"_index":226,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{}}}],["ngxsmodule",{"_index":317,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxsmodule.forfeature([basehrefstate",{"_index":323,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxtension/computed",{"_index":199,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["ngzone",{"_index":775,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["no_error_sentinel",{"_index":957,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["no_error_sentinel_obj",{"_index":955,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":811,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["none",{"_index":359,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["notifies",{"_index":192,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["notifyonchange",{"_index":896,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["null",{"_index":189,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["nullable",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":977,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["nx",{"_index":1131,"title":{},"body":{"index.html":{}}}],["obj",{"_index":409,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obj.ondestroy",{"_index":416,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obje",{"_index":1031,"title":{},"body":{"injectables/StorageState.html":{}}}],["object",{"_index":331,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["object.values(arg",{"_index":306,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["object.values(rawbuiltinresourcetype",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objects",{"_index":1007,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":767,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["observable's",{"_index":922,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["observables",{"_index":353,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":941,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts",{"_index":940,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["observer.ts:18",{"_index":951,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:30",{"_index":954,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:38",{"_index":948,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["older",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["once",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/StyleComponentManagerService.html":{}}}],["onclick",{"_index":597,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick(event",{"_index":632,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ondestroy",{"_index":399,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["ondestroy(cb",{"_index":400,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["one",{"_index":265,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["onsameurlnavigation",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":1030,"title":{},"body":{"injectables/StorageState.html":{}}}],["operator",{"_index":913,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["opt1",{"_index":708,"title":{},"body":{"directives/LinkDirective.html":{}}}],["opt2",{"_index":709,"title":{},"body":{"directives/LinkDirective.html":{}}}],["opt2[key",{"_index":715,"title":{},"body":{"directives/LinkDirective.html":{}}}],["optional",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{}}}],["optionally",{"_index":733,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":95,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{}}}],["options?.injector",{"_index":1062,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["options?.notifyonchange",{"_index":915,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["originx",{"_index":570,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["originy",{"_index":572,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["otherwise",{"_index":269,"title":{},"body":{"classes/BreakpointWatchState.html":{},"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{}}}],["out",{"_index":553,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"overview.html":{}}}],["over",{"_index":538,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlay",{"_index":512,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref",{"_index":513,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.attach(portal",{"_index":563,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.detach",{"_index":562,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref?.dispose",{"_index":557,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayx",{"_index":574,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayy",{"_index":575,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["override",{"_index":707,"title":{},"body":{"directives/LinkDirective.html":{}}}],["overview",{"_index":1139,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["package",{"_index":1107,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":971,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["param1",{"_index":803,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/StorageState.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["params",{"_index":615,"title":{},"body":{"directives/LinkDirective.html":{}}}],["parse",{"_index":758,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":79,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["parts",{"_index":921,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pass",{"_index":1060,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["passed",{"_index":504,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["passthrough",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchable",{"_index":1182,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["patchable_platform_location_history_methods",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchableplatformlocationhistorymethod",{"_index":1159,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":152,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":1176,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["peer",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["performed",{"_index":631,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["pipe",{"_index":164,"title":{"pipes/AssetUrlPipe.html":{}},"body":{"pipes/AssetUrlPipe.html":{},"injectables/ResourceRegistryState.html":{},"overview.html":{}}}],["pipe(map((data",{"_index":800,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["pipe(takeuntil(injectdestroy",{"_index":932,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pipes",{"_index":166,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["pipetransform",{"_index":197,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["platform",{"_index":1160,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["pointed",{"_index":1003,"title":{},"body":{"injectables/StorageState.html":{}}}],["portal",{"_index":530,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["position",{"_index":540,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["positionstrategy",{"_index":566,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["prefix",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefixed",{"_index":170,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["prefixes",{"_index":178,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["preserve",{"_index":613,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["preservefragment",{"_index":599,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["prevhref",{"_index":206,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["previous",{"_index":200,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["private",{"_index":157,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["produce",{"_index":1012,"title":{},"body":{"injectables/StorageState.html":{}}}],["produce((draft",{"_index":1035,"title":{},"body":{"injectables/StorageState.html":{}}}],["produced",{"_index":247,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["promise",{"_index":772,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"properties.html":{}}}],["property",{"_index":184,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["protected",{"_index":185,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["provide",{"_index":488,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["provideappinitializer",{"_index":440,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["provided",{"_index":259,"title":{},"body":{"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["providedin",{"_index":155,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/variables.html":{}}}],["providefonticons(config",{"_index":487,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["provideicons(config",{"_index":499,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["provider",{"_index":434,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providers",{"_index":486,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"overview.html":{}}}],["provides",{"_index":484,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providesvgicons(config",{"_index":493,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providesvgicons(config?.svgicons",{"_index":501,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providing",{"_index":455,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["pure",{"_index":202,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["pushstate",{"_index":1185,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["queries",{"_index":262,"title":{},"body":{"classes/BreakpointWatchState.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":266,"title":{},"body":{"classes/BreakpointWatchState.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":723,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["querying",{"_index":659,"title":{},"body":{"directives/LinkDirective.html":{}}}],["querylink",{"_index":660,"title":{},"body":{"directives/LinkDirective.html":{}}}],["queryparams",{"_index":600,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["queryparamshandling",{"_index":601,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":107,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rawbuiltinresourcetype",{"_index":1120,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set-1.html":{},"injectables/StyleComponentManagerService.html":{}}}],["record",{"_index":255,"title":{},"body":{"classes/BreakpointWatchState.html":{},"miscellaneous/typealiases.html":{}}}],["ref",{"_index":1061,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["reference",{"_index":208,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["references",{"_index":1047,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["refine((val",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refs",{"_index":1058,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":402,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"injectables/StyleComponentManagerService.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registerdefaultfontsetclassesfactory",{"_index":474,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registerdefaultfontsetclassesfactory(inject(maticonregistry",{"_index":491,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registered",{"_index":398,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"injectables/StyleComponentManagerService.html":{}}}],["registering",{"_index":470,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registerstylecomponents",{"_index":1041,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["registerstylecomponents(components",{"_index":1042,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["registersvgiconresolverfactory",{"_index":481,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registration",{"_index":473,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"modules/CdkStateModule.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":778,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":116,"title":{},"body":{"classes/AddMany-1.html":{}}}],["registry.actions.ts:21",{"_index":115,"title":{},"body":{"classes/AddMany.html":{}}}],["registry.actions.ts:31",{"_index":113,"title":{},"body":{"classes/AddFromYaml-1.html":{}}}],["registry.actions.ts:32",{"_index":112,"title":{},"body":{"classes/AddFromYaml.html":{}}}],["registry.actions.ts:42",{"_index":826,"title":{},"body":{"classes/LoadFromYaml-1.html":{}}}],["registry.actions.ts:43",{"_index":825,"title":{},"body":{"classes/LoadFromYaml.html":{}}}],["registry.actions.ts:53",{"_index":827,"title":{},"body":{"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["registry.actions.ts:8",{"_index":104,"title":{},"body":{"classes/Add-1.html":{}}}],["registry.actions.ts:9",{"_index":57,"title":{},"body":{"classes/Add.html":{}}}],["registry.addsvgiconresolver(resolver",{"_index":483,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry.getdefaultfontsetclass",{"_index":476,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry.model",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":1119,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":722,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:103",{"_index":852,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:113",{"_index":854,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:16",{"_index":726,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["registry.selectors.ts:38",{"_index":842,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:48",{"_index":836,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:58",{"_index":845,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:71",{"_index":839,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:93",{"_index":849,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.setdefaultfontsetclass(...defaultclasses",{"_index":477,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry.state",{"_index":730,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":739,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["registry.state.ts:30",{"_index":879,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":878,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:47",{"_index":753,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:51",{"_index":880,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:57",{"_index":750,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:64",{"_index":884,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:68",{"_index":757,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:77",{"_index":883,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:81",{"_index":765,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:94",{"_index":771,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.ts",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registry/link",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":100,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rel",{"_index":595,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["relative",{"_index":621,"title":{},"body":{"directives/LinkDirective.html":{}}}],["relativeto",{"_index":602,"title":{},"body":{"directives/LinkDirective.html":{}}}],["reliable",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relurl",{"_index":874,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["remaining",{"_index":1190,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["remote",{"_index":84,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["removes",{"_index":1101,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["replacestate",{"_index":1184,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["replaceurl",{"_index":1287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replaysubject",{"_index":405,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["required",{"_index":467,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["requiresync",{"_index":311,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["reset",{"_index":1144,"title":{},"body":{"overview.html":{}}}],["resetapphref",{"_index":128,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["resets",{"_index":131,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["resolver",{"_index":478,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["resolvers",{"_index":448,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["resolves",{"_index":1094,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["resource",{"_index":101,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"modules/CdkStateModule.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_entry",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_id",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":885,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":886,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":103,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceentrypayload",{"_index":1163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":102,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":829,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":877,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":834,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors",{"_index":828,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.anyentry",{"_index":859,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.entry",{"_index":858,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.field",{"_index":860,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrystate",{"_index":319,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":106,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":856,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["responsetype",{"_index":798,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["restargs",{"_index":1164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["result",{"_index":712,"title":{},"body":{"directives/LinkDirective.html":{}}}],["result[key",{"_index":716,"title":{},"body":{"directives/LinkDirective.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieving",{"_index":964,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["returned",{"_index":857,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["root",{"_index":156,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":622,"title":{},"body":{"directives/LinkDirective.html":{}}}],["router",{"_index":776,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["routing",{"_index":593,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["run",{"_index":419,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["runininjectioncontext",{"_index":1052,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["runininjectioncontext(options.injector",{"_index":1066,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["running",{"_index":1132,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":284,"title":{},"body":{"classes/BreakpointWatchState.html":{},"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["same",{"_index":456,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["sanitizer",{"_index":480,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["sanitizer.bypasssecuritytrustresourceurl(url",{"_index":1098,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["schema",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":408,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scope.ondestroy",{"_index":427,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scopeddestructorsubject",{"_index":423,"title":{"classes/ScopedDestructorSubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["script",{"_index":149,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["script's",{"_index":151,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["script.ts",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["second",{"_index":706,"title":{},"body":{"directives/LinkDirective.html":{}}}],["seems",{"_index":411,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["segments",{"_index":1100,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["segments.join('/').replace(/\\/{2,}/g",{"_index":1106,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["select",{"_index":895,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["select$(selector",{"_index":929,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["select(selector",{"_index":931,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selected",{"_index":928,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selection",{"_index":926,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selectoptions",{"_index":893,"title":{"interfaces/SelectOptions.html":{}},"body":{"interfaces/SelectOptions.html":{}}}],["selector",{"_index":225,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['basehrefstate",{"_index":223,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["selector(['linkregistrystate",{"_index":725,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector(['resourceregistrystate",{"_index":835,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector(['storagestate",{"_index":968,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selector(['undefined",{"_index":848,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([basehrefstate",{"_index":228,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["selector([linkregistrystate",{"_index":731,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector([resourceregistryselectors.field",{"_index":871,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":863,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([storagestate",{"_index":981,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selectors",{"_index":218,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{}}}],["selectquery",{"_index":1167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot",{"_index":643,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot(linkregistryselectors.query",{"_index":661,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sequences",{"_index":1103,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["service",{"_index":123,"title":{},"body":{"injectables/AppHrefService.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SvgIconsConfig.html":{}}}],["session",{"_index":1008,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstorage",{"_index":1019,"title":{},"body":{"injectables/StorageState.html":{}}}],["set",{"_index":236,"title":{"classes/Set.html":{},"classes/Set-1.html":{}},"body":{"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["set(ctx",{"_index":1010,"title":{},"body":{"injectables/StorageState.html":{}}}],["setapphref",{"_index":129,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["setapphref(href",{"_index":136,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["setbasehref",{"_index":232,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["setbasehref(ctx",{"_index":233,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["setcontent(content",{"_index":590,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setdata(data",{"_index":591,"title":{},"body":{"directives/HoverDirective.html":{}}}],["sets",{"_index":239,"title":{},"body":{"injectables/BaseHrefState.html":{},"classes/Set.html":{},"injectables/StorageState.html":{}}}],["setter",{"_index":521,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["setting",{"_index":125,"title":{},"body":{"injectables/AppHrefService.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["shiftkey",{"_index":681,"title":{},"body":{"directives/LinkDirective.html":{}}}],["signal",{"_index":144,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["signal(this.initialapphref",{"_index":161,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BreakpointWatchState.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/typealiases.html":{}}}],["skiplocationchange",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snapshot",{"_index":943,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts",{"_index":1166,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["snapshotobserver",{"_index":938,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["specific",{"_index":273,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"injectables/LinkRegistryState.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hover/hover.directive.ts",{"_index":503,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:19",{"_index":585,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:26",{"_index":586,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:50",{"_index":589,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:54",{"_index":588,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:64",{"_index":587,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/link/link.directive.ts",{"_index":592,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:14",{"_index":610,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:17",{"_index":616,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:20",{"_index":617,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:23",{"_index":608,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:26",{"_index":612,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:29",{"_index":619,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:32",{"_index":624,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:34",{"_index":625,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:36",{"_index":627,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:80",{"_index":629,"title":{},"body":{"directives/LinkDirective.html":{}}}],["standalone",{"_index":173,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["start",{"_index":571,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["started",{"_index":1127,"title":{"index.html":{}},"body":{}}],["starthover",{"_index":549,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["state",{"_index":230,"title":{},"body":{"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../action",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../base",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../link",{"_index":1118,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../resource",{"_index":1121,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../storage.actions.ts",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../storage.model.ts",{"_index":1122,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/actions/action",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["state/src/base",{"_index":215,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["state/src/link",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/resource",{"_index":99,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/state.module.ts",{"_index":315,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["state/src/storage/storage.actions.ts",{"_index":325,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["state/src/storage/storage.actions.ts:10",{"_index":937,"title":{},"body":{"classes/Set-1.html":{}}}],["state/src/storage/storage.actions.ts:24",{"_index":339,"title":{},"body":{"classes/Delete.html":{}}}],["state/src/storage/storage.actions.ts:37",{"_index":330,"title":{},"body":{"classes/Clear.html":{}}}],["state/src/storage/storage.model.ts",{"_index":1125,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/storage/storage.selectors.ts",{"_index":963,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:13",{"_index":969,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:23",{"_index":976,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.state.ts",{"_index":992,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:25",{"_index":1005,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:43",{"_index":1011,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:53",{"_index":1001,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:63",{"_index":997,"title":{},"body":{"injectables/StorageState.html":{}}}],["state[id",{"_index":736,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["statecontext",{"_index":234,"title":{},"body":{"injectables/BaseHrefState.html":{},"miscellaneous/typealiases.html":{}}}],["stateselector",{"_index":905,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":898,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage",{"_index":321,"title":{},"body":{"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["storage.actions",{"_index":1015,"title":{},"body":{"injectables/StorageState.html":{}}}],["storage.model",{"_index":332,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage.state",{"_index":980,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagecontext",{"_index":995,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageid",{"_index":328,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["storageid.local",{"_index":1016,"title":{},"body":{"injectables/StorageState.html":{}}}],["storageid.session",{"_index":1017,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagemodel",{"_index":1014,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageselectors",{"_index":962,"title":{"classes/StorageSelectors.html":{}},"body":{"classes/StorageSelectors.html":{}}}],["storagestate",{"_index":320,"title":{"injectables/StorageState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).clear",{"_index":1027,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).getitem(key",{"_index":982,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).length",{"_index":991,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).removeitem(key",{"_index":1026,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).setitem(key",{"_index":1024,"title":{},"body":{"injectables/StorageState.html":{}}}],["store",{"_index":542,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["stored",{"_index":327,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storing",{"_index":942,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["stream",{"_index":944,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1124,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":904,"title":{},"body":{"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["stylecomponentmanagerservice",{"_index":1037,"title":{"injectables/StyleComponentManagerService.html":{}},"body":{"injectables/StyleComponentManagerService.html":{}}}],["styles",{"_index":343,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["styling/.../style",{"_index":1155,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["styling/src/lib/style",{"_index":1038,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["subject",{"_index":417,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts",{"_index":395,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:27",{"_index":892,"title":{},"body":{"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:9",{"_index":401,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["such",{"_index":1021,"title":{},"body":{"injectables/StorageState.html":{}}}],["super",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["super(1",{"_index":426,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["supplied",{"_index":979,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["support",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":449,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["svg_icons_config",{"_index":464,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["svgiconresolverconfig",{"_index":1091,"title":{"interfaces/SvgIconResolverConfig.html":{}},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["svgicons",{"_index":460,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["svgiconsconfig",{"_index":450,"title":{"interfaces/SvgIconsConfig.html":{}},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["switch",{"_index":698,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["t",{"_index":271,"title":{},"body":{"classes/BreakpointWatchState.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["t[k",{"_index":862,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["tag",{"_index":655,"title":{},"body":{"directives/LinkDirective.html":{}}}],["tagname",{"_index":657,"title":{},"body":{"directives/LinkDirective.html":{}}}],["takeuntil",{"_index":900,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["tap",{"_index":901,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["target",{"_index":596,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":377,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal",{"_index":515,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal(content",{"_index":526,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateref",{"_index":519,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templates",{"_index":507,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["test",{"_index":410,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["tests",{"_index":1134,"title":{},"body":{"index.html":{}}}],["text",{"_index":799,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(getfield",{"_index":851,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["text_entry",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this._data",{"_index":528,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.addmany(ctx",{"_index":791,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":891,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":801,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.apphref()}${path",{"_index":212,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["this.apphrefsignal.asreadonly",{"_index":142,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["this.apphrefsignal.set(href",{"_index":162,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["this.cdr.markforcheck",{"_index":190,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["this.complete",{"_index":429,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.createoverlay",{"_index":551,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.el.remove",{"_index":381,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["this.errorvalue",{"_index":960,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.extras",{"_index":687,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.getentry(state",{"_index":732,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["this.getinstance(component",{"_index":1071,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.getinstancemap(inject(applicationref",{"_index":1068,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.getlinkattributes(link",{"_index":693,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.href",{"_index":690,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.http",{"_index":796,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":887,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.increasechangecount(ctx",{"_index":1025,"title":{},"body":{"injectables/StorageState.html":{}}}],["this.link",{"_index":677,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.matchesquery(this.mapping[breakpoint",{"_index":289,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["this.mergeextras(link?.type",{"_index":671,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigate(linkid",{"_index":686,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigatetoexternal(entry",{"_index":808,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.navigatetointernal(entry",{"_index":806,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.next",{"_index":428,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.overlay",{"_index":567,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.overlay.create",{"_index":565,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.overlayref",{"_index":550,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.overlayref.attach(portal",{"_index":552,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal",{"_index":525,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal.context",{"_index":534,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.prevhref",{"_index":188,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["this.querylink(this.linkid",{"_index":676,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.registry.delete(appref",{"_index":1081,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.registry.get(appref",{"_index":1078,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.registry.set(appref",{"_index":1079,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.rel",{"_index":691,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.router?.navigate(entry.commands",{"_index":816,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.setapphref(this.initialapphref",{"_index":163,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["this.state.breakpoints[query",{"_index":288,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["this.state.matches",{"_index":287,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["this.target",{"_index":692,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.updatecontent",{"_index":529,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.updatelink(link",{"_index":678,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.value",{"_index":961,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.viewcontainerref",{"_index":527,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.zone.run",{"_index":815,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["throw",{"_index":809,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["throws",{"_index":959,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["tied",{"_index":925,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["time",{"_index":457,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["token",{"_index":461,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["top",{"_index":576,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["tosignal",{"_index":280,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["tosignal(state",{"_index":310,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["track",{"_index":741,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["transform",{"_index":175,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["transform((id",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform(path",{"_index":176,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["transform>(createcustomtype",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":345,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["triggers",{"_index":630,"title":{},"body":{"directives/LinkDirective.html":{}}}],["true",{"_index":174,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":635,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ts",{"_index":987,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["tslib",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["turns",{"_index":1056,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["two",{"_index":705,"title":{},"body":{"directives/LinkDirective.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/BreakpointWatchState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1151,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":1171,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typematches",{"_index":737,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["typeof",{"_index":415,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["types",{"_index":965,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":985,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["typings",{"_index":1179,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ui/cdk/app",{"_index":446,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["ui/cdk/injectors",{"_index":644,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/cdk/state",{"_index":648,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/theming",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":651,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"dependencies.html":{}}}],["ui/utils/types",{"_index":729,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["undefined",{"_index":235,"title":{},"body":{"injectables/BaseHrefState.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["underlying",{"_index":258,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["union",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unionmember",{"_index":728,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":1180,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unit",{"_index":1133,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":413,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}}}],["unless",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unparsed",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["unqiue",{"_index":93,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["up",{"_index":559,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatecontent",{"_index":561,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updated",{"_index":1032,"title":{},"body":{"injectables/StorageState.html":{}}}],["updatelink(link",{"_index":689,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updates",{"_index":138,"title":{},"body":{"injectables/AppHrefService.html":{},"directives/LinkDirective.html":{}}}],["updation",{"_index":558,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["url",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(\"${url",{"_index":213,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url(getfield",{"_index":853,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["url.pipe.ts",{"_index":168,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url.pipe.ts:19",{"_index":191,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url.pipe.ts:31",{"_index":177,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url/filename",{"_index":759,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["url_entry",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlcreationoptions",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["urls",{"_index":667,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["use",{"_index":510,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["used",{"_index":349,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":509,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["userhovers",{"_index":537,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["usevalue",{"_index":489,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["using",{"_index":812,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["validator",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":134,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value:string",{"_index":1023,"title":{},"body":{"injectables/StorageState.html":{}}}],["values",{"_index":326,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":385,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["variables",{"_index":1195,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1149,"title":{},"body":{"properties.html":{}}}],["view",{"_index":371,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["viewcontainerref",{"_index":362,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["void",{"_index":135,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{}}}],["watch",{"_index":290,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watchbreakpoint(query",{"_index":294,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watchbreakpoints",{"_index":248,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watchbreakpoints([query",{"_index":296,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watchbreakpoints(arg",{"_index":304,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watchbreakpoints(mapping",{"_index":301,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watchbreakpoints(queries",{"_index":300,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watcher",{"_index":295,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["watcher().matchesany",{"_index":297,"title":{},"body":{"classes/BreakpointWatchState.html":{}}}],["weakmap",{"_index":1274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whenever",{"_index":908,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["whether",{"_index":181,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"classes/BreakpointWatchState.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["width",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window",{"_index":818,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["window.open(url",{"_index":821,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["withpositions",{"_index":569,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["withpush(true",{"_index":578,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["yaml",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":180,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["z",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().array",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['merge",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":1175,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('reload",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.external",{"_index":1276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.internal",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.markdown",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.text",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.url",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":1288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(resource_id",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).nullable",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('noopener",{"_index":1277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.union([builtin_entry",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone",{"_index":789,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["zoom",{"_index":1143,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single link\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, entry: LinkEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:9\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        LinkEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add-1.html":{"url":"classes/Add-1.html","title":"class - Add-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entries from yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:32\n                            \n                        \n\n                \n                    \n                            Add links from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml-1.html":{"url":"classes/AddFromYaml-1.html","title":"class - AddFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple links at once\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add Many')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:21\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New links\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany-1.html":{"url":"classes/AddMany-1.html","title":"class - AddMany-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add Many')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppHrefService.html":{"url":"injectables/AppHrefService.html","title":"injectable - AppHrefService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppHrefService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            app-href/src/lib/app-href.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for getting and setting the appHref\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                appHref\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resetAppHref\n                            \n                            \n                                setAppHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        resetAppHref\n                        \n                    \n                \n            \n            \n                \nresetAppHref()\n                \n            \n\n\n                    \n                        \n                            Defined in app-href/src/lib/app-href.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Resets the appHref to it's initial value\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAppHref\n                        \n                    \n                \n            \n            \n                \nsetAppHref(href: string)\n                \n            \n\n\n                    \n                        \n                            Defined in app-href/src/lib/app-href.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Updates the current appHref value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                href\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    New appHref value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        appHref\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.appHrefSignal.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in app-href/src/lib/app-href.service.ts:21\n                        \n                    \n\n            \n                \n                    Readonly appHref value signal\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InjectionToken, inject, signal } from '@angular/core';\nimport { getCurrentScriptBasePath } from './current-script';\n\n/** Initial value for appHref. Defaults to the current script's base path */\nexport const INITIAL_APP_HREF = new InjectionToken('InitialAppHref', {\n  providedIn: 'root',\n  factory: () => getCurrentScriptBasePath(),\n});\n\n/**\n * Service for getting and setting the appHref\n */\n@Injectable({ providedIn: 'root' })\nexport class AppHrefService {\n  /** Initial appHref value */\n  private readonly initialAppHref = inject(INITIAL_APP_HREF);\n  /** Current appHref value signal */\n  private readonly appHrefSignal = signal(this.initialAppHref);\n\n  /** Readonly appHref value signal */\n  readonly appHref = this.appHrefSignal.asReadonly();\n\n  /**\n   * Updates the current appHref value\n   *\n   * @param href New appHref value\n   */\n  setAppHref(href: string): void {\n    this.appHrefSignal.set(href);\n  }\n\n  /**\n   * Resets the appHref to it's initial value\n   */\n  resetAppHref(): void {\n    this.setAppHref(this.initialAppHref);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/AssetUrlPipe.html":{"url":"pipes/AssetUrlPipe.html","title":"pipe - AssetUrlPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  AssetUrlPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            app-href/src/lib/asset-url.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Create a full url with the appHref prefixed\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        assetUrl\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(path: string, type?)\n                \n            \n\n\n                    \n                        \n                            Defined in app-href/src/lib/asset-url.pipe.ts:31\n                        \n                    \n\n\n            \n                \n                        Prefixes an asset path with the current appHref value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Path to asset\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Whether the url will be bound to a css property\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A full url\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        markChangeRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : effect(() => {\n    if (this.prevHref() !== null) {\n      this.cdr.markForCheck();\n    }\n  })\n                    \n                \n                    \n                        \n                                Defined in app-href/src/lib/asset-url.pipe.ts:19\n                        \n                    \n\n            \n                \n                    Notifies the change detection when the appHref changes\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, Pipe, PipeTransform, effect, inject } from '@angular/core';\nimport { computedPrevious } from 'ngxtension/computed-previous';\nimport { AppHrefService } from './app-href.service';\n\n/** Create a full url with the appHref prefixed */\n@Pipe({\n  name: 'assetUrl',\n  standalone: true,\n  pure: false,\n})\nexport class AssetUrlPipe implements PipeTransform {\n  /** Current appHref value signal */\n  private readonly appHref = inject(AppHrefService).appHref;\n  /** Previous appHref value signal */\n  private readonly prevHref = computedPrevious(this.appHref);\n  /** Reference to the change detector */\n  private readonly cdr = inject(ChangeDetectorRef);\n  /** Notifies the change detection when the appHref changes */\n  protected readonly markChangeRef = effect(() => {\n    if (this.prevHref() !== null) {\n      this.cdr.markForCheck();\n    }\n  });\n\n  /**\n   * Prefixes an asset path with the current appHref value\n   * @param path Path to asset\n   * @param type Whether the url will be bound to a css property\n   * @returns A full url\n   */\n  transform(path: string, type?: 'css'): string {\n    const url = `${this.appHref()}${path}`;\n    return type === 'css' ? `url(\"${url}\")` : url;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseHrefSelectors.html":{"url":"classes/BaseHrefSelectors.html","title":"class - BaseHrefSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseHrefSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for BaseHrefState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                baseHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        baseHref\n                        \n                    \n                \n            \n            \n                \n                        \n                    baseHref(value: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['BaseHrefState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/base-href/base-href.selectors.ts:12\n                        \n                    \n\n\n            \n                \n                        Returns base href value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    href value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                href value\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { BaseHrefState } from './base-href.state';\n\n/** Selectors for BaseHrefState */\nexport class BaseHrefSelectors {\n  /**\n   * Returns base href value\n   * @param value href value\n   * @returns href value\n   */\n  @Selector([BaseHrefState])\n  static baseHref(value: string): string {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseHrefState.html":{"url":"injectables/BaseHrefState.html","title":"injectable - BaseHrefState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseHrefState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State holding the base href\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                setBaseHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setBaseHref\n                        \n                    \n                \n            \n            \n                \n                        \n                    setBaseHref(ctx: StateContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n                    \n                        \n                            Defined in state/src/base-href/base-href.state.ts:20\n                        \n                    \n\n\n            \n                \n                        Sets base href value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                        StateContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    state context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Set\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Set } from './base-href.actions';\n\n/**\n * State holding the base href\n */\n@State({\n  name: 'baseHref',\n  defaults: '',\n})\n@Injectable()\nexport class BaseHrefState {\n  /**\n   * Sets base href value\n   * @param ctx state context\n   * @param { baseHref } href value\n   */\n  @Action(Set)\n  setBaseHref(ctx: StateContext, { baseHref }: Set) {\n    if (baseHref !== '' && !baseHref.endsWith('/')) {\n      baseHref = baseHref + '/';\n    }\n    ctx.setState(baseHref);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BreakpointWatchState.html":{"url":"classes/BreakpointWatchState.html","title":"class - BreakpointWatchState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BreakpointWatchState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            breakpoints/src/lib/observers.ts\n        \n\n\n            \n                Description\n            \n            \n                State produced by watchBreakpoints\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesAny\n                            \n                            \n                                matchesBreakpoint\n                            \n                            \n                                matchesQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(state: BreakpointState, mapping: Record)\n                    \n                \n                        \n                            \n                                Defined in breakpoints/src/lib/observers.ts:8\n                            \n                        \n\n                \n                    \n                            Initialize the state\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        BreakpointState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The underlying state provided by\n\n                                                        \n                                                \n                                                \n                                                        mapping\n                                                  \n                                                        \n                                                                    Record\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Mapping from breakpoint names to queries\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesAny\n                        \n                    \n                \n            \n            \n                \nmatchesAny()\n                \n            \n\n\n                    \n                        \n                            Defined in breakpoints/src/lib/observers.ts:25\n                        \n                    \n\n\n            \n                \n                        Checks whether at least one query matches\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true if any matches, false otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchesBreakpoint\n                        \n                    \n                \n            \n            \n                \nmatchesBreakpoint(breakpoint: T)\n                \n            \n\n\n                    \n                        \n                            Defined in breakpoints/src/lib/observers.ts:45\n                        \n                    \n\n\n            \n                \n                        Checks whether a specific breakpoint matches\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                breakpoint\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The breakpoint to check\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true if the breakpoint matches, false otherwise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchesQuery\n                        \n                    \n                \n            \n            \n                \nmatchesQuery(query: string)\n                \n            \n\n\n                    \n                        \n                            Defined in breakpoints/src/lib/observers.ts:35\n                        \n                    \n\n\n            \n                \n                        Checks whether the specific query matches\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The query to check\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true if the query matches, false otherwise\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { computed, inject, Signal } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { map } from 'rxjs';\nimport { Breakpoint, Breakpoints } from './breakpoints';\n\n/** State produced by `watchBreakpoints` */\nexport class BreakpointWatchState {\n  /**\n   * Initialize the state\n   *\n   * @param state The underlying state provided by @angular/cdk\n   * @param mapping Mapping from breakpoint names to queries\n   */\n  constructor(\n    private readonly state: BreakpointState,\n    private readonly mapping: Record,\n  ) {}\n\n  /**\n   * Checks whether at least one query matches\n   *\n   * @returns true if any matches, false otherwise\n   */\n  matchesAny(): boolean {\n    return this.state.matches;\n  }\n\n  /**\n   * Checks whether the specific query matches\n   *\n   * @param query The query to check\n   * @returns true if the query matches, false otherwise\n   */\n  matchesQuery(query: string): boolean {\n    return this.state.breakpoints[query] ?? false;\n  }\n\n  /**\n   * Checks whether a specific breakpoint matches\n   *\n   * @param breakpoint The breakpoint to check\n   * @returns true if the breakpoint matches, false otherwise\n   */\n  matchesBreakpoint(breakpoint: T): boolean {\n    return this.matchesQuery(this.mapping[breakpoint]);\n  }\n}\n\n/**\n * Watch a single query.\n * Must be called in an injection context.\n *\n * @param query Breakpoint query to watch\n * @returns A signal with indicating when the query matches\n */\nexport function watchBreakpoint(query: string): Signal {\n  const watcher = watchBreakpoints([query]);\n  return computed(() => watcher().matchesAny());\n}\n\n/**\n * Watch the default breakpoints.\n * Must be called in an injection context.\n *\n * @returns A signal containing the latest watch state\n */\nexport function watchBreakpoints(): Signal>;\n/**\n * Watch multiple queries.\n * Must be called in an injection context.\n *\n * @param queries Queries to watch\n * @returns A signal containing the latest watch state\n */\nexport function watchBreakpoints(queries: string[]): Signal;\n/**\n * Watch multiple breakpoints.\n * Must be called in an injection context.\n *\n * @param mapping Mapping from breakpoints to queries\n * @returns A signal containing the latest watch state\n */\nexport function watchBreakpoints(mapping: Record): Signal>;\n/**\n * Watch multiple queries or breakpoints.\n *\n * @param arg A list of queries or mapping from breakpoints to queries\n * @returns A signal containing the latest watch state\n */\nexport function watchBreakpoints(arg: string[] | Record = Breakpoints): Signal {\n  const mapping = Array.isArray(arg) ? {} : arg;\n  const queries = Array.isArray(arg) ? arg : Object.values(arg);\n  const breakpoints$ = inject(BreakpointObserver).observe(queries);\n  const state$ = breakpoints$.pipe(map((state) => new BreakpointWatchState(state, mapping)));\n  return toSignal(state$, { requireSync: true });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CdkStateModule.html":{"url":"modules/CdkStateModule.html","title":"module - CdkStateModule","body":"\n                   \n\n\n\n\n    Modules\n    CdkStateModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            state/src/state.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\nimport { BaseHrefState } from './base-href';\nimport { LinkRegistryState } from './link-registry';\nimport { ResourceRegistryState } from './resource-registry';\nimport { StorageState } from './storage';\n\n@NgModule({\n  imports: [NgxsModule.forFeature([BaseHrefState, LinkRegistryState, ResourceRegistryState, StorageState])],\n})\nexport class CdkStateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clear.html":{"url":"classes/Clear.html","title":"class - Clear","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clear\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear the values stored in the specified StorageId\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Clear')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:37\n                            \n                        \n\n                \n                    \n                            constructor class for clear action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Delete.html":{"url":"classes/Delete.html","title":"class - Delete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Delete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                 Class Delete Action for delete method\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Delete')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:24\n                            \n                        \n\n                \n                    \n                            constructor class for Delete action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DestroyHostComponent.html":{"url":"components/DestroyHostComponent.html","title":"component - DestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/destroy-host.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component used when attaching destroy lifecycle observables to a component/directive/pipe\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-destroy-host\n            \n\n            \n                standalone\n                true\n            \n\n\n\n            \n                styles\n                :host { display: none }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                el\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(container: ViewContainerRef)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index '0') in the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                container\n                                            \n                                                        ViewContainerRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    View in which to create the element\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentRef\n\n                        \n                            \n                                The ComponentRef of the newly inserted element\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        el\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Element\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef).nativeElement\n                    \n                \n                    \n                        \n                                Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:14\n                        \n                    \n\n            \n                \n                    Reference to own dom element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ComponentRef, ElementRef, inject, ViewContainerRef } from '@angular/core';\n\n/**\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\n */\n@Component({\n  selector: 'hra-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: none }'],\n})\nexport class DestroyHostComponent implements AfterViewInit {\n  /** Reference to own dom element */\n  readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**\n   * Creates a new DestroyHostComponent inside the provided container.\n   * The element is inserted as the first child (index '0') in the container.\n   * @param container View in which to create the element\n   * @returns The ComponentRef of the newly inserted element\n   */\n  static create(container: ViewContainerRef): ComponentRef {\n    return container.createComponent(DestroyHostComponent, { index: 0 });\n  }\n\n  /** Disconnects the component from the dom tree */\n  ngAfterViewInit(): void {\n    this.el.remove();\n  }\n}\n\n    \n\n\n    \n            :host { display: none }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'DestroyHostComponent', 'selector': 'hra-destroy-host'}];\n    var DIRECTIVES = [{'name': 'HoverDirective', 'selector': '[hraHover]'},{'name': 'LinkDirective', 'selector': '[hraLink]'}];\n    var ACTUAL_COMPONENT = {'name': 'DestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup functions can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/on-destroy/destructor-subject.ts:9\n                        \n                    \n\n\n            \n                \n                        Register a cleanup function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cb\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Cleanup callback function\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FontIconsConfig.html":{"url":"interfaces/FontIconsConfig.html","title":"interface - FontIconsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FontIconsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/providers.ts\n        \n\n\n            \n                Description\n            \n            \n                Font icon provider configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            defaultClasses\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultClasses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultClasses:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default classes to apply when no font set is specified\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  EnvironmentProviders,\n  InjectionToken,\n  makeEnvironmentProviders,\n  inject,\n  provideAppInitializer,\n} from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    provideAppInitializer(() => {\n      const initializerFn = registerDefaultFontSetClassesFactory(inject(MatIconRegistry), inject(FONT_ICONS_CONFIG));\n      return initializerFn();\n    }),\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    provideAppInitializer(() => {\n      const initializerFn = registerSvgIconResolverFactory(\n        inject(MatIconRegistry),\n        inject(AppHrefService),\n        inject(DomSanitizer),\n        inject(SVG_ICONS_CONFIG),\n      );\n      return initializerFn();\n    }),\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HoverContext.html":{"url":"interfaces/HoverContext.html","title":"interface - HoverContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HoverContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Context passed to hover content templates\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $implicit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $implicit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $implicit:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data provided by the user for use inside the content template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionPositionPair, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /** Overlay service */\n  private readonly overlay = inject(Overlay);\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  private overlayRef?: OverlayRef;\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { portal } = this;\n    if (portal) {\n      this.overlayRef = this.createOverlay();\n      this.overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    overlayRef?.dispose();\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to create overlay and set its position */\n  private createOverlay(): OverlayRef {\n    return this.overlay.create({\n      positionStrategy: this.overlay\n        .position()\n        .flexibleConnectedTo(this.el)\n        .withPositions([\n          new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n        ])\n        .withPush(true),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/HoverDirective.html":{"url":"directives/HoverDirective.html","title":"directive - HoverDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  HoverDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Hover overlay directive to be used across the application\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraHover]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                portal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                endHover\n                            \n                            \n                                    \n                                startHover\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraHover\n                            \n                            \n                                hraHoverData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseout\n                            \n                            \n                                mouseover\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    content\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraHover\n                    \n                \n                \n                    \n                        Type :         TemplateRef>\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                            \n                        \n                \n                    \n                        Setter for the content to be displayed in the overlay\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraHoverData\n                    \n                \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                            \n                        \n                \n                    \n                        Setter for the context that is to be displayed in the portal attached to the overlay\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseout\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:64\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseover\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:54\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endHover\n                        \n                    \n                \n            \n            \n                \n                        \n                    endHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseout')\n                \n            \n\n                    \n                        \n                            Defined in src/lib/hover/hover.directive.ts:64\n                        \n                    \n\n\n            \n                \n                        Function to handle the mouse out event to detach the portal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startHover\n                        \n                    \n                \n            \n            \n                \n                        \n                    startHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseover')\n                \n            \n\n                    \n                        \n                            Defined in src/lib/hover/hover.directive.ts:54\n                        \n                    \n\n\n            \n                \n                        Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        portal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TemplatePortal>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:50\n                        \n                    \n\n            \n                \n                    Portal that is created to display the overlay\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n\n\n                \n                    \n                        setcontent(content: TemplateRef>)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                                \n                            \n                    \n                        \n                                Setter for the content to be displayed in the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            content\n                                                    \n                                                            \n                                                                            TemplateRef>\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n\n                \n                    \n                        setdata(data: T)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                                \n                            \n                    \n                        \n                                Setter for the context that is to be displayed in the portal attached to the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                            \n                                                                        T\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ConnectionPositionPair, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /** Overlay service */\n  private readonly overlay = inject(Overlay);\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  private overlayRef?: OverlayRef;\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { portal } = this;\n    if (portal) {\n      this.overlayRef = this.createOverlay();\n      this.overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    overlayRef?.dispose();\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to create overlay and set its position */\n  private createOverlay(): OverlayRef {\n    return this.overlay.create({\n      positionStrategy: this.overlay\n        .position()\n        .flexibleConnectedTo(this.el)\n        .withPositions([\n          new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n        ])\n        .withPush(true),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IconsConfig.html":{"url":"interfaces/IconsConfig.html","title":"interface - IconsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IconsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/providers.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration when providing font icons and svg icon at the same time\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            fontIcons\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            svgIcons\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fontIcons\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fontIcons:         FontIconsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FontIconsConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Font icon configuration\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        svgIcons\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        svgIcons:         SvgIconsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SvgIconsConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Svg icon configuration\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  EnvironmentProviders,\n  InjectionToken,\n  makeEnvironmentProviders,\n  inject,\n  provideAppInitializer,\n} from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    provideAppInitializer(() => {\n      const initializerFn = registerDefaultFontSetClassesFactory(inject(MatIconRegistry), inject(FONT_ICONS_CONFIG));\n      return initializerFn();\n    }),\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    provideAppInitializer(() => {\n      const initializerFn = registerSvgIconResolverFactory(\n        inject(MatIconRegistry),\n        inject(AppHrefService),\n        inject(DomSanitizer),\n        inject(SVG_ICONS_CONFIG),\n      );\n      return initializerFn();\n    }),\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LinkDirective.html":{"url":"directives/LinkDirective.html","title":"directive - LinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Link Directive for routing\n\n            \n\n\n            \n                Implements\n            \n            \n                        DoCheck\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraLink]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                href\n                            \n                            \n                                    \n                                    Optional\n                                rel\n                            \n                            \n                                    \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fragment\n                            \n                            \n                                hraLink\n                            \n                            \n                                preserveFragment\n                            \n                            \n                                queryParams\n                            \n                            \n                                queryParamsHandling\n                            \n                            \n                                relativeTo\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.href\n                            \n                            \n                                attr.rel\n                            \n                            \n                                attr.target\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fragment\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:23\n                            \n                        \n                \n                    \n                        Url fragment\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraLink\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : EMPTY_LINK\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:14\n                            \n                        \n                \n                    \n                        linkId with empty string as default value\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        preserveFragment\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether to preserve the existing fragment\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        queryParams\n                    \n                \n                \n                    \n                        Type :     Params\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:17\n                            \n                        \n                \n                    \n                        Query string parameters\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        queryParamsHandling\n                    \n                \n                \n                    \n                        Type :     QueryParamsHandling\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:20\n                            \n                        \n                \n                    \n                        How to handle existing query params\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        relativeTo\n                    \n                \n                \n                    \n                        Type :     ActivatedRoute\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:29\n                            \n                        \n                \n                    \n                        Nagivate relative to a route. Only affects internal links.\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:32\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:80\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/lib/link/link.directive.ts:80\n                        \n                    \n\n\n            \n                \n                        Triggers when a click action is performed on the element\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    type of event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true/false based on entry and element\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.href')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:32\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.rel')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.target')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, DoCheck, ElementRef, HostBinding, HostListener, inject, Injector, Input } from '@angular/core';\nimport { ActivatedRoute, Params, QueryParamsHandling, UrlCreationOptions } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { EMPTY_LINK, LinkEntry, LinkRegistryActions, LinkRegistrySelectors, LinkType } from '@hra-ui/cdk/state';\nimport { createExternalUrl, createInternalUrl } from '@hra-ui/utils';\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements DoCheck {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK;\n\n  /** Query string parameters */\n  @Input() queryParams?: Params;\n\n  /** How to handle existing query params */\n  @Input() queryParamsHandling?: QueryParamsHandling;\n\n  /** Url fragment */\n  @Input() fragment?: string;\n\n  /** Whether to preserve the existing fragment */\n  @Input() preserveFragment?: boolean;\n\n  /** Nagivate relative to a route. Only affects internal links. */\n  @Input() relativeTo?: ActivatedRoute;\n\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Reference to this component's injector */\n  private readonly injector = inject(Injector);\n  /** Element tag on which this directive is mounted */\n  private readonly tagName = inject>(ElementRef).nativeElement.tagName.toLowerCase();\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /** Whether the host element is an anchor */\n  private get isAnchorElement(): boolean {\n    return ['a', 'area'].includes(this.tagName);\n  }\n\n  /** Whether the host element deals with resource urls */\n  private get isResourceUrl(): boolean {\n    return ['base', 'link'].includes(this.tagName);\n  }\n\n  /** Collects query params and fragment options into a single object */\n  private get extras(): UrlCreationOptions {\n    const { link } = this;\n    return this.mergeExtras(link?.type === LinkType.Internal ? link.extras : undefined, this);\n  }\n\n  /** Updates the current link/url based on the inputs */\n  ngDoCheck(): void {\n    const link = this.queryLink(this.linkId);\n    if (this.link !== link) {\n      this.updateLink(link);\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External || button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId, this.extras);\n    return !isAnchorElement;\n  }\n\n  /** Updates the link entry and bound attributes */\n  private updateLink(link?: LinkEntry): void {\n    this.link = link;\n    ({ href: this.href, rel: this.rel, target: this.target } = this.getLinkAttributes(link));\n  }\n\n  /**\n   * Gets the new values for different attributes bound to the host element\n   * @param link Current link entry\n   * @returns New attributes values to bind on the host element\n   */\n  private getLinkAttributes(link?: LinkEntry): { href?: string; rel?: string; target?: string } {\n    const { injector, extras, isResourceUrl } = this;\n    switch (link?.type) {\n      case LinkType.Internal:\n        return { href: createInternalUrl(injector, link.commands, extras, isResourceUrl) };\n\n      case LinkType.External:\n        return { ...link, href: createExternalUrl(link.url, extras) };\n\n      default:\n        return {};\n    }\n  }\n\n  /**\n   * Merges two UrlCreationOptions.\n   * Undefined values in the second set does not override values from the first set.\n   * @param opt1 First set of options\n   * @param opt2 Second set of options\n   * @returns Merged options\n   */\n  private mergeExtras(opt1: UrlCreationOptions | undefined, opt2: UrlCreationOptions): UrlCreationOptions {\n    const result = { ...opt1 };\n    const mergeKey = (key: K) => {\n      if (opt2[key] !== undefined) {\n        result[key] = opt2[key];\n      }\n    };\n\n    mergeKey('queryParams');\n    mergeKey('queryParamsHandling');\n    mergeKey('fragment');\n    mergeKey('preserveFragment');\n    mergeKey('relativeTo');\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkRegistrySelectors.html":{"url":"classes/LinkRegistrySelectors.html","title":"class - LinkRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for Link Registry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(state: LinkRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['LinkRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.selectors.ts:16\n                        \n                    \n\n\n            \n                \n                        Queries for a link entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            LinkRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         LinkRegistryQuery\n\n                        \n                            \n                                link query function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkRegistryState.html":{"url":"injectables/LinkRegistryState.html","title":"injectable - LinkRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinkRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State for keeping track of links globally\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMany\n                            \n                            \n                                    \n                                addOne\n                            \n                            \n                                    \n                                addYaml\n                            \n                            \n                                    \n                                loadYaml\n                            \n                            \n                                    \n                                    Async\n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMany(ctx: LinkRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:57\n                        \n                    \n\n\n            \n                \n                        Add multiple entries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddMany\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOne(ctx: LinkRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:47\n                        \n                    \n\n\n            \n                \n                        Add a single entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Add\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    addYaml(ctx: LinkRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:68\n                        \n                    \n\n\n            \n                \n                        Parse and add entries from yaml\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional url/filename from which the data was loaded (for improved error messages)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadYaml(ctx: LinkRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:81\n                        \n                    \n\n\n            \n                \n                        Load and add entries from an external yaml file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entries has been added\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigate(ctx: LinkRegistryContext, undefined: Navigate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Navigate)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:94\n                        \n                    \n\n\n            \n                \n                        Navigate to Internal or External urls from id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Navigate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router, UrlCreationOptions } from '@angular/router';\nimport { createExternalUrl } from '@hra-ui/utils';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = (\n  id: LinkId,\n  type?: T,\n) => UnionMember | undefined;\n\n/** State for keeping track of links globally */\n@State({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router, { optional: true });\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id, extras }: Navigate): Promise {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry, extras);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry, extras);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry, extras: UrlCreationOptions): Promise {\n    await this.zone.run(() => this.router?.navigate(entry.commands, { ...entry.extras, ...extras }));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry, extras: UrlCreationOptions): void {\n    const url = createExternalUrl(entry.url, extras);\n    window.open(url, entry.target, entry.rel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add links from a remote yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:43\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml-1.html":{"url":"classes/LoadFromYaml-1.html","title":"class - LoadFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load Markdown')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigate.html":{"url":"classes/Navigate.html","title":"class - Navigate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Navigate to an Internal or external url from Link id\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Navigate')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, extras: UrlCreationOptions)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            navigate to a link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                unqiue identifier of link\n\n                                                        \n                                                \n                                                \n                                                        extras\n                                                  \n                                                        \n                                                                    UrlCreationOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Options when building the navigation url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                anyEntry\n                            \n                            \n                                    \n                                    Static\n                                anyText\n                            \n                            \n                                    \n                                    Static\n                                entry\n                            \n                            \n                                    \n                                    Static\n                                field\n                            \n                            \n                                    \n                                    Static\n                                markdown\n                            \n                            \n                                    \n                                    Static\n                                text\n                            \n                            \n                                    \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        anyEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    anyEntry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:48\n                        \n                    \n\n\n            \n                \n                        Queries an entry by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AnyEntryQuery\n\n                        \n                            \n                                Any entry query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                        \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:71\n                        \n                    \n\n\n            \n                \n                        Query for any text data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Text data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        entry\n                        \n                    \n                \n            \n            \n                \n                        \n                    entry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:38\n                        \n                    \n\n\n            \n                \n                        Queries an entry by id and type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EntryQuery\n\n                        \n                            \n                                Entry query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        field\n                        \n                    \n                \n            \n            \n                \n                        \n                    field(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:58\n                        \n                    \n\n\n            \n                \n                        Queries a field of an entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FieldQuery\n\n                        \n                            \n                                A field query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    markdown(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:93\n                        \n                    \n\n\n            \n                \n                        Query for markdown data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Markdown data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                        \n                    text(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:103\n                        \n                    \n\n\n            \n                \n                        Query for text data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Text data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                        \n                    url(getField: FieldQuery, baseHref: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined', 'undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:113\n                        \n                    \n\n\n            \n                \n                        Query for an url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                baseHref\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Url query function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport {\n  BuiltinResourceType,\n  getEntry,\n  ResourceEntry,\n  ResourceId,\n  ResourceRegistryModel,\n  ResourceType,\n} from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\nimport { BaseHrefSelectors } from '../base-href';\n\n/** Query function returned by {@link ResourceRegistrySelectors.entry} */\nexport type EntryQuery = (id: ResourceId, type: ResourceType) => T | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.anyEntry} */\nexport type AnyEntryQuery = (id: ResourceId) => ResourceEntry | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.field} */\nexport type FieldQuery = (\n  id: ResourceId,\n  type: ResourceType,\n  field: K,\n  defaultValue?: T[K],\n) => T[K];\n\n/** Query function for resource data */\nexport type DataQuery = (id: ResourceId) => T;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries an entry by id and type\n   * @param state Current state\n   * @returns Entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static entry(state: ResourceRegistryModel): EntryQuery {\n    return (id, type) => getEntry(state, id, type);\n  }\n\n  /**\n   * Queries an entry by id\n   * @param state Current state\n   * @returns Any entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyEntry(state: ResourceRegistryModel): AnyEntryQuery {\n    return (id) => getEntry(state, id);\n  }\n\n  /**\n   * Queries a field of an entry\n   * @param state Current state\n   * @returns A field query function\n   */\n  @Selector([ResourceRegistryState])\n  static field(state: ResourceRegistryModel): FieldQuery {\n    return (id, type, field, defaultValue?) => {\n      const entry = getEntry(state, id, type);\n      return entry?.[field] ?? (defaultValue as never);\n    };\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): DataQuery {\n    return (id) => {\n      const entry = getEntry(state, id);\n      switch (entry?.type) {\n        case BuiltinResourceType.Markdown:\n          return entry.markdown;\n\n        case BuiltinResourceType.Text:\n          return entry.text;\n\n        default:\n          return '';\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static markdown(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Markdown, 'markdown', '');\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static text(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Text, 'text', '');\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistrySelectors.field, BaseHrefSelectors.baseHref])\n  static url(getField: FieldQuery, baseHref = ''): DataQuery {\n    return (id) => {\n      const relUrl = getField(id, BuiltinResourceType.Url, 'url', '');\n      return relUrl !== '' ? baseHref + relUrl : '';\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMany\n                            \n                            \n                                    \n                                addOne\n                            \n                            \n                                    \n                                addYaml\n                            \n                            \n                                    \n                                loadMarkdown\n                            \n                            \n                                    \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:40\n                        \n                    \n\n\n            \n                \n                        Add multiple entries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddMany\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:30\n                        \n                    \n\n\n            \n                \n                        Add a single entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Add\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    addYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:51\n                        \n                    \n\n\n            \n                \n                        Parse and add entries from yaml\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional url/filename from which the data was loaded (for improved error messages)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:77\n                        \n                    \n\n\n            \n                \n                        Adds a markdown entry with content loaded from an external file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadMarkdown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entry has been added\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:64\n                        \n                    \n\n\n            \n                \n                        Load and add entries from an external yaml file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entries has been added\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  BuiltinResourceType,\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: BuiltinResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestructorSubject.html":{"url":"classes/ScopedDestructorSubject.html","title":"class - ScopedDestructorSubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestructorSubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                A subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes\n\n            \n\n            \n                Extends\n            \n            \n                        ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/destructor-subject.ts:27\n                            \n                        \n\n                \n                    \n                            Creates a new subject and attaches cleanup to the destructor scope\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Associated scope\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptions.html":{"url":"interfaces/SelectOptions.html","title":"interface - SelectOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/select.ts\n        \n\n\n            \n                Description\n            \n            \n                select$ configuration options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            notifyOnChange\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        notifyOnChange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notifyOnChange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to mark the containing view for change detection on emits. Defaults to true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from 'rxjs';\nimport { injectDestroy$ } from '../on-destroy/on-destroy';\n\n/** Selector type for select style functions */\nexport type StateSelector = ((...args: Any[]) => T) | StateToken;\n\n/** `select$` configuration options */\nexport interface SelectOptions {\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\n  notifyOnChange?: boolean;\n}\n\n/**\n * Marks a view for change detection whenever a new value is emitted\n * @param options Options to explicitly disable marking\n * @returns A rxjs operator\n */\nfunction markForCheck(options?: SelectOptions): MonoTypeOperatorFunction {\n  const notifyOnChange = options?.notifyOnChange ?? true;\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  if (notifyOnChange && cdr) {\n    const markFn = () => cdr.markForCheck();\n    return tap({ next: markFn, error: markFn, complete: markFn });\n  }\n\n  return (source) => source;\n}\n\n/**\n * Creates an observable emitting parts of the state. The observable's lifetime\n * is automatically tied to the injection context where this is called.\n * @param selector State selection function or token\n * @param options Additional select options\n * @returns An observable of the selected state\n */\nexport function select$(selector: StateSelector, options?: SelectOptions): Observable {\n  return inject(Store)\n    .select(selector as StateToken)\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Sets the base href\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Set')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseHref: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/base-href/base-href.actions.ts:7\n                            \n                        \n\n                \n                    \n                            Sets the base href\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        baseHref\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New href\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\n\n/** Base action factory */\nconst Action = ActionGroup('BaseHref');\n\n/** Sets the base href */\nexport class Set extends Action('Set') {\n  /**\n   * Sets the base href\n   * @param baseHref New href\n   */\n  constructor(readonly baseHref: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set-1.html":{"url":"classes/Set-1.html","title":"class - Set-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Class Set Action for set method\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Set')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:10\n                            \n                        \n\n                \n                    \n                            constructor class for Set action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - value to be stored with the key\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/snapshot-observer.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        NextObserver\n                        ErrorObserver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:38\n                        \n                    \n\n\n            \n                \n                        Handles error emits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The error value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:18\n                        \n                    \n\n\n            \n                \n                        Gets the latest value or throw on errors\n\n\n                        \n                            Returns :     T\n\n                        \n                            \n                                The latest value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles value emits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ErrorObserver, NextObserver } from 'rxjs';\n\n/** Object indicating that no error has been emitted */\nconst NO_ERROR_SENTINEL_OBJ = {};\n\n/** Observer storing the latest value from a snapshot stream */\nexport class SnapshotObserver implements NextObserver, ErrorObserver {\n  /** The latest value */\n  private value?: T = undefined;\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.value = undefined;\n    this.errorValue = err;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StorageSelectors.html":{"url":"classes/StorageSelectors.html","title":"class - StorageSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StorageSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Storage selectors - class for retrieving storage types\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                get\n                            \n                            \n                                    \n                                    Static\n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(_state)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.selectors.ts:13\n                        \n                    \n\n\n            \n                \n                        returns the value stored in the key,value pair in the storageId given\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _state\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                (id,key) of the given storage id else undefined\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        length\n                        \n                    \n                \n            \n            \n                \n                        \n                    length(_state)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.selectors.ts:23\n                        \n                    \n\n\n            \n                \n                        returns the number of items in the given storage id stored\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _state\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | undefined\n\n                        \n                            \n                                length of the given StorageId supplied\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { StorageId } from './storage.model';\nimport { StorageState } from './storage.state';\n/**\n * Storage selectors - class for retrieving storage types\n */\nexport class StorageSelectors {\n  /**\n   * returns the value stored in the key,value pair in the storageId given\n   * @returns (id,key) of the given storage id else undefined\n   */\n  @Selector([StorageState])\n  static get(_state: unknown): (id: StorageId, key: string) => string | undefined {\n    return (id, key) => StorageState.getStorage(id).getItem(key) ?? undefined;\n  }\n  /**\n   * returns the number of items in the given storage id stored\n   * @returns length of the given StorageId supplied\n   */\n  @Selector([StorageState])\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore Allow selector name\n  static length(_state: unknown): (id: StorageId) => number | undefined {\n    return (id) => StorageState.getStorage(id).length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageState.html":{"url":"injectables/StorageState.html","title":"injectable - StorageState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State holding Storage types\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clear\n                            \n                            \n                                    \n                                delete\n                            \n                            \n                                    Static\n                                getStorage\n                            \n                            \n                                    \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear(ctx: StorageContext, undefined: Clear)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Clear)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:63\n                        \n                    \n\n\n            \n                \n                        clears the values of the specified storage id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Clear\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(ctx: StorageContext, undefined: Delete)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Delete)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:53\n                        \n                    \n\n\n            \n                \n                        deletes the value pointed by key in the list of values stored in the specified storage id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Delete\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStorage(id: StorageId)\n                \n            \n\n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:25\n                        \n                    \n\n\n            \n                \n                        StorageState class to manage storage objects\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            StorageId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Storage\n\n                        \n                            \n                                \nStorage objects - session and local\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(ctx: StorageContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:43\n                        \n                    \n\n\n            \n                \n                        sets the key,value pair in the given storageId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Set\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { produce } from 'immer';\nimport { StorageContext } from './storage.model';\nimport { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { StorageId, StorageModel } from './storage.model';\nimport { Set, Delete, Clear } from './storage.actions';\n\n/**\n * State holding Storage types\n */\n@State({\n  name: 'storage',\n  defaults: {\n    [StorageId.Local]: 0,\n    [StorageId.Session]: 0,\n  },\n})\n@Injectable()\nexport class StorageState {\n  /**\n   * StorageState class to manage storage objects\n   * @param id-Storage Identifier\n   * @returns - Storage objects - session and local\n   */\n  static getStorage(id: StorageId): Storage {\n    switch (id) {\n      case StorageId.Local:\n        return localStorage;\n\n      case StorageId.Session:\n        return sessionStorage;\n\n      default:\n        throw new Error(`No such storage '${id}'`);\n    }\n  }\n  /**\n   * sets the key,value pair in the given storageId\n   * @param ctx - StorageContext object\n   * @param param1- {id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Set)\n  set(ctx: StorageContext, { id, key, value }: Set): void {\n    StorageState.getStorage(id).setItem(key, value);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * deletes the value pointed by key in the list of values stored in the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1- id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Delete)\n  delete(ctx: StorageContext, { id, key }: Delete): void {\n    StorageState.getStorage(id).removeItem(key);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * clears the values of the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1 - id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Clear)\n  clear(ctx: StorageContext, { id }: Clear): void {\n    StorageState.getStorage(id).clear();\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * increases count after each operation is performed on the specified storage id\n   * @param ctx  - StorageContext obje\n   * @param id - StorageId - Storage identifier for which the change count has to be updated\n   */\n  private increaseChangeCount(ctx: StorageContext, id: StorageId): void {\n    ctx.setState(\n      produce((draft) => {\n        draft[id] += 1;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StyleComponentManagerService.html":{"url":"injectables/StyleComponentManagerService.html","title":"injectable - StyleComponentManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StyleComponentManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            styling/src/lib/style-component-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager of global style components\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerStyleComponents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        registerStyleComponents\n                        \n                    \n                \n            \n            \n                \nregisterStyleComponents(components: Types, options: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in styling/src/lib/style-component-manager.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    Types\n                            \n                        \n                    \n\n            \n                \n                        Register style components. Each component is registered at most once.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                components\n                                            \n                                                        Types\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Component classes\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Options object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentRefsFromTypes\n\n                        \n                            \n                                Component instance references\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ApplicationRef,\n  ComponentRef,\n  EnvironmentInjector,\n  Injectable,\n  Injector,\n  Type,\n  assertInInjectionContext,\n  createComponent,\n  inject,\n  runInInjectionContext,\n} from '@angular/core';\n\n/** Map of component types to instances */\ntype ComponentInstanceMap = Map, ComponentRef>;\n\n/** Helper that turns an array of types into an array of component refs */\ntype ComponentRefsFromTypes[]> = {\n  [Index in keyof Types]: ComponentRef>;\n};\n\n/**\n * Register style components. Each component is registered at most once.\n * Must be called in an injection context or pass an injector in the options.\n *\n * @param components Component classes\n * @param options Additional options\n * @returns A component ref for each class\n */\nexport function registerStyleComponents[]>(\n  components: Types,\n  options?: { injector?: Injector },\n): ComponentRefsFromTypes {\n  if (!options?.injector) {\n    assertInInjectionContext(registerStyleComponents);\n  }\n\n  const injector = options?.injector ?? inject(Injector);\n  const manager = inject(StyleComponentManagerService);\n  return manager.registerStyleComponents(components, { injector });\n}\n\n/**\n * Manager of global style components\n */\n@Injectable({ providedIn: 'root' })\nexport class StyleComponentManagerService {\n  /** Component instance registry */\n  private readonly registry = new Map();\n\n  /**\n   * Register style components. Each component is registered at most once.\n   *\n   * @param components Component classes\n   * @param options Options object\n   * @returns Component instance references\n   */\n  registerStyleComponents[]>(\n    components: Types,\n    options: { injector: Injector },\n  ): ComponentRefsFromTypes {\n    return runInInjectionContext(options.injector, () => {\n      const instanceMap = this.getInstanceMap(inject(ApplicationRef));\n      const environmentInjector = inject(EnvironmentInjector);\n\n      return components.map((component) =>\n        this.getInstance(component, instanceMap, environmentInjector),\n      ) as ComponentRefsFromTypes;\n    });\n  }\n\n  /**\n   * Gets the component instance map for an application ref.\n   * The map is created if it doesn't already exist and\n   * is registered to cleanup when the application is destroyed.\n   *\n   * @param appRef Application reference\n   * @returns A component instance map\n   */\n  private getInstanceMap(appRef: ApplicationRef): ComponentInstanceMap {\n    let instanceMap = this.registry.get(appRef);\n    if (!instanceMap) {\n      instanceMap = new Map();\n      this.registry.set(appRef, instanceMap);\n      appRef.onDestroy(() => {\n        this.registry.delete(appRef);\n        instanceMap?.forEach((instance) => instance.destroy());\n      });\n    }\n\n    return instanceMap;\n  }\n\n  /**\n   * Gets or creates a component instance, adding it to the provided instance map.\n   *\n   * @param component Component class\n   * @param instanceMap Instance map to check\n   * @param environmentInjector The environment injector used when creating a new instance\n   * @returns A component ref to the existing or newly created instance\n   */\n  private getInstance(\n    component: Type,\n    instanceMap: ComponentInstanceMap,\n    environmentInjector: EnvironmentInjector,\n  ): ComponentRef {\n    let instance = instanceMap.get(component) as ComponentRef;\n    if (!instance) {\n      instance = createComponent(component, { environmentInjector });\n      instanceMap.set(component, instance);\n    }\n\n    return instance;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SvgIconResolverConfig.html":{"url":"interfaces/SvgIconResolverConfig.html","title":"interface - SvgIconResolverConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SvgIconResolverConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/resolvers.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for a svg icon resolver\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            appHref\n                                        \n                                \n                                \n                                        \n                                            directory\n                                        \n                                \n                                \n                                        \n                                            sanitizer\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appHref\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appHref:     Signal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Signal\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    App href value\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        directory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Base directory of icons and namespace folders\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sanitizer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sanitizer:     DomSanitizer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DomSanitizer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sanitizer to create resource urls\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { IconResolver } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/** Configuration for a svg icon resolver */\nexport interface SvgIconResolverConfig {\n  /** App href value */\n  appHref: Signal;\n  /** Sanitizer to create resource urls */\n  sanitizer: DomSanitizer;\n  /** Base directory of icons and namespace folders */\n  directory: string;\n}\n\n/**\n * Creates svg icon resolver with the specified configuration.\n * The function resolves all svg icons to `directory/[namespace/]name.svg`\n *\n * @param config Configuration object\n * @returns A resolver function\n */\nexport function createSvgIconResolver(config: SvgIconResolverConfig): IconResolver {\n  const { appHref, sanitizer, directory } = config;\n  return (name, namespace) => {\n    const path = joinPath(directory, namespace, name) + '.svg';\n    const url = appHref() + path;\n    return sanitizer.bypassSecurityTrustResourceUrl(url);\n  };\n}\n\n/**\n * Joins path segments into a single string. Removes empty segments and double '/' sequences.\n *\n * @param segments Segments, some of which may be the empty string\n * @returns The joined path\n */\nfunction joinPath(...segments: string[]): string {\n  return segments.join('/').replace(/\\/{2,}/g, '/');\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SvgIconsConfig.html":{"url":"interfaces/SvgIconsConfig.html","title":"interface - SvgIconsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SvgIconsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/providers.ts\n        \n\n\n            \n                Description\n            \n            \n                Svg icon provider configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base directory containing icons and namespace folders\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  EnvironmentProviders,\n  InjectionToken,\n  makeEnvironmentProviders,\n  inject,\n  provideAppInitializer,\n} from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    provideAppInitializer(() => {\n      const initializerFn = registerDefaultFontSetClassesFactory(inject(MatIconRegistry), inject(FONT_ICONS_CONFIG));\n      return initializerFn();\n    }),\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    provideAppInitializer(() => {\n      const initializerFn = registerSvgIconResolverFactory(\n        inject(MatIconRegistry),\n        inject(AppHrefService),\n        inject(DomSanitizer),\n        inject(SVG_ICONS_CONFIG),\n      );\n      return initializerFn();\n    }),\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkType   (state/.../link-registry.model.ts)\n                        \n                        \n                            RawBuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            StorageId   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkType\n                    \n                \n                    \n                        \n                            Types for Link\n\n                        \n                    \n                        \n                            \n                                 Internal\n                            \n                        \n                        \n                            \n                                Value : internal\n                            \n                        \n                        \n                            \n                                 External\n                            \n                        \n                        \n                            \n                                Value : external\n                            \n                        \n            \n        \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        RawBuiltinResourceType\n                    \n                \n                    \n                        \n                            Raw builtin type strings\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n    state/src/storage/storage.model.ts\n    \n        \n            \n                \n                    \n                        \n                        StorageId\n                    \n                \n                    \n                        \n                            StorageId - enum with values as Local, Session - identifier for storage types\n\n                        \n                    \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Session\n                            \n                        \n                        \n                            \n                                Value : session\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        CdkStateModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnyEntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            Breakpoint   (breakpoints/.../breakpoints.ts)\n                        \n                        \n                            BuiltinTypes   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ComponentInstanceMap   (styling/.../style-component-manager.service.ts)\n                        \n                        \n                            ComponentRefsFromTypes   (styling/.../style-component-manager.service.ts)\n                        \n                        \n                            CustomResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CustomResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            EntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ExternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            ExtractBuiltinEntryType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            FieldQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            InternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryContext   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryModel   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryQuery   (state/.../link-registry.state.ts)\n                        \n                        \n                            PatchablePlatformLocationHistoryMethod   (platform-location/.../nothrow-platform-location.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceEntryPayload   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RestArgs   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            SelectQuery   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            StateSelector   (injectors/.../select.ts)\n                        \n                        \n                            StorageContext   (state/.../storage.model.ts)\n                        \n                        \n                            StorageModel   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    AnyEntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.anyEntry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.entry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.field\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    breakpoints/src/lib/breakpoints.ts\n    \n    \n        \n            \n                \n                    \n                    Breakpoint\n                \n            \n            \n                \n                    Name of a single builtin breakpoint\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    BuiltinTypes\n                \n            \n            \n                \n                    Maps raw builtin type strings to ResourceType\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceEntry\n                \n            \n            \n                \n                    Typed custom resource entry\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceType\n                \n            \n            \n                \n                    Custom entry types\n\n                \n            \n            \n                \n                         `custom:${T}`\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExtractBuiltinEntryType\n                \n            \n            \n                \n                    Extracts the builtin entry with type T\n\n                \n            \n            \n                \n                        UnionMember | type | T>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Any resource entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntryPayload\n                \n            \n            \n                \n                    Payload type used when creating custom types\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Resource identifier\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceType\n                \n            \n            \n                \n                    Resource type string with entry typings\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    styling/src/lib/style-component-manager.service.ts\n    \n    \n        \n            \n                \n                    \n                    ComponentInstanceMap\n                \n            \n            \n                \n                    Map of component types to instances\n\n                \n            \n            \n                \n                        Map | ComponentRef<>>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ComponentRefsFromTypes\n                \n            \n            \n                \n                    Helper that turns an array of types into an array of component refs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExternalLinkEntry\n                \n            \n            \n                \n                    type for external link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InternalLinkEntry\n                \n            \n            \n                \n                    type for internal link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkEntry\n                \n            \n            \n                \n                    entry for link registry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkId\n                \n            \n            \n                \n                    Type for unique identifier for link\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryContext\n                \n            \n            \n                \n                    type for State Context of LinkRegistry\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryModel\n                \n            \n            \n                \n                    Model for LinkRegistry State\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.state.ts\n    \n    \n        \n            \n                \n                    \n                    LinkRegistryQuery\n                \n            \n            \n                \n                    Query function for link entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    platform-location/src/lib/nothrow-platform-location.ts\n    \n    \n        \n            \n                \n                    \n                    PatchablePlatformLocationHistoryMethod\n                \n            \n            \n                \n                    Patchable platform location history methods\n\n                \n            \n            \n                \n                        \"replaceState\" | \"pushState\" | \"forward\" | \"back\" | \"historyGo\"\n\n                \n            \n        \n    \n    injectors/src/lib/select/select-snapshot.ts\n    \n    \n        \n            \n                \n                    \n                    RestArgs\n                \n            \n            \n                \n                    Get remaining arguments after applying bound arguments\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectQuery\n                \n            \n            \n                \n                    Function type returned by selectQuerySnapshot\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n    \n        \n            \n                \n                    \n                    StateSelector\n                \n            \n            \n                \n                    Selector type for select style functions\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n    state/src/storage/storage.model.ts\n    \n    \n        \n            \n                \n                    \n                    StorageContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StorageModel\n                \n            \n            \n                \n                    Type alias for the array of Storage objects\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../base-href.actions.ts)\n                        \n                        \n                            Action   (state/.../link-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../storage.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            Breakpoints   (breakpoints/.../breakpoints.ts)\n                        \n                        \n                            BUILTIN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BUILTIN_TYPE_VALUES   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            currentScriptEl   (app-href/.../current-script.ts)\n                        \n                        \n                            currentScriptPath   (app-href/.../current-script.ts)\n                        \n                        \n                            CUSTOM_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_ENTRY_TYPE   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_TYPE_PREFIX   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DEFAULT_FONT_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            DEFAULT_SVG_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            DESTRUCTOR_CACHE   (injectors/.../on-destroy.ts)\n                        \n                        \n                            EMPTY_LINK   (state/.../link-registry.model.ts)\n                        \n                        \n                            EXTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            FONT_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            INITIAL_APP_HREF   (app-href/.../app-href.service.ts)\n                        \n                        \n                            INTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            LINK_REGISTRY_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            MARKDOWN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            NO_ERROR_SENTINEL_OBJ   (injectors/.../snapshot-observer.ts)\n                        \n                        \n                            PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS   (platform-location/.../nothrow-platform-location.ts)\n                        \n                        \n                            RESOURCE_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_ID   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                        \n                            SVG_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            TEXT_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            URL_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/base-href/base-href.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('BaseHref')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('LinkRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/storage/storage.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Storage')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    breakpoints/src/lib/breakpoints.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Breakpoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Mobile: '(max-width: 639.98px)',\n  Desktop: '(min-width: 640px) and (max-width: 1920.98px)',\n  LargeDesktop: '(min-width: 1921px)',\n}\n                    \n                \n\n            \n                \n                    Builtin breakpoints\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BUILTIN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])\n                    \n                \n\n            \n                \n                    Union of all builtin entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BUILTIN_TYPE_VALUES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(RawBuiltinResourceType)\n                    \n                \n\n            \n                \n                    Builtin type strings as an array\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BuiltinResourceType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : RawBuiltinResourceType as BuiltinTypes\n                    \n                \n\n            \n                \n                    Builtin resource types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()\n                    \n                \n\n            \n                \n                    Custom entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .refine((val) => !isBuiltinType(val), 'Invalid builtin resource format')\n  .transform>(createCustomType)\n                    \n                \n\n            \n                \n                    Custom entry type validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_TYPE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'custom:'\n                    \n                \n\n            \n                \n                    Prefix of all custom types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MARKDOWN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Markdown),\n  markdown: z.string(),\n})\n                    \n                \n\n            \n                \n                    Markdown data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])\n                    \n                \n\n            \n                \n                    Builtin or custom entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `ResourceId:'${id}'`)\n  .brand('ResourceId')\n                    \n                \n\n            \n                \n                    Resource identifier validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(RESOURCE_ID, RESOURCE_ENTRY)\n                    \n                \n\n            \n                \n                    State schema\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEXT_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Text),\n  text: z.string(),\n})\n                    \n                \n\n            \n                \n                    Text data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        URL_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Url),\n  url: z.string(),\n})\n                    \n                \n\n            \n                \n                    External url\n\n                \n            \n\n        \n    \n\n    app-href/src/lib/current-script.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentScriptEl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : document.currentScript\n                    \n                \n\n            \n                \n                    Currently executing script's element.\nShould be reliable in most cases unless the script is executed as a module\nor in an older browser, IE etc. (which we don't support anyway)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentScriptPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n\n            \n                \n                    Cached value of found script path\n\n                \n            \n\n        \n    \n\n    icons/src/lib/providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_FONT_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n  defaultClasses: [],\n}\n                    \n                \n\n            \n                \n                    Default values for font icon configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_SVG_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n  directory: 'assets/icons',\n}\n                    \n                \n\n            \n                \n                    Default values for svg icon configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FONT_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('FONT_ICONS_CONFIG')\n                    \n                \n\n            \n                \n                    Injection token for font icon configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SVG_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('SVG_ICONS_CONFIG')\n                    \n                \n\n            \n                \n                    Injection token for svg icon configuration\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DESTRUCTOR_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    Cached destructor observables\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EMPTY_LINK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('@@__EMPTY__')\n                    \n                \n\n            \n                \n                    Empty link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })\n                    \n                \n\n            \n                \n                    Type for external link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })\n                    \n                \n\n            \n                \n                    Type for internal link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LINK_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)\n                    \n                \n\n            \n                \n                    Schema for link registry\n\n                \n            \n\n        \n    \n\n    app-href/src/lib/app-href.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        INITIAL_APP_HREF\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('InitialAppHref', {\n  providedIn: 'root',\n  factory: () => getCurrentScriptBasePath(),\n})\n                    \n                \n\n            \n                \n                    Initial value for appHref. Defaults to the current script's base path\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/select/snapshot-observer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NO_ERROR_SENTINEL_OBJ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n            \n                \n                    Object indicating that no error has been emitted\n\n                \n            \n\n        \n    \n\n    platform-location/src/lib/nothrow-platform-location.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PatchablePlatformLocationHistoryMethod[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'replaceState',\n  'pushState',\n  'forward',\n  'back',\n  'historyGo',\n]\n                    \n                \n\n            \n                \n                    Array of all patchable platform location history methods\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
