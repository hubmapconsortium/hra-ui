var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,0.996,1,3.087]],["body/interfaces/ActionConstructor.html",[0,1.478,1,5.374,2,1.938,3,0.233,4,0.233,5,0.233,6,4.147,7,0.264,8,1.119,9,1.589,10,1.655,11,0.711,12,1.855,13,0.361,14,0.969,15,0.023,16,0.233,17,4.147,18,1.818,19,0.354,20,1.299,21,2.392,22,0.837,23,2.877,24,1.319,25,3.535,26,5.372,27,5.959,28,3.133,29,0.468,30,1.107,31,1.752,32,4.147,33,1.174,34,4.147,35,1.71,36,0.175,37,4.147,38,4.147,39,4.147,40,2.221,41,0.016,42,0.016]],["title/classes/Add.html",[36,0.118,43,1.251]],["body/classes/Add.html",[3,0.197,4,0.197,5,0.347,7,0.305,8,0.599,9,1.048,10,1.077,13,0.171,14,0.673,15,0.023,16,0.308,19,0.347,20,0.988,22,0.491,24,0.858,29,0.568,36,0.2,41,0.014,42,0.014,43,2.397,44,0.638,45,2.102,46,2.102,47,1.441,48,1.813,49,2.54,50,1.963,51,2.581,52,1.872,53,2.882,54,1.854,55,2.751,56,0.425,57,3.494,58,2.399,59,0.425,60,0.393,61,0.304,62,1.564,63,1.592,64,2.567,65,1.872,66,1.207,67,1.207,68,1.207,69,0.393,70,2.016,71,2.13,72,2.13,73,1.861,74,3.412,75,1.441,76,1.207,77,1.532,78,2.002,79,1.441,80,2.647,81,1.207,82,2.102,83,1.017,84,2.399,85,1.207,86,1.532,87,1.532,88,1.429,89,2.732,90,1.532,91,1.532,92,2.184,93,2.184,94,2.394,95,1.745,96,2.184,97,2.184]],["title/classes/Add-1.html",[36,0.099,43,1.05,98,1.628]],["body/classes/Add-1.html",[3,0.197,4,0.197,5,0.367,7,0.305,8,0.6,9,1.049,10,1.078,13,0.172,14,0.769,15,0.023,16,0.27,19,0.347,20,0.989,22,0.492,24,0.859,29,0.568,36,0.201,41,0.014,42,0.014,43,2.429,44,0.639,47,1.443,48,1.815,50,1.964,51,2.583,52,1.875,54,1.855,56,0.425,58,2.401,59,0.425,60,0.394,61,0.305,62,1.564,63,1.397,66,1.209,67,1.209,68,1.209,69,0.394,71,2.131,72,2.131,73,1.863,75,1.443,76,1.209,77,1.535,78,1.756,79,1.443,80,2.648,81,1.209,82,2.104,83,1.594,84,2.795,85,1.209,86,2.104,87,2.104,88,1.477,99,2.104,100,2.104,101,2.264,102,3.305,103,3.154,104,3.5,105,2.019,106,3.765,107,1.636,108,2.753,109,1.875,110,1.875]],["title/classes/AddFromYaml.html",[36,0.118,81,1.251]],["body/classes/AddFromYaml.html",[3,0.197,4,0.197,5,0.359,7,0.306,8,0.602,9,1.051,10,1.082,13,0.172,14,0.828,15,0.023,16,0.308,19,0.347,20,0.991,22,0.493,24,0.862,29,0.569,36,0.201,41,0.015,42,0.015,43,2.38,44,0.641,45,2.108,46,2.108,47,1.447,48,1.481,49,2.434,50,1.965,51,2.586,53,2.563,54,1.596,55,2.247,56,0.427,58,2.108,59,0.427,60,0.395,61,0.306,62,1.516,63,1.4,64,2.575,65,1.881,66,1.213,67,1.213,68,1.213,69,0.395,70,2.025,71,2.134,72,2.134,73,1.867,74,3.498,75,1.447,76,1.213,77,1.54,78,2.158,79,1.447,80,2.746,81,1.661,82,2.586,83,1.4,84,2.405,85,1.213,86,1.54,87,1.54,88,1.431,89,2.739,90,1.54,91,1.54,92,2.195,93,2.195,94,2.402,95,1.754,96,2.195,97,2.195,111,2.993,112,3.511]],["title/classes/AddFromYaml-1.html",[36,0.099,81,1.05,98,1.628]],["body/classes/AddFromYaml-1.html",[3,0.197,4,0.197,5,0.367,7,0.306,8,0.602,9,1.051,10,1.082,13,0.172,14,0.868,15,0.023,16,0.27,19,0.347,20,0.991,22,0.493,24,0.862,29,0.569,36,0.201,41,0.015,42,0.015,43,2.416,44,0.641,47,1.447,48,1.481,50,1.965,51,2.586,54,1.596,56,0.427,58,2.108,59,0.427,60,0.395,61,0.306,62,1.516,63,1.022,66,1.213,67,1.213,68,1.213,69,0.395,71,2.134,72,2.134,73,1.867,75,1.447,76,1.213,77,1.54,78,1.76,79,1.447,80,2.746,81,1.661,82,2.586,83,1.798,84,2.797,85,1.213,86,2.108,87,2.108,88,1.478,99,2.108,100,2.108,101,2.169,102,2.937,103,2.575,105,2.025,106,3.892,107,2.247,108,2.756,109,1.881,110,1.881,111,2.993,113,3.511]],["title/classes/AddMany.html",[36,0.118,76,1.251]],["body/classes/AddMany.html",[3,0.198,4,0.198,5,0.348,7,0.306,8,0.603,9,1.052,10,1.083,13,0.172,14,0.676,15,0.023,16,0.309,19,0.348,20,0.992,22,0.676,24,0.863,29,0.569,36,0.201,41,0.015,42,0.015,43,2.381,44,0.642,45,2.111,46,2.111,47,1.45,48,1.483,49,2.435,50,1.966,51,2.588,53,2.565,54,1.598,55,2.25,56,0.427,58,2.406,59,0.427,60,0.396,61,0.306,62,1.517,63,1.401,64,2.578,65,1.883,66,1.215,67,1.215,68,1.215,69,0.396,70,2.029,71,2.135,72,2.135,73,2.291,74,3.615,75,1.984,76,1.662,77,2.111,78,2.16,79,2.262,80,2.65,81,1.215,82,2.111,83,1.024,84,2.406,85,1.215,86,1.542,87,1.542,88,1.432,89,2.741,90,1.542,91,1.542,92,2.198,93,2.198,94,2.404,95,1.756,96,2.198,97,2.198,114,2.998,115,3.517]],["title/classes/AddMany-1.html",[36,0.099,76,1.05,98,1.628]],["body/classes/AddMany-1.html",[3,0.198,4,0.198,5,0.368,7,0.307,8,0.604,9,1.053,10,1.085,13,0.173,14,0.771,15,0.023,16,0.271,19,0.348,20,0.993,22,0.677,24,0.865,29,0.569,36,0.201,41,0.015,42,0.015,43,2.417,44,0.643,47,1.452,48,1.485,50,1.967,51,2.59,54,1.599,56,0.428,58,2.408,59,0.428,60,0.396,61,0.307,62,1.518,63,1.025,66,1.217,67,1.217,68,1.217,69,0.396,71,2.136,72,2.136,73,2.292,75,1.987,76,1.664,77,2.113,78,2.01,79,2.264,80,2.651,81,1.217,82,2.113,83,1.599,84,2.8,85,1.217,86,2.113,87,2.113,88,1.48,99,2.113,100,2.113,101,2.171,102,2.942,103,2.581,105,2.032,106,3.94,107,1.646,108,2.76,109,1.886,110,1.886,114,3.003,116,3.522]],["title/injectables/AppHrefService.html",[117,1.406,118,2.089]],["body/injectables/AppHrefService.html",[3,0.216,4,0.216,5,0.216,7,0.325,8,0.659,11,0.659,12,1.766,13,0.188,14,0.807,15,0.023,16,0.287,19,0.287,20,1.378,22,0.807,24,0.944,29,0.335,30,1.053,36,0.125,41,0.015,42,0.015,56,0.698,59,0.467,60,0.433,61,0.335,69,0.433,117,1.985,118,2.949,119,2.06,120,4.18,121,5.218,122,3.278,123,2.554,124,4.359,125,3.862,126,3.847,127,1.406,128,6.121,129,5.112,130,3.845,131,5.112,132,5.112,133,5.218,134,1.832,135,1.996,136,5.112,137,3.845,138,4.359,139,3.676,140,2.108,141,1.585,142,5.112,143,3.845,144,4.624,145,2.626,146,1.686,147,1.058,148,4.359,149,3.278,150,2.06,151,3.278,152,2.626,153,3.278,154,3.278,155,3.862,156,3.862,157,2.108,158,3.845,159,3.845,160,3.845,161,3.845,162,3.845,163,3.845]],["title/pipes/AssetUrlPipe.html",[164,2.473,165,3.087]],["body/pipes/AssetUrlPipe.html",[3,0.206,4,0.206,5,0.206,7,0.314,12,1.263,13,0.316,14,0.88,15,0.023,16,0.315,19,0.206,20,1.291,21,2.851,29,0.43,30,1.018,33,0.799,36,0.119,41,0.015,42,0.015,56,0.601,59,0.444,60,0.63,61,0.318,69,0.411,88,1.556,118,2.109,120,4.096,126,3.644,127,1.006,134,1.628,139,3.23,141,1.507,144,3.734,146,1.603,147,1.006,152,4.41,157,2.308,164,3.375,165,4.213,166,3.655,167,5.598,168,3.655,169,5.997,170,4.942,171,2.497,172,4.942,173,3.089,174,1.809,175,3.655,176,4.942,177,3.655,178,4.942,179,5.997,180,2.762,181,3.089,182,3.734,183,5.997,184,3.734,185,4.942,186,4.942,187,5.598,188,4.942,189,3.734,190,4.942,191,3.655,192,4.942,193,4.23,194,4.213,195,3.734,196,3.117,197,4.942,198,3.655,199,3.655,200,4.942,201,3.655,202,3.655,203,2.762,204,2.497,205,3.655,206,3.655,207,3.655,208,2.109,209,3.655,210,3.117,211,3.117,212,3.655,213,3.655]],["title/classes/BaseHrefSelectors.html",[36,0.118,214,2.736]],["body/classes/BaseHrefSelectors.html",[3,0.263,4,0.263,5,0.263,7,0.369,8,1.079,11,0.8,13,0.229,14,0.951,15,0.022,16,0.326,19,0.263,29,0.406,30,1.357,33,1.021,36,0.152,40,3.372,41,0.017,42,0.017,44,0.852,56,0.568,59,0.568,60,0.525,61,0.406,127,1.593,134,1.852,140,2.844,214,4.376,215,3.956,216,3.956,217,4.669,218,3.956,219,4.3,220,3.956,221,5.792,222,2.048,223,4.669,224,4.669,225,2.048,226,1.925,227,4.669,228,4.669]],["title/injectables/BaseHrefState.html",[117,1.406,219,2.473]],["body/injectables/BaseHrefState.html",[3,0.245,4,0.245,5,0.245,7,0.353,8,1.137,9,0.953,11,0.747,13,0.214,15,0.023,16,0.343,19,0.245,29,0.483,30,0.898,36,0.142,41,0.017,42,0.017,56,0.53,59,0.53,60,0.624,61,0.379,117,2.153,119,2.334,127,1.526,134,1.586,135,1.421,140,2.734,147,1.199,150,2.334,215,3.788,216,3.788,219,3.788,220,4.629,222,1.911,226,1.797,229,4.358,230,2.972,231,4.729,232,5.546,233,5.546,234,5.475,235,1.692,236,2.094,237,4.729,238,4.358,239,4.19,240,3.467,241,2.77,242,4.358,243,4.358,244,4.358]],["title/modules/CdkStateModule.html",[245,2.736,246,2.736]],["body/modules/CdkStateModule.html",[3,0.287,4,0.287,5,0.287,8,0.876,15,0.022,16,0.396,18,2.683,19,0.287,36,0.166,41,0.018,42,0.018,49,1.87,101,1.667,140,2.107,147,1.406,219,3.49,226,2.107,246,4.623,247,3.861,248,5.11,249,6.119,250,5.11,251,4.179,252,4.179,253,4.179,254,2.552,255,5.11,256,5.11]],["title/classes/Clear.html",[36,0.118,257,2.263]],["body/classes/Clear.html",[3,0.214,4,0.214,5,0.214,7,0.323,8,0.653,9,1.482,10,1.958,13,0.332,14,0.918,15,0.023,16,0.286,19,0.322,20,1.178,24,0.936,29,0.569,35,2.096,36,0.223,41,0.015,42,0.015,44,0.696,50,1.879,52,2.042,56,0.463,59,0.463,60,0.429,61,0.332,62,1.638,63,1.903,66,1.317,67,1.317,69,0.429,71,1.975,72,1.975,134,1.486,236,1.989,254,3.264,257,4.085,258,2.604,259,2.229,260,3.972,261,4.06,262,3.84,263,3.812,264,2.107,265,2.383,266,2.604,267,3.472,268,2.604,269,3.849,270,3.813,271,2.88]],["title/classes/Delete.html",[36,0.118,270,2.263]],["body/classes/Delete.html",[3,0.211,4,0.211,5,0.211,7,0.32,8,0.642,9,1.495,10,1.947,13,0.335,14,0.961,15,0.023,16,0.283,19,0.319,20,1.168,24,0.92,29,0.566,35,1.545,36,0.225,41,0.015,42,0.015,44,0.684,50,1.867,52,2.007,56,0.456,59,0.456,60,0.422,61,0.326,62,1.631,63,1.934,66,1.294,67,1.294,69,0.422,71,1.958,72,1.958,134,1.474,236,1.976,254,3.318,257,3.544,258,2.56,259,1.644,260,3.949,261,4.021,262,2.832,264,2.092,265,2.343,266,2.56,267,3.872,268,2.56,269,3.986,270,4.22,271,3.797,272,3.748]],["title/components/DestroyHostComponent.html",[273,2.263,274,3.087]],["body/components/DestroyHostComponent.html",[3,0.199,4,0.199,5,0.199,7,0.308,11,1.014,12,1.67,13,0.237,15,0.022,16,0.199,19,0.199,20,1.135,21,3.413,22,0.679,23,2.589,29,0.308,30,0.996,33,0.774,36,0.115,40,2.949,41,0.015,42,0.015,56,0.588,59,0.43,60,0.666,61,0.308,127,1.33,134,0.92,135,1.154,141,1.459,146,1.552,147,0.974,171,2.417,173,3.022,174,1.769,204,3.302,208,2.789,225,2.716,273,3.997,274,5.452,275,4.122,276,5.506,277,5.917,278,4.834,279,3.76,280,5.506,281,3.539,282,3.022,283,4.834,284,5.281,285,4.834,286,4.122,287,4.834,288,5.506,289,2.573,290,5.452,291,4.16,292,5.506,293,4.16,294,4.834,295,4.47,296,3.539,297,3.652,298,3.302,299,4.831,300,4.348,301,5.917,302,4.122,303,4.834,304,4.16,305,3.302,306,4.68,307,4.122,308,3.652,309,3.539,310,2.417,311,2.674,312,3.539,313,3.539,314,3.539,315,3.539,316,3.017,317,4.834,318,2.042,319,5.917,320,3.539,321,2.417,322,2.417,323,3.539,324,2.674,325,3.017,326,3.539]],["title/interfaces/DestructorScope.html",[0,0.996,327,2.736]],["body/interfaces/DestructorScope.html",[0,1.082,2,1.839,3,0.221,4,0.221,5,0.221,7,0.33,11,0.674,13,0.254,15,0.023,16,0.221,19,0.327,22,0.553,23,2.107,29,0.506,30,1.069,31,2.226,33,0.86,36,0.128,41,0.016,42,0.016,48,1.212,50,1.212,56,0.478,59,0.478,60,0.443,61,0.342,69,0.443,127,1.428,134,1.349,135,2.014,174,1.44,181,2.459,189,2.972,203,2.972,235,1.527,264,2.217,279,3.545,327,4.666,328,4.425,329,3.354,330,5.156,331,3.545,332,3.921,333,4.952,334,4.425,335,3.934,336,3.921,337,4.425,338,4.425,339,4.425,340,2.269,341,3.354,342,4.666,343,5.622,344,5.474,345,2.972,346,3.354,347,2.972,348,3.354,349,2.687,350,4.425,351,4.425,352,3.354,353,4.952,354,4.425,355,2.972,356,2.687,357,3.354,358,2.687,359,2.972,360,3.354,361,3.354,362,3.354,363,3.354,364,3.354,365,3.354]],["title/interfaces/FontIconsConfig.html",[0,0.996,366,2.473]],["body/interfaces/FontIconsConfig.html",[0,1.317,2,1.282,3,0.154,4,0.154,5,0.154,7,0.175,8,0.47,11,0.47,12,1.394,13,0.134,14,0.741,15,0.023,16,0.316,18,2.579,19,0.331,22,0.567,24,0.991,29,0.554,30,1.159,31,1.983,33,1.229,35,1.664,41,0.012,42,0.012,44,0.874,61,0.351,69,0.662,88,0.636,101,0.895,118,3.045,123,1.37,126,1.469,135,1.316,140,1.131,141,2.319,145,1.874,147,0.755,174,1.477,236,1.316,259,1.77,264,1.942,289,1.282,366,3.604,367,1.874,368,4.483,369,4.229,370,3.616,371,3.932,372,4.017,373,3.049,374,3.616,375,3.987,376,3.616,377,4.249,378,1.874,379,3.269,380,1.874,381,1.715,382,2.073,383,3.049,384,2.073,385,3.899,386,3.269,387,3.515,388,1.874,389,3.841,390,1.874,391,1.874,392,2.073,393,2.073,394,2.073,395,2.756,396,2.073,397,2.073,398,2.328,399,2.522,400,3.269,401,1.874,402,3.269,403,1.874,404,2.756,405,3.604,406,2.756,407,1.874,408,3.049,409,3.049,410,4.152,411,3.049,412,3.049,413,3.049,414,2.073,415,2.073,416,2.756,417,2.522,418,3.604,419,3.049,420,2.073,421,2.073,422,3.616,423,2.761,424,3.269,425,2.073,426,3.987,427,3.049,428,3.049,429,3.049,430,3.049,431,2.073,432,2.073,433,2.073,434,2.073,435,2.073]],["title/interfaces/HoverContext.html",[0,0.996,436,2.736]],["body/interfaces/HoverContext.html",[0,0.824,2,1.4,3,0.168,4,0.168,5,0.168,7,0.191,11,0.513,12,1.485,13,0.147,15,0.023,16,0.283,19,0.242,20,1.037,21,1.728,22,0.818,31,1.794,33,0.655,36,0.097,41,0.013,42,0.013,69,0.566,83,1.696,123,1.496,125,2.263,135,1.641,146,1.313,147,0.824,157,2.575,173,1.872,174,1.096,184,2.263,195,2.263,208,2.903,225,1.313,236,1.641,241,2.513,282,1.872,291,3.249,293,2.263,295,3.249,297,3.249,298,2.937,299,2.263,300,3.145,305,2.046,308,2.263,310,2.046,311,3.249,318,3.36,322,2.046,423,1.728,436,3.802,437,2.554,438,4.29,439,4.689,440,4.719,441,3.667,442,4.966,443,2.747,444,3.667,445,3.667,446,4.966,447,5.63,448,5.325,449,2.554,450,3.667,451,2.554,452,2.263,453,3.802,454,3.667,455,2.554,456,3.667,457,3.667,458,2.554,459,2.554,460,3.667,461,2.554,462,2.554,463,4.29,464,3.667,465,5.548,466,4.29,467,2.554,468,2.554,469,2.554,470,2.554,471,3.249,472,2.554,473,3.667,474,2.554,475,4.29,476,2.554,477,2.263,478,2.554,479,3.802,480,3.667,481,3.249,482,2.554,483,2.554,484,2.554,485,2.554,486,2.554,487,2.554,488,2.263,489,2.554,490,2.554,491,2.554,492,2.554,493,2.554,494,2.554,495,2.554,496,2.554,497,2.554,498,2.554,499,2.554,500,2.554,501,2.554,502,2.554,503,2.554,504,2.554,505,4.689,506,4.689,507,4.689,508,4.689,509,4.689,510,4.689,511,4.689,512,4.689,513,2.554]],["title/directives/HoverDirective.html",[318,2.089,322,2.473]],["body/directives/HoverDirective.html",[0,0.692,3,0.141,4,0.141,5,0.141,7,0.16,11,0.431,12,1.306,13,0.266,15,0.023,16,0.256,19,0.213,20,0.937,21,1.45,22,0.761,30,1.042,31,1.983,33,0.55,36,0.082,41,0.011,42,0.011,56,0.756,59,0.46,60,0.425,61,0.44,69,0.511,83,1.72,123,1.256,125,1.899,127,1.04,135,1.927,146,1.102,147,0.692,157,2.436,171,1.717,173,2.364,174,1.384,184,1.899,195,1.899,208,2.622,222,1.658,225,1.658,236,1.482,241,2.525,282,2.364,291,4.095,293,1.899,295,2.857,297,1.899,298,1.717,299,1.899,300,2.841,305,1.717,308,1.899,310,1.717,311,1.899,318,3.285,321,1.717,322,2.583,423,2.181,436,2.857,437,2.143,438,3.224,439,4.856,440,4.926,441,2.143,442,3.224,443,2.708,444,2.143,445,2.143,446,4.622,447,5.768,448,5.038,449,2.143,450,3.875,451,2.143,452,1.899,453,3.434,454,4.622,455,4.31,456,4.856,457,4.856,458,2.143,459,2.143,460,3.224,461,2.143,462,2.143,463,3.875,464,3.224,465,5.841,466,4.622,467,2.143,468,2.143,469,2.143,470,2.143,471,3.434,472,2.143,473,4.31,474,2.143,475,3.875,476,2.143,477,1.899,478,2.143,479,4.464,480,4.856,481,4.303,482,3.875,483,3.224,484,4.31,485,2.143,486,2.143,487,2.143,488,3.434,489,3.875,490,3.224,491,4.31,492,2.143,493,2.143,494,2.143,495,2.143,496,2.143,497,2.143,498,2.143,499,2.143,500,2.143,501,2.143,502,2.143,503,2.143,504,2.143,505,4.31,506,4.31,507,4.31,508,4.31,509,4.31,510,4.31,511,4.31,512,4.31,513,2.143,514,3.224,515,3.781,516,3.224,517,3.781,518,3.781,519,3.781,520,3.781,521,3.781,522,3.781,523,3.781,524,2.514,525,2.514,526,2.514]],["title/interfaces/IconsConfig.html",[0,0.996,395,2.473]],["body/interfaces/IconsConfig.html",[0,1.305,2,1.262,3,0.152,4,0.152,5,0.152,7,0.172,8,0.463,11,0.463,12,1.377,13,0.196,14,0.56,15,0.023,16,0.314,18,2.564,19,0.329,22,0.56,24,0.979,29,0.552,30,1.151,31,1.973,33,1.221,35,1.113,41,0.012,42,0.012,44,0.728,61,0.456,69,0.658,88,0.626,101,0.881,118,3.021,123,1.349,126,1.446,135,1.301,140,1.113,141,2.159,145,1.844,147,0.743,174,1.46,236,0.881,259,1.749,264,1.93,289,1.262,366,3.816,367,1.844,368,4.467,369,4.279,370,3.013,371,3.973,372,3.239,373,2.04,374,3.583,375,3.957,376,3.583,377,4.221,378,1.844,379,3.239,380,1.844,381,1.688,382,2.04,383,3.013,384,2.04,385,4.031,386,3.816,387,3.492,388,1.844,389,3.994,390,1.844,391,1.844,392,3.013,393,3.013,394,3.013,395,3.239,396,3.957,397,3.957,398,2.301,399,2.493,400,3.239,401,1.844,402,3.239,403,1.844,404,2.724,405,3.577,406,2.724,407,1.844,408,3.013,409,3.013,410,4.131,411,3.013,412,3.013,413,3.013,414,2.04,415,2.04,416,2.724,417,2.493,418,3.577,419,3.013,420,2.04,421,2.04,422,3.583,423,2.736,424,3.239,425,2.04,426,3.957,427,3.013,428,3.013,429,3.013,430,3.013,431,2.04,432,2.04,433,2.04,434,2.04,435,2.04]],["title/directives/LinkDirective.html",[318,2.089,324,2.736]],["body/directives/LinkDirective.html",[3,0.112,4,0.112,5,0.112,7,0.25,8,0.341,9,0.976,11,0.341,12,1.091,13,0.318,14,0.926,15,0.023,16,0.274,18,0.873,19,0.112,20,0.92,22,0.444,29,0.389,30,0.92,33,1.299,36,0.065,41,0.01,42,0.01,48,0.614,49,2.348,53,2.087,54,1.418,55,2.087,56,0.771,59,0.543,60,0.355,61,0.49,64,2.775,65,1.066,69,0.611,74,1.691,88,0.909,89,1.577,90,1.385,94,2.231,95,2.231,101,0.649,127,0.869,134,1.02,135,1.03,138,2.692,139,1.822,140,2.45,141,1.841,146,0.873,147,0.548,157,2.5,171,1.36,173,1.974,174,1.635,181,2.792,182,2.386,204,2.157,208,1.149,222,1.958,225,1.721,230,0.873,235,1.734,236,1.457,259,1.958,264,0.688,269,1.149,289,1.834,290,3.808,300,4.148,302,2.692,304,1.504,310,1.36,318,2.809,321,1.36,324,2.386,325,3.808,452,1.504,453,3.915,479,2.386,481,4.49,514,3.346,516,2.692,527,1.991,528,2.692,529,3.924,530,4.256,531,4.256,532,3.158,533,4.802,534,3.346,535,3.346,536,4.418,537,3.924,538,3.158,539,3.158,540,3.158,541,3.158,542,4.869,543,1.991,544,3.346,545,1.991,546,2.386,547,4.418,548,1.991,549,2.692,550,3.374,551,5.181,552,1.991,553,3.044,554,1.991,555,3.924,556,1.991,557,3.158,558,3.158,559,3.158,560,3.158,561,3.158,562,3.158,563,5.181,564,3.158,565,1.698,566,3.158,567,3.924,568,3.346,569,3.158,570,3.924,571,3.158,572,3.158,573,3.924,574,3.158,575,3.158,576,3.158,577,1.991,578,3.808,579,3.158,580,1.698,581,1.991,582,1.991,583,1.504,584,1.36,585,1.991,586,1.698,587,1.991,588,1.504,589,1.991,590,1.991,591,1.698,592,1.991,593,1.991,594,1.991,595,1.991,596,1.991,597,1.991,598,1.991,599,1.991,600,1.991,601,4.466,602,1.991,603,1.991,604,1.504,605,3.924,606,1.991,607,1.991,608,1.991,609,2.692,610,1.991,611,1.991,612,1.991,613,1.991,614,3.158,615,1.991,616,3.158,617,3.158,618,3.158,619,3.158,620,3.158,621,1.991,622,2.692,623,1.991,624,1.991,625,3.924,626,1.991,627,1.991,628,1.991,629,1.991,630,1.991,631,1.36,632,1.991,633,1.991,634,1.991,635,1.36,636,1.991,637,2.157,638,1.991,639,1.991,640,1.991,641,1.991,642,1.991,643,3.158,644,1.991,645,3.158,646,3.158,647,1.991,648,1.991,649,3.158,650,1.991,651,1.698,652,3.158,653,1.991,654,1.991,655,1.991,656,1.991,657,1.991,658,1.991]],["title/classes/LinkRegistrySelectors.html",[36,0.118,583,2.736]],["body/classes/LinkRegistrySelectors.html",[3,0.22,4,0.22,5,0.22,7,0.329,11,0.671,13,0.338,15,0.023,16,0.347,18,2.54,19,0.22,29,0.536,30,1.194,31,1.687,33,1.131,36,0.127,40,3.301,41,0.016,42,0.016,44,0.714,45,2.268,46,2.268,49,2.549,53,2.417,54,1.984,55,1.829,56,0.476,59,0.476,60,0.44,61,0.45,62,1.616,68,1.351,69,0.582,127,1.423,139,2.984,157,1.613,218,3.532,222,1.716,225,1.716,226,1.613,230,2.945,235,2.393,251,2.673,289,1.829,347,2.956,443,1.954,553,3.853,583,3.907,584,2.673,631,2.673,659,2.956,660,5.172,661,4.842,662,3.913,663,3.913,664,4.409,665,4.377,666,4.377,667,2.956,668,3.336,669,3.913,670,3.913,671,2.956,672,3.336,673,3.336,674,3.913,675,5.172,676,2.956]],["title/injectables/LinkRegistryState.html",[117,1.406,251,2.473]],["body/injectables/LinkRegistryState.html",[3,0.122,4,0.122,5,0.263,7,0.342,9,1.332,11,0.372,13,0.284,14,0.582,15,0.023,16,0.343,19,0.19,20,0.854,22,0.657,29,0.556,30,1.156,31,0.707,33,0.474,35,0.894,36,0.07,41,0.01,42,0.01,43,2.232,45,2.356,46,2.356,48,1.04,49,2.23,53,1.578,54,1.806,55,1.013,56,0.616,59,0.616,60,0.604,61,0.505,62,1.463,64,2.221,65,1.161,68,0.749,69,0.527,73,1.311,74,1.808,76,1.937,78,2.271,80,2.177,81,1.616,83,1.362,85,1.616,88,1.175,89,3.148,90,2.052,91,2.459,94,2.897,107,1.013,109,1.808,117,1.311,119,1.161,123,1.083,127,0.929,135,1.829,141,0.894,146,0.951,147,0.596,150,1.161,157,2.091,174,0.794,180,1.638,222,2.224,226,0.894,230,2.834,235,2.085,240,3.808,241,3.043,251,2.306,267,2.306,289,1.578,340,1.251,358,2.306,443,1.083,528,1.848,530,1.638,531,1.638,550,1.638,553,1.355,584,1.481,586,1.848,588,1.638,604,2.551,609,1.848,622,1.848,635,1.481,637,2.306,661,1.638,665,1.638,666,2.551,667,1.638,671,1.638,676,1.638,677,1.638,678,2.878,679,2.878,680,3.376,681,2.878,682,2.878,683,2.878,684,4.68,685,2.878,686,5.617,687,2.878,688,2.168,689,2.878,690,2.878,691,2.168,692,2.878,693,4.324,694,2.878,695,2.168,696,2.878,697,2.878,698,2.878,699,2.11,700,2.878,701,2.878,702,2.878,703,2.168,704,3.535,705,3.832,706,2.878,707,3.376,708,3.376,709,2.168,710,5.072,711,1.848,712,1.848,713,3.376,714,4.68,715,1.848,716,1.481,717,1.848,718,2.878,719,2.878,720,1.848,721,1.848,722,2.878,723,1.848,724,1.848,725,3.376,726,3.376,727,2.168,728,2.168,729,2.168,730,2.878,731,1.848,732,1.848,733,2.168,734,1.848,735,1.848,736,1.848,737,1.848,738,1.355,739,1.848,740,1.848,741,1.848,742,1.848,743,2.168,744,3.376,745,2.168,746,3.376,747,2.168,748,1.638,749,2.168,750,2.168,751,3.376,752,1.848,753,2.168,754,2.168,755,2.168,756,2.168,757,2.168,758,2.168,759,2.168,760,2.168,761,2.168,762,2.168]],["title/classes/LoadFromYaml.html",[36,0.118,85,1.251]],["body/classes/LoadFromYaml.html",[3,0.196,4,0.196,5,0.373,7,0.305,8,0.598,9,1.047,10,1.075,13,0.171,14,0.826,15,0.023,16,0.307,19,0.347,20,0.987,22,0.49,24,0.856,29,0.568,36,0.2,41,0.014,42,0.014,43,2.377,44,0.637,45,2.099,46,2.099,47,1.438,48,1.475,49,2.431,50,1.962,51,2.397,53,2.554,54,1.591,55,2.238,56,0.424,58,2.099,59,0.424,60,0.393,61,0.304,62,1.513,63,1.394,64,2.564,65,1.869,66,1.205,67,1.205,68,1.205,69,0.393,70,2.013,71,2.129,72,2.129,73,1.859,74,3.557,75,1.438,76,1.205,77,1.53,78,2,79,1.438,80,2.729,81,1.205,82,2.099,83,1.016,84,2.792,85,1.653,86,2.099,87,2.099,88,1.511,89,2.73,90,1.53,91,1.53,92,2.181,93,2.181,94,2.391,95,1.743,96,2.181,97,2.181,763,2.975,764,3.489]],["title/classes/LoadFromYaml-1.html",[36,0.099,85,1.05,98,1.628]],["body/classes/LoadFromYaml-1.html",[3,0.197,4,0.197,5,0.383,7,0.305,8,0.599,9,1.048,10,1.077,13,0.171,14,0.866,15,0.023,16,0.27,19,0.347,20,0.988,22,0.491,24,0.858,29,0.568,36,0.2,41,0.014,42,0.014,43,2.414,44,0.638,47,1.441,48,1.477,50,1.963,51,2.399,54,1.592,56,0.425,58,2.102,59,0.425,60,0.393,61,0.304,62,1.514,63,1.017,66,1.207,67,1.207,68,1.207,69,0.393,71,2.13,72,2.13,73,1.861,75,1.441,76,1.207,77,1.532,78,1.754,79,1.441,80,2.73,81,1.207,82,2.102,83,1.592,84,2.955,85,1.655,86,2.399,87,2.399,88,1.539,99,2.102,100,2.102,101,2.167,102,2.93,103,2.567,105,2.016,106,3.888,107,1.633,108,2.751,109,1.872,110,1.872,763,2.979,765,3.494]],["title/classes/LoadMarkdown.html",[36,0.118,110,1.939]],["body/classes/LoadMarkdown.html",[3,0.194,4,0.194,5,0.383,7,0.302,8,0.592,9,1.039,10,1.063,13,0.169,14,0.862,15,0.023,16,0.267,19,0.345,20,0.979,22,0.485,24,0.847,29,0.566,36,0.2,41,0.014,42,0.014,43,2.409,44,0.63,47,1.423,48,1.464,50,1.955,51,2.383,52,1.848,54,1.582,56,0.419,58,2.084,59,0.419,60,0.388,61,0.3,62,1.596,63,1.005,66,1.192,67,1.192,68,1.192,69,0.388,71,2.121,72,2.121,73,1.845,75,1.423,76,1.192,77,1.513,78,1.739,79,1.423,80,2.641,81,1.192,82,2.084,83,1.704,84,2.948,85,1.192,86,2.383,87,2.383,88,1.558,99,2.084,100,2.084,101,2.24,102,3.288,103,2.545,105,1.991,106,3.751,107,1.613,108,3.096,109,2.545,110,2.545,766,2.942]],["title/classes/Navigate.html",[36,0.118,89,1.809]],["body/classes/Navigate.html",[3,0.195,4,0.195,5,0.346,7,0.304,8,0.595,9,1.043,10,1.07,13,0.17,14,0.67,15,0.023,16,0.307,19,0.346,20,0.983,22,0.488,24,0.852,29,0.567,36,0.2,41,0.014,42,0.014,43,2.325,44,0.634,45,2.093,46,2.093,47,1.432,48,1.47,49,2.517,50,1.959,51,2.391,52,1.86,53,2.876,54,1.587,55,2.23,56,0.422,58,2.093,59,0.422,60,0.391,61,0.302,62,1.599,63,1.587,64,3.144,65,1.86,66,1.199,67,1.199,68,1.199,69,0.391,70,2.003,71,2.125,72,2.125,73,1.853,74,3.405,75,1.432,76,1.199,77,1.523,78,1.995,79,1.432,80,2.644,81,1.199,82,2.093,83,1.011,84,2.391,85,1.199,86,1.523,87,1.523,88,1.509,89,3.176,90,2.093,91,2.093,92,2.983,93,2.983,94,2.932,95,2.384,96,2.983,97,2.983,766,2.961]],["title/classes/ResourceRegistrySelectors.html",[36,0.118,767,3.087]],["body/classes/ResourceRegistrySelectors.html",[3,0.126,4,0.126,5,0.126,7,0.327,8,0.383,11,0.383,13,0.332,14,0.485,15,0.023,16,0.267,19,0.289,29,0.493,30,1.34,31,2.193,33,1.388,36,0.073,40,3.663,41,0.01,42,0.01,44,0.408,49,1.546,54,1.893,56,0.689,59,0.689,60,0.638,61,0.493,62,1.661,68,0.771,69,0.475,83,1.872,88,1.314,99,2.569,100,2.569,101,1.378,102,2.754,103,1.85,108,2.65,127,0.95,134,0.58,139,3.607,140,0.921,141,1.424,214,1.687,218,2.36,220,3.248,222,2.486,225,0.979,226,0.921,230,3.013,235,1.64,252,1.525,443,1.726,553,4.361,635,1.525,637,2.36,651,1.904,659,1.687,664,4.636,668,1.904,673,1.904,676,1.687,738,3.908,767,2.946,768,2.946,769,3.455,770,3.455,771,5.857,772,3.455,773,4.858,774,4.755,775,2.233,776,3.602,777,3.455,778,2.233,779,5.126,780,3.455,781,2.233,782,3.602,783,3.455,784,2.233,785,5.412,786,3.455,787,4.225,788,2.233,789,4.225,790,3.455,791,2.233,792,3.455,793,2.233,794,1.687,795,3.602,796,3.602,797,1.904,798,1.904,799,1.904,800,4.225,801,3.455,802,4.755,803,4.755,804,2.233,805,2.233,806,2.946,807,2.233,808,3.455,809,2.233,810,4.225,811,4.225,812,2.233,813,4.225,814,2.233]],["title/injectables/ResourceRegistryState.html",[117,1.406,252,2.473]],["body/injectables/ResourceRegistryState.html",[3,0.141,4,0.141,5,0.32,7,0.362,9,1.425,11,0.43,13,0.279,14,0.638,15,0.023,16,0.332,19,0.141,20,0.517,22,0.709,25,3.218,29,0.56,30,1.217,33,0.825,36,0.082,41,0.011,42,0.011,43,2.299,48,1.163,54,1.81,56,0.658,59,0.658,60,0.64,61,0.514,62,1.329,68,0.866,69,0.425,73,1.465,76,2.039,78,2.354,80,2.292,81,1.744,83,1.47,85,1.744,88,1.255,91,2.495,99,2.495,100,2.495,101,1.48,106,2.178,107,1.172,108,2.36,109,2.705,110,3.048,117,1.465,119,1.343,123,1.253,127,1.038,135,1.856,146,1.1,147,0.69,150,1.343,157,1.034,164,1.713,180,1.895,222,2.375,226,1.034,230,2.918,235,2.102,240,3.959,241,3.163,252,2.578,340,1.447,358,3.449,440,2.852,677,1.895,678,3.218,679,3.218,681,3.218,682,3.218,683,3.218,685,3.218,687,3.218,689,3.218,690,3.218,692,3.218,693,4.617,694,3.218,696,3.218,697,3.218,698,3.218,699,2.36,700,3.218,701,3.218,702,3.218,704,3.87,705,4.696,706,4.305,711,2.138,712,2.138,715,2.138,716,1.713,717,2.138,722,3.218,723,2.138,724,2.138,730,3.218,731,2.138,732,2.138,734,2.138,735,2.138,736,2.138,737,3.218,738,2.36,739,2.138,740,2.138,741,2.138,768,2.138,773,1.895,794,1.895,806,2.138,815,3.218,816,5.766,817,2.508,818,2.508,819,2.508,820,3.775,821,3.775,822,2.508,823,2.508,824,2.138,825,2.508,826,2.508,827,2.508,828,2.508,829,2.508,830,2.508]],["title/classes/ScopedDestructorSubject.html",[36,0.118,359,2.736]],["body/classes/ScopedDestructorSubject.html",[0,1.069,3,0.219,4,0.219,5,0.219,7,0.328,10,1.197,13,0.283,15,0.023,16,0.219,19,0.325,22,0.723,23,2.757,29,0.502,30,0.801,31,2.143,33,0.849,36,0.126,41,0.016,42,0.016,44,0.709,48,1.586,50,1.586,56,0.472,59,0.472,60,0.437,61,0.338,69,0.437,134,1.5,135,1.679,174,1.422,181,2.429,189,2.936,203,2.936,235,1.998,264,2.123,279,3.516,327,4.831,328,4.389,329,3.313,330,5.064,331,2.654,332,2.936,333,3.313,334,3.313,336,2.936,337,3.313,338,3.313,339,4.922,340,2.242,341,3.313,342,4.964,343,5.93,344,5.452,345,2.936,346,3.313,347,2.936,348,3.313,349,2.654,350,4.389,351,4.389,352,3.313,353,5.602,354,5.24,355,3.889,356,3.516,357,4.389,358,3.516,359,3.889,360,4.389,361,4.389,362,3.313,363,3.313,364,3.313,365,3.313,831,3.885]],["title/interfaces/SelectOptions.html",[0,0.996,832,3.087]],["body/interfaces/SelectOptions.html",[0,1.017,2,1.728,3,0.208,4,0.317,5,0.208,7,0.235,11,0.634,12,1.72,13,0.276,15,0.023,16,0.354,19,0.317,22,0.519,23,1.981,29,0.49,30,1.026,31,1.837,33,1.231,41,0.015,42,0.015,61,0.49,69,0.634,95,3.307,134,0.961,146,1.622,147,1.017,150,2.668,174,2.205,181,3.113,193,4.255,194,4.801,196,3.153,210,4.246,211,3.153,225,2.184,226,1.525,230,2.47,241,1.847,284,3.153,289,1.728,305,3.846,331,2.526,340,2.873,356,3.402,371,2.873,388,3.402,398,2.133,399,2.312,443,1.847,477,2.794,547,4.801,667,2.794,699,2.312,705,4.552,832,5.137,833,3.153,834,5.137,835,6.478,836,4.98,837,4.801,838,4.98,839,3.698,840,4.98,841,3.698,842,3.153,843,2.794,844,4.246,845,3.698,846,3.698,847,3.698,848,2.794,849,3.698,850,3.153,851,3.698,852,3.698,853,4.98,854,3.698,855,6.025,856,3.698,857,2.794,858,3.698,859,3.698,860,3.698,861,3.698,862,3.698,863,3.698,864,3.698,865,3.153,866,3.698,867,3.153,868,3.698,869,3.698,870,3.698,871,3.698,872,3.698]],["title/classes/Set.html",[36,0.118,236,1.181]],["body/classes/Set.html",[3,0.271,4,0.271,5,0.271,7,0.375,8,1.17,9,1.29,10,1.482,13,0.236,14,0.896,15,0.022,16,0.271,19,0.271,22,0.829,24,1.181,29,0.419,36,0.156,41,0.018,42,0.018,44,0.878,50,1.818,56,0.585,59,0.585,60,0.541,61,0.419,66,1.662,67,1.662,69,0.541,71,1.662,72,1.662,140,2.864,215,4.029,216,4.029,220,4.358,236,1.924,239,5.026,268,4.029,873,4.102,874,4.811,875,4.811,876,4.102]],["title/classes/Set-1.html",[36,0.099,98,1.628,236,0.991]],["body/classes/Set-1.html",[3,0.208,4,0.208,5,0.208,7,0.317,8,0.633,9,1.49,10,1.937,13,0.338,14,0.984,15,0.023,16,0.28,19,0.316,20,1.16,24,0.906,29,0.564,35,1.522,36,0.224,41,0.015,42,0.015,44,0.674,50,1.855,52,1.977,56,0.449,59,0.449,60,0.415,61,0.321,62,1.624,63,1.927,66,1.275,67,1.275,69,0.415,71,1.943,72,1.943,134,1.683,236,2.195,254,3.305,257,3.517,258,2.522,259,1.619,260,4.048,261,4.01,262,2.789,264,2.08,265,2.308,266,2.522,267,3.843,268,3.398,269,4.01,270,3.764,271,2.789,877,3.692]],["title/classes/SnapshotObserver.html",[36,0.118,878,3.087]],["body/classes/SnapshotObserver.html",[3,0.214,4,0.214,5,0.214,7,0.364,11,0.653,13,0.187,15,0.023,16,0.214,19,0.214,22,0.714,29,0.442,30,1.257,33,0.833,36,0.124,41,0.015,42,0.015,44,0.696,56,0.695,59,0.618,60,0.572,61,0.442,69,0.429,127,1.398,134,1.877,135,1.989,157,2.096,204,3.472,235,1.973,264,1.317,340,2.199,349,3.472,356,4.166,443,3.332,631,3.472,699,4.29,748,4.32,848,3.84,857,3.84,878,4.334,879,5.201,880,3.25,881,5.083,882,5.083,883,6.671,884,5.083,885,5.083,886,5.718,887,5.718,888,5.083,889,3.812,890,6.1,891,5.718,892,3.812,893,5.083,894,5.083,895,3.812,896,3.25,897,4.876,898,3.812,899,3.812,900,3.812,901,3.812,902,5.718,903,5.718]],["title/classes/StorageSelectors.html",[36,0.118,904,3.087]],["body/classes/StorageSelectors.html",[3,0.217,4,0.217,5,0.217,7,0.246,11,0.661,14,0.808,15,0.023,16,0.324,19,0.217,30,1.4,33,1.12,36,0.187,40,3.512,41,0.015,42,0.015,44,0.704,56,0.623,59,0.623,60,0.647,61,0.446,62,1.668,127,1.41,134,1.332,218,3.5,222,2.247,225,2.247,226,1.591,235,2.598,253,2.635,254,3.394,260,3.831,261,3.86,265,2.412,269,2.956,349,3.5,850,3.29,857,2.915,904,4.369,905,3.858,906,5.124,907,2.956,908,6.129,909,5.124,910,5.124,911,3.858,912,4.369,913,4.369,914,5.794,915,5.124,916,5.124,917,5.124,918,3.858,919,6.129,920,5.124,921,5.124,922,3.858,923,5.124,924,3.858,925,3.858,926,3.858,927,3.858,928,3.858,929,5.124,930,3.858,931,3.858,932,3.858,933,3.858]],["title/injectables/StorageState.html",[117,1.406,253,2.473]],["body/injectables/StorageState.html",[3,0.157,4,0.157,5,0.157,7,0.339,9,0.612,11,0.48,13,0.3,15,0.023,16,0.333,19,0.157,22,0.393,28,2.115,29,0.557,30,1.168,33,0.895,35,2.337,36,0.157,40,2.593,41,0.012,42,0.012,56,0.648,59,0.648,60,0.638,61,0.464,62,1.741,63,1.192,98,1.499,117,1.59,119,1.499,127,1.126,134,1.385,135,1.995,141,1.154,147,0.77,150,1.499,157,1.154,193,2.115,222,2.123,226,1.154,230,2.336,231,3.491,235,1.88,236,2.174,237,3.491,239,3.094,240,3.824,253,3.639,254,3.458,257,3.702,259,2.336,260,2.56,261,3.803,264,2.046,265,2.56,269,3.074,270,3.702,304,3.094,568,2.386,635,1.912,637,2.797,742,4.128,748,2.115,907,2.362,912,4.834,913,4.834,914,4.834,934,2.799,935,4.095,936,4.095,937,5.933,938,4.095,939,2.799,940,4.095,941,4.095,942,4.095,943,2.799,944,4.095,945,4.095,946,4.095,947,4.095,948,2.799,949,4.095,950,4.543,951,3.491,952,3.491,953,4.095,954,2.799,955,2.799,956,2.799,957,2.386,958,2.799,959,4.095,960,4.095,961,2.799,962,2.799,963,2.799,964,2.799,965,4.842,966,4.842,967,2.799,968,4.842,969,2.799,970,2.799,971,2.799,972,4.095,973,2.799,974,2.799,975,2.799,976,2.799,977,2.799,978,2.799,979,2.799]],["title/injectables/StyleComponentManagerService.html",[117,1.406,980,3.087]],["body/injectables/StyleComponentManagerService.html",[3,0.163,4,0.163,5,0.163,7,0.267,11,0.718,13,0.31,15,0.023,16,0.163,18,1.838,19,0.236,20,0.596,22,0.693,23,1.548,28,4.087,29,0.551,30,1.183,31,0.943,33,1.256,36,0.16,41,0.013,42,0.013,44,0.9,56,0.351,59,0.509,60,0.325,61,0.252,69,0.609,75,2.033,95,3.272,117,1.627,119,1.548,127,1.153,146,1.267,147,0.795,155,2.183,156,2.183,157,2.033,208,1.667,241,1.443,264,1.448,273,4.421,275,5.586,282,1.806,298,1.974,306,4.339,307,2.464,330,2.183,332,4.087,336,3.726,398,1.667,423,2.845,471,3.167,550,2.183,578,5.5,591,2.464,631,2.863,716,4.406,815,3.573,843,4.339,865,2.464,867,2.464,907,3.651,980,3.573,981,3.573,982,2.464,983,4.931,984,5.409,985,2.89,986,4.191,987,2.89,988,4.896,989,6.874,990,4.191,991,4.191,992,6.179,993,2.89,994,2.89,995,2.89,996,2.464,997,4.205,998,2.464,999,2.464,1000,3.167,1001,2.464,1002,2.89,1003,2.89,1004,4.931,1005,4.191,1006,2.89,1007,2.89,1008,2.89,1009,2.89,1010,6.45,1011,2.89,1012,2.89,1013,2.89,1014,2.89,1015,2.89,1016,2.89,1017,2.89,1018,2.89,1019,2.89,1020,2.89,1021,2.89,1022,2.89,1023,2.89,1024,2.89,1025,2.89,1026,2.89,1027,2.89,1028,2.89,1029,2.89,1030,2.464,1031,2.89,1032,2.89,1033,2.89,1034,2.89]],["title/interfaces/SvgIconResolverConfig.html",[0,0.996,1035,3.087]],["body/interfaces/SvgIconResolverConfig.html",[0,1.056,2,1.794,3,0.216,4,0.216,5,0.216,7,0.244,8,0.875,11,0.658,12,1.764,13,0.281,14,0.939,15,0.023,16,0.323,19,0.287,21,2.946,23,2.056,29,0.444,30,1.052,31,1.995,33,1.254,35,1.583,41,0.015,42,0.015,48,1.183,60,0.575,69,0.646,88,0.89,101,1.665,120,3.488,126,3.507,134,1.327,140,2.105,144,4.621,147,1.056,152,4.178,264,1.326,369,3.587,371,3.529,378,2.622,379,4.178,380,2.622,381,2.399,385,3.981,387,4.178,389,3.919,390,4.178,391,3.488,410,3.488,416,4.178,418,4.564,546,3.858,604,3.858,1035,4.892,1036,3.838,1037,5.106,1038,3.838,1039,3.838,1040,3.838,1041,3.838,1042,3.838,1043,3.838,1044,6.116,1045,3.838,1046,3.838,1047,3.838,1048,3.838,1049,3.838,1050,3.838]],["title/interfaces/SvgIconsConfig.html",[0,0.996,386,2.473]],["body/interfaces/SvgIconsConfig.html",[0,1.317,2,1.282,3,0.154,4,0.154,5,0.154,7,0.175,8,0.692,11,0.47,12,1.394,13,0.134,14,0.741,15,0.023,16,0.316,18,2.579,19,0.331,22,0.567,24,0.991,29,0.554,30,1.159,31,1.983,33,1.229,35,1.131,41,0.012,42,0.012,44,0.736,61,0.351,69,0.662,88,0.636,101,0.895,118,3.045,123,1.37,126,1.469,135,1.316,140,1.131,141,2.176,145,1.874,147,0.755,174,1.477,236,0.895,259,1.77,264,1.942,289,1.282,366,3.269,367,1.874,368,4.348,369,4.229,370,3.616,371,3.932,372,3.269,373,2.073,374,3.616,375,3.987,376,3.616,377,4.249,378,1.874,379,3.269,380,1.874,381,1.715,382,2.073,383,3.049,384,2.073,385,3.98,386,3.604,387,3.98,388,2.756,389,4.017,390,2.756,391,2.756,392,2.073,393,2.073,394,2.073,395,2.756,396,2.073,397,2.073,398,2.328,399,2.522,400,3.269,401,1.874,402,3.269,403,1.874,404,2.756,405,3.604,406,2.756,407,1.874,408,3.049,409,3.049,410,4.152,411,3.049,412,3.049,413,3.049,414,2.073,415,2.073,416,2.756,417,2.522,418,3.604,419,3.049,420,2.073,421,2.073,422,3.616,423,2.761,424,3.269,425,2.073,426,3.987,427,3.049,428,3.049,429,3.049,430,3.049,431,2.073,432,2.073,433,2.073,434,2.073,435,2.073]],["title/dependencies.html",[1051,2.591,1052,3.284]],["body/dependencies.html",[15,0.022,41,0.019,42,0.019,147,1.499,226,2.246,289,2.97,588,4.116,1052,4.801,1053,5.448,1054,5.448,1055,5.448,1056,5.448,1057,6.355,1058,5.448,1059,5.448]],["title/miscellaneous/enumerations.html",[1060,1.753,1061,3.706]],["body/miscellaneous/enumerations.html",[11,0.85,13,0.243,15,0.022,41,0.018,42,0.018,45,2.176,46,2.176,49,1.816,63,1.444,88,1.393,90,2.636,91,2.636,99,2.176,100,2.176,107,2.319,108,2.81,134,1.841,254,2.478,259,2.176,261,3.731,584,4.106,738,3.758,907,3.468,951,5.514,952,5.514,1060,2.862,1061,4.23,1062,3.748,1063,5.079,1064,5.125,1065,3.748,1066,4.23,1067,3.748,1068,3.748,1069,4.23,1070,4.961]],["title/index.html",[11,0.521,124,2.591,1071,3.039]],["body/index.html",[15,0.019,41,0.019,42,0.019,345,4.209,355,4.209,1072,6.438,1073,5.571,1074,5.571,1075,6.438,1076,5.571,1077,6.438,1078,6.438,1079,5.571]],["title/modules.html",[247,3.71]],["body/modules.html",[15,0.02,41,0.02,42,0.02,246,4.306,247,4.306,1080,5.7,1081,5.7,1082,5.7]],["title/overview.html",[1083,4.186]],["body/overview.html",[2,2.528,15,0.019,41,0.019,42,0.019,44,0.987,98,3.593,119,2.897,164,3.694,245,4.781,273,3.381,316,4.611,321,3.694,424,3.694,488,4.086,1052,4.086,1083,4.611,1084,5.408,1085,5.408,1086,5.408,1087,6.328,1088,5.408,1089,5.408,1090,5.408,1091,5.408,1092,5.408]],["title/properties.html",[12,1.501,1051,2.591]],["body/properties.html",[12,1.974,15,0.021,41,0.02,42,0.02,1093,5.714,1094,5.714]],["title/miscellaneous/typealiases.html",[1060,1.753,1095,4.346]],["body/miscellaneous/typealiases.html",[9,0.987,11,0.55,13,0.342,14,0.45,15,0.02,18,1.406,31,2.231,35,1.322,41,0.014,42,0.014,45,1.98,46,1.98,49,2.188,53,2.11,54,1.925,55,2.11,63,1.314,83,1.314,90,1.406,91,1.406,99,1.98,100,1.98,101,1.95,102,2.418,103,2.418,107,1.499,127,0.882,182,2.423,225,1.406,230,2.291,234,4.455,240,2.005,241,2.255,254,1.602,273,3.737,282,2.005,306,2.423,331,2.19,417,2.005,443,2.255,553,3.737,565,3.849,580,2.734,659,4.516,661,3.411,665,3.411,666,2.423,671,2.423,677,3.411,686,3.849,716,3.084,718,3.849,719,3.849,721,3.849,773,3.411,776,3.849,779,3.849,782,3.849,785,3.849,795,4.455,796,4.835,797,2.734,798,2.734,799,2.734,816,3.849,833,2.734,834,2.734,837,2.734,843,2.423,844,3.849,907,3.272,937,3.849,950,2.734,957,3.849,981,2.734,982,4.455,988,3.849,996,2.734,997,3.849,998,3.849,999,2.734,1000,3.948,1001,2.734,1030,2.734,1060,1.85,1062,4.813,1063,5.351,1065,5.245,1066,3.849,1067,3.411,1068,2.423,1069,2.734,1096,3.207,1097,3.849,1098,4.515,1099,4.515,1100,4.515,1101,4.515,1102,3.849,1103,5.097,1104,2.734,1105,3.849,1106,4.515,1107,4.515,1108,4.515,1109,5.225,1110,4.515,1111,3.207,1112,3.207,1113,3.207,1114,4.455,1115,3.207,1116,3.207,1117,6.505,1118,3.207,1119,3.207,1120,4.515,1121,3.207,1122,3.207,1123,2.734,1124,2.734,1125,2.734,1126,2.734,1127,2.734,1128,2.734,1129,2.734,1130,2.734,1131,3.207,1132,3.207,1133,3.207,1134,4.515,1135,3.207,1136,3.207,1137,3.207]],["title/miscellaneous/variables.html",[1060,1.753,1138,3.706]],["body/miscellaneous/variables.html",[8,0.907,9,1.425,11,0.407,13,0.333,14,0.743,15,0.022,18,1.589,22,0.743,24,1.298,41,0.011,42,0.011,45,1.589,46,1.589,47,2.025,49,1.798,54,1.43,62,0.583,63,0.692,70,1.371,78,1.326,79,1.811,83,1.055,88,1.018,90,1.042,91,1.589,94,1.81,99,1.589,100,1.589,101,1.432,105,1.371,108,1.694,120,3.612,121,2.026,122,3.09,126,1.273,127,0.654,133,2.026,134,1.854,139,1.371,141,2.941,148,2.026,149,3.09,150,1.273,151,3.09,152,2.475,153,3.09,154,2.026,155,1.796,156,1.796,174,1.608,215,1.623,216,1.623,230,1.042,235,0.923,236,0.775,245,1.796,258,1.623,259,1.589,264,1.827,266,1.623,279,1.623,286,2.026,300,1.486,342,1.796,367,1.623,368,2.475,369,3.071,371,2.834,372,1.623,381,1.486,385,2.265,387,1.486,398,2.091,399,2.265,400,2.475,401,1.623,402,2.475,403,1.623,404,2.475,405,2.475,406,2.475,407,1.623,417,1.486,530,2.738,531,2.738,533,2.026,534,2.026,535,2.026,536,2.026,544,3.09,546,1.796,549,2.026,672,2.026,699,1.486,720,3.09,738,2.265,752,2.026,794,2.738,824,3.09,842,2.026,848,1.796,873,3.09,876,2.026,879,2.026,880,3.09,896,2.026,897,3.09,907,2.534,1000,2.738,1060,1.371,1062,3.996,1063,5.131,1064,2.026,1065,4.924,1067,3.996,1068,1.796,1097,2.026,1102,2.026,1103,4.509,1104,2.026,1105,3.09,1114,4.509,1123,2.026,1124,2.026,1125,2.026,1126,2.026,1127,2.026,1128,2.026,1129,2.026,1130,2.026,1138,2.026,1139,2.377,1140,2.377,1141,3.624,1142,2.377,1143,3.624,1144,3.624,1145,3.624,1146,3.624,1147,3.624,1148,4.392,1149,3.624,1150,4.392,1151,4.392,1152,3.624,1153,4.913,1154,3.624,1155,2.377,1156,3.624,1157,4.392,1158,2.377,1159,4.392,1160,4.392,1161,2.377,1162,3.624,1163,4.392,1164,3.624,1165,4.392,1166,4.392,1167,2.377,1168,3.624,1169,2.377,1170,2.377,1171,4.913,1172,2.377,1173,5.574,1174,2.377,1175,2.377,1176,2.377,1177,2.377,1178,2.377,1179,3.624,1180,3.624,1181,2.377,1182,2.377,1183,5.574,1184,2.377,1185,3.624,1186,2.377,1187,2.377,1188,2.377,1189,3.624,1190,2.377,1191,2.377,1192,2.377,1193,2.377,1194,2.377,1195,2.377,1196,2.377,1197,2.377,1198,2.377,1199,2.377,1200,2.377,1201,2.377,1202,2.377,1203,2.377,1204,2.377,1205,2.377,1206,3.624,1207,2.377,1208,2.377,1209,2.377,1210,2.377,1211,2.377,1212,2.377,1213,2.377,1214,2.377,1215,2.377,1216,4.392,1217,2.377,1218,2.377,1219,2.377,1220,2.377,1221,2.377,1222,2.377,1223,2.377]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":304,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["0.0.1",{"_index":1094,"title":{},"body":{"properties.html":{}}}],["1",{"_index":98,"title":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/Set-1.html":{}},"body":{"injectables/StorageState.html":{},"overview.html":{}}}],["15.1.0",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1089,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1091,"title":{},"body":{"overview.html":{}}}],["3.7.6",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1090,"title":{},"body":{"overview.html":{}}}],["8",{"_index":1092,"title":{},"body":{"overview.html":{}}}],["_data",{"_index":478,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["_state",{"_index":915,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["accessors",{"_index":519,"title":{},"body":{"directives/HoverDirective.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('clear",{"_index":262,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{}}}],["action('delete",{"_index":271,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{}}}],["action('load",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('navigate",{"_index":92,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["action('set",{"_index":268,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":690,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":694,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":687,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(clear",{"_index":938,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(delete",{"_index":942,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(loadfromyaml",{"_index":702,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":821,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(navigate",{"_index":708,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["action(set",{"_index":237,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/StorageState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{}}}],["actiongroup",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["actiongroup('basehref",{"_index":876,"title":{},"body":{"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('linkregistry",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":105,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('storage",{"_index":266,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actions/actions",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["actiontyperegistry",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activatedroute",{"_index":555,"title":{},"body":{"directives/LinkDirective.html":{}}}],["actual_component",{"_index":326,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{},"classes/Add-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":828,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":706,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":81,"title":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":741,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adding",{"_index":1027,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["additional",{"_index":867,"title":{},"body":{"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{}}}],["addmany",{"_index":76,"title":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":685,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":734,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":681,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":689,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml",{"_index":682,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":692,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["affects",{"_index":560,"title":{},"body":{"directives/LinkDirective.html":{}}}],["afterviewinit",{"_index":288,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["alias",{"_index":1134,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1096,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":932,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["along",{"_index":474,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["already",{"_index":1016,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["altkey",{"_index":619,"title":{},"body":{"directives/LinkDirective.html":{}}}],["anchor",{"_index":600,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular",{"_index":726,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["angular/cdk/overlay",{"_index":449,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/cdk/portal",{"_index":451,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/common",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":712,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":147,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{}}}],["angular/material/icon",{"_index":378,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["angular/platform",{"_index":380,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["angular/router",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["anyentry",{"_index":769,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentry(state",{"_index":772,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentryquery",{"_index":776,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["anytext",{"_index":770,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":777,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyway",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":120,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/variables.html":{}}}],["app_initializer",{"_index":374,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["apphref",{"_index":126,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["apphrefservice",{"_index":118,"title":{"injectables/AppHrefService.html":{}},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["apphrefservice.apphref",{"_index":420,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["apphrefsignal",{"_index":160,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["application",{"_index":423,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{}}}],["applicationref",{"_index":991,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["apply",{"_index":373,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["applying",{"_index":1133,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["appref",{"_index":1019,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["appref.ondestroy",{"_index":1023,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["area'].includes(this.tagname",{"_index":602,"title":{},"body":{"directives/LinkDirective.html":{}}}],["args",{"_index":845,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["argument",{"_index":1136,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["arguments",{"_index":565,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":1000,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["assertininjectioncontext",{"_index":993,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["assertininjectioncontext(registerstylecomponents",{"_index":1006,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["asset",{"_index":179,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["assets/icons",{"_index":407,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["asseturl",{"_index":172,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["asseturlpipe",{"_index":165,"title":{"pipes/AssetUrlPipe.html":{}},"body":{"pipes/AssetUrlPipe.html":{}}}],["associated",{"_index":354,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["async",{"_index":684,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["attach",{"_index":482,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attached",{"_index":466,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attaches",{"_index":360,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["attaching",{"_index":283,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["attr.href",{"_index":539,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.rel",{"_index":540,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.target",{"_index":541,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attribute",{"_index":563,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attributes",{"_index":625,"title":{},"body":{"directives/LinkDirective.html":{}}}],["automatically",{"_index":863,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["available",{"_index":1081,"title":{},"body":{"modules.html":{}}}],["await",{"_index":744,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["back",{"_index":1129,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":573,"title":{},"body":{"directives/LinkDirective.html":{}}}],["basehref",{"_index":220,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{}}}],["basehref(value",{"_index":221,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["basehref.endswith",{"_index":243,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["basehrefselectors",{"_index":214,"title":{"classes/BaseHrefSelectors.html":{}},"body":{"classes/BaseHrefSelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["basehrefselectors.basehref",{"_index":812,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["basehrefstate",{"_index":219,"title":{"injectables/BaseHrefState.html":{}},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{}}}],["bind",{"_index":633,"title":{},"body":{"directives/LinkDirective.html":{}}}],["boolean",{"_index":547,"title":{},"body":{"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{}}}],["bootstrap",{"_index":1085,"title":{},"body":{"overview.html":{}}}],["both",{"_index":432,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["bottom",{"_index":508,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["bound",{"_index":182,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["brand('linkid",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand('resourceid",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":746,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["browse",{"_index":1082,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":381,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["building",{"_index":96,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["builtin",{"_index":1067,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builtin_entry",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtin_type_values",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtinresourcetype",{"_index":794,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["builtinresourcetype.markdown",{"_index":806,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["builtinresourcetype.text",{"_index":808,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtinresourcetype.url",{"_index":814,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtintypes",{"_index":1097,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["button",{"_index":616,"title":{},"body":{"directives/LinkDirective.html":{}}}],["cached",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback",{"_index":338,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["called",{"_index":865,"title":{},"body":{"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{}}}],["case",{"_index":637,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["cases",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb",{"_index":337,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["cdk",{"_index":1072,"title":{},"body":{"index.html":{}}}],["cdkstatemodule",{"_index":246,"title":{"modules/CdkStateModule.html":{}},"body":{"modules/CdkStateModule.html":{},"modules.html":{}}}],["cdr",{"_index":210,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["cdr.markforcheck",{"_index":856,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["change",{"_index":193,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{}}}],["changedetectorref",{"_index":196,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["changes",{"_index":195,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["check",{"_index":1028,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["child",{"_index":303,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"overview.html":{}}}],["cleanup",{"_index":330,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"injectables/StyleComponentManagerService.html":{}}}],["clear",{"_index":257,"title":{"classes/Clear.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{}}}],["clear(ctx",{"_index":936,"title":{},"body":{"injectables/StorageState.html":{}}}],["clears",{"_index":940,"title":{},"body":{"injectables/StorageState.html":{}}}],["click",{"_index":542,"title":{},"body":{"directives/LinkDirective.html":{}}}],["collects",{"_index":607,"title":{},"body":{"directives/LinkDirective.html":{}}}],["commands",{"_index":752,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":930,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["complete",{"_index":858,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["completes",{"_index":358,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["component",{"_index":273,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["component's",{"_index":590,"title":{},"body":{"directives/LinkDirective.html":{}}}],["component/directive/pipe",{"_index":287,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["component_template",{"_index":320,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["componentinstancemap",{"_index":997,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["componentref",{"_index":306,"title":{},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["componentrefsfromtypes",{"_index":988,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["components",{"_index":275,"title":{},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{}}}],["components.map((component",{"_index":1013,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["computedprevious",{"_index":198,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["computedprevious(this.apphref",{"_index":207,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["config",{"_index":410,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["configuration",{"_index":371,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["connectionpositionpair",{"_index":446,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["constructor(basehref",{"_index":874,"title":{},"body":{"classes/Set.html":{}}}],["constructor(entries",{"_index":114,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["constructor(id",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set-1.html":{}}}],["constructor(readonly",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["constructor(scope",{"_index":361,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["constructor(url",{"_index":763,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["constructor(yaml",{"_index":111,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["container",{"_index":299,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["container.createcomponent(destroyhostcomponent",{"_index":312,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["containing",{"_index":388,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconsConfig.html":{}}}],["content",{"_index":440,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/ResourceRegistryState.html":{}}}],["content(content",{"_index":459,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["context",{"_index":241,"title":{},"body":{"injectables/BaseHrefState.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":972,"title":{},"body":{"injectables/StorageState.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["create(container",{"_index":294,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["createcomponent",{"_index":994,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["createcomponent(component",{"_index":1033,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["created",{"_index":471,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["createexternalurl",{"_index":586,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["createexternalurl(entry.url",{"_index":759,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["createexternalurl(link.url",{"_index":640,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createinternalurl",{"_index":587,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createinternalurl(injector",{"_index":638,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createlinkid('@@__empty__",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createoverlay",{"_index":499,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["createsvgiconresolver",{"_index":383,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["createsvgiconresolver(config",{"_index":1040,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["creating",{"_index":1030,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["css",{"_index":183,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["ctrlkey",{"_index":617,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ctx",{"_index":240,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.getstate()[id",{"_index":743,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":731,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["ctx.setstate",{"_index":977,"title":{},"body":{"injectables/StorageState.html":{}}}],["ctx.setstate(basehref",{"_index":244,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["current",{"_index":139,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentscriptel",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentscriptpath",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":1114,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["custom:${t",{"_index":1115,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["custom_entry",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_entry_type",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_type_prefix",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customresourceentry",{"_index":1099,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["customresourcetype",{"_index":1100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["data",{"_index":83,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data(data",{"_index":468,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["dataquery",{"_index":779,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["date",{"_index":495,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["deals",{"_index":603,"title":{},"body":{"directives/LinkDirective.html":{}}}],["declarations",{"_index":1084,"title":{},"body":{"overview.html":{}}}],["decorators",{"_index":222,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["default",{"_index":141,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["default_font_icons_config",{"_index":404,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["default_svg_icons_config",{"_index":406,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["defaultclasses",{"_index":372,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":150,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":800,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["defined",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["delete",{"_index":270,"title":{"classes/Delete.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{}}}],["delete(ctx",{"_index":941,"title":{},"body":{"injectables/StorageState.html":{}}}],["deletes",{"_index":944,"title":{},"body":{"injectables/StorageState.html":{}}}],["dependencies",{"_index":1052,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":430,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["destroy",{"_index":284,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/SelectOptions.html":{}}}],["destroy.ts",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destroy/destroy",{"_index":280,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["destroy/destructor",{"_index":328,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["destroy/on",{"_index":842,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/variables.html":{}}}],["destroyed",{"_index":1018,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["destroyhostcomponent",{"_index":274,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{}}}],["destructor",{"_index":342,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["destructor_cache",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destructorscope",{"_index":327,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["detach",{"_index":489,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["detection",{"_index":194,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["detector",{"_index":209,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["determines",{"_index":341,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["different",{"_index":632,"title":{},"body":{"directives/LinkDirective.html":{}}}],["directive",{"_index":318,"title":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["directives",{"_index":321,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"overview.html":{}}}],["directory",{"_index":387,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["directory/[namespace/]name.svg",{"_index":1039,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["disable",{"_index":850,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{}}}],["disconnects",{"_index":313,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["dispatch",{"_index":579,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dispatch(linkregistryactions.navigate",{"_index":599,"title":{},"body":{"directives/LinkDirective.html":{}}}],["display",{"_index":291,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["displayed",{"_index":457,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["docheck",{"_index":529,"title":{},"body":{"directives/LinkDirective.html":{}}}],["document.currentscript",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doesn't",{"_index":1015,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["dom",{"_index":277,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["domsanitizer",{"_index":379,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["don't",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["double",{"_index":1046,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["draft[id",{"_index":979,"title":{},"body":{"injectables/StorageState.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["effect",{"_index":187,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["el",{"_index":293,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["element",{"_index":300,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["elementref",{"_index":310,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["emits",{"_index":356,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["emitted",{"_index":848,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["emitting",{"_index":859,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["empty",{"_index":546,"title":{},"body":{"directives/LinkDirective.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/variables.html":{}}}],["empty_link",{"_index":544,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":512,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["endhover",{"_index":491,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["entries",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["entry",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry(state",{"_index":780,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.extras",{"_index":756,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.markdown",{"_index":807,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.rel",{"_index":762,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.target",{"_index":761,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.text",{"_index":809,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.[field",{"_index":804,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":676,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["entryquery",{"_index":782,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["enum",{"_index":1070,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1061,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":1029,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["environmentinjector",{"_index":992,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["environmentproviders",{"_index":375,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["equal",{"_index":898,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["err",{"_index":891,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":699,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["error(`cannot",{"_index":749,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["error(`no",{"_index":963,"title":{},"body":{"injectables/StorageState.html":{}}}],["error(err",{"_index":888,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorobserver",{"_index":887,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":893,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":900,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["eslint",{"_index":925,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["eslint/ban",{"_index":928,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["etc",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":481,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["execute",{"_index":1079,"title":{},"body":{"index.html":{}}}],["executed",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executing",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":1017,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["existing",{"_index":550,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["existingclasses",{"_index":413,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["explicitly",{"_index":849,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["exports",{"_index":1086,"title":{},"body":{"overview.html":{}}}],["extends",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["external",{"_index":91,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["external_link_schema",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["externallinkentry",{"_index":718,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["extractbuiltinentrytype",{"_index":1101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extracts",{"_index":1116,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extras",{"_index":94,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":203,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["field",{"_index":771,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["field(state",{"_index":783,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["fieldquery",{"_index":785,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["filename",{"_index":693,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["first",{"_index":302,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["flexibleconnectedto(this.el",{"_index":503,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["folders",{"_index":391,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["font",{"_index":368,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["font_icons_config",{"_index":400,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["fonticons",{"_index":396,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["fonticonsconfig",{"_index":366,"title":{"interfaces/FontIconsConfig.html":{}},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["format",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forward",{"_index":1128,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":672,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["fragment",{"_index":533,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["full",{"_index":169,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":331,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["generated",{"_index":1074,"title":{},"body":{"index.html":{}}}],["get(_state",{"_index":909,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["get(url",{"_index":736,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["getcurrentscriptbasepath",{"_index":148,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["getentry",{"_index":673,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["getentry(state",{"_index":803,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield",{"_index":789,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield(id",{"_index":811,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getinstance",{"_index":1031,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["getinstancemap(appref",{"_index":1020,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["getlinkattributes(link",{"_index":634,"title":{},"body":{"directives/LinkDirective.html":{}}}],["gets",{"_index":631,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/SnapshotObserver.html":{},"injectables/StyleComponentManagerService.html":{}}}],["getstorage",{"_index":935,"title":{},"body":{"injectables/StorageState.html":{}}}],["getstorage(id",{"_index":947,"title":{},"body":{"injectables/StorageState.html":{}}}],["getting",{"_index":124,"title":{"index.html":{}},"body":{"injectables/AppHrefService.html":{}}}],["given",{"_index":914,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["global",{"_index":815,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["globally",{"_index":680,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["graph",{"_index":1080,"title":{},"body":{"modules.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["handle",{"_index":479,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["handler's",{"_index":1135,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":1119,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":890,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["helper",{"_index":998,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["history",{"_index":1125,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["historygo",{"_index":1130,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["holding",{"_index":231,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/StorageState.html":{}}}],["host",{"_index":290,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["host.component.ts",{"_index":281,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:14",{"_index":309,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:22",{"_index":296,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hostbinding",{"_index":577,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.href",{"_index":574,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.rel",{"_index":575,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.target",{"_index":576,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbindings",{"_index":538,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener",{"_index":452,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hostlistener('click",{"_index":571,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener('mouseout",{"_index":490,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlistener('mouseover",{"_index":483,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlisteners",{"_index":516,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hover",{"_index":439,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hovercontext",{"_index":436,"title":{"interfaces/HoverContext.html":{}},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hoverdirective",{"_index":322,"title":{"directives/HoverDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hra",{"_index":289,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{}}}],["hrahover",{"_index":455,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hrahover]'},{'name",{"_index":323,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hrahoverdata",{"_index":515,"title":{},"body":{"directives/HoverDirective.html":{}}}],["hralink",{"_index":325,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["href",{"_index":140,"title":{},"body":{"injectables/AppHrefService.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["href.actions",{"_index":242,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href.actions.ts",{"_index":873,"title":{},"body":{"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["href.actions.ts:7",{"_index":875,"title":{},"body":{"classes/Set.html":{}}}],["href.selectors.ts",{"_index":217,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.selectors.ts:12",{"_index":224,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.service",{"_index":201,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["href.service.ts",{"_index":122,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["href.service.ts:21",{"_index":143,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["href.service.ts:28",{"_index":137,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["href.service.ts:35",{"_index":130,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["href.state",{"_index":227,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.state.ts",{"_index":229,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href.state.ts:20",{"_index":238,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href/.../app",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["href/.../current",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["href/base",{"_index":216,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["href/src/lib/app",{"_index":121,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["href/src/lib/asset",{"_index":167,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["href/src/lib/current",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["html",{"_index":317,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["http",{"_index":722,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":711,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["icon",{"_index":369,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["iconresolver",{"_index":1037,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["icons",{"_index":389,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["icons/.../providers.ts",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["icons/src/lib/providers.ts",{"_index":367,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["icons/src/lib/resolvers.ts",{"_index":1036,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["iconsconfig",{"_index":395,"title":{"interfaces/IconsConfig.html":{}},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["id",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["id,key",{"_index":916,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["identifier",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ie",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignore",{"_index":931,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["immediately",{"_index":357,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["immer",{"_index":956,"title":{},"body":{"injectables/StorageState.html":{}}}],["implements",{"_index":204,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{}}}],["implicit",{"_index":442,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["imports",{"_index":255,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["improved",{"_index":698,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["increasechangecount(ctx",{"_index":976,"title":{},"body":{"injectables/StorageState.html":{}}}],["increases",{"_index":971,"title":{},"body":{"injectables/StorageState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"injectables/AppHrefService.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":896,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["initial",{"_index":133,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["initial_app_href",{"_index":153,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["initialapphref",{"_index":158,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["inject",{"_index":146,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{}}}],["inject(apphrefservice).apphref",{"_index":205,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["inject(changedetectorref",{"_index":211,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/SelectOptions.html":{}}}],["inject(elementref).nativeelement",{"_index":308,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(environmentinjector",{"_index":1012,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["inject(httpclient",{"_index":724,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["inject(initial_app_href",{"_index":159,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["inject(injector",{"_index":591,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["inject(ngzone",{"_index":729,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(overlay",{"_index":470,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(router",{"_index":727,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(store",{"_index":870,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(stylecomponentmanagerservice",{"_index":1007,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["inject(viewcontainerref",{"_index":476,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject>(elementref).nativeelement.tagname.tolowercase",{"_index":595,"title":{},"body":{"directives/LinkDirective.html":{}}}],["injectable",{"_index":117,"title":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["injectables",{"_index":119,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"overview.html":{}}}],["injectdestroy",{"_index":841,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["injection",{"_index":398,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":145,"title":{},"body":{"injectables/AppHrefService.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["injectiontoken('initialapphref",{"_index":154,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken>('font_icons_config",{"_index":401,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken>('svg_icons_config",{"_index":403,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["injector",{"_index":578,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["injectors/.../on",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":1108,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../select.ts",{"_index":1111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../snapshot",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/src/lib/on",{"_index":279,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select/select",{"_index":1131,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/select.ts",{"_index":833,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/snapshot",{"_index":879,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":725,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["input",{"_index":453,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["input('hrahover",{"_index":458,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hrahoverdata",{"_index":467,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hralink",{"_index":589,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inputs",{"_index":514,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inserted",{"_index":301,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["inside",{"_index":297,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["instance",{"_index":989,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instance.destroy",{"_index":1026,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap",{"_index":1010,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap.get(component",{"_index":1032,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap.set(component",{"_index":1034,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instancemap?.foreach((instance",{"_index":1025,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["instances",{"_index":996,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"overview.html":{}}}],["internal",{"_index":90,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["internal_link_schema",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internallinkentry",{"_index":719,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["invalid",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isanchorelement",{"_index":601,"title":{},"body":{"directives/LinkDirective.html":{}}}],["isbuiltintype(val",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdestructorscopelike(obj",{"_index":348,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["isobject",{"_index":350,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["isresourceurl",{"_index":605,"title":{},"body":{"directives/LinkDirective.html":{}}}],["it's",{"_index":132,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["items",{"_index":920,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["joined",{"_index":1048,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["joinpath(...segments",{"_index":1049,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["joinpath(directory",{"_index":1041,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["joins",{"_index":1043,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["js",{"_index":715,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["k",{"_index":651,"title":{},"body":{"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["keeping",{"_index":678,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["key",{"_index":269,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key,value",{"_index":912,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key:string",{"_index":965,"title":{},"body":{"injectables/StorageState.html":{}}}],["keyof",{"_index":1002,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["latest",{"_index":883,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["legend",{"_index":316,"title":{},"body":{"components/DestroyHostComponent.html":{},"overview.html":{}}}],["length",{"_index":908,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["length(_state",{"_index":917,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["library",{"_index":1073,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":285,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["lifetime",{"_index":862,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["line",{"_index":926,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"modules/CdkStateModule.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link'].includes(this.tagname",{"_index":606,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.commands",{"_index":639,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.extras",{"_index":610,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.type",{"_index":621,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link/url",{"_index":611,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link?.type",{"_index":636,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link_registry_schema",{"_index":720,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["link_registry_schema.parse(data",{"_index":733,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["linkdirective",{"_index":324,"title":{"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["linkentry",{"_index":55,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid:'${id",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistry",{"_index":721,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryactions",{"_index":582,"title":{},"body":{"directives/LinkDirective.html":{}}}],["linkregistrycontext",{"_index":686,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistrymodel",{"_index":661,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryquery",{"_index":665,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryselectors",{"_index":583,"title":{"classes/LinkRegistrySelectors.html":{}},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{}}}],["linkregistrystate",{"_index":251,"title":{"injectables/LinkRegistryState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{}}}],["links",{"_index":74,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["linktype",{"_index":584,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["linktype.external",{"_index":622,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["linktype.internal",{"_index":609,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["list",{"_index":946,"title":{},"body":{"injectables/StorageState.html":{}}}],["literal",{"_index":986,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["load",{"_index":704,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":732,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":109,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":85,"title":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":723,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":110,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":820,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":87,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["loadyaml",{"_index":683,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":701,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["local",{"_index":952,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["localstorage",{"_index":961,"title":{},"body":{"injectables/StorageState.html":{}}}],["location",{"_index":417,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["location.ts",{"_index":1105,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["location/.../nothrow",{"_index":1104,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["location/src/lib/nothrow",{"_index":1123,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["makeenvironmentproviders",{"_index":376,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["makeenvironmentproviders([providefonticons(config?.fonticons",{"_index":434,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["manage",{"_index":949,"title":{},"body":{"injectables/StorageState.html":{}}}],["manager",{"_index":983,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["manager.registerstylecomponents(components",{"_index":1008,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["manager.service.ts",{"_index":982,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["manager.service.ts:58",{"_index":987,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["many",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["map",{"_index":716,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["map((action",{"_index":829,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":827,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["maps",{"_index":1112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mark",{"_index":836,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markchangeref",{"_index":186,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["markdown",{"_index":108,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(getfield",{"_index":786,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["markdown_entry",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markfn",{"_index":855,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markforcheck(options",{"_index":853,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marking",{"_index":851,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marks",{"_index":846,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":409,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["maticonregistry",{"_index":377,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["merged",{"_index":647,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergeextras(opt1",{"_index":648,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey",{"_index":650,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('fragment",{"_index":656,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('preservefragment",{"_index":657,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('queryparams",{"_index":654,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('queryparamshandling",{"_index":655,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('relativeto",{"_index":658,"title":{},"body":{"directives/LinkDirective.html":{}}}],["merges",{"_index":641,"title":{},"body":{"directives/LinkDirective.html":{}}}],["messages",{"_index":700,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":171,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["metakey",{"_index":620,"title":{},"body":{"directives/LinkDirective.html":{}}}],["method",{"_index":267,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"injectables/LinkRegistryState.html":{},"classes/Set-1.html":{}}}],["methods",{"_index":127,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1060,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":1120,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["module",{"_index":245,"title":{"modules/CdkStateModule.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":247,"title":{"modules.html":{}},"body":{"modules/CdkStateModule.html":{},"modules.html":{}}}],["monotypeoperatorfunction",{"_index":838,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["mounted",{"_index":593,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouse",{"_index":480,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["mouseevent",{"_index":570,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouseout",{"_index":517,"title":{},"body":{"directives/HoverDirective.html":{}}}],["mouseover",{"_index":518,"title":{},"body":{"directives/HoverDirective.html":{}}}],["multi",{"_index":428,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["multiple",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["nagivate",{"_index":557,"title":{},"body":{"directives/LinkDirective.html":{}}}],["name",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["namespace",{"_index":390,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["navigate",{"_index":89,"title":{"classes/Navigate.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["navigate(ctx",{"_index":707,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetoexternal(entry",{"_index":758,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetointernal(entry",{"_index":753,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigation",{"_index":97,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["never",{"_index":805,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":307,"title":{},"body":{"components/DestroyHostComponent.html":{},"injectables/StyleComponentManagerService.html":{}}}],["next",{"_index":857,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}}}],["next(value",{"_index":894,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["nextobserver",{"_index":886,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngafterviewinit",{"_index":314,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["ngdocheck",{"_index":612,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ngmodule",{"_index":249,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxs/store",{"_index":226,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{}}}],["ngxsmodule",{"_index":250,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxsmodule.forfeature([basehrefstate",{"_index":256,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxtension/computed",{"_index":199,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["ngzone",{"_index":713,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["no_error_sentinel",{"_index":899,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["no_error_sentinel_obj",{"_index":897,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":750,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["none",{"_index":292,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["notifies",{"_index":192,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["notifyonchange",{"_index":835,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["null",{"_index":189,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["nullable",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":919,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["nx",{"_index":1075,"title":{},"body":{"index.html":{}}}],["obj",{"_index":344,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obj.ondestroy",{"_index":352,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obje",{"_index":974,"title":{},"body":{"injectables/StorageState.html":{}}}],["object",{"_index":264,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["object.values(rawbuiltinresourcetype",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objects",{"_index":950,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":705,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["observable's",{"_index":861,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["observables",{"_index":286,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":881,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts",{"_index":880,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["observer.ts:18",{"_index":892,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:30",{"_index":895,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:38",{"_index":889,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["older",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["once",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/StyleComponentManagerService.html":{}}}],["onclick",{"_index":532,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick(event",{"_index":569,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ondestroy",{"_index":333,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["ondestroy(cb",{"_index":334,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["onsameurlnavigation",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":973,"title":{},"body":{"injectables/StorageState.html":{}}}],["operator",{"_index":852,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["opt1",{"_index":645,"title":{},"body":{"directives/LinkDirective.html":{}}}],["opt2",{"_index":646,"title":{},"body":{"directives/LinkDirective.html":{}}}],["opt2[key",{"_index":652,"title":{},"body":{"directives/LinkDirective.html":{}}}],["optional",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{}}}],["optionally",{"_index":671,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":95,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{}}}],["options?.injector",{"_index":1005,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["options?.notifyonchange",{"_index":854,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["originx",{"_index":505,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["originy",{"_index":507,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["otherwise",{"_index":347,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{}}}],["out",{"_index":488,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"overview.html":{}}}],["over",{"_index":473,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlay",{"_index":447,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref",{"_index":448,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.attach(portal",{"_index":498,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.detach",{"_index":497,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref?.dispose",{"_index":492,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayx",{"_index":509,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayy",{"_index":510,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["override",{"_index":644,"title":{},"body":{"directives/LinkDirective.html":{}}}],["overview",{"_index":1083,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["package",{"_index":1051,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":913,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["param1",{"_index":742,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/StorageState.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["params",{"_index":551,"title":{},"body":{"directives/LinkDirective.html":{}}}],["parse",{"_index":696,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":79,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["parts",{"_index":860,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pass",{"_index":1003,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["passed",{"_index":438,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["passthrough",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchable",{"_index":1124,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["patchable_platform_location_history_methods",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchableplatformlocationhistorymethod",{"_index":1102,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":152,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":1118,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["peer",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["performed",{"_index":568,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["pipe",{"_index":164,"title":{"pipes/AssetUrlPipe.html":{}},"body":{"pipes/AssetUrlPipe.html":{},"injectables/ResourceRegistryState.html":{},"overview.html":{}}}],["pipe(map((data",{"_index":739,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["pipe(takeuntil(injectdestroy",{"_index":872,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pipes",{"_index":166,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["pipetransform",{"_index":197,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["platform",{"_index":1103,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["pointed",{"_index":945,"title":{},"body":{"injectables/StorageState.html":{}}}],["portal",{"_index":465,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["position",{"_index":475,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["positionstrategy",{"_index":501,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["prefix",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefixed",{"_index":170,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["prefixes",{"_index":178,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["preserve",{"_index":549,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["preservefragment",{"_index":534,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["prevhref",{"_index":206,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["previous",{"_index":200,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["private",{"_index":157,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{}}}],["produce",{"_index":955,"title":{},"body":{"injectables/StorageState.html":{}}}],["produce((draft",{"_index":978,"title":{},"body":{"injectables/StorageState.html":{}}}],["promise",{"_index":710,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"properties.html":{}}}],["property",{"_index":184,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["protected",{"_index":185,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["provide",{"_index":426,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["provided",{"_index":298,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["providedin",{"_index":155,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/variables.html":{}}}],["providefonticons(config",{"_index":425,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["provideicons(config",{"_index":433,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["provider",{"_index":370,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providers",{"_index":424,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"overview.html":{}}}],["provides",{"_index":422,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providesvgicons(config",{"_index":431,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providesvgicons(config?.svgicons",{"_index":435,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["providing",{"_index":392,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["pure",{"_index":202,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["pushstate",{"_index":1127,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["queries",{"_index":664,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":553,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":660,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["querying",{"_index":596,"title":{},"body":{"directives/LinkDirective.html":{}}}],["querylink",{"_index":597,"title":{},"body":{"directives/LinkDirective.html":{}}}],["queryparams",{"_index":535,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["queryparamshandling",{"_index":536,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":107,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rawbuiltinresourcetype",{"_index":1064,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set-1.html":{},"injectables/StyleComponentManagerService.html":{}}}],["record",{"_index":1137,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ref",{"_index":1004,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["reference",{"_index":208,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/StyleComponentManagerService.html":{}}}],["references",{"_index":990,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["refine((val",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refs",{"_index":1001,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":336,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"injectables/StyleComponentManagerService.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registerdefaultfontsetclassesfactory",{"_index":412,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registered",{"_index":332,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"injectables/StyleComponentManagerService.html":{}}}],["registering",{"_index":408,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registerstylecomponents",{"_index":984,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["registerstylecomponents(components",{"_index":985,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["registersvgiconresolverfactory",{"_index":419,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registration",{"_index":411,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"modules/CdkStateModule.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":717,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":116,"title":{},"body":{"classes/AddMany-1.html":{}}}],["registry.actions.ts:21",{"_index":115,"title":{},"body":{"classes/AddMany.html":{}}}],["registry.actions.ts:31",{"_index":113,"title":{},"body":{"classes/AddFromYaml-1.html":{}}}],["registry.actions.ts:32",{"_index":112,"title":{},"body":{"classes/AddFromYaml.html":{}}}],["registry.actions.ts:42",{"_index":765,"title":{},"body":{"classes/LoadFromYaml-1.html":{}}}],["registry.actions.ts:43",{"_index":764,"title":{},"body":{"classes/LoadFromYaml.html":{}}}],["registry.actions.ts:53",{"_index":766,"title":{},"body":{"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["registry.actions.ts:8",{"_index":104,"title":{},"body":{"classes/Add-1.html":{}}}],["registry.actions.ts:9",{"_index":57,"title":{},"body":{"classes/Add.html":{}}}],["registry.addsvgiconresolver(resolver",{"_index":421,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry.getdefaultfontsetclass",{"_index":414,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry.model",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":1063,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":659,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:103",{"_index":791,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:113",{"_index":793,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:16",{"_index":663,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["registry.selectors.ts:38",{"_index":781,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:48",{"_index":775,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:58",{"_index":784,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:71",{"_index":778,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:93",{"_index":788,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.setdefaultfontsetclass(...defaultclasses",{"_index":415,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["registry.state",{"_index":668,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":677,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["registry.state.ts:30",{"_index":818,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":817,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:47",{"_index":691,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:51",{"_index":819,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:57",{"_index":688,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:64",{"_index":823,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:68",{"_index":695,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:77",{"_index":822,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:81",{"_index":703,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:94",{"_index":709,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.ts",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registry/link",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":100,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rel",{"_index":530,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["relative",{"_index":558,"title":{},"body":{"directives/LinkDirective.html":{}}}],["relativeto",{"_index":537,"title":{},"body":{"directives/LinkDirective.html":{}}}],["reliable",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relurl",{"_index":813,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["remaining",{"_index":1132,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["remote",{"_index":84,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["removes",{"_index":1045,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["replacestate",{"_index":1126,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["replaceurl",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replaysubject",{"_index":339,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["required",{"_index":405,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":1088,"title":{},"body":{"overview.html":{}}}],["resetapphref",{"_index":128,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["resets",{"_index":131,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["resolver",{"_index":416,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["resolvers",{"_index":384,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["resolves",{"_index":1038,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["resource",{"_index":101,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"modules/CdkStateModule.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_entry",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_id",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":824,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":825,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":103,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceentrypayload",{"_index":1106,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":102,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":768,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":816,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":773,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors",{"_index":767,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.anyentry",{"_index":798,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.entry",{"_index":797,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.field",{"_index":799,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrystate",{"_index":252,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":106,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":795,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["responsetype",{"_index":737,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["restargs",{"_index":1107,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["result",{"_index":649,"title":{},"body":{"directives/LinkDirective.html":{}}}],["result[key",{"_index":653,"title":{},"body":{"directives/LinkDirective.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieving",{"_index":906,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["returned",{"_index":796,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["root",{"_index":156,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":559,"title":{},"body":{"directives/LinkDirective.html":{}}}],["router",{"_index":714,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["routing",{"_index":528,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["run",{"_index":355,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["runininjectioncontext",{"_index":995,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["runininjectioncontext(options.injector",{"_index":1009,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["running",{"_index":1076,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":340,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["same",{"_index":393,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["sanitizer",{"_index":418,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["sanitizer.bypasssecuritytrustresourceurl(url",{"_index":1042,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["schema",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":343,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scope.ondestroy",{"_index":363,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scopeddestructorsubject",{"_index":359,"title":{"classes/ScopedDestructorSubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["script",{"_index":149,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["script's",{"_index":151,"title":{},"body":{"injectables/AppHrefService.html":{},"miscellaneous/variables.html":{}}}],["script.ts",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["second",{"_index":643,"title":{},"body":{"directives/LinkDirective.html":{}}}],["seems",{"_index":346,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["segments",{"_index":1044,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["segments.join('/').replace(/\\/{2,}/g",{"_index":1050,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["select",{"_index":834,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["select$(selector",{"_index":869,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["select(selector",{"_index":871,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selected",{"_index":868,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selection",{"_index":866,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selectoptions",{"_index":832,"title":{"interfaces/SelectOptions.html":{}},"body":{"interfaces/SelectOptions.html":{}}}],["selector",{"_index":225,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['basehrefstate",{"_index":223,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["selector(['linkregistrystate",{"_index":662,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector(['resourceregistrystate",{"_index":774,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector(['storagestate",{"_index":910,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selector(['undefined",{"_index":787,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([basehrefstate",{"_index":228,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["selector([linkregistrystate",{"_index":669,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector([resourceregistryselectors.field",{"_index":810,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":802,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([storagestate",{"_index":923,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selectors",{"_index":218,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{}}}],["selectquery",{"_index":1110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot",{"_index":580,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot(linkregistryselectors.query",{"_index":598,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sequences",{"_index":1047,"title":{},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["service",{"_index":123,"title":{},"body":{"injectables/AppHrefService.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SvgIconsConfig.html":{}}}],["session",{"_index":951,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstorage",{"_index":962,"title":{},"body":{"injectables/StorageState.html":{}}}],["set",{"_index":236,"title":{"classes/Set.html":{},"classes/Set-1.html":{}},"body":{"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["set(ctx",{"_index":953,"title":{},"body":{"injectables/StorageState.html":{}}}],["setapphref",{"_index":129,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["setapphref(href",{"_index":136,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["setbasehref",{"_index":232,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["setbasehref(ctx",{"_index":233,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["setcontent(content",{"_index":525,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setdata(data",{"_index":526,"title":{},"body":{"directives/HoverDirective.html":{}}}],["sets",{"_index":239,"title":{},"body":{"injectables/BaseHrefState.html":{},"classes/Set.html":{},"injectables/StorageState.html":{}}}],["setter",{"_index":456,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["setting",{"_index":125,"title":{},"body":{"injectables/AppHrefService.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["shiftkey",{"_index":618,"title":{},"body":{"directives/LinkDirective.html":{}}}],["signal",{"_index":144,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["signal(this.initialapphref",{"_index":161,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["skiplocationchange",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snapshot",{"_index":884,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts",{"_index":1109,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["snapshotobserver",{"_index":878,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"injectables/LinkRegistryState.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hover/hover.directive.ts",{"_index":437,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:19",{"_index":520,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:26",{"_index":521,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:50",{"_index":524,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:54",{"_index":523,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:64",{"_index":522,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/link/link.directive.ts",{"_index":527,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:14",{"_index":545,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:17",{"_index":552,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:20",{"_index":554,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:23",{"_index":543,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:26",{"_index":548,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:29",{"_index":556,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:32",{"_index":561,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:34",{"_index":562,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:36",{"_index":564,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:80",{"_index":566,"title":{},"body":{"directives/LinkDirective.html":{}}}],["standalone",{"_index":173,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["start",{"_index":506,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["started",{"_index":1071,"title":{"index.html":{}},"body":{}}],["starthover",{"_index":484,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["state",{"_index":230,"title":{},"body":{"injectables/BaseHrefState.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../action",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../base",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../link",{"_index":1062,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../resource",{"_index":1065,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../storage.actions.ts",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../storage.model.ts",{"_index":1066,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/actions/action",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["state/src/base",{"_index":215,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["state/src/link",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/resource",{"_index":99,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/state.module.ts",{"_index":248,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["state/src/storage/storage.actions.ts",{"_index":258,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["state/src/storage/storage.actions.ts:10",{"_index":877,"title":{},"body":{"classes/Set-1.html":{}}}],["state/src/storage/storage.actions.ts:24",{"_index":272,"title":{},"body":{"classes/Delete.html":{}}}],["state/src/storage/storage.actions.ts:37",{"_index":263,"title":{},"body":{"classes/Clear.html":{}}}],["state/src/storage/storage.model.ts",{"_index":1069,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/storage/storage.selectors.ts",{"_index":905,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:13",{"_index":911,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:23",{"_index":918,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.state.ts",{"_index":934,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:25",{"_index":948,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:43",{"_index":954,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:53",{"_index":943,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:63",{"_index":939,"title":{},"body":{"injectables/StorageState.html":{}}}],["state[id",{"_index":674,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["statecontext",{"_index":234,"title":{},"body":{"injectables/BaseHrefState.html":{},"miscellaneous/typealiases.html":{}}}],["stateselector",{"_index":844,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":837,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage",{"_index":254,"title":{},"body":{"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["storage.actions",{"_index":958,"title":{},"body":{"injectables/StorageState.html":{}}}],["storage.model",{"_index":265,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage.state",{"_index":922,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagecontext",{"_index":937,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageid",{"_index":261,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["storageid.local",{"_index":959,"title":{},"body":{"injectables/StorageState.html":{}}}],["storageid.session",{"_index":960,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagemodel",{"_index":957,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageselectors",{"_index":904,"title":{"classes/StorageSelectors.html":{}},"body":{"classes/StorageSelectors.html":{}}}],["storagestate",{"_index":253,"title":{"injectables/StorageState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).clear",{"_index":970,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).getitem(key",{"_index":924,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).length",{"_index":933,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).removeitem(key",{"_index":969,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).setitem(key",{"_index":967,"title":{},"body":{"injectables/StorageState.html":{}}}],["store",{"_index":477,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["stored",{"_index":260,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storing",{"_index":882,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["stream",{"_index":885,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1068,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":843,"title":{},"body":{"interfaces/SelectOptions.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["stylecomponentmanagerservice",{"_index":980,"title":{"injectables/StyleComponentManagerService.html":{}},"body":{"injectables/StyleComponentManagerService.html":{}}}],["styles",{"_index":276,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["styling/.../style",{"_index":1098,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["styling/src/lib/style",{"_index":981,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["subject",{"_index":353,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts",{"_index":329,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:27",{"_index":831,"title":{},"body":{"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:9",{"_index":335,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["such",{"_index":964,"title":{},"body":{"injectables/StorageState.html":{}}}],["super",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["super(1",{"_index":362,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["supplied",{"_index":921,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["support",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":385,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["svg_icons_config",{"_index":402,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["svgiconresolverconfig",{"_index":1035,"title":{"interfaces/SvgIconResolverConfig.html":{}},"body":{"interfaces/SvgIconResolverConfig.html":{}}}],["svgicons",{"_index":397,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["svgiconsconfig",{"_index":386,"title":{"interfaces/SvgIconsConfig.html":{}},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["switch",{"_index":635,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["t",{"_index":443,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["t[k",{"_index":801,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["tag",{"_index":592,"title":{},"body":{"directives/LinkDirective.html":{}}}],["tagname",{"_index":594,"title":{},"body":{"directives/LinkDirective.html":{}}}],["takeuntil",{"_index":839,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["tap",{"_index":840,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["target",{"_index":531,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":311,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal",{"_index":450,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal(content",{"_index":461,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateref",{"_index":454,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templates",{"_index":441,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["test",{"_index":345,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["tests",{"_index":1078,"title":{},"body":{"index.html":{}}}],["text",{"_index":738,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(getfield",{"_index":790,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["text_entry",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this._data",{"_index":463,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.addmany(ctx",{"_index":730,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":830,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":740,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.apphref()}${path",{"_index":212,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["this.apphrefsignal.asreadonly",{"_index":142,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["this.apphrefsignal.set(href",{"_index":162,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["this.cdr.markforcheck",{"_index":190,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["this.complete",{"_index":365,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.createoverlay",{"_index":486,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.el.remove",{"_index":315,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["this.errorvalue",{"_index":902,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.extras",{"_index":624,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.getentry(state",{"_index":670,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["this.getinstance(component",{"_index":1014,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.getinstancemap(inject(applicationref",{"_index":1011,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.getlinkattributes(link",{"_index":630,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.href",{"_index":627,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.http",{"_index":735,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":826,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.increasechangecount(ctx",{"_index":968,"title":{},"body":{"injectables/StorageState.html":{}}}],["this.link",{"_index":614,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.mergeextras(link?.type",{"_index":608,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigate(linkid",{"_index":623,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigatetoexternal(entry",{"_index":747,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.navigatetointernal(entry",{"_index":745,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.next",{"_index":364,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.overlay",{"_index":502,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.overlay.create",{"_index":500,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.overlayref",{"_index":485,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.overlayref.attach(portal",{"_index":487,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal",{"_index":460,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal.context",{"_index":469,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.prevhref",{"_index":188,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["this.querylink(this.linkid",{"_index":613,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.registry.delete(appref",{"_index":1024,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.registry.get(appref",{"_index":1021,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.registry.set(appref",{"_index":1022,"title":{},"body":{"injectables/StyleComponentManagerService.html":{}}}],["this.rel",{"_index":628,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.router?.navigate(entry.commands",{"_index":755,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.setapphref(this.initialapphref",{"_index":163,"title":{},"body":{"injectables/AppHrefService.html":{}}}],["this.target",{"_index":629,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.updatecontent",{"_index":464,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.updatelink(link",{"_index":615,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.value",{"_index":903,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.viewcontainerref",{"_index":462,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.zone.run",{"_index":754,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["throw",{"_index":748,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["throws",{"_index":901,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["tied",{"_index":864,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["time",{"_index":394,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["token",{"_index":399,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["top",{"_index":511,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["track",{"_index":679,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["transform",{"_index":175,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["transform((id",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform(path",{"_index":176,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["transform>(createcustomtype",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":278,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["triggers",{"_index":567,"title":{},"body":{"directives/LinkDirective.html":{}}}],["true",{"_index":174,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":572,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ts",{"_index":929,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["tslib",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["turns",{"_index":999,"title":{},"body":{"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["two",{"_index":642,"title":{},"body":{"directives/LinkDirective.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1095,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":1113,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typematches",{"_index":675,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["typeof",{"_index":351,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["types",{"_index":907,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":927,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["typings",{"_index":1121,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ui/cdk/app",{"_index":382,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["ui/cdk/injectors",{"_index":581,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/cdk/state",{"_index":585,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/theming",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":588,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"dependencies.html":{}}}],["ui/utils/types",{"_index":667,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["undefined",{"_index":235,"title":{},"body":{"injectables/BaseHrefState.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["union",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unionmember",{"_index":666,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":1122,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unit",{"_index":1077,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":349,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}}}],["unless",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unparsed",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["unqiue",{"_index":93,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["up",{"_index":494,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatecontent",{"_index":496,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updated",{"_index":975,"title":{},"body":{"injectables/StorageState.html":{}}}],["updatelink(link",{"_index":626,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updates",{"_index":138,"title":{},"body":{"injectables/AppHrefService.html":{},"directives/LinkDirective.html":{}}}],["updation",{"_index":493,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["url",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"pipes/AssetUrlPipe.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SvgIconResolverConfig.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(\"${url",{"_index":213,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url(getfield",{"_index":792,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["url.pipe.ts",{"_index":168,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url.pipe.ts:19",{"_index":191,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url.pipe.ts:31",{"_index":177,"title":{},"body":{"pipes/AssetUrlPipe.html":{}}}],["url/filename",{"_index":697,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["url_entry",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlcreationoptions",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["urls",{"_index":604,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SvgIconResolverConfig.html":{}}}],["use",{"_index":445,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["used",{"_index":282,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/StyleComponentManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["usefactory",{"_index":429,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["user",{"_index":444,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["userhovers",{"_index":472,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["usevalue",{"_index":427,"title":{},"body":{"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"interfaces/SvgIconsConfig.html":{}}}],["using",{"_index":751,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["validator",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":134,"title":{},"body":{"injectables/AppHrefService.html":{},"pipes/AssetUrlPipe.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconResolverConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value:string",{"_index":966,"title":{},"body":{"injectables/StorageState.html":{}}}],["values",{"_index":259,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":319,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["variables",{"_index":1138,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1093,"title":{},"body":{"properties.html":{}}}],["view",{"_index":305,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["viewcontainerref",{"_index":295,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["void",{"_index":135,"title":{},"body":{"injectables/AppHrefService.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/FontIconsConfig.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/IconsConfig.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"interfaces/SvgIconsConfig.html":{}}}],["weakmap",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whenever",{"_index":847,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["whether",{"_index":181,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["window",{"_index":757,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["window.open(url",{"_index":760,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["withpositions",{"_index":504,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["withpush(true",{"_index":513,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["yaml",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":180,"title":{},"body":{"pipes/AssetUrlPipe.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["z",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().array",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['merge",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":1117,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('reload",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.external",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.internal",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.markdown",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.text",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.url",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(resource_id",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).nullable",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('noopener",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.union([builtin_entry",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone",{"_index":728,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["zoom",{"_index":1087,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single link\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, entry: LinkEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:9\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        LinkEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add-1.html":{"url":"classes/Add-1.html","title":"class - Add-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entries from yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:32\n                            \n                        \n\n                \n                    \n                            Add links from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml-1.html":{"url":"classes/AddFromYaml-1.html","title":"class - AddFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple links at once\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add Many')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:21\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New links\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany-1.html":{"url":"classes/AddMany-1.html","title":"class - AddMany-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add Many')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppHrefService.html":{"url":"injectables/AppHrefService.html","title":"injectable - AppHrefService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppHrefService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            app-href/src/lib/app-href.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for getting and setting the appHref\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                appHref\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resetAppHref\n                            \n                            \n                                setAppHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        resetAppHref\n                        \n                    \n                \n            \n            \n                \nresetAppHref()\n                \n            \n\n\n                    \n                        \n                            Defined in app-href/src/lib/app-href.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Resets the appHref to it's initial value\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAppHref\n                        \n                    \n                \n            \n            \n                \nsetAppHref(href: string)\n                \n            \n\n\n                    \n                        \n                            Defined in app-href/src/lib/app-href.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Updates the current appHref value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                href\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    New appHref value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        appHref\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.appHrefSignal.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in app-href/src/lib/app-href.service.ts:21\n                        \n                    \n\n            \n                \n                    Readonly appHref value signal\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InjectionToken, inject, signal } from '@angular/core';\nimport { getCurrentScriptBasePath } from './current-script';\n\n/** Initial value for appHref. Defaults to the current script's base path */\nexport const INITIAL_APP_HREF = new InjectionToken('InitialAppHref', {\n  providedIn: 'root',\n  factory: () => getCurrentScriptBasePath(),\n});\n\n/**\n * Service for getting and setting the appHref\n */\n@Injectable({ providedIn: 'root' })\nexport class AppHrefService {\n  /** Initial appHref value */\n  private readonly initialAppHref = inject(INITIAL_APP_HREF);\n  /** Current appHref value signal */\n  private readonly appHrefSignal = signal(this.initialAppHref);\n\n  /** Readonly appHref value signal */\n  readonly appHref = this.appHrefSignal.asReadonly();\n\n  /**\n   * Updates the current appHref value\n   *\n   * @param href New appHref value\n   */\n  setAppHref(href: string): void {\n    this.appHrefSignal.set(href);\n  }\n\n  /**\n   * Resets the appHref to it's initial value\n   */\n  resetAppHref(): void {\n    this.setAppHref(this.initialAppHref);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/AssetUrlPipe.html":{"url":"pipes/AssetUrlPipe.html","title":"pipe - AssetUrlPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  AssetUrlPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            app-href/src/lib/asset-url.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Create a full url with the appHref prefixed\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        assetUrl\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(path: string, type?)\n                \n            \n\n\n                    \n                        \n                            Defined in app-href/src/lib/asset-url.pipe.ts:31\n                        \n                    \n\n\n            \n                \n                        Prefixes an asset path with the current appHref value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Path to asset\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Whether the url will be bound to a css property\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A full url\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        markChangeRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : effect(() => {\n    if (this.prevHref() !== null) {\n      this.cdr.markForCheck();\n    }\n  })\n                    \n                \n                    \n                        \n                                Defined in app-href/src/lib/asset-url.pipe.ts:19\n                        \n                    \n\n            \n                \n                    Notifies the change detection when the appHref changes\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, Pipe, PipeTransform, effect, inject } from '@angular/core';\nimport { computedPrevious } from 'ngxtension/computed-previous';\nimport { AppHrefService } from './app-href.service';\n\n/** Create a full url with the appHref prefixed */\n@Pipe({\n  name: 'assetUrl',\n  standalone: true,\n  pure: false,\n})\nexport class AssetUrlPipe implements PipeTransform {\n  /** Current appHref value signal */\n  private readonly appHref = inject(AppHrefService).appHref;\n  /** Previous appHref value signal */\n  private readonly prevHref = computedPrevious(this.appHref);\n  /** Reference to the change detector */\n  private readonly cdr = inject(ChangeDetectorRef);\n  /** Notifies the change detection when the appHref changes */\n  protected readonly markChangeRef = effect(() => {\n    if (this.prevHref() !== null) {\n      this.cdr.markForCheck();\n    }\n  });\n\n  /**\n   * Prefixes an asset path with the current appHref value\n   * @param path Path to asset\n   * @param type Whether the url will be bound to a css property\n   * @returns A full url\n   */\n  transform(path: string, type?: 'css'): string {\n    const url = `${this.appHref()}${path}`;\n    return type === 'css' ? `url(\"${url}\")` : url;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseHrefSelectors.html":{"url":"classes/BaseHrefSelectors.html","title":"class - BaseHrefSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseHrefSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for BaseHrefState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                baseHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        baseHref\n                        \n                    \n                \n            \n            \n                \n                        \n                    baseHref(value: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['BaseHrefState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/base-href/base-href.selectors.ts:12\n                        \n                    \n\n\n            \n                \n                        Returns base href value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    href value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                href value\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { BaseHrefState } from './base-href.state';\n\n/** Selectors for BaseHrefState */\nexport class BaseHrefSelectors {\n  /**\n   * Returns base href value\n   * @param value href value\n   * @returns href value\n   */\n  @Selector([BaseHrefState])\n  static baseHref(value: string): string {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseHrefState.html":{"url":"injectables/BaseHrefState.html","title":"injectable - BaseHrefState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseHrefState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State holding the base href\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                setBaseHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setBaseHref\n                        \n                    \n                \n            \n            \n                \n                        \n                    setBaseHref(ctx: StateContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n                    \n                        \n                            Defined in state/src/base-href/base-href.state.ts:20\n                        \n                    \n\n\n            \n                \n                        Sets base href value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                        StateContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    state context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Set\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Set } from './base-href.actions';\n\n/**\n * State holding the base href\n */\n@State({\n  name: 'baseHref',\n  defaults: '',\n})\n@Injectable()\nexport class BaseHrefState {\n  /**\n   * Sets base href value\n   * @param ctx state context\n   * @param { baseHref } href value\n   */\n  @Action(Set)\n  setBaseHref(ctx: StateContext, { baseHref }: Set) {\n    if (baseHref !== '' && !baseHref.endsWith('/')) {\n      baseHref = baseHref + '/';\n    }\n    ctx.setState(baseHref);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CdkStateModule.html":{"url":"modules/CdkStateModule.html","title":"module - CdkStateModule","body":"\n                   \n\n\n\n\n    Modules\n    CdkStateModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            state/src/state.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\nimport { BaseHrefState } from './base-href';\nimport { LinkRegistryState } from './link-registry';\nimport { ResourceRegistryState } from './resource-registry';\nimport { StorageState } from './storage';\n\n@NgModule({\n  imports: [NgxsModule.forFeature([BaseHrefState, LinkRegistryState, ResourceRegistryState, StorageState])],\n})\nexport class CdkStateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clear.html":{"url":"classes/Clear.html","title":"class - Clear","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clear\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear the values stored in the specified StorageId\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Clear')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:37\n                            \n                        \n\n                \n                    \n                            constructor class for clear action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Delete.html":{"url":"classes/Delete.html","title":"class - Delete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Delete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                 Class Delete Action for delete method\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Delete')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:24\n                            \n                        \n\n                \n                    \n                            constructor class for Delete action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DestroyHostComponent.html":{"url":"components/DestroyHostComponent.html","title":"component - DestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/destroy-host.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component used when attaching destroy lifecycle observables to a component/directive/pipe\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-destroy-host\n            \n\n            \n                standalone\n                true\n            \n\n\n\n            \n                styles\n                :host { display: none }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                el\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(container: ViewContainerRef)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index '0') in the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                container\n                                            \n                                                        ViewContainerRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    View in which to create the element\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentRef\n\n                        \n                            \n                                The ComponentRef of the newly inserted element\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        el\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Element\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef).nativeElement\n                    \n                \n                    \n                        \n                                Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:14\n                        \n                    \n\n            \n                \n                    Reference to own dom element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ComponentRef, ElementRef, inject, ViewContainerRef } from '@angular/core';\n\n/**\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\n */\n@Component({\n  selector: 'hra-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: none }'],\n})\nexport class DestroyHostComponent implements AfterViewInit {\n  /** Reference to own dom element */\n  readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**\n   * Creates a new DestroyHostComponent inside the provided container.\n   * The element is inserted as the first child (index '0') in the container.\n   * @param container View in which to create the element\n   * @returns The ComponentRef of the newly inserted element\n   */\n  static create(container: ViewContainerRef): ComponentRef {\n    return container.createComponent(DestroyHostComponent, { index: 0 });\n  }\n\n  /** Disconnects the component from the dom tree */\n  ngAfterViewInit(): void {\n    this.el.remove();\n  }\n}\n\n    \n\n\n    \n            :host { display: none }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'DestroyHostComponent', 'selector': 'hra-destroy-host'}];\n    var DIRECTIVES = [{'name': 'HoverDirective', 'selector': '[hraHover]'},{'name': 'LinkDirective', 'selector': '[hraLink]'}];\n    var ACTUAL_COMPONENT = {'name': 'DestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup functions can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/on-destroy/destructor-subject.ts:9\n                        \n                    \n\n\n            \n                \n                        Register a cleanup function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cb\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Cleanup callback function\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FontIconsConfig.html":{"url":"interfaces/FontIconsConfig.html","title":"interface - FontIconsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FontIconsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/providers.ts\n        \n\n\n            \n                Description\n            \n            \n                Font icon provider configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            defaultClasses\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultClasses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultClasses:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default classes to apply when no font set is specified\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { APP_INITIALIZER, EnvironmentProviders, InjectionToken, makeEnvironmentProviders } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerDefaultFontSetClassesFactory,\n      deps: [MatIconRegistry, FONT_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerSvgIconResolverFactory,\n      deps: [MatIconRegistry, AppHrefService, DomSanitizer, SVG_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HoverContext.html":{"url":"interfaces/HoverContext.html","title":"interface - HoverContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HoverContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Context passed to hover content templates\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $implicit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $implicit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $implicit:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data provided by the user for use inside the content template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionPositionPair, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /** Overlay service */\n  private readonly overlay = inject(Overlay);\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  private overlayRef?: OverlayRef;\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { portal } = this;\n    if (portal) {\n      this.overlayRef = this.createOverlay();\n      this.overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    overlayRef?.dispose();\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to create overlay and set its position */\n  private createOverlay(): OverlayRef {\n    return this.overlay.create({\n      positionStrategy: this.overlay\n        .position()\n        .flexibleConnectedTo(this.el)\n        .withPositions([\n          new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n        ])\n        .withPush(true),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/HoverDirective.html":{"url":"directives/HoverDirective.html","title":"directive - HoverDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  HoverDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Hover overlay directive to be used across the application\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraHover]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                portal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                endHover\n                            \n                            \n                                    \n                                startHover\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraHover\n                            \n                            \n                                hraHoverData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseout\n                            \n                            \n                                mouseover\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    content\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraHover\n                    \n                \n                \n                    \n                        Type :         TemplateRef>\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                            \n                        \n                \n                    \n                        Setter for the content to be displayed in the overlay\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraHoverData\n                    \n                \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                            \n                        \n                \n                    \n                        Setter for the context that is to be displayed in the portal attached to the overlay\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseout\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:64\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseover\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:54\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endHover\n                        \n                    \n                \n            \n            \n                \n                        \n                    endHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseout')\n                \n            \n\n                    \n                        \n                            Defined in src/lib/hover/hover.directive.ts:64\n                        \n                    \n\n\n            \n                \n                        Function to handle the mouse out event to detach the portal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startHover\n                        \n                    \n                \n            \n            \n                \n                        \n                    startHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseover')\n                \n            \n\n                    \n                        \n                            Defined in src/lib/hover/hover.directive.ts:54\n                        \n                    \n\n\n            \n                \n                        Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        portal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TemplatePortal>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:50\n                        \n                    \n\n            \n                \n                    Portal that is created to display the overlay\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n\n\n                \n                    \n                        setcontent(content: TemplateRef>)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                                \n                            \n                    \n                        \n                                Setter for the content to be displayed in the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            content\n                                                    \n                                                            \n                                                                            TemplateRef>\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n\n                \n                    \n                        setdata(data: T)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                                \n                            \n                    \n                        \n                                Setter for the context that is to be displayed in the portal attached to the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                            \n                                                                        T\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ConnectionPositionPair, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /** Overlay service */\n  private readonly overlay = inject(Overlay);\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  private overlayRef?: OverlayRef;\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { portal } = this;\n    if (portal) {\n      this.overlayRef = this.createOverlay();\n      this.overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    overlayRef?.dispose();\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to create overlay and set its position */\n  private createOverlay(): OverlayRef {\n    return this.overlay.create({\n      positionStrategy: this.overlay\n        .position()\n        .flexibleConnectedTo(this.el)\n        .withPositions([\n          new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n        ])\n        .withPush(true),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IconsConfig.html":{"url":"interfaces/IconsConfig.html","title":"interface - IconsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IconsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/providers.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration when providing font icons and svg icon at the same time\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            fontIcons\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            svgIcons\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fontIcons\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fontIcons:         FontIconsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FontIconsConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Font icon configuration\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        svgIcons\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        svgIcons:         SvgIconsConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SvgIconsConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Svg icon configuration\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { APP_INITIALIZER, EnvironmentProviders, InjectionToken, makeEnvironmentProviders } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerDefaultFontSetClassesFactory,\n      deps: [MatIconRegistry, FONT_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerSvgIconResolverFactory,\n      deps: [MatIconRegistry, AppHrefService, DomSanitizer, SVG_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LinkDirective.html":{"url":"directives/LinkDirective.html","title":"directive - LinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Link Directive for routing\n\n            \n\n\n            \n                Implements\n            \n            \n                        DoCheck\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraLink]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                href\n                            \n                            \n                                    \n                                    Optional\n                                rel\n                            \n                            \n                                    \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fragment\n                            \n                            \n                                hraLink\n                            \n                            \n                                preserveFragment\n                            \n                            \n                                queryParams\n                            \n                            \n                                queryParamsHandling\n                            \n                            \n                                relativeTo\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.href\n                            \n                            \n                                attr.rel\n                            \n                            \n                                attr.target\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fragment\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:23\n                            \n                        \n                \n                    \n                        Url fragment\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraLink\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : EMPTY_LINK\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:14\n                            \n                        \n                \n                    \n                        linkId with empty string as default value\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        preserveFragment\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether to preserve the existing fragment\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        queryParams\n                    \n                \n                \n                    \n                        Type :     Params\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:17\n                            \n                        \n                \n                    \n                        Query string parameters\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        queryParamsHandling\n                    \n                \n                \n                    \n                        Type :     QueryParamsHandling\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:20\n                            \n                        \n                \n                    \n                        How to handle existing query params\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        relativeTo\n                    \n                \n                \n                    \n                        Type :     ActivatedRoute\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:29\n                            \n                        \n                \n                    \n                        Nagivate relative to a route. Only affects internal links.\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:32\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:80\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/lib/link/link.directive.ts:80\n                        \n                    \n\n\n            \n                \n                        Triggers when a click action is performed on the element\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    type of event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true/false based on entry and element\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.href')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:32\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.rel')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.target')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, DoCheck, ElementRef, HostBinding, HostListener, inject, Injector, Input } from '@angular/core';\nimport { ActivatedRoute, Params, QueryParamsHandling, UrlCreationOptions } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { EMPTY_LINK, LinkEntry, LinkRegistryActions, LinkRegistrySelectors, LinkType } from '@hra-ui/cdk/state';\nimport { createExternalUrl, createInternalUrl } from '@hra-ui/utils';\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements DoCheck {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK;\n\n  /** Query string parameters */\n  @Input() queryParams?: Params;\n\n  /** How to handle existing query params */\n  @Input() queryParamsHandling?: QueryParamsHandling;\n\n  /** Url fragment */\n  @Input() fragment?: string;\n\n  /** Whether to preserve the existing fragment */\n  @Input() preserveFragment?: boolean;\n\n  /** Nagivate relative to a route. Only affects internal links. */\n  @Input() relativeTo?: ActivatedRoute;\n\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Reference to this component's injector */\n  private readonly injector = inject(Injector);\n  /** Element tag on which this directive is mounted */\n  private readonly tagName = inject>(ElementRef).nativeElement.tagName.toLowerCase();\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /** Whether the host element is an anchor */\n  private get isAnchorElement(): boolean {\n    return ['a', 'area'].includes(this.tagName);\n  }\n\n  /** Whether the host element deals with resource urls */\n  private get isResourceUrl(): boolean {\n    return ['base', 'link'].includes(this.tagName);\n  }\n\n  /** Collects query params and fragment options into a single object */\n  private get extras(): UrlCreationOptions {\n    const { link } = this;\n    return this.mergeExtras(link?.type === LinkType.Internal ? link.extras : undefined, this);\n  }\n\n  /** Updates the current link/url based on the inputs */\n  ngDoCheck(): void {\n    const link = this.queryLink(this.linkId);\n    if (this.link !== link) {\n      this.updateLink(link);\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External || button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId, this.extras);\n    return !isAnchorElement;\n  }\n\n  /** Updates the link entry and bound attributes */\n  private updateLink(link?: LinkEntry): void {\n    this.link = link;\n    ({ href: this.href, rel: this.rel, target: this.target } = this.getLinkAttributes(link));\n  }\n\n  /**\n   * Gets the new values for different attributes bound to the host element\n   * @param link Current link entry\n   * @returns New attributes values to bind on the host element\n   */\n  private getLinkAttributes(link?: LinkEntry): { href?: string; rel?: string; target?: string } {\n    const { injector, extras, isResourceUrl } = this;\n    switch (link?.type) {\n      case LinkType.Internal:\n        return { href: createInternalUrl(injector, link.commands, extras, isResourceUrl) };\n\n      case LinkType.External:\n        return { ...link, href: createExternalUrl(link.url, extras) };\n\n      default:\n        return {};\n    }\n  }\n\n  /**\n   * Merges two UrlCreationOptions.\n   * Undefined values in the second set does not override values from the first set.\n   * @param opt1 First set of options\n   * @param opt2 Second set of options\n   * @returns Merged options\n   */\n  private mergeExtras(opt1: UrlCreationOptions | undefined, opt2: UrlCreationOptions): UrlCreationOptions {\n    const result = { ...opt1 };\n    const mergeKey = (key: K) => {\n      if (opt2[key] !== undefined) {\n        result[key] = opt2[key];\n      }\n    };\n\n    mergeKey('queryParams');\n    mergeKey('queryParamsHandling');\n    mergeKey('fragment');\n    mergeKey('preserveFragment');\n    mergeKey('relativeTo');\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkRegistrySelectors.html":{"url":"classes/LinkRegistrySelectors.html","title":"class - LinkRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for Link Registry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(state: LinkRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['LinkRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.selectors.ts:16\n                        \n                    \n\n\n            \n                \n                        Queries for a link entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            LinkRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         LinkRegistryQuery\n\n                        \n                            \n                                link query function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkRegistryState.html":{"url":"injectables/LinkRegistryState.html","title":"injectable - LinkRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinkRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State for keeping track of links globally\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMany\n                            \n                            \n                                    \n                                addOne\n                            \n                            \n                                    \n                                addYaml\n                            \n                            \n                                    \n                                loadYaml\n                            \n                            \n                                    \n                                    Async\n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMany(ctx: LinkRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:57\n                        \n                    \n\n\n            \n                \n                        Add multiple entries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddMany\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOne(ctx: LinkRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:47\n                        \n                    \n\n\n            \n                \n                        Add a single entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Add\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    addYaml(ctx: LinkRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:68\n                        \n                    \n\n\n            \n                \n                        Parse and add entries from yaml\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional url/filename from which the data was loaded (for improved error messages)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadYaml(ctx: LinkRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:81\n                        \n                    \n\n\n            \n                \n                        Load and add entries from an external yaml file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entries has been added\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigate(ctx: LinkRegistryContext, undefined: Navigate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Navigate)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:94\n                        \n                    \n\n\n            \n                \n                        Navigate to Internal or External urls from id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Navigate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router, UrlCreationOptions } from '@angular/router';\nimport { createExternalUrl } from '@hra-ui/utils';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = (\n  id: LinkId,\n  type?: T,\n) => UnionMember | undefined;\n\n/** State for keeping track of links globally */\n@State({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router, { optional: true });\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id, extras }: Navigate): Promise {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry, extras);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry, extras);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry, extras: UrlCreationOptions): Promise {\n    await this.zone.run(() => this.router?.navigate(entry.commands, { ...entry.extras, ...extras }));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry, extras: UrlCreationOptions): void {\n    const url = createExternalUrl(entry.url, extras);\n    window.open(url, entry.target, entry.rel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add links from a remote yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:43\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml-1.html":{"url":"classes/LoadFromYaml-1.html","title":"class - LoadFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load Markdown')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigate.html":{"url":"classes/Navigate.html","title":"class - Navigate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Navigate to an Internal or external url from Link id\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Navigate')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, extras: UrlCreationOptions)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            navigate to a link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                unqiue identifier of link\n\n                                                        \n                                                \n                                                \n                                                        extras\n                                                  \n                                                        \n                                                                    UrlCreationOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Options when building the navigation url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                anyEntry\n                            \n                            \n                                    \n                                    Static\n                                anyText\n                            \n                            \n                                    \n                                    Static\n                                entry\n                            \n                            \n                                    \n                                    Static\n                                field\n                            \n                            \n                                    \n                                    Static\n                                markdown\n                            \n                            \n                                    \n                                    Static\n                                text\n                            \n                            \n                                    \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        anyEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    anyEntry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:48\n                        \n                    \n\n\n            \n                \n                        Queries an entry by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AnyEntryQuery\n\n                        \n                            \n                                Any entry query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                        \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:71\n                        \n                    \n\n\n            \n                \n                        Query for any text data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Text data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        entry\n                        \n                    \n                \n            \n            \n                \n                        \n                    entry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:38\n                        \n                    \n\n\n            \n                \n                        Queries an entry by id and type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EntryQuery\n\n                        \n                            \n                                Entry query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        field\n                        \n                    \n                \n            \n            \n                \n                        \n                    field(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:58\n                        \n                    \n\n\n            \n                \n                        Queries a field of an entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FieldQuery\n\n                        \n                            \n                                A field query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    markdown(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:93\n                        \n                    \n\n\n            \n                \n                        Query for markdown data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Markdown data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                        \n                    text(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:103\n                        \n                    \n\n\n            \n                \n                        Query for text data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Text data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                        \n                    url(getField: FieldQuery, baseHref: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined', 'undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:113\n                        \n                    \n\n\n            \n                \n                        Query for an url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                baseHref\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Url query function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport {\n  BuiltinResourceType,\n  getEntry,\n  ResourceEntry,\n  ResourceId,\n  ResourceRegistryModel,\n  ResourceType,\n} from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\nimport { BaseHrefSelectors } from '../base-href';\n\n/** Query function returned by {@link ResourceRegistrySelectors.entry} */\nexport type EntryQuery = (id: ResourceId, type: ResourceType) => T | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.anyEntry} */\nexport type AnyEntryQuery = (id: ResourceId) => ResourceEntry | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.field} */\nexport type FieldQuery = (\n  id: ResourceId,\n  type: ResourceType,\n  field: K,\n  defaultValue?: T[K],\n) => T[K];\n\n/** Query function for resource data */\nexport type DataQuery = (id: ResourceId) => T;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries an entry by id and type\n   * @param state Current state\n   * @returns Entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static entry(state: ResourceRegistryModel): EntryQuery {\n    return (id, type) => getEntry(state, id, type);\n  }\n\n  /**\n   * Queries an entry by id\n   * @param state Current state\n   * @returns Any entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyEntry(state: ResourceRegistryModel): AnyEntryQuery {\n    return (id) => getEntry(state, id);\n  }\n\n  /**\n   * Queries a field of an entry\n   * @param state Current state\n   * @returns A field query function\n   */\n  @Selector([ResourceRegistryState])\n  static field(state: ResourceRegistryModel): FieldQuery {\n    return (id, type, field, defaultValue?) => {\n      const entry = getEntry(state, id, type);\n      return entry?.[field] ?? (defaultValue as never);\n    };\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): DataQuery {\n    return (id) => {\n      const entry = getEntry(state, id);\n      switch (entry?.type) {\n        case BuiltinResourceType.Markdown:\n          return entry.markdown;\n\n        case BuiltinResourceType.Text:\n          return entry.text;\n\n        default:\n          return '';\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static markdown(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Markdown, 'markdown', '');\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static text(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Text, 'text', '');\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistrySelectors.field, BaseHrefSelectors.baseHref])\n  static url(getField: FieldQuery, baseHref = ''): DataQuery {\n    return (id) => {\n      const relUrl = getField(id, BuiltinResourceType.Url, 'url', '');\n      return relUrl !== '' ? baseHref + relUrl : '';\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMany\n                            \n                            \n                                    \n                                addOne\n                            \n                            \n                                    \n                                addYaml\n                            \n                            \n                                    \n                                loadMarkdown\n                            \n                            \n                                    \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:40\n                        \n                    \n\n\n            \n                \n                        Add multiple entries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddMany\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:30\n                        \n                    \n\n\n            \n                \n                        Add a single entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Add\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    addYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:51\n                        \n                    \n\n\n            \n                \n                        Parse and add entries from yaml\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional url/filename from which the data was loaded (for improved error messages)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:77\n                        \n                    \n\n\n            \n                \n                        Adds a markdown entry with content loaded from an external file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadMarkdown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entry has been added\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:64\n                        \n                    \n\n\n            \n                \n                        Load and add entries from an external yaml file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entries has been added\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  BuiltinResourceType,\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: BuiltinResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestructorSubject.html":{"url":"classes/ScopedDestructorSubject.html","title":"class - ScopedDestructorSubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestructorSubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                A subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes\n\n            \n\n            \n                Extends\n            \n            \n                        ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/destructor-subject.ts:27\n                            \n                        \n\n                \n                    \n                            Creates a new subject and attaches cleanup to the destructor scope\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Associated scope\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptions.html":{"url":"interfaces/SelectOptions.html","title":"interface - SelectOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/select.ts\n        \n\n\n            \n                Description\n            \n            \n                select$ configuration options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            notifyOnChange\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        notifyOnChange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notifyOnChange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to mark the containing view for change detection on emits. Defaults to true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from 'rxjs';\nimport { injectDestroy$ } from '../on-destroy/on-destroy';\n\n/** Selector type for select style functions */\nexport type StateSelector = ((...args: Any[]) => T) | StateToken;\n\n/** `select$` configuration options */\nexport interface SelectOptions {\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\n  notifyOnChange?: boolean;\n}\n\n/**\n * Marks a view for change detection whenever a new value is emitted\n * @param options Options to explicitly disable marking\n * @returns A rxjs operator\n */\nfunction markForCheck(options?: SelectOptions): MonoTypeOperatorFunction {\n  const notifyOnChange = options?.notifyOnChange ?? true;\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  if (notifyOnChange && cdr) {\n    const markFn = () => cdr.markForCheck();\n    return tap({ next: markFn, error: markFn, complete: markFn });\n  }\n\n  return (source) => source;\n}\n\n/**\n * Creates an observable emitting parts of the state. The observable's lifetime\n * is automatically tied to the injection context where this is called.\n * @param selector State selection function or token\n * @param options Additional select options\n * @returns An observable of the selected state\n */\nexport function select$(selector: StateSelector, options?: SelectOptions): Observable {\n  return inject(Store)\n    .select(selector as StateToken)\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Sets the base href\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Set')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseHref: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/base-href/base-href.actions.ts:7\n                            \n                        \n\n                \n                    \n                            Sets the base href\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        baseHref\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New href\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\n\n/** Base action factory */\nconst Action = ActionGroup('BaseHref');\n\n/** Sets the base href */\nexport class Set extends Action('Set') {\n  /**\n   * Sets the base href\n   * @param baseHref New href\n   */\n  constructor(readonly baseHref: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set-1.html":{"url":"classes/Set-1.html","title":"class - Set-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Class Set Action for set method\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Set')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:10\n                            \n                        \n\n                \n                    \n                            constructor class for Set action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - value to be stored with the key\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/snapshot-observer.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        NextObserver\n                        ErrorObserver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:38\n                        \n                    \n\n\n            \n                \n                        Handles error emits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The error value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:18\n                        \n                    \n\n\n            \n                \n                        Gets the latest value or throw on errors\n\n\n                        \n                            Returns :     T\n\n                        \n                            \n                                The latest value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles value emits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ErrorObserver, NextObserver } from 'rxjs';\n\n/** Object indicating that no error has been emitted */\nconst NO_ERROR_SENTINEL_OBJ = {};\n\n/** Observer storing the latest value from a snapshot stream */\nexport class SnapshotObserver implements NextObserver, ErrorObserver {\n  /** The latest value */\n  private value?: T = undefined;\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.value = undefined;\n    this.errorValue = err;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StorageSelectors.html":{"url":"classes/StorageSelectors.html","title":"class - StorageSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StorageSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Storage selectors - class for retrieving storage types\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                get\n                            \n                            \n                                    \n                                    Static\n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(_state)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.selectors.ts:13\n                        \n                    \n\n\n            \n                \n                        returns the value stored in the key,value pair in the storageId given\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _state\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                (id,key) of the given storage id else undefined\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        length\n                        \n                    \n                \n            \n            \n                \n                        \n                    length(_state)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.selectors.ts:23\n                        \n                    \n\n\n            \n                \n                        returns the number of items in the given storage id stored\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _state\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | undefined\n\n                        \n                            \n                                length of the given StorageId supplied\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { StorageId } from './storage.model';\nimport { StorageState } from './storage.state';\n/**\n * Storage selectors - class for retrieving storage types\n */\nexport class StorageSelectors {\n  /**\n   * returns the value stored in the key,value pair in the storageId given\n   * @returns (id,key) of the given storage id else undefined\n   */\n  @Selector([StorageState])\n  static get(_state: unknown): (id: StorageId, key: string) => string | undefined {\n    return (id, key) => StorageState.getStorage(id).getItem(key) ?? undefined;\n  }\n  /**\n   * returns the number of items in the given storage id stored\n   * @returns length of the given StorageId supplied\n   */\n  @Selector([StorageState])\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore Allow selector name\n  static length(_state: unknown): (id: StorageId) => number | undefined {\n    return (id) => StorageState.getStorage(id).length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageState.html":{"url":"injectables/StorageState.html","title":"injectable - StorageState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State holding Storage types\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clear\n                            \n                            \n                                    \n                                delete\n                            \n                            \n                                    Static\n                                getStorage\n                            \n                            \n                                    \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear(ctx: StorageContext, undefined: Clear)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Clear)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:63\n                        \n                    \n\n\n            \n                \n                        clears the values of the specified storage id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Clear\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(ctx: StorageContext, undefined: Delete)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Delete)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:53\n                        \n                    \n\n\n            \n                \n                        deletes the value pointed by key in the list of values stored in the specified storage id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Delete\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStorage(id: StorageId)\n                \n            \n\n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:25\n                        \n                    \n\n\n            \n                \n                        StorageState class to manage storage objects\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            StorageId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Storage\n\n                        \n                            \n                                \nStorage objects - session and local\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(ctx: StorageContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:43\n                        \n                    \n\n\n            \n                \n                        sets the key,value pair in the given storageId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Set\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { produce } from 'immer';\nimport { StorageContext } from './storage.model';\nimport { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { StorageId, StorageModel } from './storage.model';\nimport { Set, Delete, Clear } from './storage.actions';\n\n/**\n * State holding Storage types\n */\n@State({\n  name: 'storage',\n  defaults: {\n    [StorageId.Local]: 0,\n    [StorageId.Session]: 0,\n  },\n})\n@Injectable()\nexport class StorageState {\n  /**\n   * StorageState class to manage storage objects\n   * @param id-Storage Identifier\n   * @returns - Storage objects - session and local\n   */\n  static getStorage(id: StorageId): Storage {\n    switch (id) {\n      case StorageId.Local:\n        return localStorage;\n\n      case StorageId.Session:\n        return sessionStorage;\n\n      default:\n        throw new Error(`No such storage '${id}'`);\n    }\n  }\n  /**\n   * sets the key,value pair in the given storageId\n   * @param ctx - StorageContext object\n   * @param param1- {id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Set)\n  set(ctx: StorageContext, { id, key, value }: Set): void {\n    StorageState.getStorage(id).setItem(key, value);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * deletes the value pointed by key in the list of values stored in the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1- id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Delete)\n  delete(ctx: StorageContext, { id, key }: Delete): void {\n    StorageState.getStorage(id).removeItem(key);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * clears the values of the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1 - id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Clear)\n  clear(ctx: StorageContext, { id }: Clear): void {\n    StorageState.getStorage(id).clear();\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * increases count after each operation is performed on the specified storage id\n   * @param ctx  - StorageContext obje\n   * @param id - StorageId - Storage identifier for which the change count has to be updated\n   */\n  private increaseChangeCount(ctx: StorageContext, id: StorageId): void {\n    ctx.setState(\n      produce((draft) => {\n        draft[id] += 1;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StyleComponentManagerService.html":{"url":"injectables/StyleComponentManagerService.html","title":"injectable - StyleComponentManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StyleComponentManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            styling/src/lib/style-component-manager.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager of global style components\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                registerStyleComponents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        registerStyleComponents\n                        \n                    \n                \n            \n            \n                \nregisterStyleComponents(components: Types, options: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in styling/src/lib/style-component-manager.service.ts:58\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    Types\n                            \n                        \n                    \n\n            \n                \n                        Register style components. Each component is registered at most once.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                components\n                                            \n                                                        Types\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Component classes\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Options object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentRefsFromTypes\n\n                        \n                            \n                                Component instance references\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ApplicationRef,\n  ComponentRef,\n  EnvironmentInjector,\n  Injectable,\n  Injector,\n  Type,\n  assertInInjectionContext,\n  createComponent,\n  inject,\n  runInInjectionContext,\n} from '@angular/core';\n\n/** Map of component types to instances */\ntype ComponentInstanceMap = Map, ComponentRef>;\n\n/** Helper that turns an array of types into an array of component refs */\ntype ComponentRefsFromTypes[]> = {\n  [Index in keyof Types]: ComponentRef>;\n};\n\n/**\n * Register style components. Each component is registered at most once.\n * Must be called in an injection context or pass an injector in the options.\n *\n * @param components Component classes\n * @param options Additional options\n * @returns A component ref for each class\n */\nexport function registerStyleComponents[]>(\n  components: Types,\n  options?: { injector?: Injector },\n): ComponentRefsFromTypes {\n  if (!options?.injector) {\n    assertInInjectionContext(registerStyleComponents);\n  }\n\n  const injector = options?.injector ?? inject(Injector);\n  const manager = inject(StyleComponentManagerService);\n  return manager.registerStyleComponents(components, { injector });\n}\n\n/**\n * Manager of global style components\n */\n@Injectable({ providedIn: 'root' })\nexport class StyleComponentManagerService {\n  /** Component instance registry */\n  private readonly registry = new Map();\n\n  /**\n   * Register style components. Each component is registered at most once.\n   *\n   * @param components Component classes\n   * @param options Options object\n   * @returns Component instance references\n   */\n  registerStyleComponents[]>(\n    components: Types,\n    options: { injector: Injector },\n  ): ComponentRefsFromTypes {\n    return runInInjectionContext(options.injector, () => {\n      const instanceMap = this.getInstanceMap(inject(ApplicationRef));\n      const environmentInjector = inject(EnvironmentInjector);\n\n      return components.map((component) =>\n        this.getInstance(component, instanceMap, environmentInjector),\n      ) as ComponentRefsFromTypes;\n    });\n  }\n\n  /**\n   * Gets the component instance map for an application ref.\n   * The map is created if it doesn't already exist and\n   * is registered to cleanup when the application is destroyed.\n   *\n   * @param appRef Application reference\n   * @returns A component instance map\n   */\n  private getInstanceMap(appRef: ApplicationRef): ComponentInstanceMap {\n    let instanceMap = this.registry.get(appRef);\n    if (!instanceMap) {\n      instanceMap = new Map();\n      this.registry.set(appRef, instanceMap);\n      appRef.onDestroy(() => {\n        this.registry.delete(appRef);\n        instanceMap?.forEach((instance) => instance.destroy());\n      });\n    }\n\n    return instanceMap;\n  }\n\n  /**\n   * Gets or creates a component instance, adding it to the provided instance map.\n   *\n   * @param component Component class\n   * @param instanceMap Instance map to check\n   * @param environmentInjector The environment injector used when creating a new instance\n   * @returns A component ref to the existing or newly created instance\n   */\n  private getInstance(\n    component: Type,\n    instanceMap: ComponentInstanceMap,\n    environmentInjector: EnvironmentInjector,\n  ): ComponentRef {\n    let instance = instanceMap.get(component) as ComponentRef;\n    if (!instance) {\n      instance = createComponent(component, { environmentInjector });\n      instanceMap.set(component, instance);\n    }\n\n    return instance;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SvgIconResolverConfig.html":{"url":"interfaces/SvgIconResolverConfig.html","title":"interface - SvgIconResolverConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SvgIconResolverConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/resolvers.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for a svg icon resolver\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            appHref\n                                        \n                                \n                                \n                                        \n                                            directory\n                                        \n                                \n                                \n                                        \n                                            sanitizer\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appHref\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appHref:     Signal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Signal\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    App href value\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        directory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Base directory of icons and namespace folders\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sanitizer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sanitizer:     DomSanitizer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DomSanitizer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sanitizer to create resource urls\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { IconResolver } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/** Configuration for a svg icon resolver */\nexport interface SvgIconResolverConfig {\n  /** App href value */\n  appHref: Signal;\n  /** Sanitizer to create resource urls */\n  sanitizer: DomSanitizer;\n  /** Base directory of icons and namespace folders */\n  directory: string;\n}\n\n/**\n * Creates svg icon resolver with the specified configuration.\n * The function resolves all svg icons to `directory/[namespace/]name.svg`\n *\n * @param config Configuration object\n * @returns A resolver function\n */\nexport function createSvgIconResolver(config: SvgIconResolverConfig): IconResolver {\n  const { appHref, sanitizer, directory } = config;\n  return (name, namespace) => {\n    const path = joinPath(directory, namespace, name) + '.svg';\n    const url = appHref() + path;\n    return sanitizer.bypassSecurityTrustResourceUrl(url);\n  };\n}\n\n/**\n * Joins path segments into a single string. Removes empty segments and double '/' sequences.\n *\n * @param segments Segments, some of which may be the empty string\n * @returns The joined path\n */\nfunction joinPath(...segments: string[]): string {\n  return segments.join('/').replace(/\\/{2,}/g, '/');\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SvgIconsConfig.html":{"url":"interfaces/SvgIconsConfig.html","title":"interface - SvgIconsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SvgIconsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            icons/src/lib/providers.ts\n        \n\n\n            \n                Description\n            \n            \n                Svg icon provider configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directory:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base directory containing icons and namespace folders\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { APP_INITIALIZER, EnvironmentProviders, InjectionToken, makeEnvironmentProviders } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerDefaultFontSetClassesFactory,\n      deps: [MatIconRegistry, FONT_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerSvgIconResolverFactory,\n      deps: [MatIconRegistry, AppHrefService, DomSanitizer, SVG_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkType   (state/.../link-registry.model.ts)\n                        \n                        \n                            RawBuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            StorageId   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkType\n                    \n                \n                    \n                        \n                            Types for Link\n\n                        \n                    \n                        \n                            \n                                 Internal\n                            \n                        \n                        \n                            \n                                Value : internal\n                            \n                        \n                        \n                            \n                                 External\n                            \n                        \n                        \n                            \n                                Value : external\n                            \n                        \n            \n        \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        RawBuiltinResourceType\n                    \n                \n                    \n                        \n                            Raw builtin type strings\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n    state/src/storage/storage.model.ts\n    \n        \n            \n                \n                    \n                        \n                        StorageId\n                    \n                \n                    \n                        \n                            StorageId - enum with values as Local, Session - identifier for storage types\n\n                        \n                    \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Session\n                            \n                        \n                        \n                            \n                                Value : session\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        CdkStateModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnyEntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            BuiltinTypes   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ComponentInstanceMap   (styling/.../style-component-manager.service.ts)\n                        \n                        \n                            ComponentRefsFromTypes   (styling/.../style-component-manager.service.ts)\n                        \n                        \n                            CustomResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CustomResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            EntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ExternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            ExtractBuiltinEntryType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            FieldQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            InternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryContext   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryModel   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryQuery   (state/.../link-registry.state.ts)\n                        \n                        \n                            PatchablePlatformLocationHistoryMethod   (platform-location/.../nothrow-platform-location.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceEntryPayload   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RestArgs   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            SelectQuery   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            StateSelector   (injectors/.../select.ts)\n                        \n                        \n                            StorageContext   (state/.../storage.model.ts)\n                        \n                        \n                            StorageModel   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    AnyEntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.anyEntry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.entry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.field\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    BuiltinTypes\n                \n            \n            \n                \n                    Maps raw builtin type strings to ResourceType\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceEntry\n                \n            \n            \n                \n                    Typed custom resource entry\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceType\n                \n            \n            \n                \n                    Custom entry types\n\n                \n            \n            \n                \n                         `custom:${T}`\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExtractBuiltinEntryType\n                \n            \n            \n                \n                    Extracts the builtin entry with type T\n\n                \n            \n            \n                \n                        UnionMember | type | T>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Any resource entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntryPayload\n                \n            \n            \n                \n                    Payload type used when creating custom types\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Resource identifier\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceType\n                \n            \n            \n                \n                    Resource type string with entry typings\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    styling/src/lib/style-component-manager.service.ts\n    \n    \n        \n            \n                \n                    \n                    ComponentInstanceMap\n                \n            \n            \n                \n                    Map of component types to instances\n\n                \n            \n            \n                \n                        Map | ComponentRef<>>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ComponentRefsFromTypes\n                \n            \n            \n                \n                    Helper that turns an array of types into an array of component refs\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExternalLinkEntry\n                \n            \n            \n                \n                    type for external link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InternalLinkEntry\n                \n            \n            \n                \n                    type for internal link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkEntry\n                \n            \n            \n                \n                    entry for link registry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkId\n                \n            \n            \n                \n                    Type for unique identifier for link\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryContext\n                \n            \n            \n                \n                    type for State Context of LinkRegistry\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryModel\n                \n            \n            \n                \n                    Model for LinkRegistry State\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.state.ts\n    \n    \n        \n            \n                \n                    \n                    LinkRegistryQuery\n                \n            \n            \n                \n                    Query function for link entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    platform-location/src/lib/nothrow-platform-location.ts\n    \n    \n        \n            \n                \n                    \n                    PatchablePlatformLocationHistoryMethod\n                \n            \n            \n                \n                    Patchable platform location history methods\n\n                \n            \n            \n                \n                        \"replaceState\" | \"pushState\" | \"forward\" | \"back\" | \"historyGo\"\n\n                \n            \n        \n    \n    injectors/src/lib/select/select-snapshot.ts\n    \n    \n        \n            \n                \n                    \n                    RestArgs\n                \n            \n            \n                \n                    Get remaining arguments after applying bound arguments\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectQuery\n                \n            \n            \n                \n                    Function type returned by selectQuerySnapshot\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n    \n        \n            \n                \n                    \n                    StateSelector\n                \n            \n            \n                \n                    Selector type for select style functions\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n    state/src/storage/storage.model.ts\n    \n    \n        \n            \n                \n                    \n                    StorageContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StorageModel\n                \n            \n            \n                \n                    Type alias for the array of Storage objects\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../base-href.actions.ts)\n                        \n                        \n                            Action   (state/.../link-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../storage.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            BUILTIN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BUILTIN_TYPE_VALUES   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            currentScriptEl   (app-href/.../current-script.ts)\n                        \n                        \n                            currentScriptPath   (app-href/.../current-script.ts)\n                        \n                        \n                            CUSTOM_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_ENTRY_TYPE   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_TYPE_PREFIX   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DEFAULT_FONT_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            DEFAULT_SVG_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            DESTRUCTOR_CACHE   (injectors/.../on-destroy.ts)\n                        \n                        \n                            EMPTY_LINK   (state/.../link-registry.model.ts)\n                        \n                        \n                            EXTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            FONT_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            INITIAL_APP_HREF   (app-href/.../app-href.service.ts)\n                        \n                        \n                            INTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            LINK_REGISTRY_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            MARKDOWN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            NO_ERROR_SENTINEL_OBJ   (injectors/.../snapshot-observer.ts)\n                        \n                        \n                            PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS   (platform-location/.../nothrow-platform-location.ts)\n                        \n                        \n                            RESOURCE_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_ID   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                        \n                            SVG_ICONS_CONFIG   (icons/.../providers.ts)\n                        \n                        \n                            TEXT_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            URL_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/base-href/base-href.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('BaseHref')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('LinkRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/storage/storage.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Storage')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BUILTIN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])\n                    \n                \n\n            \n                \n                    Union of all builtin entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BUILTIN_TYPE_VALUES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(RawBuiltinResourceType)\n                    \n                \n\n            \n                \n                    Builtin type strings as an array\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BuiltinResourceType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : RawBuiltinResourceType as BuiltinTypes\n                    \n                \n\n            \n                \n                    Builtin resource types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()\n                    \n                \n\n            \n                \n                    Custom entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .refine((val) => !isBuiltinType(val), 'Invalid builtin resource format')\n  .transform>(createCustomType)\n                    \n                \n\n            \n                \n                    Custom entry type validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_TYPE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'custom:'\n                    \n                \n\n            \n                \n                    Prefix of all custom types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MARKDOWN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Markdown),\n  markdown: z.string(),\n})\n                    \n                \n\n            \n                \n                    Markdown data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])\n                    \n                \n\n            \n                \n                    Builtin or custom entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `ResourceId:'${id}'`)\n  .brand('ResourceId')\n                    \n                \n\n            \n                \n                    Resource identifier validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(RESOURCE_ID, RESOURCE_ENTRY)\n                    \n                \n\n            \n                \n                    State schema\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEXT_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Text),\n  text: z.string(),\n})\n                    \n                \n\n            \n                \n                    Text data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        URL_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Url),\n  url: z.string(),\n})\n                    \n                \n\n            \n                \n                    External url\n\n                \n            \n\n        \n    \n\n    app-href/src/lib/current-script.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentScriptEl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : document.currentScript\n                    \n                \n\n            \n                \n                    Currently executing script's element.\nShould be reliable in most cases unless the script is executed as a module\nor in an older browser, IE etc. (which we don't support anyway)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentScriptPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n\n            \n                \n                    Cached value of found script path\n\n                \n            \n\n        \n    \n\n    icons/src/lib/providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_FONT_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n  defaultClasses: [],\n}\n                    \n                \n\n            \n                \n                    Default values for font icon configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_SVG_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Required\n\n                    \n                \n                \n                    \n                        Default value : {\n  directory: 'assets/icons',\n}\n                    \n                \n\n            \n                \n                    Default values for svg icon configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FONT_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('FONT_ICONS_CONFIG')\n                    \n                \n\n            \n                \n                    Injection token for font icon configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SVG_ICONS_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('SVG_ICONS_CONFIG')\n                    \n                \n\n            \n                \n                    Injection token for svg icon configuration\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DESTRUCTOR_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    Cached destructor observables\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EMPTY_LINK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('@@__EMPTY__')\n                    \n                \n\n            \n                \n                    Empty link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })\n                    \n                \n\n            \n                \n                    Type for external link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })\n                    \n                \n\n            \n                \n                    Type for internal link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LINK_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)\n                    \n                \n\n            \n                \n                    Schema for link registry\n\n                \n            \n\n        \n    \n\n    app-href/src/lib/app-href.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        INITIAL_APP_HREF\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('InitialAppHref', {\n  providedIn: 'root',\n  factory: () => getCurrentScriptBasePath(),\n})\n                    \n                \n\n            \n                \n                    Initial value for appHref. Defaults to the current script's base path\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/select/snapshot-observer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NO_ERROR_SENTINEL_OBJ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n            \n                \n                    Object indicating that no error has been emitted\n\n                \n            \n\n        \n    \n\n    platform-location/src/lib/nothrow-platform-location.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PatchablePlatformLocationHistoryMethod[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'replaceState',\n  'pushState',\n  'forward',\n  'back',\n  'historyGo',\n]\n                    \n                \n\n            \n                \n                    Array of all patchable platform location history methods\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
