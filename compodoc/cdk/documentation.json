{
    "pipes": [
        {
            "name": "AssetUrlPipe",
            "id": "pipe-AssetUrlPipe-a96539a34995185b2ebac2f091d9862610837705da27c441cb5f561237308a6d653aa951546ae0a4803ecf648569919946162f248c3df56420b633459338eb07",
            "file": "app-href/src/lib/asset-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Create a full url with the appHref prefixed</p>\n",
            "rawdescription": "\nCreate a full url with the appHref prefixed",
            "properties": [
                {
                    "name": "markChangeRef",
                    "defaultValue": "effect(() => {\n    if (this.prevHref() !== null) {\n      this.cdr.markForCheck();\n    }\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Notifies the change detection when the appHref changes</p>\n",
                    "line": 19,
                    "rawdescription": "\nNotifies the change detection when the appHref changes",
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPrefixes an asset path with the current appHref value\n",
                    "description": "<p>Prefixes an asset path with the current appHref value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 944,
                                "end": 948,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 938,
                                "end": 943,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Path to asset</p>\n"
                        },
                        {
                            "name": {
                                "pos": 975,
                                "end": 979,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 969,
                                "end": 974,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether the url will be bound to a css property</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1034,
                                "end": 1041,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A full url</p>\n"
                        }
                    ]
                }
            ],
            "standalone": true,
            "pure": false,
            "ngname": "assetUrl",
            "sourceCode": "import { ChangeDetectorRef, Pipe, PipeTransform, effect, inject } from '@angular/core';\nimport { computedPrevious } from 'ngxtension/computed-previous';\nimport { AppHrefService } from './app-href.service';\n\n/** Create a full url with the appHref prefixed */\n@Pipe({\n  name: 'assetUrl',\n  standalone: true,\n  pure: false,\n})\nexport class AssetUrlPipe implements PipeTransform {\n  /** Current appHref value signal */\n  private readonly appHref = inject(AppHrefService).appHref;\n  /** Previous appHref value signal */\n  private readonly prevHref = computedPrevious(this.appHref);\n  /** Reference to the change detector */\n  private readonly cdr = inject(ChangeDetectorRef);\n  /** Notifies the change detection when the appHref changes */\n  protected readonly markChangeRef = effect(() => {\n    if (this.prevHref() !== null) {\n      this.cdr.markForCheck();\n    }\n  });\n\n  /**\n   * Prefixes an asset path with the current appHref value\n   * @param path Path to asset\n   * @param type Whether the url will be bound to a css property\n   * @returns A full url\n   */\n  transform(path: string, type?: 'css'): string {\n    const url = `${this.appHref()}${path}`;\n    return type === 'css' ? `url(\"${url}\")` : url;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ActionConstructor",
            "id": "interface-ActionConstructor-79d65b59eb27f474fc1f2fbef720f134360ce0d1017b538dfe48bd3ca60c6a0472d1789cdc31f57a5190150ce49b1ca0d304e9e44f722b1c4c992c619605ba68",
            "file": "state/src/actions/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Action type</p>\n",
                    "line": 12,
                    "rawdescription": "\nAction type",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 180,
            "description": "<p>Base action constructor</p>\n",
            "rawdescription": "\nBase action constructor",
            "methods": [],
            "extends": []
        },
        {
            "name": "DestructorScope",
            "id": "interface-DestructorScope-c4b53b823f2f6845a68f4b66881cc81070616d6b5124d0d203f80f1eeee060d84d1d05eab91b3a6e833ea4aef93cdf9d68ef0051d58b85ca5101c609dad76a05",
            "file": "injectors/src/lib/on-destroy/destructor-subject.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject<void> {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "description": "<p>Object on which cleanup functions can be registered</p>\n",
            "rawdescription": "\nObject on which cleanup functions can be registered",
            "methods": [
                {
                    "name": "onDestroy",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister a cleanup function\n",
                    "description": "<p>Register a cleanup function</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 184,
                                "end": 186,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "cb"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "pos": 178,
                                "end": 183,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cleanup callback function</p>\n"
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "FontIconsConfig",
            "id": "interface-FontIconsConfig-58fc7dae4cda83abb24c08a1d3a3bfd44089ca30679d537e7751aaf61739c9e969081c814f8797341646d038e48d1ba744b8a33a29377cd2ae22c35c007c479b",
            "file": "icons/src/lib/providers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { APP_INITIALIZER, EnvironmentProviders, InjectionToken, makeEnvironmentProviders } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken<Required<FontIconsConfig>>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken<Required<SvgIconsConfig>>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required<FontIconsConfig> = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required<SvgIconsConfig> = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required<FontIconsConfig>,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required<SvgIconsConfig>,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerDefaultFontSetClassesFactory,\n      deps: [MatIconRegistry, FONT_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerSvgIconResolverFactory,\n      deps: [MatIconRegistry, AppHrefService, DomSanitizer, SVG_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n",
            "properties": [
                {
                    "name": "defaultClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>Default classes to apply when no font set is specified</p>\n",
                    "line": 10,
                    "rawdescription": "\nDefault classes to apply when no font set is specified"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Font icon provider configuration</p>\n",
            "rawdescription": "\nFont icon provider configuration",
            "methods": [],
            "extends": []
        },
        {
            "name": "HoverContext",
            "id": "interface-HoverContext-49a4c26570f0d04f23fe4fbc0dc828e41ceb60105a94f0556e120079f4aeedd891c1d1b2ef505b2650ef16efedefd686eee12c9218a6144616e86020fe84d016",
            "file": "src/lib/hover/hover.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConnectionPositionPair, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext<T = unknown> {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective<T = unknown> {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef<HoverContext<T>>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /** Overlay service */\n  private readonly overlay = inject(Overlay);\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  private overlayRef?: OverlayRef;\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext<T>;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal<HoverContext<T>>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { portal } = this;\n    if (portal) {\n      this.overlayRef = this.createOverlay();\n      this.overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    overlayRef?.dispose();\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to create overlay and set its position */\n  private createOverlay(): OverlayRef {\n    return this.overlay.create({\n      positionStrategy: this.overlay\n        .position()\n        .flexibleConnectedTo(this.el)\n        .withPositions([\n          new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n        ])\n        .withPush(true),\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "$implicit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "<p>Data provided by the user for use inside the content template</p>\n",
                    "line": 8,
                    "rawdescription": "\nData provided by the user for use inside the content template"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Context passed to hover content templates</p>\n",
            "rawdescription": "\nContext passed to hover content templates",
            "methods": [],
            "extends": []
        },
        {
            "name": "IconsConfig",
            "id": "interface-IconsConfig-58fc7dae4cda83abb24c08a1d3a3bfd44089ca30679d537e7751aaf61739c9e969081c814f8797341646d038e48d1ba744b8a33a29377cd2ae22c35c007c479b",
            "file": "icons/src/lib/providers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { APP_INITIALIZER, EnvironmentProviders, InjectionToken, makeEnvironmentProviders } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken<Required<FontIconsConfig>>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken<Required<SvgIconsConfig>>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required<FontIconsConfig> = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required<SvgIconsConfig> = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required<FontIconsConfig>,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required<SvgIconsConfig>,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerDefaultFontSetClassesFactory,\n      deps: [MatIconRegistry, FONT_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerSvgIconResolverFactory,\n      deps: [MatIconRegistry, AppHrefService, DomSanitizer, SVG_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n",
            "properties": [
                {
                    "name": "fontIcons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FontIconsConfig",
                    "optional": true,
                    "description": "<p>Font icon configuration</p>\n",
                    "line": 22,
                    "rawdescription": "\nFont icon configuration"
                },
                {
                    "name": "svgIcons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SvgIconsConfig",
                    "optional": true,
                    "description": "<p>Svg icon configuration</p>\n",
                    "line": 24,
                    "rawdescription": "\nSvg icon configuration"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Configuration when providing font icons and svg icon at the same time</p>\n",
            "rawdescription": "\nConfiguration when providing font icons and svg icon at the same time",
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectOptions",
            "id": "interface-SelectOptions-2a1e9b4935fb82769eb1dadf40ec0992c0e3f24e9bc0b33376fb53e5f271e89e87100bf0c22b87ea85ce9dd36fbdd2e6fb22f6978dc61aff4d02559ba5c9c8f0",
            "file": "injectors/src/lib/select/select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectorRef, inject } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from 'rxjs';\nimport { injectDestroy$ } from '../on-destroy/on-destroy';\n\n/** Selector type for select style functions */\nexport type StateSelector<T> = ((...args: Any[]) => T) | StateToken<T>;\n\n/** `select$` configuration options */\nexport interface SelectOptions {\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\n  notifyOnChange?: boolean;\n}\n\n/**\n * Marks a view for change detection whenever a new value is emitted\n * @param options Options to explicitly disable marking\n * @returns A rxjs operator\n */\nfunction markForCheck<T>(options?: SelectOptions): MonoTypeOperatorFunction<T> {\n  const notifyOnChange = options?.notifyOnChange ?? true;\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  if (notifyOnChange && cdr) {\n    const markFn = () => cdr.markForCheck();\n    return tap({ next: markFn, error: markFn, complete: markFn });\n  }\n\n  return (source) => source;\n}\n\n/**\n * Creates an observable emitting parts of the state. The observable's lifetime\n * is automatically tied to the injection context where this is called.\n * @param selector State selection function or token\n * @param options Additional select options\n * @returns An observable of the selected state\n */\nexport function select$<T>(selector: StateSelector<T>, options?: SelectOptions): Observable<T> {\n  return inject(Store)\n    .select(selector as StateToken<T>)\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\n}\n",
            "properties": [
                {
                    "name": "notifyOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether to mark the containing view for change detection on emits. Defaults to true.</p>\n",
                    "line": 13,
                    "rawdescription": "\nWhether to mark the containing view for change detection on emits. Defaults to true."
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p><code>select$</code> configuration options</p>\n",
            "rawdescription": "\n`select$` configuration options",
            "methods": [],
            "extends": []
        },
        {
            "name": "SvgIconResolverConfig",
            "id": "interface-SvgIconResolverConfig-8fd5990c884e085500d881e468f0642aea026a4f7cf5ac5ac266c1b88a84f1f9692c68077e10516b54a28f56c01ccb5b6e2bcf04ad4af65202668e0c5ec8cd5d",
            "file": "icons/src/lib/resolvers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Signal } from '@angular/core';\nimport { IconResolver } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/** Configuration for a svg icon resolver */\nexport interface SvgIconResolverConfig {\n  /** App href value */\n  appHref: Signal<string>;\n  /** Sanitizer to create resource urls */\n  sanitizer: DomSanitizer;\n  /** Base directory of icons and namespace folders */\n  directory: string;\n}\n\n/**\n * Creates svg icon resolver with the specified configuration.\n * The function resolves all svg icons to `directory/[namespace/]name.svg`\n *\n * @param config Configuration object\n * @returns A resolver function\n */\nexport function createSvgIconResolver(config: SvgIconResolverConfig): IconResolver {\n  const { appHref, sanitizer, directory } = config;\n  return (name, namespace) => {\n    const path = joinPath(directory, namespace, name) + '.svg';\n    const url = appHref() + path;\n    return sanitizer.bypassSecurityTrustResourceUrl(url);\n  };\n}\n\n/**\n * Joins path segments into a single string. Removes empty segments and double '/' sequences.\n *\n * @param segments Segments, some of which may be the empty string\n * @returns The joined path\n */\nfunction joinPath(...segments: string[]): string {\n  return segments.join('/').replace(/\\/{2,}/g, '/');\n}\n",
            "properties": [
                {
                    "name": "appHref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signal<string>",
                    "optional": false,
                    "description": "<p>App href value</p>\n",
                    "line": 8,
                    "rawdescription": "\nApp href value"
                },
                {
                    "name": "directory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Base directory of icons and namespace folders</p>\n",
                    "line": 12,
                    "rawdescription": "\nBase directory of icons and namespace folders"
                },
                {
                    "name": "sanitizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "<p>Sanitizer to create resource urls</p>\n",
                    "line": 10,
                    "rawdescription": "\nSanitizer to create resource urls"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Configuration for a svg icon resolver</p>\n",
            "rawdescription": "\nConfiguration for a svg icon resolver",
            "methods": [],
            "extends": []
        },
        {
            "name": "SvgIconsConfig",
            "id": "interface-SvgIconsConfig-58fc7dae4cda83abb24c08a1d3a3bfd44089ca30679d537e7751aaf61739c9e969081c814f8797341646d038e48d1ba744b8a33a29377cd2ae22c35c007c479b",
            "file": "icons/src/lib/providers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { APP_INITIALIZER, EnvironmentProviders, InjectionToken, makeEnvironmentProviders } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AppHrefService } from '@hra-ui/cdk/app-href';\nimport { createSvgIconResolver } from './resolvers';\n\n/** Font icon provider configuration */\nexport interface FontIconsConfig {\n  /** Default classes to apply when no font set is specified */\n  defaultClasses?: string[];\n}\n\n/** Svg icon provider configuration */\nexport interface SvgIconsConfig {\n  /** Base directory containing icons and namespace folders */\n  directory?: string;\n}\n\n/** Configuration when providing font icons and svg icon at the same time */\nexport interface IconsConfig {\n  /** Font icon configuration */\n  fontIcons?: FontIconsConfig;\n  /** Svg icon configuration */\n  svgIcons?: SvgIconsConfig;\n}\n\n/** Injection token for font icon configuration */\nconst FONT_ICONS_CONFIG = new InjectionToken<Required<FontIconsConfig>>('FONT_ICONS_CONFIG');\n\n/** Injection token for svg icon configuration */\nconst SVG_ICONS_CONFIG = new InjectionToken<Required<SvgIconsConfig>>('SVG_ICONS_CONFIG');\n\n/** Default values for font icon configuration */\nconst DEFAULT_FONT_ICONS_CONFIG: Required<FontIconsConfig> = {\n  defaultClasses: [],\n};\n\n/** Default values for svg icon configuration */\nconst DEFAULT_SVG_ICONS_CONFIG: Required<SvgIconsConfig> = {\n  directory: 'assets/icons',\n};\n\n/**\n * Factory for registering default font icon classes\n *\n * @param registry Material icon registry\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerDefaultFontSetClassesFactory(\n  registry: MatIconRegistry,\n  { defaultClasses }: Required<FontIconsConfig>,\n): () => void {\n  return () => {\n    const existingClasses = registry.getDefaultFontSetClass();\n    registry.setDefaultFontSetClass(...defaultClasses, ...existingClasses);\n  };\n}\n\n/**\n * Factory for registering a svg icon resolver\n *\n * @param registry Material icon registry\n * @param location Location service\n * @param sanitizer Resource url sanitizer\n * @param config Configuration object\n * @returns Registration function\n */\nfunction registerSvgIconResolverFactory(\n  registry: MatIconRegistry,\n  appHrefService: AppHrefService,\n  sanitizer: DomSanitizer,\n  { directory }: Required<SvgIconsConfig>,\n): () => void {\n  return () => {\n    const resolver = createSvgIconResolver({\n      appHref: appHrefService.appHref,\n      sanitizer,\n      directory,\n    });\n\n    registry.addSvgIconResolver(resolver);\n  };\n}\n\n/**\n * Provides font icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideFontIcons(config?: FontIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: FONT_ICONS_CONFIG,\n      useValue: { ...DEFAULT_FONT_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerDefaultFontSetClassesFactory,\n      deps: [MatIconRegistry, FONT_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideSvgIcons(config?: SvgIconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: SVG_ICONS_CONFIG,\n      useValue: { ...DEFAULT_SVG_ICONS_CONFIG, ...config },\n    },\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: registerSvgIconResolverFactory,\n      deps: [MatIconRegistry, AppHrefService, DomSanitizer, SVG_ICONS_CONFIG],\n    },\n  ]);\n}\n\n/**\n * Provides both font and svg icons\n *\n * @param config Configuration object\n * @returns Application providers\n */\nexport function provideIcons(config?: IconsConfig): EnvironmentProviders {\n  return makeEnvironmentProviders([provideFontIcons(config?.fontIcons), provideSvgIcons(config?.svgIcons)]);\n}\n",
            "properties": [
                {
                    "name": "directory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Base directory containing icons and namespace folders</p>\n",
                    "line": 16,
                    "rawdescription": "\nBase directory containing icons and namespace folders"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Svg icon provider configuration</p>\n",
            "rawdescription": "\nSvg icon provider configuration",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AppHrefService",
            "id": "injectable-AppHrefService-ddac3f00aa86fa8b22b821fb6ad04937a9b62c821b2b2d3f585f04fc9e1aee90b20f0945d85a10a695a6dbac92da8633af9f3db908d84e86cca1fed8243783d5",
            "file": "app-href/src/lib/app-href.service.ts",
            "properties": [
                {
                    "name": "appHref",
                    "defaultValue": "this.appHrefSignal.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Readonly appHref value signal</p>\n",
                    "line": 21,
                    "rawdescription": "\nReadonly appHref value signal",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "resetAppHref",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets the appHref to it's initial value\n",
                    "description": "<p>Resets the appHref to it&#39;s initial value</p>\n"
                },
                {
                    "name": "setAppHref",
                    "args": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the current appHref value\n\n",
                    "description": "<p>Updates the current appHref value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 839,
                                "end": 843,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "href"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 833,
                                "end": 838,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>New appHref value</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service for getting and setting the appHref</p>\n",
            "rawdescription": "\n\nService for getting and setting the appHref\n",
            "sourceCode": "import { Injectable, InjectionToken, inject, signal } from '@angular/core';\nimport { getCurrentScriptBasePath } from './current-script';\n\n/** Initial value for appHref. Defaults to the current script's base path */\nexport const INITIAL_APP_HREF = new InjectionToken<string>('InitialAppHref', {\n  providedIn: 'root',\n  factory: () => getCurrentScriptBasePath(),\n});\n\n/**\n * Service for getting and setting the appHref\n */\n@Injectable({ providedIn: 'root' })\nexport class AppHrefService {\n  /** Initial appHref value */\n  private readonly initialAppHref = inject(INITIAL_APP_HREF);\n  /** Current appHref value signal */\n  private readonly appHrefSignal = signal(this.initialAppHref);\n\n  /** Readonly appHref value signal */\n  readonly appHref = this.appHrefSignal.asReadonly();\n\n  /**\n   * Updates the current appHref value\n   *\n   * @param href New appHref value\n   */\n  setAppHref(href: string): void {\n    this.appHrefSignal.set(href);\n  }\n\n  /**\n   * Resets the appHref to it's initial value\n   */\n  resetAppHref(): void {\n    this.setAppHref(this.initialAppHref);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BaseHrefState",
            "id": "injectable-BaseHrefState-1be6cbd75a5f6aa5f68ad6a0f54a1d08558c7734ff174ec131e1420651b13d0bd410d82d1052133b70996882de9dec7ca422dd10cb04136ded2f3940a7868070",
            "file": "state/src/base-href/base-href.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setBaseHref",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Set",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets base href value\n",
                    "description": "<p>Sets base href value</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Set"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 329,
                                "end": 332,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "StateContext<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 323,
                                "end": 328,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>state context</p>\n"
                        },
                        {
                            "type": "Set",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>State holding the base href</p>\n",
            "rawdescription": "\n\nState holding the base href\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Set } from './base-href.actions';\n\n/**\n * State holding the base href\n */\n@State<string>({\n  name: 'baseHref',\n  defaults: '',\n})\n@Injectable()\nexport class BaseHrefState {\n  /**\n   * Sets base href value\n   * @param ctx state context\n   * @param { baseHref } href value\n   */\n  @Action(Set)\n  setBaseHref(ctx: StateContext<string>, { baseHref }: Set) {\n    if (baseHref !== '' && !baseHref.endsWith('/')) {\n      baseHref = baseHref + '/';\n    }\n    ctx.setState(baseHref);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LinkRegistryState",
            "id": "injectable-LinkRegistryState-3325fba1d80b5e5c754e81e763e79552be404284eaaefd02ae5ad7a208591b687b6adc95607127b760ead160ba5289ae67d2373cc53a3d42eef116d92bee0fbb",
            "file": "state/src/link-registry/link-registry.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addMany",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AddMany",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd multiple entries\n",
                    "description": "<p>Add multiple entries</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AddMany"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1615,
                                "end": 1618,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1609,
                                "end": 1614,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "AddMany",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOne",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Add",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a single entry\n",
                    "description": "<p>Add a single entry</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Add"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1360,
                                "end": 1363,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1354,
                                "end": 1359,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "Add",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addYaml",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AddFromYaml",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse and add entries from yaml\n",
                    "description": "<p>Parse and add entries from yaml</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AddFromYaml"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1859,
                                "end": 1862,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1853,
                                "end": 1858,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "AddFromYaml",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 1934,
                                "end": 1942,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "filename"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1928,
                                "end": 1933,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional url/filename from which the data was loaded (for improved error messages)</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadYaml",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "LoadFromYaml",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad and add entries from an external yaml file\n",
                    "description": "<p>Load and add entries from an external yaml file</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadFromYaml"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2359,
                                "end": 2362,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2353,
                                "end": 2358,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "LoadFromYaml",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2436,
                                "end": 2443,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable that completes when the entries has been added</p>\n"
                        }
                    ]
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Navigate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigate to Internal or External urls from id\n",
                    "description": "<p>Navigate to Internal or External urls from id</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Navigate"
                        }
                    ],
                    "modifierKind": [
                        170,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2827,
                                "end": 2830,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "LinkRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2821,
                                "end": 2826,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "Navigate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2899,
                                "end": 2906,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>State for keeping track of links globally</p>\n",
            "rawdescription": "\nState for keeping track of links globally",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router, UrlCreationOptions } from '@angular/router';\nimport { createExternalUrl } from '@hra-ui/utils';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = <T extends LinkType | string = string>(\n  id: LinkId,\n  type?: T,\n) => UnionMember<LinkEntry, 'type', T> | undefined;\n\n/** State for keeping track of links globally */\n@State<LinkRegistryModel>({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router, { optional: true });\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable<void> {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id, extras }: Navigate): Promise<void> {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry, extras);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry, extras);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry, extras: UrlCreationOptions): Promise<void> {\n    await this.zone.run(() => this.router?.navigate(entry.commands, { ...entry.extras, ...extras }));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry, extras: UrlCreationOptions): void {\n    const url = createExternalUrl(entry.url, extras);\n    window.open(url, entry.target, entry.rel);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ResourceRegistryState",
            "id": "injectable-ResourceRegistryState-ee091eca7099a68b29fcf8b081af0f6e4eec5cfb7b538ee0423d54f17301e5430869290d05c8adab76fffaddd9c6c3cfff4569f15b2e831e632827f4347dee77",
            "file": "state/src/resource-registry/resource-registry.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addMany",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AddMany",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd multiple entries\n",
                    "description": "<p>Add multiple entries</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AddMany"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1038,
                                "end": 1041,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1032,
                                "end": 1037,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "AddMany",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOne",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Add",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a single entry\n",
                    "description": "<p>Add a single entry</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Add"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 779,
                                "end": 782,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 773,
                                "end": 778,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "Add",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addYaml",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AddFromYaml",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse and add entries from yaml\n",
                    "description": "<p>Parse and add entries from yaml</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AddFromYaml"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1286,
                                "end": 1289,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1280,
                                "end": 1285,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "AddFromYaml",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 1361,
                                "end": 1369,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "filename"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1355,
                                "end": 1360,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional url/filename from which the data was loaded (for improved error messages)</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadMarkdown",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "LoadMarkdown",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds a markdown entry with content loaded from an external file\n",
                    "description": "<p>Adds a markdown entry with content loaded from an external file</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadMarkdown"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2284,
                                "end": 2287,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2278,
                                "end": 2283,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "LoadMarkdown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2375,
                                "end": 2382,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable that completes when the entry has been added</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadYaml",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "LoadFromYaml",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad and add entries from an external yaml file\n",
                    "description": "<p>Load and add entries from an external yaml file</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "LoadFromYaml"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1794,
                                "end": 1797,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "ResourceRegistryContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1788,
                                "end": 1793,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State context</p>\n"
                        },
                        {
                            "type": "LoadFromYaml",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1871,
                                "end": 1878,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable that completes when the entries has been added</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>State keeping track of global resources</p>\n",
            "rawdescription": "\nState keeping track of global resources",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  BuiltinResourceType,\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State<ResourceRegistryModel>({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable<void> {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable<void> {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: BuiltinResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StorageState",
            "id": "injectable-StorageState-0ea776849f53b42ade81bab300bdb894f33eaab8344d5374968b6ded672350cc7bc1fcd84b705e59cdce5ba7c431f6153dbb5313152debe46e4668dc2c419376",
            "file": "state/src/storage/storage.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StorageContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Clear",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclears the values of the specified storage id\n",
                    "description": "<p>clears the values of the specified storage id</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Clear"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1781,
                                "end": 1784,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "StorageContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1775,
                                "end": 1780,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>StorageContext object</li>\n</ul>\n"
                        },
                        {
                            "type": "Clear",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StorageContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Delete",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeletes the value pointed by key in the list of values stored in the specified storage id\n",
                    "description": "<p>deletes the value pointed by key in the list of values stored in the specified storage id</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Delete"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1397,
                                "end": 1400,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "StorageContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1391,
                                "end": 1396,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>StorageContext object</li>\n</ul>\n"
                        },
                        {
                            "type": "Delete",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "id",
                            "type": "StorageId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Storage",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStorageState class to manage storage objects\n",
                    "description": "<p>StorageState class to manage storage objects</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "StorageId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 583,
                                "end": 590,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<ul>\n<li>Storage objects - session and local</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StorageContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "Set",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsets the key,value pair in the given storageId\n",
                    "description": "<p>sets the key,value pair in the given storageId</p>\n",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "Set"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 966,
                                "end": 969,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ctx"
                            },
                            "type": "StorageContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 960,
                                "end": 965,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>StorageContext object</li>\n</ul>\n"
                        },
                        {
                            "type": "Set",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>State holding Storage types</p>\n",
            "rawdescription": "\n\nState holding Storage types\n",
            "sourceCode": "import { produce } from 'immer';\nimport { StorageContext } from './storage.model';\nimport { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { StorageId, StorageModel } from './storage.model';\nimport { Set, Delete, Clear } from './storage.actions';\n\n/**\n * State holding Storage types\n */\n@State<StorageModel>({\n  name: 'storage',\n  defaults: {\n    [StorageId.Local]: 0,\n    [StorageId.Session]: 0,\n  },\n})\n@Injectable()\nexport class StorageState {\n  /**\n   * StorageState class to manage storage objects\n   * @param id-Storage Identifier\n   * @returns - Storage objects - session and local\n   */\n  static getStorage(id: StorageId): Storage {\n    switch (id) {\n      case StorageId.Local:\n        return localStorage;\n\n      case StorageId.Session:\n        return sessionStorage;\n\n      default:\n        throw new Error(`No such storage '${id}'`);\n    }\n  }\n  /**\n   * sets the key,value pair in the given storageId\n   * @param ctx - StorageContext object\n   * @param param1- {id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Set)\n  set(ctx: StorageContext, { id, key, value }: Set): void {\n    StorageState.getStorage(id).setItem(key, value);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * deletes the value pointed by key in the list of values stored in the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1- id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Delete)\n  delete(ctx: StorageContext, { id, key }: Delete): void {\n    StorageState.getStorage(id).removeItem(key);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * clears the values of the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1 - id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Clear)\n  clear(ctx: StorageContext, { id }: Clear): void {\n    StorageState.getStorage(id).clear();\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * increases count after each operation is performed on the specified storage id\n   * @param ctx  - StorageContext obje\n   * @param id - StorageId - Storage identifier for which the change count has to be updated\n   */\n  private increaseChangeCount(ctx: StorageContext, id: StorageId): void {\n    ctx.setState(\n      produce((draft) => {\n        draft[id] += 1;\n      }),\n    );\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StyleComponentManagerService",
            "id": "injectable-StyleComponentManagerService-68404690b99d557d9cf32aa8bf84780a121212ef3524398e3441d1ae4f520121cfce9af1f2d9093beb5b6008ff3f3c96958f2cb3cfb7f2f3e356499ddb9a6fdf",
            "file": "styling/src/lib/style-component-manager.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "registerStyleComponents",
                    "args": [
                        {
                            "name": "components",
                            "type": "Types",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRefsFromTypes<Types>",
                    "typeParameters": [
                        "Types"
                    ],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegister style components. Each component is registered at most once.\n\n",
                    "description": "<p>Register style components. Each component is registered at most once.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1598,
                                "end": 1608,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "components"
                            },
                            "type": "Types",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1592,
                                "end": 1597,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Component classes</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1639,
                                "end": 1646,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "options"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1633,
                                "end": 1638,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Options object</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1668,
                                "end": 1675,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Component instance references</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Manager of global style components</p>\n",
            "rawdescription": "\n\nManager of global style components\n",
            "sourceCode": "import {\n  ApplicationRef,\n  ComponentRef,\n  EnvironmentInjector,\n  Injectable,\n  Injector,\n  Type,\n  assertInInjectionContext,\n  createComponent,\n  inject,\n  runInInjectionContext,\n} from '@angular/core';\n\n/** Map of component types to instances */\ntype ComponentInstanceMap = Map<Type<unknown>, ComponentRef<unknown>>;\n\n/** Helper that turns an array of types into an array of component refs */\ntype ComponentRefsFromTypes<Types extends Type<unknown>[]> = {\n  [Index in keyof Types]: ComponentRef<InstanceType<Types[Index]>>;\n};\n\n/**\n * Register style components. Each component is registered at most once.\n * Must be called in an injection context or pass an injector in the options.\n *\n * @param components Component classes\n * @param options Additional options\n * @returns A component ref for each class\n */\nexport function registerStyleComponents<const Types extends Type<unknown>[]>(\n  components: Types,\n  options?: { injector?: Injector },\n): ComponentRefsFromTypes<Types> {\n  if (!options?.injector) {\n    assertInInjectionContext(registerStyleComponents);\n  }\n\n  const injector = options?.injector ?? inject(Injector);\n  const manager = inject(StyleComponentManagerService);\n  return manager.registerStyleComponents(components, { injector });\n}\n\n/**\n * Manager of global style components\n */\n@Injectable({ providedIn: 'root' })\nexport class StyleComponentManagerService {\n  /** Component instance registry */\n  private readonly registry = new Map<ApplicationRef, ComponentInstanceMap>();\n\n  /**\n   * Register style components. Each component is registered at most once.\n   *\n   * @param components Component classes\n   * @param options Options object\n   * @returns Component instance references\n   */\n  registerStyleComponents<const Types extends Type<unknown>[]>(\n    components: Types,\n    options: { injector: Injector },\n  ): ComponentRefsFromTypes<Types> {\n    return runInInjectionContext(options.injector, () => {\n      const instanceMap = this.getInstanceMap(inject(ApplicationRef));\n      const environmentInjector = inject(EnvironmentInjector);\n\n      return components.map((component) =>\n        this.getInstance(component, instanceMap, environmentInjector),\n      ) as ComponentRefsFromTypes<Types>;\n    });\n  }\n\n  /**\n   * Gets the component instance map for an application ref.\n   * The map is created if it doesn't already exist and\n   * is registered to cleanup when the application is destroyed.\n   *\n   * @param appRef Application reference\n   * @returns A component instance map\n   */\n  private getInstanceMap(appRef: ApplicationRef): ComponentInstanceMap {\n    let instanceMap = this.registry.get(appRef);\n    if (!instanceMap) {\n      instanceMap = new Map();\n      this.registry.set(appRef, instanceMap);\n      appRef.onDestroy(() => {\n        this.registry.delete(appRef);\n        instanceMap?.forEach((instance) => instance.destroy());\n      });\n    }\n\n    return instanceMap;\n  }\n\n  /**\n   * Gets or creates a component instance, adding it to the provided instance map.\n   *\n   * @param component Component class\n   * @param instanceMap Instance map to check\n   * @param environmentInjector The environment injector used when creating a new instance\n   * @returns A component ref to the existing or newly created instance\n   */\n  private getInstance<T>(\n    component: Type<T>,\n    instanceMap: ComponentInstanceMap,\n    environmentInjector: EnvironmentInjector,\n  ): ComponentRef<T> {\n    let instance = instanceMap.get(component) as ComponentRef<T>;\n    if (!instance) {\n      instance = createComponent(component, { environmentInjector });\n      instanceMap.set(component, instance);\n    }\n\n    return instance;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Add",
            "id": "class-Add-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc",
            "file": "state/src/link-registry/link-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Add or overwrite a single link</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "LinkId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entry",
                        "type": "LinkEntry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "rawdescription": "\n\nAdd or overwrite a single link\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 356,
                            "end": 358,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "LinkId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 350,
                            "end": 355,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>link identifier</p>\n"
                    },
                    {
                        "name": {
                            "pos": 387,
                            "end": 392,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "entry"
                        },
                        "type": "LinkEntry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 381,
                            "end": 386,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>link entry</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add a single link</p>\n",
            "rawdescription": "\nAdd a single link",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Add')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Add",
            "id": "class-Add-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1",
            "file": "state/src/resource-registry/resource-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Add or overwrite a single resource</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "ResourceId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entry",
                        "type": "ResourceEntry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "rawdescription": "\n\nAdd or overwrite a single resource\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 326,
                            "end": 328,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "ResourceId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 320,
                            "end": 325,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Resource identifier</p>\n"
                    },
                    {
                        "name": {
                            "pos": 361,
                            "end": 366,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "entry"
                        },
                        "type": "ResourceEntry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 355,
                            "end": 360,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Resource entry</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add a single resource</p>\n",
            "rawdescription": "\nAdd a single resource",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Add')"
            ],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Add-1"
        },
        {
            "name": "AddFromYaml",
            "id": "class-AddFromYaml-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc",
            "file": "state/src/link-registry/link-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Add links from unparsed yaml</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "yaml",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "rawdescription": "\n\nAdd links from unparsed yaml\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 892,
                            "end": 896,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "yaml"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 886,
                            "end": 891,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Unparsed yaml data</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add entries from yaml file</p>\n",
            "rawdescription": "\nAdd entries from yaml file",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Add from Yaml')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AddFromYaml",
            "id": "class-AddFromYaml-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1",
            "file": "state/src/resource-registry/resource-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Add resources from unparsed yaml</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "yaml",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "rawdescription": "\n\nAdd resources from unparsed yaml\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 908,
                            "end": 912,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "yaml"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 902,
                            "end": 907,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Unparsed yaml data</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add resources from raw yaml data</p>\n",
            "rawdescription": "\nAdd resources from raw yaml data",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Add from Yaml')"
            ],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AddFromYaml-1"
        },
        {
            "name": "AddMany",
            "id": "class-AddMany-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc",
            "file": "state/src/link-registry/link-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Add or overwrite multiple links</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "entries",
                        "type": "Partial<Record<LinkId, LinkEntry>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "rawdescription": "\n\nAdd or overwrite multiple links\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 633,
                            "end": 640,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "entries"
                        },
                        "type": "Partial<Record<LinkId, LinkEntry>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 627,
                            "end": 632,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>New links</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add multiple links at once</p>\n",
            "rawdescription": "\nAdd multiple links at once",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Add Many')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AddMany",
            "id": "class-AddMany-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1",
            "file": "state/src/resource-registry/resource-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Add or overwrite multiple resources</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "entries",
                        "type": "Partial<Record<ResourceId, ResourceEntry>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nAdd or overwrite multiple resources\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 627,
                            "end": 634,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "entries"
                        },
                        "type": "Partial<Record<ResourceId, ResourceEntry>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 621,
                            "end": 626,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>New resources</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add multiple resources at once</p>\n",
            "rawdescription": "\nAdd multiple resources at once",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Add Many')"
            ],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AddMany-1"
        },
        {
            "name": "BaseHrefSelectors",
            "id": "class-BaseHrefSelectors-9b69008bbdefa0766db51dd61bbff34c6aa4f8e026a542024154051d1f7b63dadda9ff193414e9fff6f95da40e12ec2e32bd0c72b0bc27f3d9fce6a12a597d18",
            "file": "state/src/base-href/base-href.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport { BaseHrefState } from './base-href.state';\n\n/** Selectors for BaseHrefState */\nexport class BaseHrefSelectors {\n  /**\n   * Returns base href value\n   * @param value href value\n   * @returns href value\n   */\n  @Selector([BaseHrefState])\n  static baseHref(value: string): string {\n    return value;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Selectors for BaseHrefState</p>\n",
            "rawdescription": "\nSelectors for BaseHrefState",
            "methods": [
                {
                    "name": "baseHref",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns base href value\n",
                    "description": "<p>Returns base href value</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['BaseHrefState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 207,
                                "end": 212,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 201,
                                "end": 206,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>href value</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 230,
                                "end": 237,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>href value</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Clear",
            "id": "class-Clear-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1",
            "file": "state/src/storage/storage.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor class for clear action object</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "StorageId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "rawdescription": "\n\nconstructor class for clear action object\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1146,
                            "end": 1148,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "StorageId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1140,
                            "end": 1145,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>type: StorageId - Storage identifier</li>\n</ul>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Clear the values stored in the specified StorageId</p>\n",
            "rawdescription": "\n\nClear the values stored in the specified StorageId\n",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Clear')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Delete",
            "id": "class-Delete-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1",
            "file": "state/src/storage/storage.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor class for Delete action object</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "StorageId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "rawdescription": "\n\nconstructor class for Delete action object\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 769,
                            "end": 771,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "StorageId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 763,
                            "end": 768,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>type: StorageId - Storage identifier</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 823,
                            "end": 826,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "key"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 817,
                            "end": 822,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>type: string - Key to be stored in the storage identifier</li>\n</ul>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p> Class Delete Action for delete method</p>\n",
            "rawdescription": "\n\n Class Delete Action for delete method\n",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Delete')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LinkRegistrySelectors",
            "id": "class-LinkRegistrySelectors-06d9e020c846f4521dcfb2095cd0e77e9f6aa4c734e6cd2f8081eef02dec593dc6ad455cf1a4d65585ecec0f48fb03db1829258cbc3db21e3c7603e10eb90644",
            "file": "state/src/link-registry/link-registry.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry<T extends LinkType | string>(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember<LinkEntry, 'type', T> | undefined {\n    const entry = state[id] as UnionMember<LinkEntry, 'type', T>;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Selectors for Link Registry</p>\n",
            "rawdescription": "\n\nSelectors for Link Registry\n",
            "methods": [
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "state",
                            "type": "LinkRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkRegistryQuery",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQueries for a link entry\n",
                    "description": "<p>Queries for a link entry</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['LinkRegistryState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 382,
                                "end": 387,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "state"
                            },
                            "type": "LinkRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 376,
                                "end": 381,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Current state</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 408,
                                "end": 415,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>link query function</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadFromYaml",
            "id": "class-LoadFromYaml-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc",
            "file": "state/src/link-registry/link-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Loads a remote yaml file and add links</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "rawdescription": "\n\nLoads a remote yaml file and add links\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1145,
                            "end": 1148,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "url"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1139,
                            "end": 1144,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Remote yaml file url</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add links from a remote yaml file</p>\n",
            "rawdescription": "\nAdd links from a remote yaml file",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Load from Yaml')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoadFromYaml",
            "id": "class-LoadFromYaml-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1",
            "file": "state/src/resource-registry/resource-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Loads a remote yaml file and add resources</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "rawdescription": "\n\nLoads a remote yaml file and add resources\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1169,
                            "end": 1172,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "url"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1163,
                            "end": 1168,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Remote yaml file url</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add resources from a remote yaml file</p>\n",
            "rawdescription": "\nAdd resources from a remote yaml file",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Load from Yaml')"
            ],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoadFromYaml-1"
        },
        {
            "name": "LoadMarkdown",
            "id": "class-LoadMarkdown-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c",
            "file": "state/src/resource-registry/resource-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Loads a remote markdown file and add a resource</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "ResourceId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "rawdescription": "\n\nLoads a remote markdown file and add a resource\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1456,
                            "end": 1458,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "ResourceId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1450,
                            "end": 1455,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Resource id</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1483,
                            "end": 1486,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "url"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1477,
                            "end": 1482,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Remote markdown file url</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Add a markdown resource with data loaded from a remote file</p>\n",
            "rawdescription": "\nAdd a markdown resource with data loaded from a remote file",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Load Markdown')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Navigate",
            "id": "class-Navigate-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc",
            "file": "state/src/link-registry/link-registry.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>navigate to a link</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "LinkId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "extras",
                        "type": "UrlCreationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 53,
                "rawdescription": "\n\nnavigate to a link\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1386,
                            "end": 1388,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "LinkId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1380,
                            "end": 1385,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>unqiue identifier of link</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1427,
                            "end": 1433,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "extras"
                        },
                        "type": "UrlCreationOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "pos": 1421,
                            "end": 1426,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Options when building the navigation url</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Navigate to an Internal or external url from Link id</p>\n",
            "rawdescription": "\nNavigate to an Internal or external url from Link id",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Navigate')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ResourceRegistrySelectors",
            "id": "class-ResourceRegistrySelectors-5e0841c52a4c3ae9fe5e04a8c194f6bd5dae08bd23852a126efce3a9a37c778b5cdfa7ed98d1180a9b34dee2d34e6b80bf7c7099dec3823e64762b0c86ff7c7d",
            "file": "state/src/resource-registry/resource-registry.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport {\n  BuiltinResourceType,\n  getEntry,\n  ResourceEntry,\n  ResourceId,\n  ResourceRegistryModel,\n  ResourceType,\n} from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\nimport { BaseHrefSelectors } from '../base-href';\n\n/** Query function returned by {@link ResourceRegistrySelectors.entry} */\nexport type EntryQuery = <T extends ResourceEntry>(id: ResourceId, type: ResourceType<T>) => T | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.anyEntry} */\nexport type AnyEntryQuery = (id: ResourceId) => ResourceEntry | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.field} */\nexport type FieldQuery = <T extends ResourceEntry, K extends keyof T>(\n  id: ResourceId,\n  type: ResourceType<T>,\n  field: K,\n  defaultValue?: T[K],\n) => T[K];\n\n/** Query function for resource data */\nexport type DataQuery<T> = (id: ResourceId) => T;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries an entry by id and type\n   * @param state Current state\n   * @returns Entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static entry(state: ResourceRegistryModel): EntryQuery {\n    return (id, type) => getEntry(state, id, type);\n  }\n\n  /**\n   * Queries an entry by id\n   * @param state Current state\n   * @returns Any entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyEntry(state: ResourceRegistryModel): AnyEntryQuery {\n    return (id) => getEntry(state, id);\n  }\n\n  /**\n   * Queries a field of an entry\n   * @param state Current state\n   * @returns A field query function\n   */\n  @Selector([ResourceRegistryState])\n  static field(state: ResourceRegistryModel): FieldQuery {\n    return (id, type, field, defaultValue?) => {\n      const entry = getEntry(state, id, type);\n      return entry?.[field] ?? (defaultValue as never);\n    };\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): DataQuery<string> {\n    return (id) => {\n      const entry = getEntry(state, id);\n      switch (entry?.type) {\n        case BuiltinResourceType.Markdown:\n          return entry.markdown;\n\n        case BuiltinResourceType.Text:\n          return entry.text;\n\n        default:\n          return '';\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static markdown(getField: FieldQuery): DataQuery<string> {\n    return (id) => getField(id, BuiltinResourceType.Markdown, 'markdown', '');\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static text(getField: FieldQuery): DataQuery<string> {\n    return (id) => getField(id, BuiltinResourceType.Text, 'text', '');\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistrySelectors.field, BaseHrefSelectors.baseHref])\n  static url(getField: FieldQuery, baseHref = ''): DataQuery<string> {\n    return (id) => {\n      const relUrl = getField(id, BuiltinResourceType.Url, 'url', '');\n      return relUrl !== '' ? baseHref + relUrl : '';\n    };\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Selectors for ResourceRegistry</p>\n",
            "rawdescription": "\nSelectors for ResourceRegistry",
            "methods": [
                {
                    "name": "anyEntry",
                    "args": [
                        {
                            "name": "state",
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AnyEntryQuery",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQueries an entry by id\n",
                    "description": "<p>Queries an entry by id</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['ResourceRegistryState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1366,
                                "end": 1371,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "state"
                            },
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1360,
                                "end": 1365,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Current state</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1392,
                                "end": 1399,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Any entry query function</p>\n"
                        }
                    ]
                },
                {
                    "name": "anyText",
                    "args": [
                        {
                            "name": "state",
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataQuery<string>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQuery for any text data\n",
                    "description": "<p>Query for any text data</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['ResourceRegistryState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1999,
                                "end": 2004,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "state"
                            },
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1993,
                                "end": 1998,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Current state</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2025,
                                "end": 2032,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Text data query function</p>\n"
                        }
                    ]
                },
                {
                    "name": "entry",
                    "args": [
                        {
                            "name": "state",
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EntryQuery",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQueries an entry by id and type\n",
                    "description": "<p>Queries an entry by id and type</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['ResourceRegistryState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1106,
                                "end": 1111,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "state"
                            },
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1100,
                                "end": 1105,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Current state</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1132,
                                "end": 1139,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Entry query function</p>\n"
                        }
                    ]
                },
                {
                    "name": "field",
                    "args": [
                        {
                            "name": "state",
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FieldQuery",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQueries a field of an entry\n",
                    "description": "<p>Queries a field of an entry</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['ResourceRegistryState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1629,
                                "end": 1634,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "state"
                            },
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1623,
                                "end": 1628,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Current state</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1655,
                                "end": 1662,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A field query function</p>\n"
                        }
                    ]
                },
                {
                    "name": "markdown",
                    "args": [
                        {
                            "name": "getField",
                            "type": "FieldQuery",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataQuery<string>",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQuery for markdown data\n",
                    "description": "<p>Query for markdown data</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['undefined']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "getField",
                            "type": "FieldQuery",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2537,
                                "end": 2544,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Markdown data query function</p>\n"
                        }
                    ]
                },
                {
                    "name": "text",
                    "args": [
                        {
                            "name": "getField",
                            "type": "FieldQuery",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataQuery<string>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQuery for text data\n",
                    "description": "<p>Query for text data</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['undefined']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "getField",
                            "type": "FieldQuery",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2841,
                                "end": 2848,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Text data query function</p>\n"
                        }
                    ]
                },
                {
                    "name": "url",
                    "args": [
                        {
                            "name": "getField",
                            "type": "FieldQuery",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "baseHref",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "DataQuery<string>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nQuery for an url\n",
                    "description": "<p>Query for an url</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['undefined', 'undefined']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "getField",
                            "type": "FieldQuery",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseHref",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3126,
                                "end": 3133,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Url query function</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScopedDestructorSubject",
            "id": "class-ScopedDestructorSubject-c4b53b823f2f6845a68f4b66881cc81070616d6b5124d0d203f80f1eeee060d84d1d05eab91b3a6e833ea4aef93cdf9d68ef0051d58b85ca5101c609dad76a05",
            "file": "injectors/src/lib/on-destroy/destructor-subject.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject<void> {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Creates a new subject and attaches cleanup to the destructor scope</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "scope",
                        "type": "DestructorScope",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "rawdescription": "\n\nCreates a new subject and attaches cleanup to the destructor scope\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 985,
                            "end": 990,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "scope"
                        },
                        "type": "DestructorScope",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 979,
                            "end": 984,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Associated scope</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>A subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes</p>\n",
            "rawdescription": "\n\nA subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes\n",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "ReplaySubject"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Set",
            "id": "class-Set-b7490c9fa59a88e26f373bca7409c2d1dc4a46ede355f7af9b6de6ccdde9839d867a750a056797f989147e0f64d68c2936d231d79f4019177be25f0a247831d9",
            "file": "state/src/base-href/base-href.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\n\n/** Base action factory */\nconst Action = ActionGroup('BaseHref');\n\n/** Sets the base href */\nexport class Set extends Action('Set') {\n  /**\n   * Sets the base href\n   * @param baseHref New href\n   */\n  constructor(readonly baseHref: string) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Sets the base href</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "baseHref",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "rawdescription": "\n\nSets the base href\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 228,
                            "end": 236,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "baseHref"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 222,
                            "end": 227,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>New href</p>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Sets the base href</p>\n",
            "rawdescription": "\nSets the base href",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Set')"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Set",
            "id": "class-Set-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1-1",
            "file": "state/src/storage/storage.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor class for Set action object</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "StorageId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\nconstructor class for Set action object\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 310,
                            "end": 312,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "StorageId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 304,
                            "end": 309,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>type: StorageId - Storage identifier</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 364,
                            "end": 367,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "key"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 358,
                            "end": 363,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>type: string - Key to be stored in the storage identifier</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 440,
                            "end": 445,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "value"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 434,
                            "end": 439,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>type: string - value to be stored with the key</li>\n</ul>\n"
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Class Set Action for set method</p>\n",
            "rawdescription": "\n\nClass Set Action for set method\n",
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "Action('Set')"
            ],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Set-1"
        },
        {
            "name": "SnapshotObserver",
            "id": "class-SnapshotObserver-e299315c33d01b7c5b9d7d2f8238209af3dd388427c9dfe124370b0bfb7c5852050237aaa3ca958ccb01cd0160e3e0a8d823189c91a4e0415996d17a10fef041",
            "file": "injectors/src/lib/select/snapshot-observer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ErrorObserver, NextObserver } from 'rxjs';\n\n/** Object indicating that no error has been emitted */\nconst NO_ERROR_SENTINEL_OBJ = {};\n\n/** Observer storing the latest value from a snapshot stream */\nexport class SnapshotObserver<T> implements NextObserver<T>, ErrorObserver<T> {\n  /** The latest value */\n  private value?: T = undefined;\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.value = undefined;\n    this.errorValue = err;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Observer storing the latest value from a snapshot stream</p>\n",
            "rawdescription": "\nObserver storing the latest value from a snapshot stream",
            "methods": [
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "err",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles error emits\n",
                    "description": "<p>Handles error emits</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 895,
                                "end": 898,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "err"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 889,
                                "end": 894,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The error value</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the latest value or throw on errors\n",
                    "description": "<p>Gets the latest value or throw on errors</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 521,
                                "end": 528,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The latest value</p>\n"
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles value emits\n",
                    "description": "<p>Handles value emits</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 772,
                                "end": 777,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "value"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 766,
                                "end": 771,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "NextObserver",
                "ErrorObserver"
            ]
        },
        {
            "name": "StorageSelectors",
            "id": "class-StorageSelectors-6e576be4f221d6636d6b7a149b402c8e640ddebf2ae1dba42a6be2fc1435b938679689e904f41ca64b282b1cef4d274a45fb4de9dcd315116751057089d76e85",
            "file": "state/src/storage/storage.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Selector } from '@ngxs/store';\nimport { StorageId } from './storage.model';\nimport { StorageState } from './storage.state';\n/**\n * Storage selectors - class for retrieving storage types\n */\nexport class StorageSelectors {\n  /**\n   * returns the value stored in the key,value pair in the storageId given\n   * @returns (id,key) of the given storage id else undefined\n   */\n  @Selector([StorageState])\n  static get(_state: unknown): (id: StorageId, key: string) => string | undefined {\n    return (id, key) => StorageState.getStorage(id).getItem(key) ?? undefined;\n  }\n  /**\n   * returns the number of items in the given storage id stored\n   * @returns length of the given StorageId supplied\n   */\n  @Selector([StorageState])\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore Allow selector name\n  static length(_state: unknown): (id: StorageId) => number | undefined {\n    return (id) => StorageState.getStorage(id).length;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Storage selectors - class for retrieving storage types</p>\n",
            "rawdescription": "\n\nStorage selectors - class for retrieving storage types\n",
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "_state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns the value stored in the key,value pair in the storageId given\n",
                    "description": "<p>returns the value stored in the key,value pair in the storageId given</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['StorageState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "_state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 318,
                                "end": 325,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>(id,key) of the given storage id else undefined</p>\n"
                        }
                    ]
                },
                {
                    "name": "length",
                    "args": [
                        {
                            "name": "_state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | undefined",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns the number of items in the given storage id stored\n",
                    "description": "<p>returns the number of items in the given storage id stored</p>\n",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": "['StorageState']"
                        }
                    ],
                    "modifierKind": [
                        170,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "_state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 651,
                                "end": 658,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>length of the given StorageId supplied</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "HoverDirective",
            "id": "directive-HoverDirective-49a4c26570f0d04f23fe4fbc0dc828e41ceb60105a94f0556e120079f4aeedd891c1d1b2ef505b2650ef16efedefd686eee12c9218a6144616e86020fe84d016",
            "file": "src/lib/hover/hover.directive.ts",
            "type": "directive",
            "description": "<p>Hover overlay directive to be used across the application</p>\n",
            "rawdescription": "\nHover overlay directive to be used across the application",
            "sourceCode": "import { ConnectionPositionPair, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext<T = unknown> {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective<T = unknown> {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef<HoverContext<T>>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /** Overlay service */\n  private readonly overlay = inject(Overlay);\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  private overlayRef?: OverlayRef;\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext<T>;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal<HoverContext<T>>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { portal } = this;\n    if (portal) {\n      this.overlayRef = this.createOverlay();\n      this.overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    overlayRef?.dispose();\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to create overlay and set its position */\n  private createOverlay(): OverlayRef {\n    return this.overlay.create({\n      positionStrategy: this.overlay\n        .position()\n        .flexibleConnectedTo(this.el)\n        .withPositions([\n          new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n          new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n          new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n        ])\n        .withPush(true),\n    });\n  }\n}\n",
            "selector": "[hraHover]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "hraHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSetter for the content to be displayed in the overlay",
                    "description": "<p>Setter for the content to be displayed in the overlay</p>\n",
                    "line": 19,
                    "type": "TemplateRef<HoverContext<T>>",
                    "decorators": []
                },
                {
                    "name": "hraHoverData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSetter for the context that is to be displayed in the portal attached to the overlay",
                    "description": "<p>Setter for the context that is to be displayed in the portal attached to the overlay</p>\n",
                    "line": 26,
                    "type": "T",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseout",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFunction to handle the mouse out event to detach the portal",
                    "description": "<p>Function to handle the mouse out event to detach the portal</p>\n",
                    "line": 64
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFunction to handle the mouse over event to attach the portal and display the hover content",
                    "description": "<p>Function to handle the mouse over event to attach the portal and display the hover content</p>\n",
                    "line": 54
                }
            ],
            "propertiesClass": [
                {
                    "name": "portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplatePortal<HoverContext<T>>",
                    "optional": true,
                    "description": "<p>Portal that is created to display the overlay</p>\n",
                    "line": 50,
                    "rawdescription": "\nPortal that is created to display the overlay"
                }
            ],
            "methodsClass": [
                {
                    "name": "endHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFunction to handle the mouse out event to detach the portal",
                    "description": "<p>Function to handle the mouse out event to detach the portal</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseout'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "startHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFunction to handle the mouse over event to attach the portal and display the hover content",
                    "description": "<p>Function to handle the mouse over event to attach the portal and display the hover content</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "content",
                                "type": "TemplateRef<HoverContext<T>>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "rawdescription": "\nSetter for the content to be displayed in the overlay",
                        "description": "<p>Setter for the content to be displayed in the overlay</p>\n",
                        "jsdoctags": [
                            {
                                "name": "content",
                                "type": "TemplateRef<HoverContext<T>>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "rawdescription": "\nSetter for the context that is to be displayed in the portal attached to the overlay",
                        "description": "<p>Setter for the context that is to be displayed in the portal attached to the overlay</p>\n",
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "LinkDirective",
            "id": "directive-LinkDirective-6d1ee2a34fa010cef8dd551f887757960f4da61bcde8437d902bc420600e1b7bddc012665d96c36c28d021e5b99891304cc1eb3e3ff42bfc939ec9b1ac2473ad",
            "file": "src/lib/link/link.directive.ts",
            "type": "directive",
            "description": "<p>Link Directive for routing</p>\n",
            "rawdescription": "\nLink Directive for routing",
            "sourceCode": "import { Directive, DoCheck, ElementRef, HostBinding, HostListener, inject, Injector, Input } from '@angular/core';\nimport { ActivatedRoute, Params, QueryParamsHandling, UrlCreationOptions } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { EMPTY_LINK, LinkEntry, LinkRegistryActions, LinkRegistrySelectors, LinkType } from '@hra-ui/cdk/state';\nimport { createExternalUrl, createInternalUrl } from '@hra-ui/utils';\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements DoCheck {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK;\n\n  /** Query string parameters */\n  @Input() queryParams?: Params;\n\n  /** How to handle existing query params */\n  @Input() queryParamsHandling?: QueryParamsHandling;\n\n  /** Url fragment */\n  @Input() fragment?: string;\n\n  /** Whether to preserve the existing fragment */\n  @Input() preserveFragment?: boolean;\n\n  /** Nagivate relative to a route. Only affects internal links. */\n  @Input() relativeTo?: ActivatedRoute;\n\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Reference to this component's injector */\n  private readonly injector = inject(Injector);\n  /** Element tag on which this directive is mounted */\n  private readonly tagName = inject<ElementRef<Element>>(ElementRef).nativeElement.tagName.toLowerCase();\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /** Whether the host element is an anchor */\n  private get isAnchorElement(): boolean {\n    return ['a', 'area'].includes(this.tagName);\n  }\n\n  /** Whether the host element deals with resource urls */\n  private get isResourceUrl(): boolean {\n    return ['base', 'link'].includes(this.tagName);\n  }\n\n  /** Collects query params and fragment options into a single object */\n  private get extras(): UrlCreationOptions {\n    const { link } = this;\n    return this.mergeExtras(link?.type === LinkType.Internal ? link.extras : undefined, this);\n  }\n\n  /** Updates the current link/url based on the inputs */\n  ngDoCheck(): void {\n    const link = this.queryLink(this.linkId);\n    if (this.link !== link) {\n      this.updateLink(link);\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External || button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId, this.extras);\n    return !isAnchorElement;\n  }\n\n  /** Updates the link entry and bound attributes */\n  private updateLink(link?: LinkEntry): void {\n    this.link = link;\n    ({ href: this.href, rel: this.rel, target: this.target } = this.getLinkAttributes(link));\n  }\n\n  /**\n   * Gets the new values for different attributes bound to the host element\n   * @param link Current link entry\n   * @returns New attributes values to bind on the host element\n   */\n  private getLinkAttributes(link?: LinkEntry): { href?: string; rel?: string; target?: string } {\n    const { injector, extras, isResourceUrl } = this;\n    switch (link?.type) {\n      case LinkType.Internal:\n        return { href: createInternalUrl(injector, link.commands, extras, isResourceUrl) };\n\n      case LinkType.External:\n        return { ...link, href: createExternalUrl(link.url, extras) };\n\n      default:\n        return {};\n    }\n  }\n\n  /**\n   * Merges two UrlCreationOptions.\n   * Undefined values in the second set does not override values from the first set.\n   * @param opt1 First set of options\n   * @param opt2 Second set of options\n   * @returns Merged options\n   */\n  private mergeExtras(opt1: UrlCreationOptions | undefined, opt2: UrlCreationOptions): UrlCreationOptions {\n    const result = { ...opt1 };\n    const mergeKey = <K extends keyof UrlCreationOptions>(key: K) => {\n      if (opt2[key] !== undefined) {\n        result[key] = opt2[key];\n      }\n    };\n\n    mergeKey('queryParams');\n    mergeKey('queryParamsHandling');\n    mergeKey('fragment');\n    mergeKey('preserveFragment');\n    mergeKey('relativeTo');\n    return result;\n  }\n}\n",
            "selector": "[hraLink]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "fragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUrl fragment",
                    "description": "<p>Url fragment</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hraLink",
                    "defaultValue": "EMPTY_LINK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nlinkId with empty string as default value",
                    "description": "<p>linkId with empty string as default value</p>\n",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "preserveFragment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to preserve the existing fragment",
                    "description": "<p>Whether to preserve the existing fragment</p>\n",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nQuery string parameters",
                    "description": "<p>Query string parameters</p>\n",
                    "line": 17,
                    "type": "Params",
                    "decorators": []
                },
                {
                    "name": "queryParamsHandling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow to handle existing query params",
                    "description": "<p>How to handle existing query params</p>\n",
                    "line": 20,
                    "type": "QueryParamsHandling",
                    "decorators": []
                },
                {
                    "name": "relativeTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nNagivate relative to a route. Only affects internal links.",
                    "description": "<p>Nagivate relative to a route. Only affects internal links.</p>\n",
                    "line": 29,
                    "type": "ActivatedRoute",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nhref of the element",
                    "description": "<p>href of the element</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.rel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nrel attribute of the element",
                    "description": "<p>rel attribute of the element</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "attr.target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\ntarget attribute of the element",
                    "description": "<p>target attribute of the element</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTriggers when a click action is performed on the element\n",
                    "description": "<p>Triggers when a click action is performed on the element</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 2741,
                            "end": 2773,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 348,
                            "tagName": {
                                "pos": 2742,
                                "end": 2747,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>type of event</p>\n",
                            "name": {
                                "pos": 2748,
                                "end": 2753,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 2773,
                            "end": 2823,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 349,
                            "tagName": {
                                "pos": 2774,
                                "end": 2781,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true/false based on entry and element</p>\n"
                        }
                    ],
                    "line": 80
                }
            ],
            "propertiesClass": [
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>href of the element</p>\n",
                    "line": 32,
                    "rawdescription": "\nhref of the element",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.href'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "rel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>rel attribute of the element</p>\n",
                    "line": 34,
                    "rawdescription": "\nrel attribute of the element",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.rel'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>target attribute of the element</p>\n",
                    "line": 36,
                    "rawdescription": "\ntarget attribute of the element",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.target'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTriggers when a click action is performed on the element\n",
                    "description": "<p>Triggers when a click action is performed on the element</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2748,
                                "end": 2753,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2742,
                                "end": 2747,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>type of event</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2774,
                                "end": 2781,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true/false based on entry and element</p>\n"
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "DoCheck"
            ]
        }
    ],
    "components": [
        {
            "name": "DestroyHostComponent",
            "id": "component-DestroyHostComponent-673df9acfa9566a60f8f4a880379e6b99e54ae5d5ad511c7cd7a96cae5e2bdc436037556a9ad3ca44bdc0a5f74c3a300031212bae7e0df53e349d8e34d30dd92",
            "file": "injectors/src/lib/on-destroy/destroy-host.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-destroy-host",
            "styleUrls": [],
            "styles": [
                ":host { display: none }"
            ],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "defaultValue": "inject(ElementRef).nativeElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Element",
                    "optional": false,
                    "description": "<p>Reference to own dom element</p>\n",
                    "line": 14,
                    "rawdescription": "\nReference to own dom element",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "container",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DestroyHostComponent>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index '0') in the container.\n",
                    "description": "<p>Creates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index &#39;0&#39;) in the container.</p>\n",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 661,
                                "end": 670,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "container"
                            },
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 655,
                                "end": 660,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>View in which to create the element</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 713,
                                "end": 720,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The ComponentRef of the newly inserted element</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "<p>Component used when attaching destroy lifecycle observables to a component/directive/pipe</p>\n",
            "rawdescription": "\n\nComponent used when attaching destroy lifecycle observables to a component/directive/pipe\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ComponentRef, ElementRef, inject, ViewContainerRef } from '@angular/core';\n\n/**\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\n */\n@Component({\n  selector: 'hra-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: none }'],\n})\nexport class DestroyHostComponent implements AfterViewInit {\n  /** Reference to own dom element */\n  readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**\n   * Creates a new DestroyHostComponent inside the provided container.\n   * The element is inserted as the first child (index '0') in the container.\n   * @param container View in which to create the element\n   * @returns The ComponentRef of the newly inserted element\n   */\n  static create(container: ViewContainerRef): ComponentRef<DestroyHostComponent> {\n    return container.createComponent(DestroyHostComponent, { index: 0 });\n  }\n\n  /** Disconnects the component from the dom tree */\n  ngAfterViewInit(): void {\n    this.el.remove();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { display: none }\n",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "CdkStateModule",
            "id": "module-CdkStateModule-049d74c98fc5f8a8d1a77e745e50e1490654ff08103771fef674e28702b1c7f1ea3d4013804386caa70e2542e498754db1dafa90a3298b0069ec7f1ebe34fbb2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "state/src/state.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\nimport { BaseHrefState } from './base-href';\nimport { LinkRegistryState } from './link-registry';\nimport { ResourceRegistryState } from './resource-registry';\nimport { StorageState } from './storage';\n\n@NgModule({\n  imports: [NgxsModule.forFeature([BaseHrefState, LinkRegistryState, ResourceRegistryState, StorageState])],\n})\nexport class CdkStateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Action",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/base-href/base-href.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ActionGroup('BaseHref')",
                "rawdescription": "Base action factory",
                "description": "<p>Base action factory</p>\n"
            },
            {
                "name": "Action",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/link-registry/link-registry.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ActionGroup('LinkRegistry')",
                "rawdescription": "Base action factory",
                "description": "<p>Base action factory</p>\n"
            },
            {
                "name": "Action",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ActionGroup('ResourceRegistry')",
                "rawdescription": "Base action factory",
                "description": "<p>Base action factory</p>\n"
            },
            {
                "name": "Action",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/storage/storage.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ActionGroup('Storage')",
                "rawdescription": "Base action factory",
                "description": "<p>Base action factory</p>\n"
            },
            {
                "name": "actionTypeRegistry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/actions/action-type-registry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Set<string>()",
                "rawdescription": "Registry of action types",
                "description": "<p>Registry of action types</p>\n"
            },
            {
                "name": "BUILTIN_ENTRY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.discriminatedUnion('type', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])",
                "rawdescription": "Union of all builtin entries",
                "description": "<p>Union of all builtin entries</p>\n"
            },
            {
                "name": "BUILTIN_TYPE_VALUES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.values(RawBuiltinResourceType)",
                "rawdescription": "Builtin type strings as an array",
                "description": "<p>Builtin type strings as an array</p>\n"
            },
            {
                "name": "BuiltinResourceType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RawBuiltinResourceType as BuiltinTypes",
                "rawdescription": "Builtin resource types",
                "description": "<p>Builtin resource types</p>\n"
            },
            {
                "name": "currentScriptEl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "app-href/src/lib/current-script.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "document.currentScript",
                "rawdescription": "Currently executing script's element.\nShould be reliable in most cases unless the script is executed as a module\nor in an older browser, IE etc. (which we don't support anyway)",
                "description": "<p>Currently executing script&#39;s element.\nShould be reliable in most cases unless the script is executed as a module\nor in an older browser, IE etc. (which we don&#39;t support anyway)</p>\n"
            },
            {
                "name": "currentScriptPath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "app-href/src/lib/current-script.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string | undefined",
                "rawdescription": "Cached value of found script path",
                "description": "<p>Cached value of found script path</p>\n"
            },
            {
                "name": "CUSTOM_ENTRY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()",
                "rawdescription": "Custom entry",
                "description": "<p>Custom entry</p>\n"
            },
            {
                "name": "CUSTOM_ENTRY_TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z\n  .string()\n  .refine((val) => !isBuiltinType(val), 'Invalid builtin resource format')\n  .transform<CustomResourceType<string>>(createCustomType)",
                "rawdescription": "Custom entry type validator with transformation",
                "description": "<p>Custom entry type validator with transformation</p>\n"
            },
            {
                "name": "CUSTOM_TYPE_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'custom:'",
                "rawdescription": "Prefix of all custom types",
                "description": "<p>Prefix of all custom types</p>\n"
            },
            {
                "name": "DEFAULT_FONT_ICONS_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icons/src/lib/providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Required<FontIconsConfig>",
                "defaultValue": "{\n  defaultClasses: [],\n}",
                "rawdescription": "Default values for font icon configuration",
                "description": "<p>Default values for font icon configuration</p>\n"
            },
            {
                "name": "DEFAULT_SVG_ICONS_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icons/src/lib/providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Required<SvgIconsConfig>",
                "defaultValue": "{\n  directory: 'assets/icons',\n}",
                "rawdescription": "Default values for svg icon configuration",
                "description": "<p>Default values for svg icon configuration</p>\n"
            },
            {
                "name": "DESTRUCTOR_CACHE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new WeakMap<object, Observable<void>>()",
                "rawdescription": "Cached destructor observables",
                "description": "<p>Cached destructor observables</p>\n"
            },
            {
                "name": "EMPTY_LINK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createLinkId('@@__EMPTY__')",
                "rawdescription": "Empty link id",
                "description": "<p>Empty link id</p>\n"
            },
            {
                "name": "EXTERNAL_LINK_SCHEMA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })",
                "rawdescription": "Type for external link entry",
                "description": "<p>Type for external link entry</p>\n"
            },
            {
                "name": "FONT_ICONS_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icons/src/lib/providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Required<FontIconsConfig>>('FONT_ICONS_CONFIG')",
                "rawdescription": "Injection token for font icon configuration",
                "description": "<p>Injection token for font icon configuration</p>\n"
            },
            {
                "name": "INITIAL_APP_HREF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "app-href/src/lib/app-href.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('InitialAppHref', {\n  providedIn: 'root',\n  factory: () => getCurrentScriptBasePath(),\n})",
                "rawdescription": "Initial value for appHref. Defaults to the current script's base path",
                "description": "<p>Initial value for appHref. Defaults to the current script&#39;s base path</p>\n"
            },
            {
                "name": "INTERNAL_LINK_SCHEMA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })",
                "rawdescription": "Type for internal link entry",
                "description": "<p>Type for internal link entry</p>\n"
            },
            {
                "name": "LINK_REGISTRY_SCHEMA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)",
                "rawdescription": "Schema for link registry",
                "description": "<p>Schema for link registry</p>\n"
            },
            {
                "name": "MARKDOWN_ENTRY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal(RawBuiltinResourceType.Markdown),\n  markdown: z.string(),\n})",
                "rawdescription": "Markdown data",
                "description": "<p>Markdown data</p>\n"
            },
            {
                "name": "NO_ERROR_SENTINEL_OBJ",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "injectors/src/lib/select/snapshot-observer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}",
                "rawdescription": "Object indicating that no error has been emitted",
                "description": "<p>Object indicating that no error has been emitted</p>\n"
            },
            {
                "name": "PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "platform-location/src/lib/nothrow-platform-location.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PatchablePlatformLocationHistoryMethod[]",
                "defaultValue": "[\n  'replaceState',\n  'pushState',\n  'forward',\n  'back',\n  'historyGo',\n]",
                "rawdescription": "Array of all patchable platform location history methods",
                "description": "<p>Array of all patchable platform location history methods</p>\n"
            },
            {
                "name": "RESOURCE_ENTRY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])",
                "rawdescription": "Builtin or custom entries",
                "description": "<p>Builtin or custom entries</p>\n"
            },
            {
                "name": "RESOURCE_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z\n  .string()\n  .transform((id) => `ResourceId:'${id}'`)\n  .brand('ResourceId')",
                "rawdescription": "Resource identifier validator with transformation",
                "description": "<p>Resource identifier validator with transformation</p>\n"
            },
            {
                "name": "RESOURCE_REGISTRY_SCHEMA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.record(RESOURCE_ID, RESOURCE_ENTRY)",
                "rawdescription": "State schema",
                "description": "<p>State schema</p>\n"
            },
            {
                "name": "SVG_ICONS_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "icons/src/lib/providers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Required<SvgIconsConfig>>('SVG_ICONS_CONFIG')",
                "rawdescription": "Injection token for svg icon configuration",
                "description": "<p>Injection token for svg icon configuration</p>\n"
            },
            {
                "name": "TEXT_ENTRY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal(RawBuiltinResourceType.Text),\n  text: z.string(),\n})",
                "rawdescription": "Text data",
                "description": "<p>Text data</p>\n"
            },
            {
                "name": "URL_ENTRY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "z.object({\n  type: z.literal(RawBuiltinResourceType.Url),\n  url: z.string(),\n})",
                "rawdescription": "External url",
                "description": "<p>External url</p>\n"
            }
        ],
        "functions": [
            {
                "name": "Action",
                "file": "state/src/actions/actions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a new base action with a specified type</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionConstructor",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 685,
                            "end": 689,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 679,
                            "end": 684,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Action type</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 706,
                            "end": 713,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A base action class</p>\n"
                    }
                ]
            },
            {
                "name": "ActionGroup",
                "file": "state/src/actions/actions.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates an action factory that adds a common group string to each action type</p>\n",
                "args": [
                    {
                        "name": "group",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionConstructor",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 421,
                            "end": 426,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "group"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 415,
                            "end": 420,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Common action type group</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 456,
                            "end": 463,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>An action factory</p>\n"
                    }
                ]
            },
            {
                "name": "assertUniqueActionType",
                "file": "state/src/actions/action-type-registry.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Asserts that an action type is unique</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 141,
                            "end": 145,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 135,
                            "end": 140,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Action type string</p>\n"
                    }
                ]
            },
            {
                "name": "createActionFactory",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates an action factory function</p>\n",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boundArgs",
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "A",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 500,
                            "end": 504,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 494,
                            "end": 499,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Action constructor</p>\n"
                    },
                    {
                        "name": {
                            "pos": 534,
                            "end": 543,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "boundArgs"
                        },
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 528,
                            "end": 533,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Initial bound arguments</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 572,
                            "end": 579,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A factory function creating a new action on each call</p>\n"
                    }
                ]
            },
            {
                "name": "createCustomType",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a custom resource type</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ResourceType<CustomResourceEntry<T, Partial<Record<string, >>>>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4708,
                            "end": 4712,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4702,
                            "end": 4707,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Raw resource type</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 4735,
                            "end": 4742,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A new resource type</p>\n"
                    }
                ]
            },
            {
                "name": "createCustomType",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a custom resource type with a payload. The payload should be\nspecified using the {@link payload} function</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "payload",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ResourceType<CustomResourceEntry<T, Props>>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 5138,
                            "end": 5142,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5132,
                            "end": 5137,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Raw resource type</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5171,
                            "end": 5178,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "payload"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5165,
                            "end": 5170,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Payload type</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 5032,
                            "end": 5039,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "example"
                        },
                        "comment": "<p>const MyResourceType = createCustomType(&#39;my-type&#39;, payload&lt;{ value: number }&gt;());</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 5196,
                            "end": 5203,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A new resource type</p>\n"
                    }
                ]
            },
            {
                "name": "createCustomType",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Implementation of createCustomType overloads</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createLinkId",
                "file": "state/src/link-registry/link-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>function to createa unique link ids</p>\n",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "LinkId",
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createResourceId",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a new resource identifier</p>\n",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 4258,
                            "end": 4260,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4252,
                            "end": 4257,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Raw identifier</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 4280,
                            "end": 4287,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A resource id</p>\n"
                    }
                ]
            },
            {
                "name": "createSvgIconResolver",
                "file": "icons/src/lib/resolvers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates svg icon resolver with the specified configuration.\nThe function resolves all svg icons to <code>directory/[namespace/]name.svg</code></p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "SvgIconResolverConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "IconResolver",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 595,
                            "end": 601,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "config"
                        },
                        "type": "SvgIconResolverConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 589,
                            "end": 594,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Configuration object</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 627,
                            "end": 634,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A resolver function</p>\n"
                    }
                ]
            },
            {
                "name": "dispatch",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Wraps an action constructor with automatic dispatching on each call to the function.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boundArgs",
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "A",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1721,
                            "end": 1725,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1715,
                            "end": 1720,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Action constructor to create new instances</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1779,
                            "end": 1788,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "boundArgs"
                        },
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "pos": 1773,
                            "end": 1778,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Bound arguments to the action constructor</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1835,
                            "end": 1842,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A function that dispatches an action on the store each time it is called</p>\n"
                    }
                ]
            },
            {
                "name": "dispatch$",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Wraps an action constructor with automatic dispatching on each call to the function.\nEach call to the wrapper returns an observable that emits the action instance once the\ndispatch action has completed.</p>\n",
                "args": [
                    {
                        "name": "type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boundArgs",
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "Observable<A>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2426,
                            "end": 2430,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2420,
                            "end": 2425,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Action constructor to create new instances</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2484,
                            "end": 2493,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "boundArgs"
                        },
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "pos": 2478,
                            "end": 2483,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Bound arguments to the action constructor</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 2540,
                            "end": 2547,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A function that dispatches an action on the store each time it is called</p>\n"
                    }
                ]
            },
            {
                "name": "dispatchAction",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a callback that can dispatch any action or array of actions.\nEach call returns passed actions unchanged</p>\n",
                "args": [],
                "returnType": "A",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 3054,
                            "end": 3061,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A function that dispatches actions on the store each time it is called</p>\n"
                    }
                ]
            },
            {
                "name": "dispatchAction$",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates a callback that can dispatch any action or array of actions.\nEach call returns an observable that emits the passed actions when the dispatch has finished</p>\n",
                "args": [],
                "returnType": "Observable<A>",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 3418,
                            "end": 3425,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A function that dispatches actions on the store each time it is called</p>\n"
                    }
                ]
            },
            {
                "name": "dispatchImpl",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Common dispatch functionality used to implement all dispatch functions</p>\n",
                "args": [
                    {
                        "name": "actionFactory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resultHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "R",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 976,
                            "end": 989,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "actionFactory"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 970,
                            "end": 975,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Creates an action or array of actions from the user provided arguments</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1071,
                            "end": 1084,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "resultHandler"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1065,
                            "end": 1070,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Selects the output value from the action and the dispatch observable</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1158,
                            "end": 1165,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A new dispatch function taking user arguments, dispatches actions, and returns a value</p>\n"
                    }
                ]
            },
            {
                "name": "findCurrentScriptPath",
                "file": "app-href/src/lib/current-script.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Searches for the current script&#39;s path in a couple of different ways.</p>\n",
                "args": [],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 898,
                            "end": 905,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The current script&#39;s path if found, otherwise the empty string</p>\n"
                    }
                ]
            },
            {
                "name": "findCurrentScriptPathFromStackTrace",
                "file": "app-href/src/lib/current-script.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Try to find the current script&#39;s path using a stack trace.\nAdapted from ://stackoverflow.com/a/22165218{@link https}</p>\n",
                "args": [],
                "returnType": "string | undefined",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 1297,
                            "end": 1304,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A path if found</p>\n"
                    }
                ]
            },
            {
                "name": "findDestructorScope",
                "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Finds the nearest destructor scope object in the current injection context</p>\n",
                "args": [],
                "returnType": "DestructorScope",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 1267,
                            "end": 1274,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The scope on which cleanup can be attached</p>\n"
                    }
                ]
            },
            {
                "name": "findStableKeyObject",
                "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Finds a stable object in the current injection context to be\nused as a key in the destructor cache</p>\n",
                "args": [],
                "returnType": "object",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 912,
                            "end": 919,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>An object</p>\n"
                    }
                ]
            },
            {
                "name": "firstDefinedValue",
                "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get the first defined value returned by a generator</p>\n",
                "args": [
                    {
                        "name": "genFn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 441,
                            "end": 446,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "genFn"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 435,
                            "end": 440,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Generator function taking no arguments</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 490,
                            "end": 497,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The first non-null value</p>\n"
                    }
                ]
            },
            {
                "name": "getCurrentScriptBasePath",
                "file": "app-href/src/lib/current-script.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get the current script&#39;s base path.</p>\n",
                "args": [],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 590,
                            "end": 597,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The current script&#39;s base path</p>\n"
                    }
                ]
            },
            {
                "name": "getCurrentScriptPath",
                "file": "app-href/src/lib/current-script.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get the current script&#39;s path.</p>\n",
                "args": [],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 373,
                            "end": 380,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The current script&#39;s path</p>\n"
                    }
                ]
            },
            {
                "name": "getEntry",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Internal helper function for getting an entry from the state</p>\n",
                "args": [
                    {
                        "name": "state",
                        "type": "ResourceRegistryModel",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "ResourceId",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "ResourceType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "T | undefined",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 5670,
                            "end": 5675,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "state"
                        },
                        "type": "ResourceRegistryModel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5664,
                            "end": 5669,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Current state snapshot</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5709,
                            "end": 5711,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "id"
                        },
                        "type": "ResourceId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 5703,
                            "end": 5708,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Resource id</p>\n"
                    },
                    {
                        "name": {
                            "pos": 5734,
                            "end": 5738,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "ResourceType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 5728,
                            "end": 5733,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Optional entry type</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 5763,
                            "end": 5770,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The entry object it exists and has the correct type, otherwise undefined</p>\n"
                    }
                ]
            },
            {
                "name": "identity",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Identity function returning the first argument passed</p>\n",
                "args": [
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "injectDestroy$",
                "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\nit is injected into. It can be used to control the lifetime of other observables using\nthe <code>takeUntil</code> pipe, and to build other complex injection functions.</p>\n<p>Caveats:</p>\n<ul>\n<li>There are NO guarantees about whether the returned observable will emit and complete\nbefore or after the regular ngOnDestroy lifecycle hook</li>\n<li>For root and module level services the observable may never complete unless\nthe containing module is explicitly destroyed, so don&#39;t rely on it for important operations</li>\n<li>Components, directives, pipe, and services that manipulate the <code>ViewContainerRef</code> MUST\ntake care to maintain the view controlling the lifecycle of the observable. Failure\nto do so may result in early emit and completion of the returned observable</li>\n</ul>\n<p>Based on comment on <a href=\"https://github.com/angular/angular/issues/10185\">https://github.com/angular/angular/issues/10185</a>\nMostly <a href=\"https://github.com/angular/angular/issues/10185#issuecomment-1165545544\">https://github.com/angular/angular/issues/10185#issuecomment-1165545544</a> and\n<a href=\"https://github.com/angular/angular/issues/10185#issuecomment-1199063426\">https://github.com/angular/angular/issues/10185#issuecomment-1199063426</a></p>\n",
                "args": [],
                "returnType": "Observable<void>",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 2694,
                            "end": 2701,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>An observable that emits and completes when the component/directive/etc. is destroyed</p>\n"
                    }
                ]
            },
            {
                "name": "isBuiltinType",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Determines whether a type string has builtin support</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3572,
                            "end": 3576,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3566,
                            "end": 3571,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>The type string</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 3597,
                            "end": 3604,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>True if type is one of the builtin types, otherwise false</p>\n"
                    }
                ]
            },
            {
                "name": "isCustomType",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Determines whether a type is a custom resource type</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ResourceType<z.infer<>>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3881,
                            "end": 3885,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3875,
                            "end": 3880,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>The type string</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 3906,
                            "end": 3913,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>True if type is a custom type, otherwise false</p>\n"
                    }
                ]
            },
            {
                "name": "isDestructorScopeLike",
                "file": "injectors/src/lib/on-destroy/destructor-subject.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Determines whether an object is destructor scope like</p>\n",
                "args": [
                    {
                        "name": "obj",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DestructorScope",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 328,
                            "end": 331,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "obj"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 322,
                            "end": 327,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Value to test</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 350,
                            "end": 357,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>true if the object seems to be a destructor scope, otherwise false</p>\n"
                    }
                ]
            },
            {
                "name": "joinPath",
                "file": "icons/src/lib/resolvers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Joins path segments into a single string. Removes empty segments and double &#39;/&#39; sequences.</p>\n",
                "args": [
                    {
                        "name": "segments",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1103,
                            "end": 1111,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "segments"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "pos": 1097,
                            "end": 1102,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Segments, some of which may be the empty string</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1164,
                            "end": 1171,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The joined path</p>\n"
                    }
                ]
            },
            {
                "name": "markForCheck",
                "file": "injectors/src/lib/select/select.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Marks a view for change detection whenever a new value is emitted</p>\n",
                "args": [
                    {
                        "name": "options",
                        "type": "SelectOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "MonoTypeOperatorFunction<T>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 689,
                            "end": 696,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "options"
                        },
                        "type": "SelectOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 683,
                            "end": 688,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Options to explicitly disable marking</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 739,
                            "end": 746,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A rxjs operator</p>\n"
                    }
                ]
            },
            {
                "name": "patchPlatformLocationHistoryMethod",
                "file": "platform-location/src/lib/nothrow-platform-location.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Patches a platform location method to catch and ignore <code>SecurityError</code> DOMExceptions\nin environments where the history api may not be fully available.</p>\n",
                "args": [
                    {
                        "name": "impl",
                        "type": "PlatformLocation",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "method",
                        "type": "PatchablePlatformLocationHistoryMethod",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 744,
                            "end": 748,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "impl"
                        },
                        "type": "PlatformLocation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 738,
                            "end": 743,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>PlatformLocation instance</p>\n"
                    },
                    {
                        "name": {
                            "pos": 785,
                            "end": 791,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "method"
                        },
                        "type": "PatchablePlatformLocationHistoryMethod",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 779,
                            "end": 784,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Name of method to patch</p>\n"
                    }
                ]
            },
            {
                "name": "patchPlatformLocationHistoryMethods",
                "file": "platform-location/src/lib/nothrow-platform-location.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Patches multiple platform location methods to catch and ignore <code>SecurityError</code> DOMExceptions\nin environments where the history api may not be fully available.</p>\n",
                "args": [
                    {
                        "name": "impl",
                        "type": "PlatformLocation",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "methods",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1559,
                            "end": 1563,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "impl"
                        },
                        "type": "PlatformLocation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1553,
                            "end": 1558,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>PlatformLocation instance</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1600,
                            "end": 1607,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "methods"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS",
                        "tagName": {
                            "pos": 1594,
                            "end": 1599,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Array of methods to patch</p>\n"
                    }
                ]
            },
            {
                "name": "payload",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Helper function used to specify the payload format when creating custom types</p>\n",
                "args": [],
                "returnType": "ResourceEntryPayload<Props>",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 4477,
                            "end": 4484,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A custom payload type</p>\n"
                    }
                ]
            },
            {
                "name": "pipeActionInstance",
                "file": "injectors/src/lib/dispatch/dispatch.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Maps all emits to an action value</p>\n",
                "args": [
                    {
                        "name": "action",
                        "type": "A",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "obs$",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<A>",
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "A",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "obs$",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "provideAppHref",
                "file": "app-href/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provides an initial appHref value for the entire application</p>\n",
                "args": [
                    {
                        "name": "href",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 217,
                            "end": 221,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "href"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 211,
                            "end": 216,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Initial appHref value</p>\n"
                    }
                ]
            },
            {
                "name": "provideFontIcons",
                "file": "icons/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provides font icons</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "FontIconsConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2635,
                            "end": 2641,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "config"
                        },
                        "type": "FontIconsConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 2629,
                            "end": 2634,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Configuration object</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 2667,
                            "end": 2674,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Application providers</p>\n"
                    }
                ]
            },
            {
                "name": "provideIcons",
                "file": "icons/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provides both font and svg icons</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "IconsConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3690,
                            "end": 3696,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "config"
                        },
                        "type": "IconsConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 3684,
                            "end": 3689,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Configuration object</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 3722,
                            "end": 3729,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Application providers</p>\n"
                    }
                ]
            },
            {
                "name": "provideNothrowPlatformLocation",
                "file": "platform-location/src/lib/nothrow-platform-location.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Ensures that the PlatformLocation does not throw errors when using the history in\nan environment where it is not fully supported. The patch still allows errors due\nto invalid input, etc. to propagate through.</p>\n",
                "args": [],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 2144,
                            "end": 2151,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Providers</p>\n"
                    }
                ]
            },
            {
                "name": "provideStyleComponents",
                "file": "styling/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provide style components that are registered on application initialization.</p>\n",
                "args": [
                    {
                        "name": "components",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 300,
                            "end": 310,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "components"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "pos": 294,
                            "end": 299,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Component classes</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 333,
                            "end": 340,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Environment provider</p>\n"
                    }
                ]
            },
            {
                "name": "provideSvgIcons",
                "file": "icons/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Provides svg icons</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "SvgIconsConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "EnvironmentProviders",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3146,
                            "end": 3152,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "config"
                        },
                        "type": "SvgIconsConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 3140,
                            "end": 3145,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Configuration object</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 3178,
                            "end": 3185,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Application providers</p>\n"
                    }
                ]
            },
            {
                "name": "registerActionType",
                "file": "state/src/actions/action-type-registry.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Registers an action type</p>\n",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 421,
                            "end": 425,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "type"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 415,
                            "end": 420,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Action type string</p>\n"
                    }
                ]
            },
            {
                "name": "registerDefaultFontSetClassesFactory",
                "file": "icons/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Factory for registering default font icon classes</p>\n",
                "args": [
                    {
                        "name": "registry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultClasses",
                        "type": "Required<FontIconsConfig>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "8f99667b-c421-416a-ac80-5a02b838d7a3",
                        "destructuredParameter": true
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1546,
                            "end": 1554,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "registry"
                        },
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1540,
                            "end": 1545,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Material icon registry</p>\n"
                    },
                    {
                        "name": "defaultClasses",
                        "type": "Required<FontIconsConfig>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "8f99667b-c421-416a-ac80-5a02b838d7a3",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "tagName": {
                            "pos": 1620,
                            "end": 1627,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Registration function</p>\n"
                    }
                ]
            },
            {
                "name": "registerStyleComponents",
                "file": "styling/src/lib/style-component-manager.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Register style components. Each component is registered at most once.\nMust be called in an injection context or pass an injector in the options.</p>\n",
                "args": [
                    {
                        "name": "components",
                        "type": "Types",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "ComponentRefsFromTypes<Types>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 700,
                            "end": 710,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "components"
                        },
                        "type": "Types",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 694,
                            "end": 699,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Component classes</p>\n"
                    },
                    {
                        "name": {
                            "pos": 739,
                            "end": 746,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "options"
                        },
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 733,
                            "end": 738,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Additional options</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 770,
                            "end": 777,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A component ref for each class</p>\n"
                    }
                ]
            },
            {
                "name": "registerSvgIconResolverFactory",
                "file": "icons/src/lib/providers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Factory for registering a svg icon resolver</p>\n",
                "args": [
                    {
                        "name": "registry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appHrefService",
                        "type": "AppHrefService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "directory",
                        "type": "Required<SvgIconsConfig>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "e63563cc-8f53-4a6b-b2a2-c719479a0e8c",
                        "destructuredParameter": true
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2023,
                            "end": 2031,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "registry"
                        },
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2017,
                            "end": 2022,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Material icon registry</p>\n"
                    },
                    {
                        "name": "appHrefService",
                        "type": "AppHrefService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2101,
                            "end": 2110,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "sanitizer"
                        },
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2095,
                            "end": 2100,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Resource url sanitizer</p>\n"
                    },
                    {
                        "name": "directory",
                        "type": "Required<SvgIconsConfig>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "destrucuredGroupId": "e63563cc-8f53-4a6b-b2a2-c719479a0e8c",
                        "destructuredParameter": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "tagName": {
                            "pos": 2176,
                            "end": 2183,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>Registration function</p>\n"
                    }
                ]
            },
            {
                "name": "select$",
                "file": "injectors/src/lib/select/select.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Creates an observable emitting parts of the state. The observable&#39;s lifetime\nis automatically tied to the injection context where this is called.</p>\n",
                "args": [
                    {
                        "name": "selector",
                        "type": "StateSelector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "SelectOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1313,
                            "end": 1321,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "selector"
                        },
                        "type": "StateSelector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1307,
                            "end": 1312,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>State selection function or token</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1366,
                            "end": 1373,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "options"
                        },
                        "type": "SelectOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 1360,
                            "end": 1365,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Additional select options</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1404,
                            "end": 1411,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>An observable of the selected state</p>\n"
                    }
                ]
            },
            {
                "name": "selectQuerySnapshot",
                "file": "injectors/src/lib/select/select-snapshot.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Injects a function that can be called with the same arguments as the query selector\nand returns the latest value each time. Automatically marks components, directives, or pipes\nfor change detection whenever a new value is available. Note that since typescript has yet to\nimplement support for higher order generics there is sometimes a need to specialize the\nreturned query function with the correct arguments and return type. This can be done as shown\nin the examples.</p>\n",
                "args": [
                    {
                        "name": "selector",
                        "type": "StateSelector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boundArgs",
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "SelectQuery<F, BoundArgs>",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2433,
                            "end": 2441,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "selector"
                        },
                        "type": "StateSelector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2427,
                            "end": 2432,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Store query selector</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2473,
                            "end": 2482,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "boundArgs"
                        },
                        "type": "BoundArgs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "pos": 2467,
                            "end": 2472,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Optional bound query arguments</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 1631,
                            "end": 1638,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "example"
                        },
                        "comment": "<caption>Basic usage</caption>\nclass Component {\n...\n// Return type: () => string\nreadonly markdown = querySelectSnapshot(ResourceRegistrySelectors.markdown, id);\n// Return type: (id: ResourceId) => string\nreadonly markdownById = querySelectSnapshot(ResourceRegistrySelectors.markdown);\n...\n}"
                    },
                    {
                        "tagName": {
                            "pos": 1975,
                            "end": 1982,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "example"
                        },
                        "comment": "<caption>Specialize query arguments and/or return type</caption>\nclass Component {\n...\n// Return type: () => number[]\nreadonly points = querySelectSnapshot(ResourceRegistrySelectors.field, id, type, 'points', [])<number[]>;\n// Return type: (field: string, defaultValue: string) => string\nreadonly getStringField = querySelectSnapshot(ResourceRegistrySelectors.field, id, type)<string, [string, string]>;\n}"
                    },
                    {
                        "tagName": {
                            "pos": 2518,
                            "end": 2525,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A snapshot function taking the same arguments as the query selector (excluding bound arguments)</p>\n"
                    }
                ]
            },
            {
                "name": "selectSnapshot",
                "file": "injectors/src/lib/select/select-snapshot.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Injects a function that returns the latest snapshot value each time it is called\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available</p>\n",
                "args": [
                    {
                        "name": "selector",
                        "type": "StateSelector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 819,
                            "end": 827,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "selector"
                        },
                        "type": "StateSelector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 813,
                            "end": 818,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "param"
                        },
                        "comment": "<p>Store data selector</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 852,
                            "end": 859,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 80,
                            "escapedText": "returns"
                        },
                        "comment": "<p>A snapshot function</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AnyEntryQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "state/src/resource-registry/resource-registry.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Query function returned by {@link ResourceRegistrySelectors.anyEntry}</p>\n",
                "kind": 184
            },
            {
                "name": "BuiltinTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Maps raw builtin type strings to ResourceType</p>\n",
                "kind": 200
            },
            {
                "name": "ComponentInstanceMap",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Map<Type<> | ComponentRef<>>",
                "file": "styling/src/lib/style-component-manager.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Map of component types to instances</p>\n",
                "kind": 183
            },
            {
                "name": "ComponentRefsFromTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "styling/src/lib/style-component-manager.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Helper that turns an array of types into an array of component refs</p>\n",
                "kind": 200
            },
            {
                "name": "CustomResourceEntry",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Typed custom resource entry</p>\n",
                "kind": 193
            },
            {
                "name": "CustomResourceType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " `custom:${T}`",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Custom entry types</p>\n",
                "kind": 203
            },
            {
                "name": "DataQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "state/src/resource-registry/resource-registry.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Query function for resource data</p>\n",
                "kind": 184
            },
            {
                "name": "EntryQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "state/src/resource-registry/resource-registry.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Query function returned by {@link ResourceRegistrySelectors.entry}</p>\n",
                "kind": 184
            },
            {
                "name": "ExternalLinkEntry",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>type for external link entry</p>\n",
                "kind": 183
            },
            {
                "name": "ExtractBuiltinEntryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "UnionMember<z.infer<> | type | T>",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Extracts the builtin entry with type T</p>\n",
                "kind": 183
            },
            {
                "name": "FieldQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "state/src/resource-registry/resource-registry.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Query function returned by {@link ResourceRegistrySelectors.field}</p>\n",
                "kind": 184
            },
            {
                "name": "InternalLinkEntry",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>type for internal link entry</p>\n",
                "kind": 183
            },
            {
                "name": "LinkEntry",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>entry for link registry</p>\n",
                "kind": 183
            },
            {
                "name": "LinkId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type for unique identifier for link</p>\n",
                "kind": 183
            },
            {
                "name": "LinkRegistryContext",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StateContext<LinkRegistryModel>",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>type for State Context of LinkRegistry</p>\n",
                "kind": 183
            },
            {
                "name": "LinkRegistryModel",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/link-registry/link-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Model for LinkRegistry State</p>\n",
                "kind": 183
            },
            {
                "name": "LinkRegistryQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "state/src/link-registry/link-registry.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Query function for link entry optionally with type specified</p>\n",
                "kind": 184
            },
            {
                "name": "PatchablePlatformLocationHistoryMethod",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"replaceState\" | \"pushState\" | \"forward\" | \"back\" | \"historyGo\"",
                "file": "platform-location/src/lib/nothrow-platform-location.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Patchable platform location history methods</p>\n",
                "kind": 192
            },
            {
                "name": "ResourceEntry",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Any resource entry</p>\n",
                "kind": 183
            },
            {
                "name": "ResourceEntryPayload",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Payload type used when creating custom types</p>\n",
                "kind": 193
            },
            {
                "name": "ResourceId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Resource identifier</p>\n",
                "kind": 183
            },
            {
                "name": "ResourceRegistryContext",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StateContext<ResourceRegistryModel>",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Context type for action handlers</p>\n",
                "kind": 183
            },
            {
                "name": "ResourceRegistryModel",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "z.infer<>",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>State data model</p>\n",
                "kind": 183
            },
            {
                "name": "ResourceType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "state/src/resource-registry/resource-registry.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Resource type string with entry typings</p>\n",
                "kind": 193
            },
            {
                "name": "RestArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "injectors/src/lib/select/select-snapshot.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Get remaining arguments after applying bound arguments</p>\n",
                "kind": 194
            },
            {
                "name": "SelectQuery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "injectors/src/lib/select/select-snapshot.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Function type returned by {@link selectQuerySnapshot}</p>\n",
                "kind": 184
            },
            {
                "name": "StateSelector",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " | StateToken<T>",
                "file": "injectors/src/lib/select/select.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Selector type for select style functions</p>\n",
                "kind": 192
            },
            {
                "name": "StorageContext",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StateContext<StorageModel>",
                "file": "state/src/storage/storage.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Helper alias for action handler&#39;s ctx argument</p>\n",
                "kind": 183
            },
            {
                "name": "StorageModel",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<StorageId | number>",
                "file": "state/src/storage/storage.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type alias for the array of Storage objects</p>\n",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "LinkType",
                "childs": [
                    {
                        "name": "Internal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "internal"
                    },
                    {
                        "name": "External",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "external"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Types for Link</p>\n",
                "file": "state/src/link-registry/link-registry.model.ts"
            },
            {
                "name": "RawBuiltinResourceType",
                "childs": [
                    {
                        "name": "Markdown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "markdown"
                    },
                    {
                        "name": "Text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    },
                    {
                        "name": "Url",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "url"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Raw builtin type strings</p>\n",
                "file": "state/src/resource-registry/resource-registry.model.ts"
            },
            {
                "name": "StorageId",
                "childs": [
                    {
                        "name": "Local",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "local"
                    },
                    {
                        "name": "Session",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "session"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>StorageId - enum with values as Local, Session - identifier for storage types</p>\n",
                "file": "state/src/storage/storage.model.ts"
            }
        ],
        "groupedVariables": {
            "state/src/base-href/base-href.actions.ts": [
                {
                    "name": "Action",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/base-href/base-href.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ActionGroup('BaseHref')",
                    "rawdescription": "Base action factory",
                    "description": "<p>Base action factory</p>\n"
                }
            ],
            "state/src/link-registry/link-registry.actions.ts": [
                {
                    "name": "Action",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/link-registry/link-registry.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ActionGroup('LinkRegistry')",
                    "rawdescription": "Base action factory",
                    "description": "<p>Base action factory</p>\n"
                }
            ],
            "state/src/resource-registry/resource-registry.actions.ts": [
                {
                    "name": "Action",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ActionGroup('ResourceRegistry')",
                    "rawdescription": "Base action factory",
                    "description": "<p>Base action factory</p>\n"
                }
            ],
            "state/src/storage/storage.actions.ts": [
                {
                    "name": "Action",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/storage/storage.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ActionGroup('Storage')",
                    "rawdescription": "Base action factory",
                    "description": "<p>Base action factory</p>\n"
                }
            ],
            "state/src/actions/action-type-registry.ts": [
                {
                    "name": "actionTypeRegistry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/actions/action-type-registry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Set<string>()",
                    "rawdescription": "Registry of action types",
                    "description": "<p>Registry of action types</p>\n"
                }
            ],
            "state/src/resource-registry/resource-registry.model.ts": [
                {
                    "name": "BUILTIN_ENTRY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.discriminatedUnion('type', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])",
                    "rawdescription": "Union of all builtin entries",
                    "description": "<p>Union of all builtin entries</p>\n"
                },
                {
                    "name": "BUILTIN_TYPE_VALUES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.values(RawBuiltinResourceType)",
                    "rawdescription": "Builtin type strings as an array",
                    "description": "<p>Builtin type strings as an array</p>\n"
                },
                {
                    "name": "BuiltinResourceType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RawBuiltinResourceType as BuiltinTypes",
                    "rawdescription": "Builtin resource types",
                    "description": "<p>Builtin resource types</p>\n"
                },
                {
                    "name": "CUSTOM_ENTRY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()",
                    "rawdescription": "Custom entry",
                    "description": "<p>Custom entry</p>\n"
                },
                {
                    "name": "CUSTOM_ENTRY_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z\n  .string()\n  .refine((val) => !isBuiltinType(val), 'Invalid builtin resource format')\n  .transform<CustomResourceType<string>>(createCustomType)",
                    "rawdescription": "Custom entry type validator with transformation",
                    "description": "<p>Custom entry type validator with transformation</p>\n"
                },
                {
                    "name": "CUSTOM_TYPE_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'custom:'",
                    "rawdescription": "Prefix of all custom types",
                    "description": "<p>Prefix of all custom types</p>\n"
                },
                {
                    "name": "MARKDOWN_ENTRY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal(RawBuiltinResourceType.Markdown),\n  markdown: z.string(),\n})",
                    "rawdescription": "Markdown data",
                    "description": "<p>Markdown data</p>\n"
                },
                {
                    "name": "RESOURCE_ENTRY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])",
                    "rawdescription": "Builtin or custom entries",
                    "description": "<p>Builtin or custom entries</p>\n"
                },
                {
                    "name": "RESOURCE_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z\n  .string()\n  .transform((id) => `ResourceId:'${id}'`)\n  .brand('ResourceId')",
                    "rawdescription": "Resource identifier validator with transformation",
                    "description": "<p>Resource identifier validator with transformation</p>\n"
                },
                {
                    "name": "RESOURCE_REGISTRY_SCHEMA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.record(RESOURCE_ID, RESOURCE_ENTRY)",
                    "rawdescription": "State schema",
                    "description": "<p>State schema</p>\n"
                },
                {
                    "name": "TEXT_ENTRY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal(RawBuiltinResourceType.Text),\n  text: z.string(),\n})",
                    "rawdescription": "Text data",
                    "description": "<p>Text data</p>\n"
                },
                {
                    "name": "URL_ENTRY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.object({\n  type: z.literal(RawBuiltinResourceType.Url),\n  url: z.string(),\n})",
                    "rawdescription": "External url",
                    "description": "<p>External url</p>\n"
                }
            ],
            "app-href/src/lib/current-script.ts": [
                {
                    "name": "currentScriptEl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "app-href/src/lib/current-script.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "document.currentScript",
                    "rawdescription": "Currently executing script's element.\nShould be reliable in most cases unless the script is executed as a module\nor in an older browser, IE etc. (which we don't support anyway)",
                    "description": "<p>Currently executing script&#39;s element.\nShould be reliable in most cases unless the script is executed as a module\nor in an older browser, IE etc. (which we don&#39;t support anyway)</p>\n"
                },
                {
                    "name": "currentScriptPath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "app-href/src/lib/current-script.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "rawdescription": "Cached value of found script path",
                    "description": "<p>Cached value of found script path</p>\n"
                }
            ],
            "icons/src/lib/providers.ts": [
                {
                    "name": "DEFAULT_FONT_ICONS_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icons/src/lib/providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Required<FontIconsConfig>",
                    "defaultValue": "{\n  defaultClasses: [],\n}",
                    "rawdescription": "Default values for font icon configuration",
                    "description": "<p>Default values for font icon configuration</p>\n"
                },
                {
                    "name": "DEFAULT_SVG_ICONS_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icons/src/lib/providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Required<SvgIconsConfig>",
                    "defaultValue": "{\n  directory: 'assets/icons',\n}",
                    "rawdescription": "Default values for svg icon configuration",
                    "description": "<p>Default values for svg icon configuration</p>\n"
                },
                {
                    "name": "FONT_ICONS_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icons/src/lib/providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Required<FontIconsConfig>>('FONT_ICONS_CONFIG')",
                    "rawdescription": "Injection token for font icon configuration",
                    "description": "<p>Injection token for font icon configuration</p>\n"
                },
                {
                    "name": "SVG_ICONS_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "icons/src/lib/providers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Required<SvgIconsConfig>>('SVG_ICONS_CONFIG')",
                    "rawdescription": "Injection token for svg icon configuration",
                    "description": "<p>Injection token for svg icon configuration</p>\n"
                }
            ],
            "injectors/src/lib/on-destroy/on-destroy.ts": [
                {
                    "name": "DESTRUCTOR_CACHE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new WeakMap<object, Observable<void>>()",
                    "rawdescription": "Cached destructor observables",
                    "description": "<p>Cached destructor observables</p>\n"
                }
            ],
            "state/src/link-registry/link-registry.model.ts": [
                {
                    "name": "EMPTY_LINK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createLinkId('@@__EMPTY__')",
                    "rawdescription": "Empty link id",
                    "description": "<p>Empty link id</p>\n"
                },
                {
                    "name": "EXTERNAL_LINK_SCHEMA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })",
                    "rawdescription": "Type for external link entry",
                    "description": "<p>Type for external link entry</p>\n"
                },
                {
                    "name": "INTERNAL_LINK_SCHEMA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })",
                    "rawdescription": "Type for internal link entry",
                    "description": "<p>Type for internal link entry</p>\n"
                },
                {
                    "name": "LINK_REGISTRY_SCHEMA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)",
                    "rawdescription": "Schema for link registry",
                    "description": "<p>Schema for link registry</p>\n"
                }
            ],
            "app-href/src/lib/app-href.service.ts": [
                {
                    "name": "INITIAL_APP_HREF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "app-href/src/lib/app-href.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('InitialAppHref', {\n  providedIn: 'root',\n  factory: () => getCurrentScriptBasePath(),\n})",
                    "rawdescription": "Initial value for appHref. Defaults to the current script's base path",
                    "description": "<p>Initial value for appHref. Defaults to the current script&#39;s base path</p>\n"
                }
            ],
            "injectors/src/lib/select/snapshot-observer.ts": [
                {
                    "name": "NO_ERROR_SENTINEL_OBJ",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "injectors/src/lib/select/snapshot-observer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}",
                    "rawdescription": "Object indicating that no error has been emitted",
                    "description": "<p>Object indicating that no error has been emitted</p>\n"
                }
            ],
            "platform-location/src/lib/nothrow-platform-location.ts": [
                {
                    "name": "PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "platform-location/src/lib/nothrow-platform-location.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PatchablePlatformLocationHistoryMethod[]",
                    "defaultValue": "[\n  'replaceState',\n  'pushState',\n  'forward',\n  'back',\n  'historyGo',\n]",
                    "rawdescription": "Array of all patchable platform location history methods",
                    "description": "<p>Array of all patchable platform location history methods</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "state/src/actions/actions.ts": [
                {
                    "name": "Action",
                    "file": "state/src/actions/actions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a new base action with a specified type</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionConstructor",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 685,
                                "end": 689,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 679,
                                "end": 684,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Action type</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 706,
                                "end": 713,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A base action class</p>\n"
                        }
                    ]
                },
                {
                    "name": "ActionGroup",
                    "file": "state/src/actions/actions.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates an action factory that adds a common group string to each action type</p>\n",
                    "args": [
                        {
                            "name": "group",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionConstructor",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 421,
                                "end": 426,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "group"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 415,
                                "end": 420,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Common action type group</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 456,
                                "end": 463,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An action factory</p>\n"
                        }
                    ]
                }
            ],
            "state/src/actions/action-type-registry.ts": [
                {
                    "name": "assertUniqueActionType",
                    "file": "state/src/actions/action-type-registry.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Asserts that an action type is unique</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 141,
                                "end": 145,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 135,
                                "end": 140,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Action type string</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerActionType",
                    "file": "state/src/actions/action-type-registry.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Registers an action type</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 421,
                                "end": 425,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 415,
                                "end": 420,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Action type string</p>\n"
                        }
                    ]
                }
            ],
            "injectors/src/lib/dispatch/dispatch.ts": [
                {
                    "name": "createActionFactory",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates an action factory function</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boundArgs",
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "A",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 500,
                                "end": 504,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 494,
                                "end": 499,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Action constructor</p>\n"
                        },
                        {
                            "name": {
                                "pos": 534,
                                "end": 543,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "boundArgs"
                            },
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 528,
                                "end": 533,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Initial bound arguments</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 572,
                                "end": 579,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A factory function creating a new action on each call</p>\n"
                        }
                    ]
                },
                {
                    "name": "dispatch",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Wraps an action constructor with automatic dispatching on each call to the function.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boundArgs",
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "A",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1721,
                                "end": 1725,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1715,
                                "end": 1720,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Action constructor to create new instances</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1779,
                                "end": 1788,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "boundArgs"
                            },
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1773,
                                "end": 1778,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Bound arguments to the action constructor</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1835,
                                "end": 1842,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A function that dispatches an action on the store each time it is called</p>\n"
                        }
                    ]
                },
                {
                    "name": "dispatch$",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Wraps an action constructor with automatic dispatching on each call to the function.\nEach call to the wrapper returns an observable that emits the action instance once the\ndispatch action has completed.</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boundArgs",
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "Observable<A>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2426,
                                "end": 2430,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2420,
                                "end": 2425,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Action constructor to create new instances</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2484,
                                "end": 2493,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "boundArgs"
                            },
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 2478,
                                "end": 2483,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Bound arguments to the action constructor</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2540,
                                "end": 2547,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A function that dispatches an action on the store each time it is called</p>\n"
                        }
                    ]
                },
                {
                    "name": "dispatchAction",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a callback that can dispatch any action or array of actions.\nEach call returns passed actions unchanged</p>\n",
                    "args": [],
                    "returnType": "A",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3054,
                                "end": 3061,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A function that dispatches actions on the store each time it is called</p>\n"
                        }
                    ]
                },
                {
                    "name": "dispatchAction$",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a callback that can dispatch any action or array of actions.\nEach call returns an observable that emits the passed actions when the dispatch has finished</p>\n",
                    "args": [],
                    "returnType": "Observable<A>",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3418,
                                "end": 3425,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A function that dispatches actions on the store each time it is called</p>\n"
                        }
                    ]
                },
                {
                    "name": "dispatchImpl",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Common dispatch functionality used to implement all dispatch functions</p>\n",
                    "args": [
                        {
                            "name": "actionFactory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resultHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "R",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 976,
                                "end": 989,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "actionFactory"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 970,
                                "end": 975,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Creates an action or array of actions from the user provided arguments</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1071,
                                "end": 1084,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "resultHandler"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1065,
                                "end": 1070,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Selects the output value from the action and the dispatch observable</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1158,
                                "end": 1165,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A new dispatch function taking user arguments, dispatches actions, and returns a value</p>\n"
                        }
                    ]
                },
                {
                    "name": "identity",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Identity function returning the first argument passed</p>\n",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pipeActionInstance",
                    "file": "injectors/src/lib/dispatch/dispatch.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Maps all emits to an action value</p>\n",
                    "args": [
                        {
                            "name": "action",
                            "type": "A",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "obs$",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<A>",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "A",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obs$",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "state/src/resource-registry/resource-registry.model.ts": [
                {
                    "name": "createCustomType",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a custom resource type</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ResourceType<CustomResourceEntry<T, Partial<Record<string, >>>>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4708,
                                "end": 4712,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4702,
                                "end": 4707,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Raw resource type</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4735,
                                "end": 4742,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A new resource type</p>\n"
                        }
                    ]
                },
                {
                    "name": "createCustomType",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a custom resource type with a payload. The payload should be\nspecified using the {@link payload} function</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ResourceType<CustomResourceEntry<T, Props>>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5138,
                                "end": 5142,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5132,
                                "end": 5137,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Raw resource type</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5171,
                                "end": 5178,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "payload"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5165,
                                "end": 5170,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Payload type</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5032,
                                "end": 5039,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<p>const MyResourceType = createCustomType(&#39;my-type&#39;, payload&lt;{ value: number }&gt;());</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5196,
                                "end": 5203,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A new resource type</p>\n"
                        }
                    ]
                },
                {
                    "name": "createCustomType",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Implementation of createCustomType overloads</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createResourceId",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates a new resource identifier</p>\n",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4258,
                                "end": 4260,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4252,
                                "end": 4257,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Raw identifier</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4280,
                                "end": 4287,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A resource id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getEntry",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Internal helper function for getting an entry from the state</p>\n",
                    "args": [
                        {
                            "name": "state",
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "ResourceId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ResourceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "T | undefined",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5670,
                                "end": 5675,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "state"
                            },
                            "type": "ResourceRegistryModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5664,
                                "end": 5669,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Current state snapshot</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5709,
                                "end": 5711,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ResourceId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5703,
                                "end": 5708,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Resource id</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5734,
                                "end": 5738,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "ResourceType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5728,
                                "end": 5733,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional entry type</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5763,
                                "end": 5770,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The entry object it exists and has the correct type, otherwise undefined</p>\n"
                        }
                    ]
                },
                {
                    "name": "isBuiltinType",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Determines whether a type string has builtin support</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3572,
                                "end": 3576,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3566,
                                "end": 3571,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The type string</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3597,
                                "end": 3604,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if type is one of the builtin types, otherwise false</p>\n"
                        }
                    ]
                },
                {
                    "name": "isCustomType",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Determines whether a type is a custom resource type</p>\n",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ResourceType<z.infer<>>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3881,
                                "end": 3885,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3875,
                                "end": 3880,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The type string</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3906,
                                "end": 3913,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>True if type is a custom type, otherwise false</p>\n"
                        }
                    ]
                },
                {
                    "name": "payload",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Helper function used to specify the payload format when creating custom types</p>\n",
                    "args": [],
                    "returnType": "ResourceEntryPayload<Props>",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 4477,
                                "end": 4484,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A custom payload type</p>\n"
                        }
                    ]
                }
            ],
            "state/src/link-registry/link-registry.model.ts": [
                {
                    "name": "createLinkId",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>function to createa unique link ids</p>\n",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "LinkId",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "icons/src/lib/resolvers.ts": [
                {
                    "name": "createSvgIconResolver",
                    "file": "icons/src/lib/resolvers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates svg icon resolver with the specified configuration.\nThe function resolves all svg icons to <code>directory/[namespace/]name.svg</code></p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "SvgIconResolverConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IconResolver",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 595,
                                "end": 601,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "config"
                            },
                            "type": "SvgIconResolverConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 589,
                                "end": 594,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Configuration object</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 627,
                                "end": 634,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A resolver function</p>\n"
                        }
                    ]
                },
                {
                    "name": "joinPath",
                    "file": "icons/src/lib/resolvers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Joins path segments into a single string. Removes empty segments and double &#39;/&#39; sequences.</p>\n",
                    "args": [
                        {
                            "name": "segments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1103,
                                "end": 1111,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "segments"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1097,
                                "end": 1102,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Segments, some of which may be the empty string</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1164,
                                "end": 1171,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The joined path</p>\n"
                        }
                    ]
                }
            ],
            "app-href/src/lib/current-script.ts": [
                {
                    "name": "findCurrentScriptPath",
                    "file": "app-href/src/lib/current-script.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Searches for the current script&#39;s path in a couple of different ways.</p>\n",
                    "args": [],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 898,
                                "end": 905,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The current script&#39;s path if found, otherwise the empty string</p>\n"
                        }
                    ]
                },
                {
                    "name": "findCurrentScriptPathFromStackTrace",
                    "file": "app-href/src/lib/current-script.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Try to find the current script&#39;s path using a stack trace.\nAdapted from ://stackoverflow.com/a/22165218{@link https}</p>\n",
                    "args": [],
                    "returnType": "string | undefined",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1297,
                                "end": 1304,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A path if found</p>\n"
                        }
                    ]
                },
                {
                    "name": "getCurrentScriptBasePath",
                    "file": "app-href/src/lib/current-script.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get the current script&#39;s base path.</p>\n",
                    "args": [],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 590,
                                "end": 597,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The current script&#39;s base path</p>\n"
                        }
                    ]
                },
                {
                    "name": "getCurrentScriptPath",
                    "file": "app-href/src/lib/current-script.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get the current script&#39;s path.</p>\n",
                    "args": [],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 373,
                                "end": 380,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The current script&#39;s path</p>\n"
                        }
                    ]
                }
            ],
            "injectors/src/lib/on-destroy/on-destroy.ts": [
                {
                    "name": "findDestructorScope",
                    "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Finds the nearest destructor scope object in the current injection context</p>\n",
                    "args": [],
                    "returnType": "DestructorScope",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1267,
                                "end": 1274,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The scope on which cleanup can be attached</p>\n"
                        }
                    ]
                },
                {
                    "name": "findStableKeyObject",
                    "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Finds a stable object in the current injection context to be\nused as a key in the destructor cache</p>\n",
                    "args": [],
                    "returnType": "object",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 912,
                                "end": 919,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An object</p>\n"
                        }
                    ]
                },
                {
                    "name": "firstDefinedValue",
                    "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get the first defined value returned by a generator</p>\n",
                    "args": [
                        {
                            "name": "genFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 441,
                                "end": 446,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "genFn"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 435,
                                "end": 440,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Generator function taking no arguments</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 490,
                                "end": 497,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The first non-null value</p>\n"
                        }
                    ]
                },
                {
                    "name": "injectDestroy$",
                    "file": "injectors/src/lib/on-destroy/on-destroy.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\nit is injected into. It can be used to control the lifetime of other observables using\nthe <code>takeUntil</code> pipe, and to build other complex injection functions.</p>\n<p>Caveats:</p>\n<ul>\n<li>There are NO guarantees about whether the returned observable will emit and complete\nbefore or after the regular ngOnDestroy lifecycle hook</li>\n<li>For root and module level services the observable may never complete unless\nthe containing module is explicitly destroyed, so don&#39;t rely on it for important operations</li>\n<li>Components, directives, pipe, and services that manipulate the <code>ViewContainerRef</code> MUST\ntake care to maintain the view controlling the lifecycle of the observable. Failure\nto do so may result in early emit and completion of the returned observable</li>\n</ul>\n<p>Based on comment on <a href=\"https://github.com/angular/angular/issues/10185\">https://github.com/angular/angular/issues/10185</a>\nMostly <a href=\"https://github.com/angular/angular/issues/10185#issuecomment-1165545544\">https://github.com/angular/angular/issues/10185#issuecomment-1165545544</a> and\n<a href=\"https://github.com/angular/angular/issues/10185#issuecomment-1199063426\">https://github.com/angular/angular/issues/10185#issuecomment-1199063426</a></p>\n",
                    "args": [],
                    "returnType": "Observable<void>",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2694,
                                "end": 2701,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable that emits and completes when the component/directive/etc. is destroyed</p>\n"
                        }
                    ]
                }
            ],
            "injectors/src/lib/on-destroy/destructor-subject.ts": [
                {
                    "name": "isDestructorScopeLike",
                    "file": "injectors/src/lib/on-destroy/destructor-subject.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Determines whether an object is destructor scope like</p>\n",
                    "args": [
                        {
                            "name": "obj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DestructorScope",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 328,
                                "end": 331,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "obj"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 322,
                                "end": 327,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Value to test</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 350,
                                "end": 357,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the object seems to be a destructor scope, otherwise false</p>\n"
                        }
                    ]
                }
            ],
            "injectors/src/lib/select/select.ts": [
                {
                    "name": "markForCheck",
                    "file": "injectors/src/lib/select/select.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Marks a view for change detection whenever a new value is emitted</p>\n",
                    "args": [
                        {
                            "name": "options",
                            "type": "SelectOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 689,
                                "end": 696,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "options"
                            },
                            "type": "SelectOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 683,
                                "end": 688,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Options to explicitly disable marking</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 739,
                                "end": 746,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A rxjs operator</p>\n"
                        }
                    ]
                },
                {
                    "name": "select$",
                    "file": "injectors/src/lib/select/select.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Creates an observable emitting parts of the state. The observable&#39;s lifetime\nis automatically tied to the injection context where this is called.</p>\n",
                    "args": [
                        {
                            "name": "selector",
                            "type": "StateSelector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "SelectOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1313,
                                "end": 1321,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "selector"
                            },
                            "type": "StateSelector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1307,
                                "end": 1312,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>State selection function or token</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1366,
                                "end": 1373,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "options"
                            },
                            "type": "SelectOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1360,
                                "end": 1365,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Additional select options</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1404,
                                "end": 1411,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable of the selected state</p>\n"
                        }
                    ]
                }
            ],
            "platform-location/src/lib/nothrow-platform-location.ts": [
                {
                    "name": "patchPlatformLocationHistoryMethod",
                    "file": "platform-location/src/lib/nothrow-platform-location.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Patches a platform location method to catch and ignore <code>SecurityError</code> DOMExceptions\nin environments where the history api may not be fully available.</p>\n",
                    "args": [
                        {
                            "name": "impl",
                            "type": "PlatformLocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "method",
                            "type": "PatchablePlatformLocationHistoryMethod",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 744,
                                "end": 748,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "impl"
                            },
                            "type": "PlatformLocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 738,
                                "end": 743,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>PlatformLocation instance</p>\n"
                        },
                        {
                            "name": {
                                "pos": 785,
                                "end": 791,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "method"
                            },
                            "type": "PatchablePlatformLocationHistoryMethod",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 779,
                                "end": 784,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of method to patch</p>\n"
                        }
                    ]
                },
                {
                    "name": "patchPlatformLocationHistoryMethods",
                    "file": "platform-location/src/lib/nothrow-platform-location.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Patches multiple platform location methods to catch and ignore <code>SecurityError</code> DOMExceptions\nin environments where the history api may not be fully available.</p>\n",
                    "args": [
                        {
                            "name": "impl",
                            "type": "PlatformLocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "methods",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1559,
                                "end": 1563,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "impl"
                            },
                            "type": "PlatformLocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1553,
                                "end": 1558,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>PlatformLocation instance</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1600,
                                "end": 1607,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "methods"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "PATCHABLE_PLATFORM_LOCATION_HISTORY_METHODS",
                            "tagName": {
                                "pos": 1594,
                                "end": 1599,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Array of methods to patch</p>\n"
                        }
                    ]
                },
                {
                    "name": "provideNothrowPlatformLocation",
                    "file": "platform-location/src/lib/nothrow-platform-location.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Ensures that the PlatformLocation does not throw errors when using the history in\nan environment where it is not fully supported. The patch still allows errors due\nto invalid input, etc. to propagate through.</p>\n",
                    "args": [],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2144,
                                "end": 2151,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Providers</p>\n"
                        }
                    ]
                }
            ],
            "app-href/src/lib/providers.ts": [
                {
                    "name": "provideAppHref",
                    "file": "app-href/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provides an initial appHref value for the entire application</p>\n",
                    "args": [
                        {
                            "name": "href",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 217,
                                "end": 221,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "href"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 211,
                                "end": 216,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Initial appHref value</p>\n"
                        }
                    ]
                }
            ],
            "icons/src/lib/providers.ts": [
                {
                    "name": "provideFontIcons",
                    "file": "icons/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provides font icons</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "FontIconsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2635,
                                "end": 2641,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "config"
                            },
                            "type": "FontIconsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2629,
                                "end": 2634,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Configuration object</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2667,
                                "end": 2674,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Application providers</p>\n"
                        }
                    ]
                },
                {
                    "name": "provideIcons",
                    "file": "icons/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provides both font and svg icons</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "IconsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3690,
                                "end": 3696,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "config"
                            },
                            "type": "IconsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3684,
                                "end": 3689,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Configuration object</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3722,
                                "end": 3729,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Application providers</p>\n"
                        }
                    ]
                },
                {
                    "name": "provideSvgIcons",
                    "file": "icons/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provides svg icons</p>\n",
                    "args": [
                        {
                            "name": "config",
                            "type": "SvgIconsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3146,
                                "end": 3152,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "config"
                            },
                            "type": "SvgIconsConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3140,
                                "end": 3145,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Configuration object</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3178,
                                "end": 3185,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Application providers</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerDefaultFontSetClassesFactory",
                    "file": "icons/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Factory for registering default font icon classes</p>\n",
                    "args": [
                        {
                            "name": "registry",
                            "type": "MatIconRegistry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultClasses",
                            "type": "Required<FontIconsConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "8f99667b-c421-416a-ac80-5a02b838d7a3",
                            "destructuredParameter": true
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1546,
                                "end": 1554,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "registry"
                            },
                            "type": "MatIconRegistry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1540,
                                "end": 1545,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Material icon registry</p>\n"
                        },
                        {
                            "name": "defaultClasses",
                            "type": "Required<FontIconsConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "8f99667b-c421-416a-ac80-5a02b838d7a3",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1620,
                                "end": 1627,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Registration function</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerSvgIconResolverFactory",
                    "file": "icons/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Factory for registering a svg icon resolver</p>\n",
                    "args": [
                        {
                            "name": "registry",
                            "type": "MatIconRegistry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "appHrefService",
                            "type": "AppHrefService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sanitizer",
                            "type": "DomSanitizer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "directory",
                            "type": "Required<SvgIconsConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "e63563cc-8f53-4a6b-b2a2-c719479a0e8c",
                            "destructuredParameter": true
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2023,
                                "end": 2031,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "registry"
                            },
                            "type": "MatIconRegistry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2017,
                                "end": 2022,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Material icon registry</p>\n"
                        },
                        {
                            "name": "appHrefService",
                            "type": "AppHrefService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 2101,
                                "end": 2110,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "sanitizer"
                            },
                            "type": "DomSanitizer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2095,
                                "end": 2100,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Resource url sanitizer</p>\n"
                        },
                        {
                            "name": "directory",
                            "type": "Required<SvgIconsConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "destrucuredGroupId": "e63563cc-8f53-4a6b-b2a2-c719479a0e8c",
                            "destructuredParameter": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2176,
                                "end": 2183,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Registration function</p>\n"
                        }
                    ]
                }
            ],
            "styling/src/lib/providers.ts": [
                {
                    "name": "provideStyleComponents",
                    "file": "styling/src/lib/providers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Provide style components that are registered on application initialization.</p>\n",
                    "args": [
                        {
                            "name": "components",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "EnvironmentProviders",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 300,
                                "end": 310,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "components"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 294,
                                "end": 299,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Component classes</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 333,
                                "end": 340,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Environment provider</p>\n"
                        }
                    ]
                }
            ],
            "styling/src/lib/style-component-manager.service.ts": [
                {
                    "name": "registerStyleComponents",
                    "file": "styling/src/lib/style-component-manager.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Register style components. Each component is registered at most once.\nMust be called in an injection context or pass an injector in the options.</p>\n",
                    "args": [
                        {
                            "name": "components",
                            "type": "Types",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "ComponentRefsFromTypes<Types>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 700,
                                "end": 710,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "components"
                            },
                            "type": "Types",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 694,
                                "end": 699,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Component classes</p>\n"
                        },
                        {
                            "name": {
                                "pos": 739,
                                "end": 746,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "options"
                            },
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 733,
                                "end": 738,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Additional options</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 770,
                                "end": 777,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A component ref for each class</p>\n"
                        }
                    ]
                }
            ],
            "injectors/src/lib/select/select-snapshot.ts": [
                {
                    "name": "selectQuerySnapshot",
                    "file": "injectors/src/lib/select/select-snapshot.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Injects a function that can be called with the same arguments as the query selector\nand returns the latest value each time. Automatically marks components, directives, or pipes\nfor change detection whenever a new value is available. Note that since typescript has yet to\nimplement support for higher order generics there is sometimes a need to specialize the\nreturned query function with the correct arguments and return type. This can be done as shown\nin the examples.</p>\n",
                    "args": [
                        {
                            "name": "selector",
                            "type": "StateSelector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boundArgs",
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "SelectQuery<F, BoundArgs>",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2433,
                                "end": 2441,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "selector"
                            },
                            "type": "StateSelector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2427,
                                "end": 2432,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Store query selector</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2473,
                                "end": 2482,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "boundArgs"
                            },
                            "type": "BoundArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 2467,
                                "end": 2472,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional bound query arguments</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1631,
                                "end": 1638,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<caption>Basic usage</caption>\nclass Component {\n...\n// Return type: () => string\nreadonly markdown = querySelectSnapshot(ResourceRegistrySelectors.markdown, id);\n// Return type: (id: ResourceId) => string\nreadonly markdownById = querySelectSnapshot(ResourceRegistrySelectors.markdown);\n...\n}"
                        },
                        {
                            "tagName": {
                                "pos": 1975,
                                "end": 1982,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "example"
                            },
                            "comment": "<caption>Specialize query arguments and/or return type</caption>\nclass Component {\n...\n// Return type: () => number[]\nreadonly points = querySelectSnapshot(ResourceRegistrySelectors.field, id, type, 'points', [])<number[]>;\n// Return type: (field: string, defaultValue: string) => string\nreadonly getStringField = querySelectSnapshot(ResourceRegistrySelectors.field, id, type)<string, [string, string]>;\n}"
                        },
                        {
                            "tagName": {
                                "pos": 2518,
                                "end": 2525,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A snapshot function taking the same arguments as the query selector (excluding bound arguments)</p>\n"
                        }
                    ]
                },
                {
                    "name": "selectSnapshot",
                    "file": "injectors/src/lib/select/select-snapshot.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Injects a function that returns the latest snapshot value each time it is called\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available</p>\n",
                    "args": [
                        {
                            "name": "selector",
                            "type": "StateSelector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 819,
                                "end": 827,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "selector"
                            },
                            "type": "StateSelector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 813,
                                "end": 818,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>Store data selector</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 852,
                                "end": 859,
                                "flags": 16777216,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A snapshot function</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "state/src/link-registry/link-registry.model.ts": [
                {
                    "name": "LinkType",
                    "childs": [
                        {
                            "name": "Internal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "internal"
                        },
                        {
                            "name": "External",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "external"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Types for Link</p>\n",
                    "file": "state/src/link-registry/link-registry.model.ts"
                }
            ],
            "state/src/resource-registry/resource-registry.model.ts": [
                {
                    "name": "RawBuiltinResourceType",
                    "childs": [
                        {
                            "name": "Markdown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "markdown"
                        },
                        {
                            "name": "Text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        },
                        {
                            "name": "Url",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "url"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Raw builtin type strings</p>\n",
                    "file": "state/src/resource-registry/resource-registry.model.ts"
                }
            ],
            "state/src/storage/storage.model.ts": [
                {
                    "name": "StorageId",
                    "childs": [
                        {
                            "name": "Local",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "local"
                        },
                        {
                            "name": "Session",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "session"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>StorageId - enum with values as Local, Session - identifier for storage types</p>\n",
                    "file": "state/src/storage/storage.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "state/src/resource-registry/resource-registry.selectors.ts": [
                {
                    "name": "AnyEntryQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "state/src/resource-registry/resource-registry.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Query function returned by {@link ResourceRegistrySelectors.anyEntry}</p>\n",
                    "kind": 184
                },
                {
                    "name": "DataQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "state/src/resource-registry/resource-registry.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Query function for resource data</p>\n",
                    "kind": 184
                },
                {
                    "name": "EntryQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "state/src/resource-registry/resource-registry.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Query function returned by {@link ResourceRegistrySelectors.entry}</p>\n",
                    "kind": 184
                },
                {
                    "name": "FieldQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "state/src/resource-registry/resource-registry.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Query function returned by {@link ResourceRegistrySelectors.field}</p>\n",
                    "kind": 184
                }
            ],
            "state/src/resource-registry/resource-registry.model.ts": [
                {
                    "name": "BuiltinTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Maps raw builtin type strings to ResourceType</p>\n",
                    "kind": 200
                },
                {
                    "name": "CustomResourceEntry",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Typed custom resource entry</p>\n",
                    "kind": 193
                },
                {
                    "name": "CustomResourceType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " `custom:${T}`",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Custom entry types</p>\n",
                    "kind": 203
                },
                {
                    "name": "ExtractBuiltinEntryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "UnionMember<z.infer<> | type | T>",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Extracts the builtin entry with type T</p>\n",
                    "kind": 183
                },
                {
                    "name": "ResourceEntry",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Any resource entry</p>\n",
                    "kind": 183
                },
                {
                    "name": "ResourceEntryPayload",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Payload type used when creating custom types</p>\n",
                    "kind": 193
                },
                {
                    "name": "ResourceId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Resource identifier</p>\n",
                    "kind": 183
                },
                {
                    "name": "ResourceRegistryContext",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StateContext<ResourceRegistryModel>",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Context type for action handlers</p>\n",
                    "kind": 183
                },
                {
                    "name": "ResourceRegistryModel",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>State data model</p>\n",
                    "kind": 183
                },
                {
                    "name": "ResourceType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "state/src/resource-registry/resource-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Resource type string with entry typings</p>\n",
                    "kind": 193
                }
            ],
            "styling/src/lib/style-component-manager.service.ts": [
                {
                    "name": "ComponentInstanceMap",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Map<Type<> | ComponentRef<>>",
                    "file": "styling/src/lib/style-component-manager.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Map of component types to instances</p>\n",
                    "kind": 183
                },
                {
                    "name": "ComponentRefsFromTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "styling/src/lib/style-component-manager.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Helper that turns an array of types into an array of component refs</p>\n",
                    "kind": 200
                }
            ],
            "state/src/link-registry/link-registry.model.ts": [
                {
                    "name": "ExternalLinkEntry",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>type for external link entry</p>\n",
                    "kind": 183
                },
                {
                    "name": "InternalLinkEntry",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>type for internal link entry</p>\n",
                    "kind": 183
                },
                {
                    "name": "LinkEntry",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>entry for link registry</p>\n",
                    "kind": 183
                },
                {
                    "name": "LinkId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type for unique identifier for link</p>\n",
                    "kind": 183
                },
                {
                    "name": "LinkRegistryContext",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StateContext<LinkRegistryModel>",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>type for State Context of LinkRegistry</p>\n",
                    "kind": 183
                },
                {
                    "name": "LinkRegistryModel",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "z.infer<>",
                    "file": "state/src/link-registry/link-registry.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Model for LinkRegistry State</p>\n",
                    "kind": 183
                }
            ],
            "state/src/link-registry/link-registry.state.ts": [
                {
                    "name": "LinkRegistryQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "state/src/link-registry/link-registry.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Query function for link entry optionally with type specified</p>\n",
                    "kind": 184
                }
            ],
            "platform-location/src/lib/nothrow-platform-location.ts": [
                {
                    "name": "PatchablePlatformLocationHistoryMethod",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"replaceState\" | \"pushState\" | \"forward\" | \"back\" | \"historyGo\"",
                    "file": "platform-location/src/lib/nothrow-platform-location.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Patchable platform location history methods</p>\n",
                    "kind": 192
                }
            ],
            "injectors/src/lib/select/select-snapshot.ts": [
                {
                    "name": "RestArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "injectors/src/lib/select/select-snapshot.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Get remaining arguments after applying bound arguments</p>\n",
                    "kind": 194
                },
                {
                    "name": "SelectQuery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "injectors/src/lib/select/select-snapshot.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Function type returned by {@link selectQuerySnapshot}</p>\n",
                    "kind": 184
                }
            ],
            "injectors/src/lib/select/select.ts": [
                {
                    "name": "StateSelector",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " | StateToken<T>",
                    "file": "injectors/src/lib/select/select.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Selector type for select style functions</p>\n",
                    "kind": 192
                }
            ],
            "state/src/storage/storage.model.ts": [
                {
                    "name": "StorageContext",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StateContext<StorageModel>",
                    "file": "state/src/storage/storage.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Helper alias for action handler&#39;s ctx argument</p>\n",
                    "kind": 183
                },
                {
                    "name": "StorageModel",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<StorageId | number>",
                    "file": "state/src/storage/storage.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type alias for the array of Storage objects</p>\n",
                    "kind": 183
                }
            ]
        }
    }
}