{
    "pipes": [],
    "interfaces": [
        {
            "name": "GradientPoint",
            "id": "interface-GradientPoint-9a01e43ec9683cd38d326cab8fc9372dfdb711227a20cbb6c7d0c9320a749751251f9113ef6815b6f3e8f70285746b125735c9e7daa0a72bc7f113a68c8cd575",
            "file": "src/lib/gradient-legend/gradient-legend.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n/** Gradient legend for biomarkers */\n@Component({\n  selector: 'hra-gradient-legend',\n  imports: [CommonModule],\n  templateUrl: './gradient-legend.component.html',\n  styleUrls: ['./gradient-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GradientLegendComponent {\n  /** Gradient colors along with their stop points */\n  @Input() gradient: GradientPoint[] = [];\n\n  /** Computes the css linear-gradient function for the gradient bar */\n  get gradientCss(): string {\n    const stops = this.gradient.map(({ color, percentage }) => `${color} ${percentage}%`).join(',');\n    return `linear-gradient(90deg, ${stops})`;\n  }\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Gradient color at a specific percentage</p>\n",
                    "line": 7,
                    "rawdescription": "\nGradient color at a specific percentage"
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Percentage point along the gradient bar</p>\n",
                    "line": 9,
                    "rawdescription": "\nPercentage point along the gradient bar"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>An interface of gradient colors along with their percentages for the gradient bar.</p>\n",
            "rawdescription": "\nAn interface of gradient colors along with their percentages for the gradient bar.",
            "methods": [],
            "extends": []
        },
        {
            "name": "SizeLegend",
            "id": "interface-SizeLegend-ea030ff0bc583ed2f7a89edf789e1ae5bcf8d0b5975f75fbc05954ea798fcaf10dccf90397403ef8e607a7a1f83e50d0f3f69b083143b2940ed41cfe3e5bb7e6",
            "file": "src/lib/size-legend/size-legend.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/** Defining the input data types for the radius and label to be displayed. */\nexport interface SizeLegend {\n  /** Label under circle */\n  label: string;\n  /** Radius for cirlce */\n  radius: number;\n}\n\n/** Size legend component for the biomarkers table. */\n@Component({\n  selector: 'hra-size-legend',\n  imports: [CommonModule],\n  templateUrl: './size-legend.component.html',\n  styleUrls: ['./size-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SizeLegendComponent {\n  /** Taking input for the radius of the circle and the label to be displayed. */\n  @Input() sizes: SizeLegend[] = [];\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Label under circle</p>\n",
                    "line": 7,
                    "rawdescription": "\nLabel under circle"
                },
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Radius for cirlce</p>\n",
                    "line": 9,
                    "rawdescription": "\nRadius for cirlce"
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Defining the input data types for the radius and label to be displayed.</p>\n",
            "rawdescription": "\nDefining the input data types for the radius and label to be displayed.",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "EmailInputComponent",
            "id": "component-EmailInputComponent-9057f7ea83398361428fbdcd4e2ac518e9cf738f740b9f265e04a90129f7a5ad4652f70454a8bdede4ba3293241a02f20d981399f75e4de7d672e37e032769f2",
            "file": "src/lib/email-input/email-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-email-input",
            "styleUrls": [
                "./email-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./email-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "defaultMail",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nDefault email address",
                    "description": "<p>Default email address</p>\n",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA placeholder for the email input field. This will be disappeared when the email is typed.",
                    "description": "<p>A placeholder for the email input field. This will be disappeared when the email is typed.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emailChange",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits the new email when the input changes or undefined if the email is invalid",
                    "description": "<p>Emits the new email when the input changes or undefined if the email is invalid</p>\n",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl('', {\n    updateOn: 'blur',\n    validators: [Validators.required, Validators.email],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A control to validate the email.</p>\n",
                    "line": 41,
                    "rawdescription": "\nA control to validate the email.",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "injectDestroy$()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Observable emitting when the component is destroyed</p>\n",
                    "line": 38,
                    "rawdescription": "\nObservable emitting when the component is destroyed",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "<p>Email input components for contact modal.</p>\n",
            "rawdescription": "\n\nEmail input components for contact modal.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { injectDestroy$ } from '@hra-ui/cdk/injectors';\nimport { map, takeUntil } from 'rxjs';\n\n/**\n * Email input components for contact modal.\n */\n@Component({\n  selector: 'hra-email-input',\n  imports: [CommonModule, MatFormFieldModule, ReactiveFormsModule, MatInputModule],\n  templateUrl: './email-input.component.html',\n  styleUrls: ['./email-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EmailInputComponent implements OnChanges {\n  /** A placeholder for the email input field. This will be disappeared when the email is typed. */\n  @Input() placeholder = '';\n\n  /** Default email address */\n  @Input() defaultMail = '';\n\n  /** Emits the new email when the input changes or undefined if the email is invalid  */\n  @Output() readonly emailChange = new EventEmitter<string | undefined>();\n\n  /** Observable emitting when the component is destroyed */\n  readonly destroy$ = injectDestroy$();\n\n  /**  A control to validate the email. */\n  readonly control = new FormControl('', {\n    updateOn: 'blur',\n    validators: [Validators.required, Validators.email],\n  });\n\n  /** Connects the input control to component outputs */\n  constructor() {\n    const { control, destroy$ } = this;\n    control.valueChanges\n      .pipe(\n        takeUntil(destroy$),\n        map((value) => (control.valid ? value : undefined)),\n      )\n      .subscribe((value) => this.emailChange.emit(value as string | undefined));\n  }\n\n  /** Sets the value to default email if provided */\n  ngOnChanges(changes: SimpleChanges) {\n    if ('defaultMail' in changes) {\n      this.control.setValue(this.defaultMail);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .email-text-field {\n    width: 100%;\n    background: #ffffff;\n  }\n\n  ::ng-deep .mat-mdc-form-field-required-marker {\n    color: #dc231e;\n  }\n}\n",
                    "styleUrl": "./email-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Connects the input control to component outputs</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44,
                "rawdescription": "\nConnects the input control to component outputs"
            },
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<mat-form-field class=\"email-text-field\" appearance=\"outline\">\n  <mat-label> Email </mat-label>\n  <input type=\"email\" matInput [formControl]=\"control\" [placeholder]=\"placeholder\" />\n\n  <mat-error *ngIf=\"control.hasError('email') && !control.hasError('required')\">\n    Please enter a valid email address\n  </mat-error>\n  <mat-error *ngIf=\"control.hasError('required')\"> Email is required </mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "EmptyBiomarkerComponent",
            "id": "component-EmptyBiomarkerComponent-93d3d38cbb88f56efaced1382d4f4ac209de5f98872da28cdcc26cdb9575c682fadf1a8e30bf9bc50e76af9fb61d77c6893b1ea766f862056872745c260edd1e",
            "file": "src/lib/empty-biomarker/empty-biomarker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-empty-biomarker",
            "styleUrls": [
                "./empty-biomarker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty-biomarker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "collaborateText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput  buttonon text of empty biomarker component.\n",
                    "description": "<p>Input  buttonon text of empty biomarker component.</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput  message markdown of empty biomarker component.\n",
                    "description": "<p>Input  message markdown of empty biomarker component.</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "collaborateClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn event emitter that emits the user button click event\n",
                    "description": "<p>An event emitter that emits the user button click event</p>\n",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MarkdownModule",
                    "type": "module"
                }
            ],
            "description": "<p> Component for any empty biomaker cell\n to inform about the empty data and has\n button to navigate to HRA Team.</p>\n",
            "rawdescription": "\n\n Component for any empty biomaker cell\n to inform about the empty data and has\n button to navigate to HRA Team.\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MarkdownModule } from 'ngx-markdown';\n\n/**\n *  Component for any empty biomaker cell\n *  to inform about the empty data and has\n *  button to navigate to HRA Team.\n */\n@Component({\n  selector: 'hra-empty-biomarker',\n  imports: [CommonModule, MatButtonModule, MarkdownModule],\n  templateUrl: './empty-biomarker.component.html',\n  styleUrls: ['./empty-biomarker.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EmptyBiomarkerComponent {\n  /**\n   * Input  buttonon text of empty biomarker component.\n   */\n  @Input() collaborateText = '';\n\n  /**\n   * Input  message markdown of empty biomarker component.\n   */\n  @Input() message = '';\n\n  /**\n   * An event emitter that emits the user button click event\n   */\n  @Output() readonly collaborateClick = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  padding: 1.5rem;\n\n  .collaborate-button {\n    margin-top: 0.5rem;\n    font-weight: 700;\n    color: #fff;\n    width: 100%;\n    max-width: 20rem;\n    height: 3rem;\n  }\n}\n",
                    "styleUrl": "./empty-biomarker.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<markdown [data]=\"message\" class=\"message\"></markdown>\n<button mat-flat-button class=\"collaborate-button\" color=\"primary\" (click)=\"collaborateClick.emit($event)\">\n  {{ collaborateText }}\n</button>\n"
        },
        {
            "name": "GradientLegendComponent",
            "id": "component-GradientLegendComponent-9a01e43ec9683cd38d326cab8fc9372dfdb711227a20cbb6c7d0c9320a749751251f9113ef6815b6f3e8f70285746b125735c9e7daa0a72bc7f113a68c8cd575",
            "file": "src/lib/gradient-legend/gradient-legend.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-gradient-legend",
            "styleUrls": [
                "./gradient-legend.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gradient-legend.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "gradient",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGradient colors along with their stop points",
                    "description": "<p>Gradient colors along with their stop points</p>\n",
                    "line": 22,
                    "type": "GradientPoint[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Gradient legend for biomarkers</p>\n",
            "rawdescription": "\nGradient legend for biomarkers",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n/** Gradient legend for biomarkers */\n@Component({\n  selector: 'hra-gradient-legend',\n  imports: [CommonModule],\n  templateUrl: './gradient-legend.component.html',\n  styleUrls: ['./gradient-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GradientLegendComponent {\n  /** Gradient colors along with their stop points */\n  @Input() gradient: GradientPoint[] = [];\n\n  /** Computes the css linear-gradient function for the gradient bar */\n  get gradientCss(): string {\n    const stops = this.gradient.map(({ color, percentage }) => `${color} ${percentage}%`).join(',');\n    return `linear-gradient(90deg, ${stops})`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .gradient-bar {\n    height: 1.5rem;\n    width: 100%;\n    margin-bottom: 5px;\n  }\n\n  .legend {\n    display: flex;\n\n    .filler {\n      flex-grow: 1;\n    }\n  }\n}\n",
                    "styleUrl": "./gradient-legend.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "gradientCss": {
                    "name": "gradientCss",
                    "getSignature": {
                        "name": "gradientCss",
                        "type": "string",
                        "returnType": "string",
                        "line": 25,
                        "rawdescription": "\nComputes the css linear-gradient function for the gradient bar",
                        "description": "<p>Computes the css linear-gradient function for the gradient bar</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"gradient-bar\" [style.background]=\"gradientCss\"></div>\n<div class=\"legend\">\n  <div class=\"start\">0.0</div>\n  <div class=\"filler\"></div>\n  <div class=\"end\">1.0</div>\n</div>\n"
        },
        {
            "name": "LabelBoxComponent",
            "id": "component-LabelBoxComponent-fa1db851f9c5f748fcab401b8e6051593d5051e4834cfb078479508ee536d7c3f77b3f8a0cc80531c3a017f71db0c9fa1f2d60a70d73575fd0a2cb2612893d86",
            "file": "src/lib/label-box/label-box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-label-box",
            "styleUrls": [
                "./label-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./label-box.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Label box component for reuse accross the page. The content with &quot;end&quot; selector will be added to the end of the label box</p>\n",
            "rawdescription": "\nLabel box component for reuse accross the page. The content with \"end\" selector will be added to the end of the label box",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/** Label box component for reuse accross the page. The content with \"end\" selector will be added to the end of the label box */\n@Component({\n  selector: 'hra-label-box',\n  imports: [CommonModule],\n  templateUrl: './label-box.component.html',\n  styleUrls: ['./label-box.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LabelBoxComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  display: flex;\n  align-items: center;\n  padding: 0.75rem 2rem;\n  background: rgba(vars.$primary-lighter);\n  border-bottom: 1px solid rgba(vars.$light-dividers);\n  font-size: 1rem;\n\n  .filler {\n    flex-grow: 1;\n  }\n}\n",
                    "styleUrl": "./label-box.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-content></ng-content>\n\n<div class=\"filler\"></div>\n\n<ng-content select=\".end\"></ng-content>\n"
        },
        {
            "name": "RequiredInputComponent",
            "id": "component-RequiredInputComponent-171a397f5ffd2081612670f0ce937c29b1885e8a82ae5fa00f399d76514b4ebebd23cd1bf75d552b774854971bf41bfab87336edca362a71099bececf63ed91c",
            "file": "src/lib/required-input/required-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-required-input",
            "styleUrls": [
                "./required-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./required-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label to display for the text field.\n",
                    "description": "<p>The label to display for the text field.</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "inputChange",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAn event emitter that emits the input value when it changes.\n",
                    "description": "<p>An event emitter that emits the input value when it changes.</p>\n",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl('', {\n    updateOn: 'blur',\n    validators: Validators.required,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Form control for input to set some input validation.</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nForm control for input to set some input validation.\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "injectDestroy$()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Destroy observable used to control the lifetime of other observables.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nDestroy observable used to control the lifetime of other observables.\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>A reusable text field component that can be used to input text.\nThis input field component also had required validation check.</p>\n",
            "rawdescription": "\n\nA reusable text field component that can be used to input text.\nThis input field component also had required validation check.\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormControl, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { injectDestroy$ } from '@hra-ui/cdk/injectors';\nimport { map, takeUntil } from 'rxjs';\n\n/**\n * A reusable text field component that can be used to input text.\n * This input field component also had required validation check.\n */\n@Component({\n  selector: 'hra-required-input',\n  imports: [CommonModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule],\n  templateUrl: './required-input.component.html',\n  styleUrls: ['./required-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RequiredInputComponent {\n  /**\n   * The label to display for the text field.\n   */\n  @Input() label = '';\n\n  /**\n   * An event emitter that emits the input value when it changes.\n   */\n  @Output() readonly inputChange = new EventEmitter<string | undefined>();\n\n  /**\n   * Destroy observable used to control the lifetime of other observables.\n   */\n  readonly destroy$ = injectDestroy$();\n\n  /**\n   * Form control for input to set some input validation.\n   */\n  readonly control = new FormControl('', {\n    updateOn: 'blur',\n    validators: Validators.required,\n  });\n\n  /**\n   * Creates an instance of required input component\n   * and it connect the form control value changes to check for validation\n   * before output emmiter is triggered\n   */\n  constructor() {\n    const { control, destroy$, inputChange } = this;\n    control.valueChanges\n      .pipe(\n        takeUntil(destroy$),\n        map((value) => (control.valid ? (value as string) : undefined)),\n      )\n      .subscribe(inputChange);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .form-field {\n    width: 100%;\n  }\n\n  ::ng-deep .mat-mdc-form-field-required-marker {\n    color: #dc231e;\n  }\n}\n",
                    "styleUrl": "./required-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Creates an instance of required input component\nand it connect the form control value changes to check for validation\nbefore output emmiter is triggered</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 42,
                "rawdescription": "\n\nCreates an instance of required input component\nand it connect the form control value changes to check for validation\nbefore output emmiter is triggered\n"
            },
            "extends": [],
            "templateData": "<mat-form-field class=\"form-field\" appearance=\"outline\">\n  <mat-label> {{ label }} </mat-label>\n  <input matInput [formControl]=\"control\" />\n  <mat-error *ngIf=\"control.hasError('required')\">{{ label }} is required</mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "RequiredTextboxComponent",
            "id": "component-RequiredTextboxComponent-c85977565cc3c673a4e5739273ad9fc33662bec2420117e0da3a32c6ef954d8e35fc31676f3e3dd9c78e62771c2569e7c8034103c8ef2f4cdd9059384823bc79",
            "file": "src/lib/required-textbox/required-textbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-required-textbox",
            "styleUrls": [
                "./required-textbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./required-textbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA label for the textarea field",
                    "description": "<p>A label for the textarea field</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA placeholder for the message textarea field",
                    "description": "<p>A placeholder for the message textarea field</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "messageChange",
                    "defaultValue": "new EventEmitter<string | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits the new message when the input changes or undefined if the message is invalid",
                    "description": "<p>Emits the new message when the input changes or undefined if the message is invalid</p>\n",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "defaultValue": "new FormControl('', {\n    updateOn: 'blur',\n    validators: [Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>A control to validate if the message field is empty</p>\n",
                    "line": 33,
                    "rawdescription": "\nA control to validate if the message field is empty",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "injectDestroy$()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Observable emitting when the component is destroyed</p>\n",
                    "line": 30,
                    "rawdescription": "\nObservable emitting when the component is destroyed",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "<p>The required textbox component displays a message box for users to add a message</p>\n",
            "rawdescription": "\n\nThe required textbox component displays a message box for users to add a message\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { injectDestroy$ } from '@hra-ui/cdk/injectors';\nimport { FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { map, takeUntil } from 'rxjs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\n/**\n * The required textbox component displays a message box for users to add a message\n */\n@Component({\n  selector: 'hra-required-textbox',\n  imports: [CommonModule, MatInputModule, MatFormFieldModule, ReactiveFormsModule],\n  templateUrl: './required-textbox.component.html',\n  styleUrls: ['./required-textbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RequiredTextboxComponent {\n  /** A placeholder for the message textarea field */\n  @Input() placeholder = '';\n\n  /** A label for the textarea field */\n  @Input() label = '';\n\n  /** Emits the new message when the input changes or undefined if the message is invalid  */\n  @Output() readonly messageChange = new EventEmitter<string | undefined>();\n\n  /** Observable emitting when the component is destroyed */\n  readonly destroy$ = injectDestroy$();\n\n  /**  A control to validate if the message field is empty */\n  readonly control = new FormControl('', {\n    updateOn: 'blur',\n    validators: [Validators.required],\n  });\n\n  /** Connects the input control to component outputs */\n  constructor() {\n    const { control, destroy$ } = this;\n    control.valueChanges\n      .pipe(\n        takeUntil(destroy$),\n        map((value) => (control.valid ? value : undefined)),\n      )\n      .subscribe((value) => this.messageChange.emit(value as string | undefined));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .message-field {\n    width: 100%;\n    background: #ffffff;\n  }\n\n  ::ng-deep .mat-mdc-form-field-required-marker {\n    color: #dc231e;\n  }\n}\n",
                    "styleUrl": "./required-textbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Connects the input control to component outputs</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36,
                "rawdescription": "\nConnects the input control to component outputs"
            },
            "extends": [],
            "templateData": "<mat-form-field class=\"message-field\" appearance=\"outline\">\n  <mat-label> {{ label }} </mat-label>\n  <textarea\n    cdkTextareaAutosize\n    cdkAutosizeMinRows=\"10\"\n    cdkAutosizeMaxRows=\"20\"\n    matInput\n    [formControl]=\"control\"\n    [placeholder]=\"placeholder\"\n  ></textarea>\n  <mat-error *ngIf=\"control.hasError('required')\"> {{ label }} is required </mat-error>\n</mat-form-field>\n"
        },
        {
            "name": "SizeLegendComponent",
            "id": "component-SizeLegendComponent-ea030ff0bc583ed2f7a89edf789e1ae5bcf8d0b5975f75fbc05954ea798fcaf10dccf90397403ef8e607a7a1f83e50d0f3f69b083143b2940ed41cfe3e5bb7e6",
            "file": "src/lib/size-legend/size-legend.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-size-legend",
            "styleUrls": [
                "./size-legend.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./size-legend.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "sizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTaking input for the radius of the circle and the label to be displayed.",
                    "description": "<p>Taking input for the radius of the circle and the label to be displayed.</p>\n",
                    "line": 22,
                    "type": "SizeLegend[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Size legend component for the biomarkers table.</p>\n",
            "rawdescription": "\nSize legend component for the biomarkers table.",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/** Defining the input data types for the radius and label to be displayed. */\nexport interface SizeLegend {\n  /** Label under circle */\n  label: string;\n  /** Radius for cirlce */\n  radius: number;\n}\n\n/** Size legend component for the biomarkers table. */\n@Component({\n  selector: 'hra-size-legend',\n  imports: [CommonModule],\n  templateUrl: './size-legend.component.html',\n  styleUrls: ['./size-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SizeLegendComponent {\n  /** Taking input for the radius of the circle and the label to be displayed. */\n  @Input() sizes: SizeLegend[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: row;\n  column-gap: 2rem;\n\n  .item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    line-height: 0.5rem;\n\n    .circle {\n      height: var(--size);\n      width: var(--size);\n      border-radius: 50%;\n      border: 0.125rem solid #75838f;\n    }\n\n    .label {\n      margin-top: 0.5rem;\n    }\n\n    .filler {\n      flex-grow: 1;\n    }\n  }\n}\n",
                    "styleUrl": "./size-legend.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div *ngFor=\"let text of sizes\" class=\"item\">\n  <div class=\"filler\"></div>\n  <div class=\"circle\" style=\"--size: {{ text.radius }}rem\"></div>\n  <div class=\"filler\"></div>\n  <div class=\"label\">{{ text.label }}</div>\n</div>\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-f6a42ad599d181ecafa9f054955a21940de6d02d03c5339aa9b1a7f46ea9765eb8a505646b61096cb07f9ee7477dd7d31ed4b0b63a657948997484b40ce553cc",
            "file": "src/lib/tooltip/tooltip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-ui-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText to display\n",
                    "description": "<p>Text to display</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>Tooltips for illustrations</p>\n",
            "rawdescription": "\n\nTooltips for illustrations\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Tooltips for illustrations\n */\n@Component({\n  selector: 'hra-ui-tooltip',\n  imports: [CommonModule],\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TooltipComponent {\n  /**\n   * Text to display\n   */\n  @Input() text = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  .tooltip {\n    display: flex;\n    flex-direction: column;\n    background: white;\n    box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n    border-radius: 0.5rem;\n    padding: 1rem;\n    font-family: 'Metropolis';\n    font-size: 0.875rem;\n    line-height: 1.3125rem;\n    color: #243142;\n    font-weight: 500;\n  }\n}\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"tooltip\">{{ text }}</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": []
}